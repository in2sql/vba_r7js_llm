Attribute VB_Name = "Budget"
Option Base 1
Public Const SUMMARY_SHEET_NAME = "Summary"

'
' Budget.bas
'
' Routines to build and update a transaction list and summary pivots from the Transactions.csv file exported
' from Mint.com
'
' Required references:
'  - Visual Basic for Applications
'  - Microsoft Excel 16.0 Object Library
'  - OLE Automation
'  - Microsoft Office 16.0 Object Library
'  - Microsoft Forms 2.0 Object Library
'
' Change list:
'   4/9/2023:
'      - Fixed error with duplicate values when building the filter collection (9602, and 10)
'      - Deleted TADS functionality

'
Sub showViewForm()
Attribute showViewForm.VB_ProcData.VB_Invoke_Func = "r\n14"
' Displays the main form with radio buttons for Income vs Expenses etc.
' Shortcut: Ctrl-r
'
    
    ' Default to showing expenses (set the radio button)
    frmButtons.rbExpenses.Value = True
    frmButtons.Show
End Sub


'
Public Sub refreshTransactionData()
'
' Reads MINT transactions via a CSV in the Downloads folder, and refreshes a set of
' PowerQuery queries, and PivotTables for budget info
'
' 6/19/2019
'
    Dim downloadPath As String
    Dim fullPath As String
    Dim fullDestPath As String
    Dim dataFiles As New Collection
    Dim index As Integer
    Dim sortedDataFiles()
    
    ' Determine the Downloads directory for the current user
    downloadPath = Environ("USERPROFILE")
    fullPath = downloadPath + "\Downloads\"
    
    ' Retrieve the list of transactions CSV files downloaded after the initial transactions.csv file
    ' i.e. those with (#) after their name
    filename = Dir(fullPath + "transactions (*.csv")
    While (filename <> "")
        dataFiles.Add filename
        filename = Dir()
    Wend
    
    Set fso = VBA.CreateObject("Scripting.FileSystemObject")
    
    ' Set the path for the CSV file to be loaded from PowerQuery
    fullDestPath = fullPath + "transactions.csv"
    Range("tblDataPath[Source]").Cells(1, 1).FormulaR1C1 = fullDestPath
    
    ' Use the latest CSV file with Mint transactions
    ' Copy the latest to the base filename if more than one exists, then
    ' delete the others
    If (dataFiles.Count > 0) Then
        sortedDataFiles = CollectionToArray(dataFiles)
        BubbleSort sortedDataFiles
        filename = fullPath + sortedDataFiles(UBound(sortedDataFiles))
        fso.CopyFile filename, fullDestPath, True
        
        If (fso.FileExists(fullDestPath)) Then
            For index = LBound(sortedDataFiles) To UBound(sortedDataFiles)
                filename = fullPath + sortedDataFiles(index)
                If (fso.FileExists(filename)) Then
                    fso.DeleteFile (filename)
                End If
            Next
        End If
    End If
    
    ' Refresh the PowerQueries followed by the pivot tables
    If (fso.FileExists(fullDestPath)) Then
        ActiveWorkbook.RefreshAll
        ActiveWorkbook.RefreshAll
    End If

End Sub


'
Sub deleteTempSheets()
'
' Removes the temporary sheets generated by double clicking
' pivot table items (and anything else that starts with 'Sheet'
'
    Dim sh As Worksheet
    Dim tempSheets As New Collection
    Dim name As Variant
    Dim alertStatus As Boolean
    
    For Each sh In Sheets
        If (Left(LCase(sh.name), 5) = "sheet") Then
            tempSheets.Add sh.name
        End If
    Next sh

    alertStatus = Application.DisplayAlerts
    Application.DisplayAlerts = False
    
    For Each name In tempSheets
        Sheets(name).Delete
    Next name
    Application.DisplayAlerts = alertStatus
End Sub


'
Function generateSummaryPivot() As Worksheet
'
' Generates the summary pivot view of the transactions data by
' category and month, as well as several fields to filter.
'
' This code only runs if the existing Summary tab has been
' deleted or renamed.
'
    Dim rngSrcData As Range                     '
    Dim strPivotSheetName As String
    Dim shtPivotSheet As Worksheet
    Dim rngPivotDest As Range
    Dim strPivotName As String
    Dim colColFields As New Collection
    Dim colRowFields As New Collection
    Dim colFilterFields As New Collection
    Dim colSumFields As New Collection
    Dim strTransactions As String
    Dim pvt As PivotTable
    
    ' Define the worksheet and pivot names from a global constant
    strPivotSheetName = SUMMARY_SHEET_NAME
    strTransactions = "tblTransactions"
    strPivotName = "pvt" + strPivotSheetName
    
    ' Create a new Summary worksheet if one doesn't already exist
    ' and identify the source data and target location for the pivot
    Set shtPivotSheet = GetDataSheet(strPivotSheetName, True)
    Set rngSrcData = Range(strTransactions + "[#all]")
    Set rngPivotDest = shtPivotSheet.Cells(1, 1)
    
    'Identify the fields to include in the Row, Column, Summary
    ' and Filter areas of the pivot table
    colRowFields.Add "Parent"
    colRowFields.Add "Category"
    
    colColFields.Add "Date"
    
    colSumFields.Add "Sum of Amount"
    
    colFilterFields.Add "Tax Related"
    colFilterFields.Add "SubCategory.3"
    colFilterFields.Add "Parent.1"
    colFilterFields.Add "Category.1"
    colFilterFields.Add "Frequency"
    colFilterFields.Add "Type"
    
    ' Build the pivot
    Set pvt = MakePivot(rngSrcData, rngPivotDest, strPivotName, colColFields, colRowFields, colFilterFields, colSumFields)
    
    ' Group transaction dates by year, quarter, month and day
    ' Adds Years (Date), Quarters (Date), and Months (Date)
    '  to the PivotFields
    pvt.PivotFields("Date").AutoGroup
    pvt.PivotFields("Date").Orientation = xlHidden
    
    ' Rename autogenerated field names
    pvt.PivotFields("Years (Date)").Caption = "Years"
    pvt.PivotFields("Quarters (Date)").Caption = "Quarters"
    pvt.PivotFields("Months (Date)").Caption = "Months"
    
    pvt.PivotFields("Quarters").Orientation = xlHidden
    
    ' Add the Years field to the top of the Filter list
    pvt.PivotFields("Years").Orientation = xlPageField
    pvt.PivotFields("Years").Position = colFilterFields.Count + 1
        
    ' Format the data area as dollars, with negative values in parenthesis
    pvt.DataBodyRange.NumberFormat = _
        "_([$$-en-US]* #,##0.00_);_([$$-en-US]* (#,##0.00);_([$$-en-US]* ""-""??_);_(@_)"
        
    Set generateSummaryPivot = pvt.Parent
End Function



Sub setSummaryFilters(Optional strParameters = "")
' Sets filters on the Summary pivot based on the status
' of controls on the main form (from strParameters)
'
' Expects the pivot table and worksheet to have the same root
'
    Dim wksSummary As Worksheet
    Dim strPivotName As String
    Dim strYear As String
    Dim toggle As dsFilterSettings
    Dim colItems As New Collection
    
    strPivotName = "pvt" + SUMMARY_SHEET_NAME
        
    Set wksSummary = GetDataSheet(SUMMARY_SHEET_NAME, False)
        
    If (wksSummary Is Nothing) Then
        Set wksSummary = generateSummaryPivot
    End If
    
    wksSummary.Activate
    
    clearAllFilters
    
    ' Set the year filter to the current year
    ClearCollection colItems
    strYear = CStr(Year(Now()))
    ' strYear = "2022"
    colItems.Add strYear
    SetPivotFilterValues strPivotName, "Years", Nothing, colItems, dsOnExclusive

    ' Filter the "type" field for income or expense
    ClearCollection colItems
    
    If (InStr(strParameters, "I")) Then
        colItems.Add "Income"
    End If
    
    If (InStr(strParameters, "E")) Then
        colItems.Add "Expense"
    End If
        
    SetPivotFilterValues strPivotName, "Type", Nothing, colItems, dsOnExclusive

    ' Filter ignorable values out of the Category field
    ClearCollection colItems
    colItems.Add "Reimbursable Expense"
    SetPivotFilterValues strPivotName, "Category.1", Nothing, colItems, dsOff
        
    ' Add or remove projected (budget) items
    ClearCollection colItems
    colItems.Add "projected"
    If (InStr(strParameters, "P")) Then
        toggle = dsOn
    Else
        toggle = dsOff
    End If
    
    SetPivotFilterValues strPivotName, "Subcategory.3", Nothing, colItems, toggle

    ' Add or remove annual items
    ClearCollection colItems
    colItems.Add "1"
    If (InStr(strParameters, "A")) Then
        toggle = dsOn
    Else
        toggle = dsOff
    End If
    
    SetPivotFilterValues strPivotName, "Frequency", Nothing, colItems, toggle

    ' Add or remove vacations, projects, and special occasions items
    ClearCollection colItems
    colItems.Add "Misc Expenses"
    If (InStr(strParameters, "V")) Then
        toggle = dsOn
    Else
        toggle = dsOff
    End If
    
    SetPivotFilterValues strPivotName, "Parent.1", Nothing, colItems, toggle
    
    ' Add or remove Tax Related items
    If (InStr(strParameters, "T")) Then
        ClearCollection colItems
        colItems.Add "yes"
        toggle = dsOnExclusive
        
        SetPivotFilterValues strPivotName, "Tax Related", Nothing, colItems, toggle
    End If
    
    ' Freeze the top rows of the window to always display the filters and headings
    ActiveWindow.ScrollRow = 1
    ActiveWindow.SplitRow = 10
    ActiveWindow.FreezePanes = True
End Sub


Sub filterMonthlyExpenses()
    Dim strPivotName As String
    Dim colExclude As New Collection
    Dim pvt As PivotTable
    
    strPivotName = "pvtSummary"
    
    clearAllFilters
    
    Set pvt = ActiveSheet.PivotTables(strPivotName)
    colExclude.Add "Expense"
    SetPivotFilterValues strPivotName, "Type", Nothing, colExclude, dsOnExclusive
    
    ClearCollection colExclude
    colExclude.Add "Transfer"
    SetPivotFilterValues strPivotName, "Parent.1", Nothing, colExclude, dsOff
    
    ClearCollection colExclude
    colExclude.Add "Charity"
    SetPivotFilterValues strPivotName, "Category", Nothing, colExclude, dsOff
        
    frmButtons.chkIncludeAnnual.Enabled = True
    
    filterAnnualExpenses
    filterMiscExpenses
End Sub


Sub filterAllAnnualExpenses()
    Dim strPivotName As String
    Dim colExclude As New Collection
    Dim pvt As PivotTable
    
    strPivotName = "pvtSummary"
    Set pvt = ActiveSheet.PivotTables(strPivotName)
    
    clearAllFilters
    
    colExclude.Add "Expense"
    SetPivotFilterValues strPivotName, "Type", Nothing, colExclude, dsOnExclusive
    
    ClearCollection colExclude
    colExclude.Add "Transfer"
    SetPivotFilterValues strPivotName, "Parent.1", Nothing, colExclude, dsOff
    
    ClearCollection colExclude
    colExclude.Add "Annual"
    SetPivotFilterValues strPivotName, "Frequency", Nothing, colExclude, dsOnExclusive
    
    frmButtons.chkIncludeAnnual.Value = True
    frmButtons.chkIncludeAnnual.Enabled = False
'    filterAnnualExpenses
    filterMiscExpenses
End Sub


'Sub filterIncome()
'    Dim strPivotName As String
'    Dim colItems As New Collection
'    Dim pvt As PivotTable
'
'    strPivotName = "pvtSummary"
'    Set pvt = ActiveSheet.PivotTables(strPivotName)
'
'    clearAllFilters
'
'    colItems.Add "Income"
'    SetPivotFilterValues strPivotName, "Type", Nothing, colItems, dsOnExclusive
'
'    ClearCollection colItems
'    colItems.Add "Transfer"
'    SetPivotFilterValues strPivotName, "Parent.1", Nothing, colItems, dsOff
'
'End Sub


Sub filterExpenses()
    Dim strPivotName As String
    Dim colItems As New Collection
    Dim pvt As PivotTable
    
    strPivotName = "pvtSummary"
    Set pvt = ActiveSheet.PivotTables(strPivotName)
    
    clearAllFilters
    
    colItems.Add "Expense"
    SetPivotFilterValues strPivotName, "Type", Nothing, colItems, dsOnExclusive
    
    ClearCollection colItems
    colItems.Add "Transfer"
    SetPivotFilterValues strPivotName, "Parent.1", Nothing, colItems, dsOff
End Sub


Sub filterIncomeAndExpenses()
    Dim strPivotName As String
    Dim colItems As New Collection
    Dim pvt As PivotTable
    
    strPivotName = "pvtSummary"
    Set pvt = ActiveSheet.PivotTables(strPivotName)
    
    clearAllFilters
    
    colItems.Add "Income"
    colItems.Add "Expense"
    SetPivotFilterValues strPivotName, "Type", Nothing, colItems, dsOnExclusive

    ClearCollection colItems
    colItems.Add "Transfer"
    SetPivotFilterValues strPivotName, "Parent.1", Nothing, colItems, dsOff
End Sub


Sub filterAnnualExpenses()
    Dim colValues As New Collection
    Dim toggle As dsFilterSettings
    Dim strPivotName As String
    
    strPivotName = "pvtSummary"
    
    colValues.Add "Annual"
    If Not (frmButtons.chkIncludeAnnual.Value = True) Then
        toggle = dsOff
    Else
        toggle = dsOn
    End If
    
    SetPivotFilterValues strPivotName, "Frequency", Nothing, colValues, toggle
End Sub


Sub filterMiscExpenses()
    Dim colValues As New Collection
    Dim toggle As dsFilterSettings
    Dim strPivotName As String
    
    strPivotName = "pvtSummary"
    
    colValues.Add "Misc Expenses"
    If Not (frmButtons.chkIncludeMisc.Value = True) Then
        toggle = dsOff
    Else
        toggle = dsOn
    End If
    SetPivotFilterValues strPivotName, "Parent.1", Nothing, colValues, toggle
End Sub


Sub clearAllFilters()
' Clears the filters on all pivot tables on the current sheet
' TODO: Pass in a worksheet as an alternative to the current
'
    
    Dim index As Integer
    Dim pvt As PivotTable
    
    For index = 1 To ActiveSheet.PivotTables.Count
        Set pvt = ActiveSheet.PivotTables.Item(index)
        pvt.clearAllFilters
    Next
End Sub


Sub setFilters()
    Dim strPivotName As String
    Dim colDisabled As New Collection
    
    strPivotName = "TestPivot"
    
    colDisabled.Add "Charity"
    colDisabled.Add "Credit Card Payment"
    colDisabled.Add "Credit Card Payment"
    
    SetPivotFilterValues strPivotName, "Category.1", Nothing, colEnabled, dsOn
End Sub


Sub tableSelect()
    Dim rng As Range
    
    Set rng = Range("tblTransactions[#all]")
    Debug.Print (rng.Address)
End Sub
