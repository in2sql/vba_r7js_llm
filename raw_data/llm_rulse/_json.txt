```json
{
  "description": "This example adds a comment to the document.",
  "code": [
    {
      "OnlyOffice JS": "Api.AddComment(\"Comment 1\", \"Bob\");",
      "Excel VBA": "Api.AddComment \"Comment 1\", \"Bob\""
    },
    {
      "OnlyOffice JS": "Api.AddComment(\"Comment 2\");",
      "Excel VBA": "Api.AddComment \"Comment 2\""
    },
    {
      "OnlyOffice JS": "var arrComments = Api.GetComments();",
      "Excel VBA": "Dim arrComments As Object\nSet arrComments = Api.GetComments()"
    },
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = Api.GetActiveSheet()"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"Commet Text: \", arrComments[0].GetText());",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"Comment Text: \" & arrComments(0).GetText()"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(\"Commet Author: \", arrComments[0].GetAuthorName());",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Comment Author: \" & arrComments(0).GetAuthorName()"
    }
  ]
}
``````json
{
  "Description": "This example calculates custom function result.",
  "RAG_Table": [
    {
      "OnlyOffice_JS": "Api.AddCustomFunctionLibrary(\"LibraryName\", function(){\n    /**\n     * Function that returns the argument\n     * @customfunction\n     * @param {any} first First argument.\n     * @returns {any} second argument.\n    */\n    Api.AddCustomFunction(function ADD(first, second) {\n        return first + second;\n    });\n});",
      "Excel_VBA": "' No direct equivalent. Custom functions are defined directly in VBA modules."
    },
    {
      "OnlyOffice_JS": "Api.AddCustomFunction(function ADD(first, second) {\n    return first + second;\n});",
      "Excel_VBA": "Function ADD(first As Variant, second As Variant) As Variant\n    ADD = first + second\nEnd Function"
    },
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('A1').SetValue('=ADD(1,2)');",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = \"=ADD(1,2)\""
    }
  ]
}
``````json
{
  "description": "This example adds a new name to a range of cells.",
  "table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(\"2\");",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"2\""
    },
    {
      "OnlyOffice JS": "Api.AddDefName(\"numbers\", \"Sheet1!$A$1:$B$1\");",
      "Excel VBA": "ThisWorkbook.Names.Add Name:=\"numbers\", RefersTo:= \"=Sheet1!$A$1:$B$1\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"We defined a name 'numbers' for a range of cells A1:B1.\");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"We defined a name 'numbers' for a range of cells A1:B1.\""
    }
  ]
}
``````json
{
  "RAG_Table": [
    {
      "Description": "This example creates a new worksheet.",
      "OnlyOffice_JS": "var oSheet = Api.AddSheet(\"New sheet\");",
      "VBA": "Dim oSheet As Worksheet\nSet oSheet = Worksheets.Add\noSheet.Name = \"New sheet\""
    }
  ]
}
``````json
[
  {
    "description": "Get the active worksheet",
    "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
    "ExcelVBA": "Set oWorksheet = ActiveSheet"
  },
  {
    "description": "Get the range B1:D1 from the active worksheet",
    "OnlyOfficeJS": "var oRange = oWorksheet.GetRange(\"B1:D1\");",
    "ExcelVBA": "Set oRange = oWorksheet.Range(\"B1:D1\")"
  },
  {
    "description": "Set the value of the range to \"1\"",
    "OnlyOfficeJS": "oRange.SetValue(\"1\");",
    "ExcelVBA": "oRange.Value = \"1\""
  },
  {
    "description": "Select the range",
    "OnlyOfficeJS": "oRange.Select();",
    "ExcelVBA": "oRange.Select"
  },
  {
    "description": "Get the areas of the selected range",
    "OnlyOfficeJS": "var oAreas = oRange.GetAreas();",
    "ExcelVBA": "Set oAreas = oRange.Areas"
  },
  {
    "description": "Get the count of areas",
    "OnlyOfficeJS": "var nCount = oAreas.GetCount();",
    "ExcelVBA": "nCount = oAreas.Count"
  },
  {
    "description": "Get the range A5",
    "OnlyOfficeJS": "oRange = oWorksheet.GetRange('A5');",
    "ExcelVBA": "Set oRange = oWorksheet.Range(\"A5\")"
  },
  {
    "description": "Set the value of A5 to a descriptive text",
    "OnlyOfficeJS": "oRange.SetValue(\"The number of ranges in the areas: \");",
    "ExcelVBA": "oRange.Value = \"The number of ranges in the areas: \""
  },
  {
    "description": "Auto-fit the range A5",
    "OnlyOfficeJS": "oRange.AutoFit(false, true);",
    "ExcelVBA": "oRange.Columns.AutoFit"
  },
  {
    "description": "Set the value of B5 to the count of areas",
    "OnlyOfficeJS": "oWorksheet.GetRange('B5').SetValue(nCount);",
    "ExcelVBA": "oWorksheet.Range(\"B5\").Value = nCount"
  }
]
``````json
{
  "description": "This example shows how to get a single object from a collection by its ID.",
  "codeMappings": [
    {
      "Action": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "Action": "Get range B1:D1",
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"B1:D1\");",
      "VBA": "Set oRange = oWorksheet.Range(\"B1:D1\")"
    },
    {
      "Action": "Set value to '1'",
      "OnlyOffice_JS": "oRange.SetValue(\"1\");",
      "VBA": "oRange.Value = \"1\""
    },
    {
      "Action": "Select the range",
      "OnlyOffice_JS": "oRange.Select();",
      "VBA": "oRange.Select"
    },
    {
      "Action": "Get areas from the range",
      "OnlyOffice_JS": "var oAreas = oRange.GetAreas();",
      "VBA": "Set oAreas = oRange.Areas"
    },
    {
      "Action": "Get the first item from areas",
      "OnlyOffice_JS": "var oItem = oAreas.GetItem(1);",
      "VBA": "Set oItem = oAreas(1)"
    },
    {
      "Action": "Get range A5",
      "OnlyOffice_JS": "oRange = oWorksheet.GetRange('A5');",
      "VBA": "Set oRange = oWorksheet.Range(\"A5\")"
    },
    {
      "Action": "Set value to 'The first item from the areas: '",
      "OnlyOffice_JS": "oRange.SetValue(\"The first item from the areas: \");",
      "VBA": "oRange.Value = \"The first item from the areas: \""
    },
    {
      "Action": "Auto fit the range",
      "OnlyOffice_JS": "oRange.AutoFit(false, true);",
      "VBA": "oRange.Columns.AutoFit"
    },
    {
      "Action": "Paste the item into B5",
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').Paste(oItem);",
      "VBA": "oItem.Copy Destination:=oWorksheet.Range(\"B5\")"
    }
  ]
}
``````json
{
  "description": "This script retrieves the active worksheet, manipulates specific ranges by setting values and selecting them, obtains the parent object of a range, retrieves its class type, and writes this information into designated cells with appropriate formatting.",
  "methods": [
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOfficeJS": "var oRange = oWorksheet.GetRange(\"B1:D1\");",
      "VBA": "Set oRange = oWorksheet.Range(\"B1:D1\")"
    },
    {
      "OnlyOfficeJS": "oRange.SetValue(\"1\");",
      "VBA": "oRange.Value = \"1\""
    },
    {
      "OnlyOfficeJS": "oRange.Select();",
      "VBA": "oRange.Select"
    },
    {
      "OnlyOfficeJS": "var oAreas = oRange.GetAreas();",
      "VBA": "Set oAreas = oRange.Areas"
    },
    {
      "OnlyOfficeJS": "var oParent = oAreas.GetParent();",
      "VBA": "Set oParent = oAreas.Parent"
    },
    {
      "OnlyOfficeJS": "var sType = oParent.GetClassType();",
      "VBA": "sType = TypeName(oParent)"
    },
    {
      "OnlyOfficeJS": "oRange = oWorksheet.GetRange('A4');",
      "VBA": "Set oRange = oWorksheet.Range(\"A4\")"
    },
    {
      "OnlyOfficeJS": "oRange.SetValue(\"The areas parent: \");",
      "VBA": "oRange.Value = \"The areas parent: \""
    },
    {
      "OnlyOfficeJS": "oRange.AutoFit(false, true);",
      "VBA": "oRange.EntireColumn.AutoFit"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('B4').Paste(oParent);",
      "VBA": "oParent.Copy Destination:=oWorksheet.Range(\"B4\")"
    },
    {
      "OnlyOfficeJS": "oRange = oWorksheet.GetRange('A5');",
      "VBA": "Set oRange = oWorksheet.Range(\"A5\")"
    },
    {
      "OnlyOfficeJS": "oRange.SetValue(\"The type of the areas parent: \");",
      "VBA": "oRange.Value = \"The type of the areas parent: \""
    },
    {
      "OnlyOfficeJS": "oRange.AutoFit(false, true);",
      "VBA": "oRange.EntireColumn.AutoFit"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('B5').SetValue(sType);",
      "VBA": "oWorksheet.Range(\"B5\").Value = sType"
    }
  ]
}
``````json
{
  "description": "This code retrieves the active worksheet, manipulates ranges by setting values, selecting ranges, obtaining the count of areas, autofitting a range, and displaying the count in specific cells.",
  "methods": [
    {
      "OnlyOffice_JS": "Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1:D1\");",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"B1:D1\")"
    },
    {
      "OnlyOffice_JS": "oRange.SetValue(\"1\");",
      "Excel_VBA": "oRange.Value = \"1\""
    },
    {
      "OnlyOffice_JS": "oRange.Select();",
      "Excel_VBA": "oRange.Select"
    },
    {
      "OnlyOffice_JS": "oRange.GetAreas();",
      "Excel_VBA": "Set oAreas = oRange.Areas"
    },
    {
      "OnlyOffice_JS": "oAreas.GetCount();",
      "Excel_VBA": "nCount = oAreas.Count"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('A5').SetValue(\"The number of ranges in the areas: \");",
      "Excel_VBA": "oWorksheet.Range(\"A5\").Value = \"The number of ranges in the areas: \""
    },
    {
      "OnlyOffice_JS": "oRange.AutoFit(false, true);",
      "Excel_VBA": "oRange.Columns.AutoFit"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue(nCount);",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = nCount"
    }
  ]
}
``````json
{
  "description": "This code demonstrates how to manipulate worksheet ranges, set values, select ranges, retrieve areas, and paste values in an Excel worksheet using OnlyOffice API and the corresponding Excel VBA equivalents.",
  "RAG_table": [
    {
      "OnlyOffice_JS": "Api.GetActiveSheet()",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1:D1\")",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"B1:D1\")"
    },
    {
      "OnlyOffice_JS": "oRange.SetValue(\"1\")",
      "Excel_VBA": "oRange.Value = \"1\""
    },
    {
      "OnlyOffice_JS": "oRange.Select()",
      "Excel_VBA": "oRange.Select"
    },
    {
      "OnlyOffice_JS": "oRange.GetAreas()",
      "Excel_VBA": "Set oAreas = oRange.Areas"
    },
    {
      "OnlyOffice_JS": "oAreas.GetItem(1)",
      "Excel_VBA": "Set oItem = oAreas.Item(1)"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('A5')",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"A5\")"
    },
    {
      "OnlyOffice_JS": "oRange.SetValue(\"The first item from the areas: \")",
      "Excel_VBA": "oRange.Value = \"The first item from the areas: \""
    },
    {
      "OnlyOffice_JS": "oRange.AutoFit(false, true)",
      "Excel_VBA": "oRange.Columns.AutoFit"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').Paste(oItem)",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Paste Destination:=oItem"
    }
  ]
}
``````json
{
  "description": "Equivalent Excel VBA code for OnlyOffice JS methods.",
  "RAG_table": [
    {
      "OnlyOffice_JS": "Api.GetActiveSheet()",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1:D1\")",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"B1:D1\")"
    },
    {
      "OnlyOffice_JS": "oRange.SetValue(\"1\")",
      "Excel_VBA": "oRange.Value = \"1\""
    },
    {
      "OnlyOffice_JS": "oRange.Select()",
      "Excel_VBA": "oRange.Select"
    },
    {
      "OnlyOffice_JS": "oRange.GetAreas()",
      "Excel_VBA": "Set oAreas = oRange.Areas"
    },
    {
      "OnlyOffice_JS": "oAreas.GetParent()",
      "Excel_VBA": "Set oParent = oAreas.Parent"
    },
    {
      "OnlyOffice_JS": "oParent.GetClassType()",
      "Excel_VBA": "sType = TypeName(oParent)"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('A4')",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"A4\")"
    },
    {
      "OnlyOffice_JS": "oRange.SetValue(\"The areas parent: \")",
      "Excel_VBA": "oRange.Value = \"The areas parent: \""
    },
    {
      "OnlyOffice_JS": "oRange.AutoFit(false, true)",
      "Excel_VBA": "oRange.Columns.AutoFit"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').Paste(oParent)",
      "Excel_VBA": "oParent.Copy Destination:=oWorksheet.Range(\"B4\")"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('A5')",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"A5\")"
    },
    {
      "OnlyOffice_JS": "oRange.SetValue(\"The type of the areas parent: \")",
      "Excel_VBA": "oRange.Value = \"The type of the areas parent: \""
    },
    {
      "OnlyOffice_JS": "oRange.AutoFit(false, true)",
      "Excel_VBA": "oRange.Columns.AutoFit"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue(sType)",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = sType"
    }
  ]
}
``````json
[
  {
    "description": "Get the active worksheet",
    "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
  },
  {
    "description": "Get the range A1",
    "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
    "Excel_VBA": "Dim oRange As Range\nSet oRange = oWorksheet.Range(\"A1\")"
  },
  {
    "description": "Set the value of range A1 to 1",
    "OnlyOffice_JS": "oRange.SetValue(\"1\");",
    "Excel_VBA": "oRange.Value = 1"
  },
  {
    "description": "Attach to onWorksheetChange event",
    "OnlyOffice_JS": "Api.attachEvent(\"onWorksheetChange\", function(oRange){\n\tconsole.log(\"onWorksheetChange\");\n\tconsole.log(oRange.GetAddress());\n});",
    "Excel_VBA": "Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)\n    Debug.Print \"onWorksheetChange\"\n    Debug.Print Target.Address\nEnd Sub"
  }
]
``````json
{
  "table": {
    "columns": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Description": "Get the active worksheet.",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
      },
      {
        "Description": "Create a solid fill with a specific RGB color.",
        "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
        "Excel VBA": "Set oFill = CreateSolidFill(RGB(255, 111, 61))"
      },
      {
        "Description": "Create a stroke with no fill.",
        "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
        "Excel VBA": "With oShape.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
      },
      {
        "Description": "Add a shape to the worksheet with specified dimensions and styles.",
        "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
        "Excel VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowChartOnlineStorage, 120 * 36000, 35 * 36000, 2 * 36000, 3 * 36000)"
      },
      {
        "Description": "Get the content of the shape.",
        "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
        "Excel VBA": "Set oDocContent = oShape.TextFrame.TextRange"
      },
      {
        "Description": "Get the first paragraph from the content.",
        "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
        "Excel VBA": "Set oParagraph = oDocContent.Paragraphs(1)"
      },
      {
        "Description": "Create a numbering bullet of type 'ArabicParenR'.",
        "OnlyOffice JS": "var oBullet = Api.CreateNumbering(\"ArabicParenR\", 1);",
        "Excel VBA": "With oParagraph.Range.ListFormat\n    .ApplyNumberDefault\n    .ListTemplate.ListLevels(1).NumberFormat = \"(%1)\"\nEnd With"
      },
      {
        "Description": "Set the paragraph's bullet to the created numbering.",
        "OnlyOffice JS": "oParagraph.SetBullet(oBullet);",
        "Excel VBA": "oParagraph.Range.ListFormat.ApplyNumbering"
      },
      {
        "Description": "Add text to the paragraph.",
        "OnlyOffice JS": "oParagraph.AddText(\" This is an example of the bulleted paragraph.\");",
        "Excel VBA": "oParagraph.Range.Text = \"This is an example of the bulleted paragraph.\""
      },
      {
        "Description": "Create another paragraph, set bullet, and add text.",
        "OnlyOffice JS": "oParagraph = Api.CreateParagraph();\noParagraph.SetBullet(oBullet);\noParagraph.AddText(\" This is an example of the bulleted paragraph.\");\noDocContent.Push(oParagraph);",
        "Excel VBA": "With oDocContent\n    .InsertParagraphAfter\n    .Paragraphs(2).Range.ListFormat.ApplyNumberDefault\n    .Paragraphs(2).Range.Text = \"This is an example of the bulleted paragraph.\"\nEnd With"
      },
      {
        "Description": "Get the class type of the bullet.",
        "OnlyOffice JS": "var sClassType = oBullet.GetClassType();",
        "Excel VBA": "sClassType = TypeName(oBullet)"
      },
      {
        "Description": "Create another paragraph, set justification to left, add text indicating the class type, and push to content.",
        "OnlyOffice JS": "oParagraph = Api.CreateParagraph();\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class Type = \" + sClassType);\noDocContent.Push(oParagraph);",
        "Excel VBA": "With oDocContent\n    .InsertParagraphAfter\n    .Paragraphs(3).Range.ParagraphFormat.Alignment = xlLeft\n    .Paragraphs(3).Range.Text = \"Class Type = \" & sClassType\nEnd With"
      }
    ]
  }
}
``````json
{
  "table": {
    "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
        "ExcelVBA": "Set oWorksheet = Api.GetActiveSheet()"
      },
      {
        "Description": "Create a solid fill with RGB color (255, 111, 61)",
        "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
        "ExcelVBA": "Set oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61))"
      },
      {
        "Description": "Create a stroke with width 0 and no fill",
        "OnlyOfficeJS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
        "ExcelVBA": "Set oStroke = Api.CreateStroke(0, Api.CreateNoFill())"
      },
      {
        "Description": "Add a shape to the worksheet with specified parameters",
        "OnlyOfficeJS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
        "ExcelVBA": "Set oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
      },
      {
        "Description": "Get the content of the shape",
        "OnlyOfficeJS": "var oDocContent = oShape.GetContent();",
        "ExcelVBA": "Set oDocContent = oShape.GetContent()"
      },
      {
        "Description": "Get the first paragraph element from the content",
        "OnlyOfficeJS": "var oParagraph = oDocContent.GetElement(0);",
        "ExcelVBA": "Set oParagraph = oDocContent.GetElement(0)"
      },
      {
        "Description": "Create a numbering style with Arabic parentheses starting at 1",
        "OnlyOfficeJS": "var oBullet = Api.CreateNumbering(\"ArabicParenR\", 1);",
        "ExcelVBA": "Set oBullet = Api.CreateNumbering(\"ArabicParenR\", 1)"
      },
      {
        "Description": "Set bullet style for the paragraph",
        "OnlyOfficeJS": "oParagraph.SetBullet(oBullet);",
        "ExcelVBA": "oParagraph.SetBullet oBullet"
      },
      {
        "Description": "Add text to the paragraph",
        "OnlyOfficeJS": "oParagraph.AddText(\" This is an example of the bulleted paragraph.\");",
        "ExcelVBA": "oParagraph.AddText \" This is an example of the bulleted paragraph.\""
      },
      {
        "Description": "Create a new paragraph and set bullet style",
        "OnlyOfficeJS": "oParagraph = Api.CreateParagraph();\n oParagraph.SetBullet(oBullet);",
        "ExcelVBA": "Set oParagraph = Api.CreateParagraph()\n oParagraph.SetBullet oBullet"
      },
      {
        "Description": "Add text to the new paragraph",
        "OnlyOfficeJS": "oParagraph.AddText(\" This is an example of the bulleted paragraph.\");",
        "ExcelVBA": "oParagraph.AddText \" This is an example of the bulleted paragraph.\""
      },
      {
        "Description": "Push the new paragraph to the document content",
        "OnlyOfficeJS": "oDocContent.Push(oParagraph);",
        "ExcelVBA": "oDocContent.Push oParagraph"
      },
      {
        "Description": "Get the class type of the bullet",
        "OnlyOfficeJS": "var sClassType = oBullet.GetClassType();",
        "ExcelVBA": "sClassType = oBullet.GetClassType()"
      },
      {
        "Description": "Create another paragraph with left justification and add text with class type",
        "OnlyOfficeJS": "oParagraph = Api.CreateParagraph();\n oParagraph.SetJc(\"left\");\n oParagraph.AddText(\"Class Type = \" + sClassType);",
        "ExcelVBA": "Set oParagraph = Api.CreateParagraph()\n oParagraph.SetJc \"left\"\n oParagraph.AddText \"Class Type = \" & sClassType"
      },
      {
        "Description": "Push the final paragraph to the document content",
        "OnlyOfficeJS": "oDocContent.Push(oParagraph);",
        "ExcelVBA": "oDocContent.Push oParagraph"
      }
    ]
  }
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
    "VBA": "Set oWorksheet = ActiveSheet"
  },
  {
    "Description": "Get range B1 from the worksheet",
    "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"B1\");",
    "VBA": "Set oRange = oWorksheet.Range(\"B1\")"
  },
  {
    "Description": "Set value to the range",
    "OnlyOffice JS": "oRange.SetValue(\"This is just a sample text.\");",
    "VBA": "oRange.Value = \"This is just a sample text.\""
  },
  {
    "Description": "Get characters starting at position 9 with length 4",
    "OnlyOffice JS": "var oCharacters = oRange.GetCharacters(9, 4);",
    "VBA": "Set oCharacters = oRange.Characters(Start:=9, Length:=4)"
  },
  {
    "Description": "Delete the characters object",
    "OnlyOffice JS": "oCharacters.Delete();",
    "VBA": "oCharacters.Delete"
  }
]
``````json
{
  "description": "This example shows how to get a string value that represents the text of the specified range of characters.",
  "codeMappings": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "Excel_VBA": "Dim oRange As Range\nSet oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOffice_JS": "oRange.SetValue(\"This is just a sample text.\");",
      "Excel_VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice_JS": "var oCharacters = oRange.GetCharacters(23, 4);",
      "Excel_VBA": "Dim sCaption As String\nsCaption = Mid(oRange.Value, 23, 4)"
    },
    {
      "OnlyOffice_JS": "var sCaption = oCharacters.GetCaption();",
      "Excel_VBA": "// No direct equivalent; already handled using Mid function"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(\"Caption: \" + sCaption);",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"Caption: \" & sCaption"
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
  },
  {
    "Description": "Get range B1",
    "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"B1\");",
    "Excel VBA": "Set oRange = oWorksheet.Range(\"B1\")"
  },
  {
    "Description": "Set value in B1",
    "OnlyOffice JS": "oRange.SetValue(\"This is just a sample text.\");",
    "Excel VBA": "oRange.Value = \"This is just a sample text.\""
  },
  {
    "Description": "Get characters from position 23 with length 4",
    "OnlyOffice JS": "var oCharacters = oRange.GetCharacters(23, 4);",
    "Excel VBA": "Set oCharacters = oRange.Characters(Start:=23, Length:=4)"
  },
  {
    "Description": "Get count of characters",
    "OnlyOffice JS": "var nCount = oCharacters.GetCount();",
    "Excel VBA": "nCount = oCharacters.Count"
  },
  {
    "Description": "Set value in B3 with character count",
    "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(\"Number of characters: \" + nCount);",
    "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"Number of characters: \" & nCount"
  }
]
``````json
{
  "Description": "This example demonstrates how to set a cell value, retrieve specific characters, and apply bold formatting to those characters.",
  "Code": {
    "OnlyOffice_JS": "// This example shows how to get the ApiFont object that represents the font of the specified characters.\nvar oWorksheet = Api.GetActiveSheet();\nvar oRange = oWorksheet.GetRange(\"B1\");\noRange.SetValue(\"This is just a sample text.\");\nvar oCharacters = oRange.GetCharacters(9, 4);\nvar oFont = oCharacters.GetFont();\noFont.SetBold(true);",
    "Excel_VBA": "Sub SetBoldFont()\n    ' This example shows how to get the Font object that represents the font of the specified characters.\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ThisWorkbook.ActiveSheet\n    Dim oRange As Range\n    Set oRange = oWorksheet.Range(\"B1\")\n    oRange.Value = \"This is just a sample text.\"\n    Dim oCharacters As Characters\n    Set oCharacters = oRange.Characters(Start:=9, Length:=4)\n    oCharacters.Font.Bold = True\nEnd Sub"
  }
}
``````json
{
  "table": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Get the range 'B1' on the worksheet",
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "Description": "Set the value of the range to 'This is just a sample text.'",
      "OnlyOffice_JS": "oRange.SetValue(\"This is just a sample text.\");",
      "Excel_VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "Description": "Get characters starting at position 23 with length 4",
      "OnlyOffice_JS": "var oCharacters = oRange.GetCharacters(23, 4);",
      "Excel_VBA": "Set oCharacters = oRange.Characters(Start:=23, Length:=4)"
    },
    {
      "Description": "Get the parent object of the characters",
      "OnlyOffice_JS": "var oParent = oCharacters.GetParent();",
      "Excel_VBA": "Set oParent = oCharacters.Parent"
    },
    {
      "Description": "Set the bottom border to thick with specified color",
      "OnlyOffice_JS": "oParent.SetBorders(\"Bottom\", \"Thick\", Api.CreateColorFromRGB(255, 111, 61));",
      "Excel_VBA": "With oParent.Borders(xlEdgeBottom)\n    .LineStyle = xlContinuous\n    .Weight = xlThick\n    .Color = RGB(255, 111, 61)\nEnd With"
    }
  ]
}
``````json
{
  "Description": "This code retrieves the active worksheet, sets a value in cell B1, extracts specific characters from that cell, retrieves the text from those characters, and sets a concatenated value in cell B3.",
  "Methods": [
    {
      "OnlyOffice_JS": "Api.GetActiveSheet()",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\")",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOffice_JS": "oRange.SetValue(\"This is just a sample text.\")",
      "Excel_VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice_JS": "oRange.GetCharacters(23, 4)",
      "Excel_VBA": "Set oCharacters = oRange.Characters(23, 4)"
    },
    {
      "OnlyOffice_JS": "oCharacters.GetText()",
      "Excel_VBA": "sText = oCharacters.Text"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(\"Text: \" + sText)",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"Text: \" & sText"
    }
  ]
}
``````json
{
  "Description": "This example inserts a string replacing the specified characters.",
  "CodeComparison": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOffice_JS": "oRange.SetValue(\"This is just a sample text.\");",
      "Excel_VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice_JS": "var oCharacters = oRange.GetCharacters(23, 4);",
      "Excel_VBA": "Set oCharacters = oRange.Characters(Start:=23, Length:=4)"
    },
    {
      "OnlyOffice_JS": "oCharacters.Insert(\"string\");",
      "Excel_VBA": "oCharacters.Text = oCharacters.Text & \"string\""
    }
  ]
}
``````json
{
  "description": "This example deletes the ApiCharacters object.",
  "table": [
    {
      "OnlyOffice JS": "Api.GetActiveSheet()",
      "Excel VBA": "ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\")",
      "Excel VBA": "Range(\"B1\")"
    },
    {
      "OnlyOffice JS": "oRange.SetValue(\"This is just a sample text.\")",
      "Excel VBA": "Range(\"B1\").Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice JS": "oRange.GetCharacters(9, 4)",
      "Excel VBA": "Range(\"B1\").Characters(Start:=9, Length:=4)"
    },
    {
      "OnlyOffice JS": "oCharacters.Delete()",
      "Excel VBA": "Range(\"B1\").Characters(Start:=9, Length:=4).Delete"
    }
  ]
}
``````json
{
  "description": "This example demonstrates how to set a value in cell B1, extract a substring from the text in B1, retrieve its caption, and display the caption in cell B3.",
  "methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "VBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOffice JS": "oRange.SetValue(\"This is just a sample text.\");",
      "VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice JS": "var oCharacters = oRange.GetCharacters(23, 4);",
      "VBA": "Set oCharacters = oRange.Characters(23, 4)"
    },
    {
      "OnlyOffice JS": "var sCaption = oCharacters.GetCaption();",
      "VBA": "sCaption = oCharacters.Caption"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(\"Caption: \" + sCaption);",
      "VBA": "oWorksheet.Range(\"B3\").Value = \"Caption: \" & sCaption"
    }
  ]
}
``````json
{
  "table": {
    "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Description": "Get the active worksheet.",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = Api.GetActiveSheet()"
      },
      {
        "Description": "Get the range 'B1'.",
        "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"B1\");",
        "Excel VBA": "Set oRange = oWorksheet.Range(\"B1\")"
      },
      {
        "Description": "Set value of the range 'B1'.",
        "OnlyOffice JS": "oRange.SetValue(\"This is just a sample text.\");",
        "Excel VBA": "oRange.Value = \"This is just a sample text.\""
      },
      {
        "Description": "Get characters from position 23 with length 4 in range 'B1'.",
        "OnlyOffice JS": "var oCharacters = oRange.GetCharacters(23, 4);",
        "Excel VBA": "Set oCharacters = oRange.Characters(Start:=23, Length:=4)"
      },
      {
        "Description": "Get the count of characters.",
        "OnlyOffice JS": "var nCount = oCharacters.GetCount();",
        "Excel VBA": "nCount = Len(oCharacters.Text)"
      },
      {
        "Description": "Set value of range 'B3' to display number of characters.",
        "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(\"Number of characters: \" + nCount);",
        "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"Number of characters: \" & nCount"
      }
    ]
  }
}
``````json
{
  "Table": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "Description": "Get range B1",
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "VBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "Description": "Set value in B1",
      "OnlyOffice JS": "oRange.SetValue(\"This is just a sample text.\");",
      "VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "Description": "Get characters from position 9, length 4",
      "OnlyOffice JS": "var oCharacters = oRange.GetCharacters(9, 4);",
      "VBA": "Set oCharacters = oRange.Characters(9, 4)"
    },
    {
      "Description": "Get the font of the characters",
      "OnlyOffice JS": "var oFont = oCharacters.GetFont();",
      "VBA": "Set oFont = oCharacters.Font"
    },
    {
      "Description": "Set font to bold",
      "OnlyOffice JS": "oFont.SetBold(true);",
      "VBA": "oFont.Bold = True"
    }
  ]
}
``````json
{
  "description": "Sets a value in cell B1, retrieves characters 23-26, obtains their parent object, and applies a thick bottom border with a specific RGB color.",
  "code": {
    "OnlyOffice_JS": "// This example shows how to get the parent object of the specified characters.\nvar oWorksheet = Api.GetActiveSheet();\nvar oRange = oWorksheet.GetRange(\"B1\");\noRange.SetValue(\"This is just a sample text.\");\nvar oCharacters = oRange.GetCharacters(23, 4);\nvar oParent = oCharacters.GetParent();\noParent.SetBorders(\"Bottom\", \"Thick\", Api.CreateColorFromRGB(255, 111, 61));",
    "Excel_VBA": "' Sets a value in cell B1, retrieves characters 23-26, gets their parent, and sets a thick bottom border with a specific color.\nSub SetBordersExample()\n    Dim ws As Worksheet\n    Set ws = ActiveSheet\n    Dim rng As Range\n    Set rng = ws.Range(\"B1\")\n    rng.Value = \"This is just a sample text.\"\n    Dim characters As Characters\n    Set characters = rng.Characters(Start:=23, Length:=4)\n    Dim parentRange As Range\n    Set parentRange = characters.Parent\n    With parentRange.Borders(xlEdgeBottom)\n        .LineStyle = xlContinuous\n        .Weight = xlThick\n        .Color = RGB(255, 111, 61)\n    End With\nEnd Sub"
  }
}
```// This example shows how to get the text of the specified range of characters.

```json
{
  "RAG_Table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "VBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOffice_JS": "oRange.SetValue(\"This is just a sample text.\");",
      "VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice_JS": "var oCharacters = oRange.GetCharacters(23, 4);",
      "VBA": "Set oCharacters = oRange.Characters(23, 4)"
    },
    {
      "OnlyOffice_JS": "var sText = oCharacters.GetText();",
      "VBA": "sText = oCharacters.Text"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(\"Text: \" + sText);",
      "VBA": "oWorksheet.Range(\"B3\").Value = \"Text: \" & sText"
    }
  ]
}
``````json
{
  "description": "This example inserts a string replacing the specified characters.",
  "table": {
    "columns": ["VBA", "OnlyOffice JS"],
    "rows": [
      {
        "VBA": "Set oWorksheet = ActiveSheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();"
      },
      {
        "VBA": "Set oRange = oWorksheet.Range(\"B1\")",
        "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"B1\");"
      },
      {
        "VBA": "oRange.Value = \"This is just a sample text.\"",
        "OnlyOffice JS": "oRange.SetValue(\"This is just a sample text.\");"
      },
      {
        "VBA": "Set oCharacters = oRange.Characters(23, 4)",
        "OnlyOffice JS": "var oCharacters = oRange.GetCharacters(23, 4);"
      },
      {
        "VBA": "oCharacters.Insert \"string\"",
        "OnlyOffice JS": "oCharacters.Insert(\"string\");"
      }
    ]
  }
}
``````json
{
  "table": [
    {
      "Description": "This example sets a string value that represents the text of the specified range of characters.",
      "VBA": "Sub SetRangeValue()\n    Dim oWorksheet As Worksheet\n    Dim oRange As Range\n    Dim oCharacters As Characters\n    \n    Set oWorksheet = ActiveSheet\n    Set oRange = oWorksheet.Range(\"B1\")\n    oRange.Value = \"This is just a sample text.\"\n    Set oCharacters = oRange.Characters(Start:=23, Length:=4)\n    oCharacters.Text = \"string\"\nEnd Sub",
      "OnlyOfficeJS": "// This example sets a string value that represents the text of the specified range of characters.\nvar oWorksheet = Api.GetActiveSheet();\nvar oRange = oWorksheet.GetRange(\"B1\");\noRange.SetValue(\"This is just a sample text.\");\nvar oCharacters = oRange.GetCharacters(23, 4);\noCharacters.SetCaption(\"string\");"
    }
  ]
}
``````json
{
  "Description": "This example sets the text for the specified characters.",
  "Methods": [
    {
      "OnlyOffice_JS": "// Get the active worksheet\nvar oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "' Get the active worksheet\nSet oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "// Get range B1\nvar oRange = oWorksheet.GetRange(\"B1\");",
      "Excel_VBA": "' Get range B1\nSet oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOffice_JS": "// Set value of the range\noRange.SetValue(\"This is just a sample text.\");",
      "Excel_VBA": "' Set value of the range\noRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice_JS": "// Get characters from position 23 with length 4\nvar oCharacters = oRange.GetCharacters(23, 4);",
      "Excel_VBA": "' Get characters from position 23 with length 4\nSet oCharacters = oRange.Characters(Start:=23, Length:=4)"
    },
    {
      "OnlyOffice_JS": "// Set text of the specified characters\noCharacters.SetText(\"string\");",
      "Excel_VBA": "' Set text of the specified characters\noCharacters.Text = \"string\""
    }
  ]
}
``````json
{
  "Description": "This example sets a string value that represents the text of the specified range of characters.",
  "RAG_Table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "Excel VBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOffice JS": "oRange.SetValue(\"This is just a sample text.\");",
      "Excel VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice JS": "var oCharacters = oRange.GetCharacters(23, 4);",
      "Excel VBA": "Set oCharacters = oRange.Characters(Start:=23, Length:=4)"
    },
    {
      "OnlyOffice JS": "oCharacters.SetCaption(\"string\");",
      "Excel VBA": "oCharacters.Caption = \"string\""
    }
  ]
}
``````json
{
  "description": "Sets the text for the specified characters.",
  "methods": [
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOfficeJS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "ExcelVBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOfficeJS": "oRange.SetValue(\"This is just a sample text.\");",
      "ExcelVBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOfficeJS": "var oCharacters = oRange.GetCharacters(23, 4);",
      "ExcelVBA": "Set oCharacters = oRange.Characters(Start:=23, Length:=4)"
    },
    {
      "OnlyOfficeJS": "oCharacters.SetText(\"string\");",
      "ExcelVBA": "oCharacters.Text = \"string\""
    }
  ]
}
``````json
{
  "description": "This example adds a new series to the chart.",
  "methods": [
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "ExcelVBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "ExcelVBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "ExcelVBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "ExcelVBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "ExcelVBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A4\").SetValue(\"Cost price\");",
      "ExcelVBA": "oWorksheet.Range(\"A4\").Value = \"Cost price\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "ExcelVBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "ExcelVBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B4\").SetValue(50);",
      "ExcelVBA": "oWorksheet.Range(\"B4\").Value = 50"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "ExcelVBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "ExcelVBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C4\").SetValue(120);",
      "ExcelVBA": "oWorksheet.Range(\"C4\").Value = 120"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "ExcelVBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "ExcelVBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D4\").SetValue(160);",
      "ExcelVBA": "oWorksheet.Range(\"D4\").Value = 160"
    },
    {
      "OnlyOfficeJS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "ExcelVBA": "Dim oChart As Chart\nSet oChart = oWorksheet.Shapes.AddChart2(251, xlBarClustered, 100, 70, 200, 150).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    },
    {
      "OnlyOfficeJS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "ExcelVBA": "oChart.HasTitle = True\noChart.ChartTitle.Text = \"Financial Overview\"\nWith oChart.ChartTitle.Format.TextFrame2.TextRange.Font\n    .Size = 13\nEnd With"
    },
    {
      "OnlyOfficeJS": "oChart.AddSeria(\"Cost price\", \"'Sheet1'!$B$4:$D$4\");",
      "ExcelVBA": "oChart.SeriesCollection.NewSeries\nWith oChart.SeriesCollection(2)\n    .Name = \"Cost price\"\n    .Values = oWorksheet.Range(\"B4:D4\")\nEnd With"
    },
    {
      "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
      "ExcelVBA": "With oChart.SeriesCollection(1).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With"
    },
    {
      "OnlyOfficeJS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
      "ExcelVBA": "With oChart.SeriesCollection(2).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
    }
  ]
}
``````json
[
  {
    "description": "Get the active worksheet",
    "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
  },
  {
    "description": "Set values to specific ranges",
    "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);\noWorksheet.GetRange(\"C1\").SetValue(2015);\noWorksheet.GetRange(\"D1\").SetValue(2016);\noWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\noWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\noWorksheet.GetRange(\"B2\").SetValue(200);\noWorksheet.GetRange(\"B3\").SetValue(250);\noWorksheet.GetRange(\"C2\").SetValue(240);\noWorksheet.GetRange(\"C3\").SetValue(260);\noWorksheet.GetRange(\"D2\").SetValue(280);\noWorksheet.GetRange(\"D3\").SetValue(280);",
    "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014\n" +
                 "oWorksheet.Range(\"C1\").Value = 2015\n" +
                 "oWorksheet.Range(\"D1\").Value = 2016\n" +
                 "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\"\n" +
                 "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\"\n" +
                 "oWorksheet.Range(\"B2\").Value = 200\n" +
                 "oWorksheet.Range(\"B3\").Value = 250\n" +
                 "oWorksheet.Range(\"C2\").Value = 240\n" +
                 "oWorksheet.Range(\"C3\").Value = 260\n" +
                 "oWorksheet.Range(\"D2\").Value = 280\n" +
                 "oWorksheet.Range(\"D3\").Value = 280"
  },
  {
    "description": "Add a 3D bar chart to the worksheet",
    "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
    "Excel VBA": "Dim oChart As ChartObject\nSet oChart = oWorksheet.ChartObjects.Add(Left:=100, Top:=70, Width:=300, Height:=200)\nWith oChart.Chart\n    .SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\n    .ChartType = xlBar3D\nEnd With"
  },
  {
    "description": "Set chart title",
    "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
    "Excel VBA": "With oChart.Chart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\nEnd With"
  },
  {
    "description": "Apply chart style",
    "OnlyOffice JS": "oChart.ApplyChartStyle(2);",
    "Excel VBA": "oChart.Chart.ChartStyle = 2"
  },
  {
    "description": "Set series fill for first series",
    "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
    "Excel VBA": "oChart.Chart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)"
  },
  {
    "description": "Set series outline for first series",
    "OnlyOffice JS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\noChart.SetSeriesOutLine(oStroke, 0, false);",
    "Excel VBA": "With oChart.Chart.SeriesCollection(1).Format.Line\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Visible = msoTrue\nEnd With"
  },
  {
    "description": "Set series fill for second series",
    "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
    "Excel VBA": "oChart.Chart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
  },
  {
    "description": "Set series outline for second series",
    "OnlyOffice JS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\noChart.SetSeriesOutLine(oStroke, 1, false);",
    "Excel VBA": "With oChart.Chart.SeriesCollection(2).Format.Line\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Visible = msoTrue\nEnd With"
  }
]
``````json
{
  "Description": "This script populates cells with data, creates a combo bar-line chart, sets its title and series fill colors, retrieves all chart series, and logs their types.",
  "Table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel_VBA": "Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel_VBA": "Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel_VBA": "Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel_VBA": "Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel_VBA": "Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel_VBA": "Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel_VBA": "Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel_VBA": "Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel_VBA": "Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel_VBA": "Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel_VBA": "Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"comboBarLine\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "Excel_VBA": "Set oChart = oWorksheet.Shapes.AddChart2(-1, xlCombo, 100, 70, 200, 150).Chart\noChart.SetSourceData Source:=Range(\"'Sheet1'!$A$1:$D$3\")\noChart.ChartType = xlCombo"
    },
    {
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel_VBA": "With oChart\n  .HasTitle = True\n  .ChartTitle.Text = \"Financial Overview\"\n  .ChartTitle.Font.Size = 13\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "Excel_VBA": "Set oFill = oChart.SeriesCollection(1).Format.Fill\noFill.ForeColor.RGB = RGB(51, 51, 51)\noFill.Solid"
    },
    {
      "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 0, false);",
      "Excel_VBA": "With oChart.SeriesCollection(1).Format.Fill\n  .Visible = msoTrue\n  .ForeColor.RGB = RGB(51, 51, 51)\n  .Solid\nEnd With"
    },
    {
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "Set oFill = oChart.SeriesCollection(2).Format.Fill\noFill.ForeColor.RGB = RGB(255, 111, 61)\noFill.Solid"
    },
    {
      "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 1, false);",
      "Excel_VBA": "With oChart.SeriesCollection(2).Format.Fill\n  .Visible = msoTrue\n  .ForeColor.RGB = RGB(255, 111, 61)\n  .Solid\nEnd With"
    },
    {
      "OnlyOffice_JS": "var aAllSeries = oChart.GetAllSeries();",
      "Excel_VBA": "Set aAllSeries = oChart.SeriesCollection"
    },
    {
      "OnlyOffice_JS": "for(var nSeries = 0; nSeries < aAllSeries.length; ++nSeries) {\n oSeries = aAllSeries[nSeries];\n sSeriesType = oSeries.GetChartType();\n oWorksheet.GetRange(\"F\" + (nSeries + 1)).SetValue((nSeries + 1) + \" Series Type = \" + sSeriesType);\n}",
      "Excel_VBA": "Dim nSeries As Integer\nDim sSeriesType As String\nFor nSeries = 1 To aAllSeries.Count\n  sSeriesType = aAllSeries(nSeries).ChartType\n  oWorksheet.Range(\"F\" & nSeries).Value = nSeries & \" Series Type = \" & sSeriesType\nNext nSeries"
    }
  ]
}
``````json
{
  "RAG_Table": [
    {
      "Description": "Gets the active worksheet",
      "VBA": "Set oWorksheet = ActiveSheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Sets the value 2014 in cell B1",
      "VBA": "oWorksheet.Range(\"B1\").Value = 2014",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);"
    },
    {
      "Description": "Sets the value 2015 in cell C1",
      "VBA": "oWorksheet.Range(\"C1\").Value = 2015",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);"
    },
    {
      "Description": "Sets the value 2016 in cell D1",
      "VBA": "oWorksheet.Range(\"D1\").Value = 2016",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);"
    },
    {
      "Description": "Sets the text 'Projected Revenue' in cell A2",
      "VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\"",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");"
    },
    {
      "Description": "Sets the text 'Estimated Costs' in cell A3",
      "VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\"",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");"
    },
    {
      "Description": "Sets the value 200 in cell B2",
      "VBA": "oWorksheet.Range(\"B2\").Value = 200",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);"
    },
    {
      "Description": "Sets the value 250 in cell B3",
      "VBA": "oWorksheet.Range(\"B3\").Value = 250",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);"
    },
    {
      "Description": "Sets the value 240 in cell C2",
      "VBA": "oWorksheet.Range(\"C2\").Value = 240",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);"
    },
    {
      "Description": "Sets the value 260 in cell C3",
      "VBA": "oWorksheet.Range(\"C3\").Value = 260",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);"
    },
    {
      "Description": "Sets the value 280 in cell D2",
      "VBA": "oWorksheet.Range(\"D2\").Value = 280",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);"
    },
    {
      "Description": "Sets the value 280 in cell D3",
      "VBA": "oWorksheet.Range(\"D3\").Value = 280",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);"
    },
    {
      "Description": "Adds a 3D bar chart to the worksheet",
      "VBA": "Set oChart = oWorksheet.Shapes.AddChart2(227, xlBarClustered, 100, 70, 200, 150).Chart",
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);"
    },
    {
      "Description": "Sets the chart title to 'Financial Overview' with font size 13",
      "VBA": "oChart.HasTitle = True\n oChart.ChartTitle.Text = \"Financial Overview\"\n oChart.ChartTitle.Font.Size = 13",
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);"
    },
    {
      "Description": "Creates a solid fill with RGB color (51, 51, 51)",
      "VBA": "Set oFill = oChart.SeriesCollection(1).Format.Fill\n oFill.Solid\n oFill.ForeColor.RGB = RGB(51, 51, 51)",
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));"
    },
    {
      "Description": "Sets the first series fill to the created color without gradient",
      "VBA": "oChart.SeriesCollection(1).Format.Fill = oFill",
      "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 0, false);"
    },
    {
      "Description": "Creates a solid fill with RGB color (255, 111, 61)",
      "VBA": "Set oFill = oChart.SeriesCollection(2).Format.Fill\n oFill.Solid\n oFill.ForeColor.RGB = RGB(255, 111, 61)",
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));"
    },
    {
      "Description": "Sets the second series fill to the created color without gradient",
      "VBA": "oChart.SeriesCollection(2).Format.Fill = oFill",
      "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 1, false);"
    },
    {
      "Description": "Gets the class type of the chart and sets it in cell F1",
      "VBA": "sClassType = oChart.ChartType\n oWorksheet.Range(\"F1\").Value = \"Class Type: \" & sClassType",
      "OnlyOffice_JS": "var sClassType = oChart.GetClassType();\noWorksheet.GetRange(\"F1\").SetValue(\"Class Type: \" + sClassType);"
    }
  ]
}
``````json
{
  "table": {
    "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Description": "Get active sheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
      },
      {
        "Description": "Set value in cell B1 to 2014",
        "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
        "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014"
      },
      {
        "Description": "Set value in cell C1 to 2015",
        "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
        "Excel VBA": "oWorksheet.Range(\"C1\").Value = 2015"
      },
      {
        "Description": "Set value in cell D1 to 2016",
        "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
        "Excel VBA": "oWorksheet.Range(\"D1\").Value = 2016"
      },
      {
        "Description": "Set value in cell A2 to 'Projected Revenue'",
        "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
        "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
      },
      {
        "Description": "Set value in cell A3 to 'Estimated Costs'",
        "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
        "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
      },
      {
        "Description": "Set value in cell B2 to 200",
        "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
        "Excel VBA": "oWorksheet.Range(\"B2\").Value = 200"
      },
      {
        "Description": "Set value in cell B3 to 250",
        "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
        "Excel VBA": "oWorksheet.Range(\"B3\").Value = 250"
      },
      {
        "Description": "Set value in cell C2 to 240",
        "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
        "Excel VBA": "oWorksheet.Range(\"C2\").Value = 240"
      },
      {
        "Description": "Set value in cell C3 to 260",
        "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
        "Excel VBA": "oWorksheet.Range(\"C3\").Value = 260"
      },
      {
        "Description": "Set value in cell D2 to 280",
        "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
        "Excel VBA": "oWorksheet.Range(\"D2\").Value = 280"
      },
      {
        "Description": "Set value in cell D3 to 280",
        "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
        "Excel VBA": "oWorksheet.Range(\"D3\").Value = 280"
      },
      {
        "Description": "Add a combo bar-line chart",
        "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"comboBarLine\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
        "Excel VBA": "Set oChart = oWorksheet.Shapes.AddChart2(201, xlCombo, 100, 70, 200, 150).Chart\nWith oChart\n    .SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\n    .ChartType = xlCombo\nEnd With"
      },
      {
        "Description": "Set chart title to 'Financial Overview' with font size 13",
        "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
        "Excel VBA": "oChart.HasTitle = True\noChart.ChartTitle.Text = \"Financial Overview\"\nWith oChart.ChartTitle.Format.TextFrame2.TextRange.Font\n    .Size = 13\nEnd With"
      },
      {
        "Description": "Create and set series fill color to RGB(51, 51, 51) for series 0",
        "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
        "Excel VBA": "With oChart.SeriesCollection(1).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With"
      },
      {
        "Description": "Create and set series fill color to RGB(255, 111, 61) for series 1",
        "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
        "Excel VBA": "With oChart.SeriesCollection(2).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
      },
      {
        "Description": "Get chart type of the first series and set it in cell F1",
        "OnlyOffice JS": "var oSeries = oChart.GetSeries(0);\nvar sSeriesType = oSeries.GetChartType();\noWorksheet.GetRange(\"F1\").SetValue(\"1 Series Type = \" + sSeriesType);",
        "Excel VBA": "Dim sSeriesType As String\nsSeriesType = oChart.SeriesCollection(1).ChartType\noWorksheet.Range(\"F1\").Value = \"1 Series Type = \" & sSeriesType"
      }
    ]
  }
}
``````json
{
  "description": "This example adds a new series to the chart.",
  "codeEquivalents": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel_VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A4\").SetValue(\"Cost price\");",
      "Excel_VBA": "oWorksheet.Range(\"A4\").Value = \"Cost price\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B4\").SetValue(50);",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = 50"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C4\").SetValue(120);",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = 120"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D4\").SetValue(160);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 160"
    },
    {
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "Excel_VBA": "Set oChart = oWorksheet.ChartObjects.Add(Left:=100, Top:=70, Width:=200, Height:=150).Chart\nWith oChart\n    .ChartType = xlBarClustered\n    .SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel_VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Font.Size = 13\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.AddSeria(\"Cost price\", \"'Sheet1'!$B$4:$D$4\");",
      "Excel_VBA": "oChart.SeriesCollection.NewSeries\nWith oChart.SeriesCollection(1)\n    .Name = \"Cost price\"\n    .Values = oWorksheet.Range(\"B4:D4\")\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
      "Excel_VBA": "With oChart.SeriesCollection(1).\n    .Format.Fill.ForeColor.RGB = RGB(51, 51, 51)\n    .Format.Fill.Visible = msoTrue\nEnd With"
    },
    {
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
      "Excel_VBA": "With oChart.SeriesCollection(2).\n    .Format.Fill.ForeColor.RGB = RGB(255, 111, 61)\n    .Format.Fill.Visible = msoTrue\nEnd With"
    }
  ]
}
``````json
{
  "description": "This code populates a worksheet with data and creates a styled 3D bar chart with custom fills and outlines.",
  "code": [
    {
      "VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "VBA": "oWorksheet.Range(\"B1\").Value = 2014",
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);"
    },
    {
      "VBA": "oWorksheet.Range(\"C1\").Value = 2015",
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);"
    },
    {
      "VBA": "oWorksheet.Range(\"D1\").Value = 2016",
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);"
    },
    {
      "VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\"",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");"
    },
    {
      "VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\"",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");"
    },
    {
      "VBA": "oWorksheet.Range(\"B2\").Value = 200",
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);"
    },
    {
      "VBA": "oWorksheet.Range(\"B3\").Value = 250",
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);"
    },
    {
      "VBA": "oWorksheet.Range(\"C2\").Value = 240",
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);"
    },
    {
      "VBA": "oWorksheet.Range(\"C3\").Value = 260",
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);"
    },
    {
      "VBA": "oWorksheet.Range(\"D2\").Value = 280",
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);"
    },
    {
      "VBA": "oWorksheet.Range(\"D3\").Value = 280",
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);"
    },
    {
      "VBA": "Set oChart = oWorksheet.Shapes.AddChart2(251, xlBarClustered, 200, 70, 360, 200)",
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);"
    },
    {
      "VBA": "With oChart.Chart\n  .HasTitle = True\n  .ChartTitle.Text = \"Financial Overview\"\n  .ChartTitle.Font.Size = 13\n  .ChartStyle = 2\nEnd With",
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);\noChart.ApplyChartStyle(2);"
    },
    {
      "VBA": "With oChart.Chart.SeriesCollection(1)\n  .Format.Fill.ForeColor.RGB = RGB(51, 51, 51)\n  .Format.Line.Weight = 0.5\n  .Format.Line.ForeColor.RGB = RGB(51, 51, 51)\nEnd With",
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\nvar oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\noChart.SetSeriesOutLine(oStroke, 0, false);"
    },
    {
      "VBA": "With oChart.Chart.SeriesCollection(2)\n  .Format.Fill.ForeColor.RGB = RGB(255, 111, 61)\n  .Format.Line.Weight = 0.5\n  .Format.Line.ForeColor.RGB = RGB(255, 111, 61)\nEnd With",
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\noChart.SetSeriesOutLine(oStroke, 1, false);"
    }
  ]
}
``````json
{
  "RAG_table": {
    "headers": ["Description", "VBA Code", "OnlyOffice_JS Code"],
    "rows": [
      {
        "Description": "Get active worksheet",
        "VBA Code": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet",
        "OnlyOffice_JS Code": "var oWorksheet = Api.GetActiveSheet();"
      },
      {
        "Description": "Set year headers in B1, C1, D1",
        "VBA Code": "oWorksheet.Range(\"B1\").Value = 2014\n" +
                    "oWorksheet.Range(\"C1\").Value = 2015\n" +
                    "oWorksheet.Range(\"D1\").Value = 2016",
        "OnlyOffice_JS Code": "oWorksheet.GetRange(\"B1\").SetValue(2014);\n" +
                              "oWorksheet.GetRange(\"C1\").SetValue(2015);\n" +
                              "oWorksheet.GetRange(\"D1\").SetValue(2016);"
      },
      {
        "Description": "Set labels in A2 and A3",
        "VBA Code": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\"\n" +
                    "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\"",
        "OnlyOffice_JS Code": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\n" +
                              "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");"
      },
      {
        "Description": "Set projected revenue values",
        "VBA Code": "oWorksheet.Range(\"B2\").Value = 200\n" +
                    "oWorksheet.Range(\"C2\").Value = 240\n" +
                    "oWorksheet.Range(\"D2\").Value = 280",
        "OnlyOffice_JS Code": "oWorksheet.GetRange(\"B2\").SetValue(200);\n" +
                              "oWorksheet.GetRange(\"C2\").SetValue(240);\n" +
                              "oWorksheet.GetRange(\"D2\").SetValue(280);"
      },
      {
        "Description": "Set estimated costs values",
        "VBA Code": "oWorksheet.Range(\"B3\").Value = 250\n" +
                    "oWorksheet.Range(\"C3\").Value = 260\n" +
                    "oWorksheet.Range(\"D3\").Value = 280",
        "OnlyOffice_JS Code": "oWorksheet.GetRange(\"B3\").SetValue(250);\n" +
                              "oWorksheet.GetRange(\"C3\").SetValue(260);\n" +
                              "oWorksheet.GetRange(\"D3\").SetValue(280);"
      },
      {
        "Description": "Add a combo bar-line chart",
        "VBA Code": "Dim oChart As Chart\n" +
                    "Set oChart = oWorksheet.Shapes.AddChart2(-1, xlColumnClustered, 200, 70, 36000, 36000).Chart\n" +
                    "oChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\n" +
                    "oChart.ChartType = xlCombo\n" +
                    "oChart.HasTitle = True\n" +
                    "oChart.ChartTitle.Text = \"Financial Overview\"",
        "OnlyOffice_JS Code": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"comboBarLine\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\n" +
                              "oChart.SetTitle(\"Financial Overview\", 13);"
      },
      {
        "Description": "Set series fill colors",
        "VBA Code": "Dim oFill As FillFormat\n" +
                    "Set oFill = oChart.SeriesCollection(1).Format.Fill\n" +
                    "oFill.ForeColor.RGB = RGB(51, 51, 51)\n" +
                    "oFill.Visible = msoTrue\n" +
                    "Set oFill = oChart.SeriesCollection(2).Format.Fill\n" +
                    "oFill.ForeColor.RGB = RGB(255, 111, 61)\n" +
                    "oFill.Visible = msoTrue",
        "OnlyOffice_JS Code": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\n" +
                              "oChart.SetSeriesFill(oFill, 0, false);\n" +
                              "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\n" +
                              "oChart.SetSeriesFill(oFill, 1, false);"
      },
      {
        "Description": "Get all series and insert their types into column F",
        "VBA Code": "Dim aAllSeries As SeriesCollection\nSet aAllSeries = oChart.SeriesCollection\n" +
                    "Dim oSeries As Series\nDim sSeriesType As String\n" +
                    "Dim nSeries As Integer\n" +
                    "For nSeries = 1 To aAllSeries.Count\n" +
                    "    Set oSeries = aAllSeries(nSeries)\n" +
                    "    sSeriesType = oSeries.ChartType\n" +
                    "    oWorksheet.Range(\"F\" & nSeries).Value = nSeries & \" Series Type = \" & sSeriesType\n" +
                    "Next nSeries",
        "OnlyOffice_JS Code": "var aAllSeries = oChart.GetAllSeries();\n" +
                              "var oSeries, sSeriesType;\n" +
                              "for(var nSeries = 0; nSeries < aAllSeries.length; ++nSeries) {\n" +
                              "    oSeries = aAllSeries[nSeries];\n" +
                              "    sSeriesType = oSeries.GetChartType();\n" +
                              "    oWorksheet.GetRange(\"F\" + (nSeries + 1)).SetValue((nSeries + 1) + \" Series Type = \" + sSeriesType);\n" +
                              "}"
      }
    ]
  }
}
``````json
{
  "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
  "rows": [
    [
      "Gets the active worksheet",
      "var oWorksheet = Api.GetActiveSheet();",
      "Set oWorksheet = ActiveSheet"
    ],
    [
      "Sets value to cell B1",
      "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Range(\"B1\").Value = 2014"
    ],
    [
      "Sets value to cell C1",
      "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Range(\"C1\").Value = 2015"
    ],
    [
      "Sets value to cell D1",
      "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Range(\"D1\").Value = 2016"
    ],
    [
      "Sets value to cell A2",
      "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Range(\"A2\").Value = \"Projected Revenue\""
    ],
    [
      "Sets value to cell A3",
      "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Range(\"A3\").Value = \"Estimated Costs\""
    ],
    [
      "Sets value to cell B2",
      "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Range(\"B2\").Value = 200"
    ],
    [
      "Sets value to cell B3",
      "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Range(\"B3\").Value = 250"
    ],
    [
      "Sets value to cell C2",
      "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Range(\"C2\").Value = 240"
    ],
    [
      "Sets value to cell C3",
      "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Range(\"C3\").Value = 260"
    ],
    [
      "Sets value to cell D2",
      "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Range(\"D2\").Value = 280"
    ],
    [
      "Sets value to cell D3",
      "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Range(\"D3\").Value = 280"
    ],
    [
      "Adds a 3D bar chart to the worksheet",
      "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "Dim oChart As Chart\nSet oChart = Charts.Add()\nWith oChart\n    .SetSourceData Source:=Sheets(\"Sheet1\").Range(\"A1:D3\")\n    .ChartType = xlBar3D\n    ' Additional positioning and sizing code may be required\nEnd With"
    ],
    [
      "Sets the chart title",
      "oChart.SetTitle(\"Financial Overview\", 13);",
      "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\nEnd With"
    ],
    [
      "Creates a solid fill with RGB color (51, 51, 51)",
      "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "With oChart.SeriesCollection(1).Format.Fill\n    .ForeColor.RGB = RGB(51, 51, 51)\nEnd With"
    ],
    [
      "Sets the series fill for the first series",
      "oChart.SetSeriesFill(oFill, 0, false);",
      "With oChart.SeriesCollection(1).Format.Fill\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Visible = msoTrue\nEnd With"
    ],
    [
      "Creates a solid fill with RGB color (255, 111, 61)",
      "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "With oChart.SeriesCollection(2).Format.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
    ],
    [
      "Sets the series fill for the second series",
      "oChart.SetSeriesFill(oFill, 1, false);",
      "With oChart.SeriesCollection(2).Format.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Visible = msoTrue\nEnd With"
    ],
    [
      "Gets the class type of the chart",
      "var sClassType = oChart.GetClassType();",
      "sClassType = TypeName(oChart)"
    ],
    [
      "Sets value to cell F1 with the class type",
      "oWorksheet.GetRange(\"F1\").SetValue(\"Class Type: \" + sClassType);",
      "Range(\"F1\").Value = \"Class Type: \" & sClassType"
    ]
  ]
}
``````json
{
  "description": "This example gets the first series of ApiChart class and inserts its type into the table.",
  "RAG_table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel_VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"comboBarLine\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "Excel_VBA": "Set oChart = oWorksheet.ChartObjects.Add(360000, 252000, 720000, 108000).Chart\nWith oChart\n    .SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\n    .ChartType = xlCombo\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel_VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Font.Size = 13\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "Excel_VBA": "With oChart.SeriesCollection(1).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 0, false);",
      "Excel_VBA": "With oChart.SeriesCollection(1).Format.Fill\n    .ForeColor.RGB = RGB(51, 51, 51)\nEnd With"
    },
    {
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "With oChart.SeriesCollection(2).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 1, false);",
      "Excel_VBA": "With oChart.SeriesCollection(2).Format.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oSeries = oChart.GetSeries(0);",
      "Excel_VBA": "Set oSeries = oChart.SeriesCollection(1)"
    },
    {
      "OnlyOffice_JS": "var sSeriesType = oSeries.GetChartType();",
      "Excel_VBA": "sSeriesType = oSeries.ChartType"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"F1\").SetValue(\"1 Series Type = \" + sSeriesType);",
      "Excel_VBA": "oWorksheet.Range(\"F1\").Value = \"1 Series Type = \" & sSeriesType"
    }
  ]
}
``````json
{
  "Description": "This code sets up data in a worksheet, creates a 3D bar chart, modifies the chart by setting the title, removing a series, changing the series fill color, and adds a note indicating the removal.",
  "CodeComparison": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "VBA": "Set oChart = oWorksheet.Shapes.AddChart2(-1, xlBarClustered, 100, 70, 200, 200).Chart"
    },
    {
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Format.TextFrame2.TextRange.Font.Size = 13\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.RemoveSeria(1);",
      "VBA": "oChart.SeriesCollection(1).Delete"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "VBA": "fillColor = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 0, false);",
      "VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A5\").SetValue(\"The Estimated Costs series was removed from the current chart.\");",
      "VBA": "oWorksheet.Range(\"A5\").Value = \"The Estimated Costs series was removed from the current chart.\""
    }
  ]
}
``````json
{
  "table": {
    "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
      },
      {
        "Description": "Set value in cell B1",
        "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
        "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014"
      },
      {
        "Description": "Set value in cell C1",
        "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
        "Excel VBA": "oWorksheet.Range(\"C1\").Value = 2015"
      },
      {
        "Description": "Set value in cell D1",
        "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
        "Excel VBA": "oWorksheet.Range(\"D1\").Value = 2016"
      },
      {
        "Description": "Set value in cell A2",
        "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
        "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
      },
      {
        "Description": "Set value in cell A3",
        "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
        "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
      },
      {
        "Description": "Set value in range B2",
        "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
        "Excel VBA": "oWorksheet.Range(\"B2\").Value = 200"
      },
      {
        "Description": "Set value in range B3",
        "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
        "Excel VBA": "oWorksheet.Range(\"B3\").Value = 250"
      },
      {
        "Description": "Set value in range C2",
        "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
        "Excel VBA": "oWorksheet.Range(\"C2\").Value = 240"
      },
      {
        "Description": "Set value in range C3",
        "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
        "Excel VBA": "oWorksheet.Range(\"C3\").Value = 260"
      },
      {
        "Description": "Set value in range D2",
        "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
        "Excel VBA": "oWorksheet.Range(\"D2\").Value = 280"
      },
      {
        "Description": "Set value in range D3",
        "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
        "Excel VBA": "oWorksheet.Range(\"D3\").Value = 280"
      },
      {
        "Description": "Add a 3D bar chart",
        "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
        "Excel VBA": "Set oChart = oWorksheet.Shapes.AddChart2(201, xlBar3D, 100, 70, 200, 150).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
      },
      {
        "Description": "Set chart title",
        "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
        "Excel VBA": "oChart.HasTitle = True\noChart.ChartTitle.Text = \"Financial Overview\"\noChart.ChartTitle.Format.TextFrame2.TextRange.Font.Size = 13"
      },
      {
        "Description": "Set axis number format",
        "OnlyOffice JS": "oChart.SetAxieNumFormat(\"0.00\", \"left\");",
        "Excel VBA": "oChart.Axes(xlCategory).TickLabels.NumberFormat = \"0.00\""
      },
      {
        "Description": "Create solid fill with RGB(51,51,51)",
        "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
        "Excel VBA": "Dim oFill As Long\noFill = RGB(51, 51, 51)"
      },
      {
        "Description": "Set series 0 fill color",
        "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 0, false);",
        "Excel VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = oFill"
      },
      {
        "Description": "Create solid fill with RGB(255,111,61)",
        "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
        "Excel VBA": "oFill = RGB(255, 111, 61)"
      },
      {
        "Description": "Set series 1 fill color",
        "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 1, false);",
        "Excel VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = oFill"
      }
    ]
  }
}
``````json
{
  "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
  "rows": [
    {
      "Description": "Get active sheet",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Description": "Set value of cell B1 to 2014",
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "Description": "Set value of cell C1 to 2015",
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "Description": "Set value of cell D1 to 2016",
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "Description": "Set value of cell A2 to 'Projected Revenue'",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "Description": "Set value of cell A3 to 'Estimated Costs'",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "Description": "Set value of cell B2 to 200",
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "Description": "Set value of cell B3 to 250",
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "Description": "Set value of cell B4 to 2020",
      "OnlyOffice JS": "oWorksheet.GetRange(\"B4\").SetValue(2020);",
      "Excel VBA": "oWorksheet.Range(\"B4\").Value = 2020"
    },
    {
      "Description": "Set value of cell C2 to 240",
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "Description": "Set value of cell C3 to 260",
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "Description": "Set value of cell C4 to 2021",
      "OnlyOffice JS": "oWorksheet.GetRange(\"C4\").SetValue(2021);",
      "Excel VBA": "oWorksheet.Range(\"C4\").Value = 2021"
    },
    {
      "Description": "Set value of cell D2 to 280",
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "Description": "Set value of cell D3 to 280",
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "Description": "Set value of cell D4 to 2022",
      "OnlyOffice JS": "oWorksheet.GetRange(\"D4\").SetValue(2022);",
      "Excel VBA": "oWorksheet.Range(\"D4\").Value = 2022"
    },
    {
      "Description": "Add 3D bar chart with specific range and properties",
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "Excel VBA": "Set oChart = oWorksheet.Shapes.AddChart2(251, xlBarClustered, 100, 70, 36000, 36000)\n' Adjust parameters as needed"
    },
    {
      "Description": "Set chart title to 'Financial Overview' with size 13",
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel VBA": "With oChart.Chart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Font.Size = 13\nEnd With"
    },
    {
      "Description": "Set category formula for the chart",
      "OnlyOffice JS": "oChart.SetCatFormula(\"'Sheet1'!$B$4:$D$4\");",
      "Excel VBA": "oChart.Chart.SetSourceData Source:=oWorksheet.Range(\"B4:D4\")"
    },
    {
      "Description": "Create solid fill with RGB color (51,51,51) and set series fill",
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
      "Excel VBA": "With oChart.Chart.SeriesCollection(1).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With"
    },
    {
      "Description": "Create solid fill with RGB color (255,111,61) and set series fill",
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
      "Excel VBA": "With oChart.Chart.SeriesCollection(2).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
    }
  ]
}
``````json
{
  "description": "This script sets values in specific cells on the active worksheet, adds a 3D bar chart based on the specified range, sets the chart title, and customizes the fill colors for the chart series and data points.",
  "methods": [
    {
      "description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set ws = ThisWorkbook.ActiveSheet"
    },
    {
      "description": "Set value in cell B1",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel_VBA": "ws.Range(\"B1\").Value = 2014"
    },
    {
      "description": "Set value in cell C1",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel_VBA": "ws.Range(\"C1\").Value = 2015"
    },
    {
      "description": "Set value in cell D1",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel_VBA": "ws.Range(\"D1\").Value = 2016"
    },
    {
      "description": "Set value in cell A2",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel_VBA": "ws.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "description": "Set value in cell A3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel_VBA": "ws.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "description": "Set value in cell B2",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel_VBA": "ws.Range(\"B2\").Value = 200"
    },
    {
      "description": "Set value in cell B3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel_VBA": "ws.Range(\"B3\").Value = 250"
    },
    {
      "description": "Set value in cell C2",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel_VBA": "ws.Range(\"C2\").Value = 240"
    },
    {
      "description": "Set value in cell C3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel_VBA": "ws.Range(\"C3\").Value = 260"
    },
    {
      "description": "Set value in cell D2",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel_VBA": "ws.Range(\"D2\").Value = 280"
    },
    {
      "description": "Set value in cell D3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel_VBA": "ws.Range(\"D3\").Value = 280"
    },
    {
      "description": "Add a 3D bar chart based on range A1:D3 with specified parameters",
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "Excel_VBA": "Set chartObj = ws.ChartObjects.Add(100, 100, 350, 250)\nSet chart = chartObj.Chart\nchart.SetSourceData Source:=ws.Range(\"A1:D3\")\nchart.ChartType = xlBar3DClustered"
    },
    {
      "description": "Set chart title",
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel_VBA": "chart.HasTitle = True\nchart.ChartTitle.Text = \"Financial Overview\""
    },
    {
      "description": "Create a solid fill with RGB color (51,51,51)",
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "Excel_VBA": "' VBA does not require separate creation of fill objects; setting the RGB directly"
    },
    {
      "description": "Set fill for series 0",
      "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 0, false);",
      "Excel_VBA": "chart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "description": "Create a solid fill with RGB color (255,111,61)",
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "' VBA does not require separate creation of fill objects; setting the RGB directly"
    },
    {
      "description": "Set fill for series 1",
      "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 1, false);",
      "Excel_VBA": "chart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "description": "Create a solid fill with RGB color (128,128,128)",
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));",
      "Excel_VBA": "' VBA does not require separate creation of fill objects; setting the RGB directly"
    },
    {
      "description": "Set fill for data point (series 0, point 0)",
      "OnlyOffice_JS": "oChart.SetDataPointFill(oFill, 0, 0, false);",
      "Excel_VBA": "chart.SeriesCollection(1).Points(1).Format.Fill.ForeColor.RGB = RGB(128, 128, 128)"
    }
  ]
}
``````json
[
  {
    "Description": "Set values in specific cells of the active worksheet",
    "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();\noWorksheet.GetRange(\"B1\").SetValue(2014);\noWorksheet.GetRange(\"C1\").SetValue(2015);\noWorksheet.GetRange(\"D1\").SetValue(2016);\noWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\noWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\noWorksheet.GetRange(\"B2\").SetValue(200);\noWorksheet.GetRange(\"B3\").SetValue(250);\noWorksheet.GetRange(\"C2\").SetValue(240);\noWorksheet.GetRange(\"C3\").SetValue(260);\noWorksheet.GetRange(\"D2\").SetValue(280);\noWorksheet.GetRange(\"D3\").SetValue(280);",
    "VBA": "Dim ws As Worksheet\nSet ws = ActiveSheet\nws.Range(\"B1\").Value = 2014\nws.Range(\"C1\").Value = 2015\nws.Range(\"D1\").Value = 2016\nws.Range(\"A2\").Value = \"Projected Revenue\"\nws.Range(\"A3\").Value = \"Estimated Costs\"\nws.Range(\"B2\").Value = 200\nws.Range(\"B3\").Value = 250\nws.Range(\"C2\").Value = 240\nws.Range(\"C3\").Value = 260\nws.Range(\"D2\").Value = 280\nws.Range(\"D3\").Value = 280"
  },
  {
    "Description": "Add a 3D bar chart to the worksheet with specified range and dimensions",
    "OnlyOfficeJS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
    "VBA": "Dim chartObj As ChartObject\nSet chartObj = ws.ChartObjects.Add(Left:=100, Top:=70, Width:=200, Height:=150)\nchartObj.Chart.ChartType = xlBar3D\nchartObj.Chart.SetSourceData Source:=ws.Range(\"A1:D3\")"
  },
  {
    "Description": "Set the title of the chart with specific text and font size",
    "OnlyOfficeJS": "oChart.SetTitle(\"Financial Overview\", 13);",
    "VBA": "With chartObj.Chart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Font.Size = 13\nEnd With"
  },
  {
    "Description": "Set the fill color for each series in the chart",
    "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
    "VBA": "With chartObj.Chart.SeriesCollection(1).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With\nWith chartObj.Chart.SeriesCollection(2).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
  },
  {
    "Description": "Set the outline for a specific data point in the chart",
    "OnlyOfficeJS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\noChart.SetDataPointOutLine(oStroke, 1, 0, false);",
    "VBA": "With chartObj.Chart.SeriesCollection(2).Points(1).Format.Line\n    .Visible = msoTrue\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With"
  }
]
``````json
{
  "Description": "This code sets values in specified cells, creates a 3D bar chart with specific dimensions, sets the chart title and font sizes, and applies specific fill colors to the chart series.",
  "Mapping": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel_VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "Excel_VBA": "Dim oChart As ChartObject\nSet oChart = oWorksheet.ChartObjects.Add(Left:=100, Top:=70, Width:=200, Height:=150)\noChart.Chart.ChartType = xl3DBar"
    },
    {
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel_VBA": "With oChart.Chart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Format.TextFrame2.TextRange.Font.Size = 13\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.SetHorAxisLablesFontSize(10);",
      "Excel_VBA": "With oChart.Chart.Axes(xlCategory)\n    .TickLabels.Font.Size = 10\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "Excel_VBA": "Dim oFill As FillFormat\nSet oFill = oChart.Chart.SeriesCollection(1).Format.Fill\noFill.Solid\noFill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 0, false);",
      "Excel_VBA": "With oChart.Chart.SeriesCollection(1).Format.Fill\n    .Visible = msoTrue\n    .Solid\n    .ForeColor.RGB = RGB(51, 51, 51)\nEnd With"
    },
    {
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "Set oFill = oChart.Chart.SeriesCollection(2).Format.Fill\noFill.Solid\noFill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 1, false);",
      "Excel_VBA": "With oChart.Chart.SeriesCollection(2).Format.Fill\n    .Visible = msoTrue\n    .Solid\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
    }
  ]
}
``````json
{
  "Table": [
    {
      "Description": "Get the active worksheet",
      "Excel VBA": "Set oWorksheet = ActiveSheet",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Set value 2014 in cell B1",
      "Excel VBA": "Range(\"B1\").Value = 2014",
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);"
    },
    {
      "Description": "Set value 2015 in cell C1",
      "Excel VBA": "Range(\"C1\").Value = 2015",
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);"
    },
    {
      "Description": "Set value 2016 in cell D1",
      "Excel VBA": "Range(\"D1\").Value = 2016",
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);"
    },
    {
      "Description": "Set header 'Projected Revenue' in cell A2",
      "Excel VBA": "Range(\"A2\").Value = \"Projected Revenue\"",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");"
    },
    {
      "Description": "Set header 'Estimated Costs' in cell A3",
      "Excel VBA": "Range(\"A3\").Value = \"Estimated Costs\"",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");"
    },
    {
      "Description": "Set value 200 in cell B2",
      "Excel VBA": "Range(\"B2\").Value = 200",
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);"
    },
    {
      "Description": "Set value 250 in cell B3",
      "Excel VBA": "Range(\"B3\").Value = 250",
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);"
    },
    {
      "Description": "Set value 240 in cell C2",
      "Excel VBA": "Range(\"C2\").Value = 240",
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);"
    },
    {
      "Description": "Set value 260 in cell C3",
      "Excel VBA": "Range(\"C3\").Value = 260",
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);"
    },
    {
      "Description": "Set value 280 in cell D2",
      "Excel VBA": "Range(\"D2\").Value = 280",
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);"
    },
    {
      "Description": "Set value 280 in cell D3",
      "Excel VBA": "Range(\"D3\").Value = 280",
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);"
    },
    {
      "Description": "Add a scatter chart with specified range and properties",
      "Excel VBA": "Set oChart = oWorksheet.Shapes.AddChart2(201, xlXYScatter).Chart\n" +
                    "oChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\n" +
                    "oChart.ChartArea.Left = 100\n" +
                    "oChart.ChartArea.Top = 70",
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"scatter\", 2, 100 * 36000, 70 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);"
    },
    {
      "Description": "Set the chart title to 'Financial Overview' with font size 13",
      "Excel VBA": "oChart.HasTitle = True\n" +
                    "oChart.ChartTitle.Text = \"Financial Overview\"\n" +
                    "oChart.ChartTitle.Font.Size = 13",
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);"
    },
    {
      "Description": "Set horizontal axis major tick mark to 'cross'",
      "Excel VBA": "oChart.Axes(xlCategory).MajorTickMark = xlTickMarkCross",
      "OnlyOffice JS": "oChart.SetHorAxisMajorTickMark(\"cross\");"
    },
    {
      "Description": "Create and set marker fill color to RGB(51,51,51)",
      "Excel VBA": "Dim oFill As FillFormat\n" +
                    "Set oFill = oChart.SeriesCollection(1).MarkerBackgroundColor\n" +
                    "oFill.RGB = RGB(51, 51, 51)",
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\n" +
                       "oChart.SetMarkerFill(oFill, 0, 0, true);"
    },
    {
      "Description": "Create and set marker outline with stroke width 0.5 and RGB(51,51,51)",
      "Excel VBA": "Dim oStroke As LineFormat\n" +
                    "Set oStroke = oChart.SeriesCollection(1).MarkerForegroundColor\n" +
                    "oStroke.Weight = 0.5\n" +
                    "oStroke.RGB = RGB(51, 51, 51)",
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\n" +
                       "oChart.SetMarkerOutLine(oStroke, 0, 0, true);"
    },
    {
      "Description": "Set second marker fill color to RGB(255,111,61)",
      "Excel VBA": "oChart.SeriesCollection(2).MarkerBackgroundColor.RGB = RGB(255, 111, 61)",
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\n" +
                       "oChart.SetMarkerFill(oFill, 1, 0, true);"
    },
    {
      "Description": "Set second marker outline with stroke width 0.5 and RGB(255,111,61)",
      "Excel VBA": "oChart.SeriesCollection(2).MarkerForegroundColor.Weight = 0.5\n" +
                    "oChart.SeriesCollection(2).MarkerForegroundColor.RGB = RGB(255, 111, 61)",
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\n" +
                       "oChart.SetMarkerOutLine(oStroke, 1, 0, true);"
    }
  ]
}
```Below is the Excel VBA equivalent for each OnlyOffice API method used in the provided code:

```json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
  },
  {
    "Description": "Set value in cell B1",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
    "Excel_VBA": "oWorksheet.Range(\"B1\").Value = 2014"
  },
  {
    "Description": "Set value in cell C1",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
    "Excel_VBA": "oWorksheet.Range(\"C1\").Value = 2015"
  },
  {
    "Description": "Set value in cell D1",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
    "Excel_VBA": "oWorksheet.Range(\"D1\").Value = 2016"
  },
  {
    "Description": "Set value in cell A2",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
    "Excel_VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
  },
  {
    "Description": "Set value in cell A3",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
    "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
  },
  {
    "Description": "Set value in cell B2",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
    "Excel_VBA": "oWorksheet.Range(\"B2\").Value = 200"
  },
  {
    "Description": "Set value in cell B3",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
    "Excel_VBA": "oWorksheet.Range(\"B3\").Value = 250"
  },
  {
    "Description": "Set value in cell C2",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
    "Excel_VBA": "oWorksheet.Range(\"C2\").Value = 240"
  },
  {
    "Description": "Set value in cell C3",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
    "Excel_VBA": "oWorksheet.Range(\"C3\").Value = 260"
  },
  {
    "Description": "Set value in cell D2",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
    "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 280"
  },
  {
    "Description": "Set value in cell D3",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
    "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 280"
  },
  {
    "Description": "Add a scatter chart",
    "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"scatter\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
    "Excel_VBA": "Set oChart = oWorksheet.Shapes.AddChart2(201, xlXYScatter, 100, 70, 200, 150).Chart"
  },
  {
    "Description": "Set chart title",
    "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
    "Excel_VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\nEnd With"
  },
  {
    "Description": "Set horizontal axis minor tick mark",
    "OnlyOffice_JS": "oChart.SetHorAxisMinorTickMark(\"out\");",
    "Excel_VBA": "oChart.Axes(xlCategory).MinorTickMark = xlTickMarkOutside"
  },
  {
    "Description": "Create solid fill with RGB color (51,51,51)",
    "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
    "Excel_VBA": "Dim oFill As Object\nSet oFill = CreateObject(\"Excel.ChartFillFormat\")\noFill.ForeColor.RGB = RGB(51, 51, 51)"
  },
  {
    "Description": "Set marker fill for series 0",
    "OnlyOffice_JS": "oChart.SetMarkerFill(oFill, 0, 0, true);",
    "Excel_VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)"
  },
  {
    "Description": "Create stroke with width 0.5 and RGB color (51,51,51)",
    "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));",
    "Excel_VBA": "With oChart.SeriesCollection(1).Format.Line\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(51, 51, 51)\nEnd With"
  },
  {
    "Description": "Set marker outline for series 0",
    "OnlyOffice_JS": "oChart.SetMarkerOutLine(oStroke, 0, 0, true);",
    "Excel_VBA": "oChart.SeriesCollection(1).Format.Line.Visible = msoTrue"
  },
  {
    "Description": "Create solid fill with RGB color (255,111,61)",
    "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
    "Excel_VBA": "Set oFill = CreateObject(\"Excel.ChartFillFormat\")\noFill.ForeColor.RGB = RGB(255, 111, 61)"
  },
  {
    "Description": "Set marker fill for series 1",
    "OnlyOffice_JS": "oChart.SetMarkerFill(oFill, 1, 0, true);",
    "Excel_VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
  },
  {
    "Description": "Create stroke with width 0.5 and RGB color (255,111,61)",
    "OnlyOffice_JS": "oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));",
    "Excel_VBA": "With oChart.SeriesCollection(2).Format.Line\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
  },
  {
    "Description": "Set marker outline for series 1",
    "OnlyOffice_JS": "oChart.SetMarkerOutLine(oStroke, 1, 0, true);",
    "Excel_VBA": "oChart.SeriesCollection(2).Format.Line.Visible = msoTrue"
  }
]
``````json
{
  "Description": "This code creates a financial overview chart with projected revenue and estimated costs from 2014 to 2016.",
  "Table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "VBA": "Dim oChart As Chart\nSet oChart = oWorksheet.Shapes.AddChart.Chart\nWith oChart\n    .SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\n    .ChartType = xlBar3D\n    .Parent.Left = 100\n    .Parent.Top = 70\n    .Parent.Width = 200\n    .Parent.Height = 150\nEnd With"
    },
    {
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "VBA": "oChart.HasTitle = True\n oChart.ChartTitle.Text = \"Financial Overview\"\n oChart.ChartTitle.Font.Size = 13"
    },
    {
      "OnlyOffice JS": "oChart.SetHorAxisOrientation(false);",
      "VBA": "oChart.Axes(xlCategory).ReversePlotOrder = False"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
      "VBA": "Dim oFill As FillFormat\nSet oFill = oChart.SeriesCollection(1).Format.Fill\nWith oFill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With"
    },
    {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
      "VBA": "Set oFill = oChart.SeriesCollection(2).Format.Fill\nWith oFill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
    }
  ]
}
``````json
{
  "description": "This code sets values in specific cells, adds a 3D bar chart with the given data range, sets the chart title, configures the horizontal axis tick label position, and sets fill colors for chart series.",
  "RAG_Table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "VBA": "Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "VBA": "Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "VBA": "Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "VBA": "Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "VBA": "Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "VBA": "Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "VBA": "Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "VBA": "Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "VBA": "Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "VBA": "Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "VBA": "Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "VBA": "Set oChart = oWorksheet.Shapes.AddChart2(251, xlBarClustered, 100, 70, 200, 150).Chart\noChart.SetSourceData Source:=Range(\"'Sheet1'!$A$1:$D$3\")"
    },
    {
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "VBA": "oChart.HasTitle = True\noChart.ChartTitle.Text = \"Financial Overview\"\n'oChart.ChartTitle.Font.Size = 13"
    },
    {
      "OnlyOffice_JS": "oChart.SetHorAxisTickLabelPosition(\"high\");",
      "VBA": "oChart.Axes(xlCategory).TickLabelPosition = xlTickLabelPositionHigh"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "VBA": "Dim oFill As FillFormat\nSet oFill = oChart.SeriesCollection(1).Format.Fill\noFill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 0, false);",
      "VBA": "With oChart.SeriesCollection(1).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\nEnd With"
    },
    {
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "VBA": "Set oFill = oChart.SeriesCollection(2).Format.Fill\noFill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 1, false);",
      "VBA": "With oChart.SeriesCollection(2).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
    }
  ]
}
``````json
{
  "Table": {
    "Headers": ["Description", "OnlyOffice JS Code", "Excel VBA Code"],
    "Rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOffice JS Code": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA Code": "Set oWorksheet = ActiveSheet"
      },
      {
        "Description": "Set value 2014 in cell B1",
        "OnlyOffice JS Code": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
        "Excel VBA Code": "oWorksheet.Range(\"B1\").Value = 2014"
      },
      {
        "Description": "Set value 2015 in cell C1",
        "OnlyOffice JS Code": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
        "Excel VBA Code": "oWorksheet.Range(\"C1\").Value = 2015"
      },
      {
        "Description": "Set value 2016 in cell D1",
        "OnlyOffice JS Code": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
        "Excel VBA Code": "oWorksheet.Range(\"D1\").Value = 2016"
      },
      {
        "Description": "Set value 'Projected Revenue' in cell A2",
        "OnlyOffice JS Code": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
        "Excel VBA Code": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
      },
      {
        "Description": "Set value 'Estimated Costs' in cell A3",
        "OnlyOffice JS Code": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
        "Excel VBA Code": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
      },
      {
        "Description": "Set value 200 in cell B2",
        "OnlyOffice JS Code": "oWorksheet.GetRange(\"B2\").SetValue(200);",
        "Excel VBA Code": "oWorksheet.Range(\"B2\").Value = 200"
      },
      {
        "Description": "Set value 250 in cell B3",
        "OnlyOffice JS Code": "oWorksheet.GetRange(\"B3\").SetValue(250);",
        "Excel VBA Code": "oWorksheet.Range(\"B3\").Value = 250"
      },
      {
        "Description": "Set value 240 in cell C2",
        "OnlyOffice JS Code": "oWorksheet.GetRange(\"C2\").SetValue(240);",
        "Excel VBA Code": "oWorksheet.Range(\"C2\").Value = 240"
      },
      {
        "Description": "Set value 260 in cell C3",
        "OnlyOffice JS Code": "oWorksheet.GetRange(\"C3\").SetValue(260);",
        "Excel VBA Code": "oWorksheet.Range(\"C3\").Value = 260"
      },
      {
        "Description": "Set value 280 in cell D2",
        "OnlyOffice JS Code": "oWorksheet.GetRange(\"D2\").SetValue(280);",
        "Excel VBA Code": "oWorksheet.Range(\"D2\").Value = 280"
      },
      {
        "Description": "Set value 280 in cell D3",
        "OnlyOffice JS Code": "oWorksheet.GetRange(\"D3\").SetValue(280);",
        "Excel VBA Code": "oWorksheet.Range(\"D3\").Value = 280"
      },
      {
        "Description": "Add a 3D bar chart to the worksheet",
        "OnlyOffice JS Code": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
        "Excel VBA Code": "Set oChart = oWorksheet.Shapes.AddChart2(201, xlBar3D, 100, 70, 200, 150).Chart\nWith oChart\n    .SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\nEnd With"
      },
      {
        "Description": "Set chart title to 'Financial Overview' with font size 13",
        "OnlyOffice JS Code": "oChart.SetTitle(\"Financial Overview\", 13);",
        "Excel VBA Code": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Font.Size = 13\nEnd With"
      },
      {
        "Description": "Set horizontal axis title to 'Year' with font size 11",
        "OnlyOffice JS Code": "oChart.SetHorAxisTitle(\"Year\", 11);",
        "Excel VBA Code": "With oChart.Axes(xlCategory)\n    .HasTitle = True\n    .AxisTitle.Text = \"Year\"\n    .AxisTitle.Font.Size = 11\nEnd With"
      },
      {
        "Description": "Set fill color of first series to RGB(51, 51, 51)",
        "OnlyOffice JS Code": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
        "Excel VBA Code": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)"
      },
      {
        "Description": "Set fill color of second series to RGB(255, 111, 61)",
        "OnlyOffice JS Code": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
        "Excel VBA Code": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
      }
    ]
  }
}
``````json
{
  "Description": "Populates cells with financial data and creates a 3D bar chart with custom fills for series and legend.",
  "Code": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel VBA": "Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel VBA": "Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel VBA": "Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel VBA": "Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel VBA": "Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel VBA": "Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel VBA": "Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel VBA": "Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel VBA": "Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel VBA": "Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel VBA": "Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "Excel VBA": "Set oChart = oWorksheet.Shapes.AddChart2(201, xlBarClustered, 100, 70, 200, 150).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    },
    {
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel VBA": "oChart.HasTitle = True\noChart.ChartTitle.Text = \"Financial Overview\""
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
      "Excel VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
      "Excel VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));\noChart.SetLegendFill(oFill);",
      "Excel VBA": "oChart.Legend.Format.Fill.ForeColor.RGB = RGB(128, 128, 128)"
    }
  ]
}
``````json
[
  {
    "Get the active worksheet":
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    }
  },
  {
    "Set value in cell B1 to 2014":
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel_VBA": "Range(\"B1\").Value = 2014"
    }
  },
  {
    "Set value in cell C1 to 2015":
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel_VBA": "Range(\"C1\").Value = 2015"
    }
  },
  {
    "Set value in cell D1 to 2016":
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel_VBA": "Range(\"D1\").Value = 2016"
    }
  },
  {
    "Set value in cell A2 to 'Projected Revenue'":
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel_VBA": "Range(\"A2\").Value = \"Projected Revenue\""
    }
  },
  {
    "Set value in cell A3 to 'Estimated Costs'":
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel_VBA": "Range(\"A3\").Value = \"Estimated Costs\""
    }
  },
  {
    "Set value in cell B2 to 200":
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel_VBA": "Range(\"B2\").Value = 200"
    }
  },
  {
    "Set value in cell B3 to 250":
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel_VBA": "Range(\"B3\").Value = 250"
    }
  },
  {
    "Set value in cell C2 to 240":
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel_VBA": "Range(\"C2\").Value = 240"
    }
  },
  {
    "Set value in cell C3 to 260":
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel_VBA": "Range(\"C3\").Value = 260"
    }
  },
  {
    "Set value in cell D2 to 280":
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel_VBA": "Range(\"D2\").Value = 280"
    }
  },
  {
    "Set value in cell D3 to 280":
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel_VBA": "Range(\"D3\").Value = 280"
    }
  },
  {
    "Add a 3D bar chart to the worksheet":
    {
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "Excel_VBA": "Set oChart = Charts.Add\nWith oChart\n    .ChartType = xlBar3D\n    .SetSourceData Source:=Range(\"A1:D3\")\n    .Location Where:=xlLocationAsObject, Name:=\"Sheet1\"\nEnd With"
    }
  },
  {
    "Set chart title to 'Financial Overview' with font size 13":
    {
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel_VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Font.Size = 13\nEnd With"
    }
  },
  {
    "Set legend font size to 13":
    {
      "OnlyOffice_JS": "oChart.SetLegendFontSize(13);",
      "Excel_VBA": "With oChart.Legend.Font\n    .Size = 13\nEnd With"
    }
  },
  {
    "Set series 0 fill color to RGB(51, 51, 51)":
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
      "Excel_VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)"
    }
  },
  {
    "Set series 1 fill color to RGB(255, 111, 61)":
    {
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
      "Excel_VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    }
  }
]
``````json
{
  "table": {
    "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
      },
      {
        "Description": "Set value of cell B1 to 2014",
        "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
        "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014"
      },
      {
        "Description": "Set value of cell C1 to 2015",
        "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
        "Excel VBA": "oWorksheet.Range(\"C1\").Value = 2015"
      },
      {
        "Description": "Set value of cell D1 to 2016",
        "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
        "Excel VBA": "oWorksheet.Range(\"D1\").Value = 2016"
      },
      {
        "Description": "Set value of cell A2 to 'Projected Revenue'",
        "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
        "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
      },
      {
        "Description": "Set value of cell A3 to 'Estimated Costs'",
        "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
        "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
      },
      {
        "Description": "Set value of cell B2 to 200",
        "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
        "Excel VBA": "oWorksheet.Range(\"B2\").Value = 200"
      },
      {
        "Description": "Set value of cell B3 to 250",
        "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
        "Excel VBA": "oWorksheet.Range(\"B3\").Value = 250"
      },
      {
        "Description": "Set value of cell C2 to 240",
        "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
        "Excel VBA": "oWorksheet.Range(\"C2\").Value = 240"
      },
      {
        "Description": "Set value of cell C3 to 260",
        "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
        "Excel VBA": "oWorksheet.Range(\"C3\").Value = 260"
      },
      {
        "Description": "Set value of cell D2 to 280",
        "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
        "Excel VBA": "oWorksheet.Range(\"D2\").Value = 280"
      },
      {
        "Description": "Set value of cell D3 to 280",
        "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
        "Excel VBA": "oWorksheet.Range(\"D3\").Value = 280"
      },
      {
        "Description": "Add a 3D bar chart",
        "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
        "Excel VBA": "Dim oChart As ChartObject\nSet oChart = oWorksheet.ChartObjects.Add(Left:=100, Top:=70, Width:=200, Height:=150)\nWith oChart.Chart\n    .SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\n    .ChartType = xlBar3D\nEnd With"
      },
      {
        "Description": "Set chart title to 'Financial Overview' with font size 13",
        "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
        "Excel VBA": "With oChart.Chart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Font.Size = 13\nEnd With"
      },
      {
        "Description": "Create a solid fill color (RGB: 51, 51, 51)",
        "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
        "Excel VBA": "Dim oFill As FillFormat\nSet oFill = oChart.Chart.SeriesCollection(1).Format.Fill\noFill.Solid\noFill.ForeColor.RGB = RGB(51, 51, 51)"
      },
      {
        "Description": "Set series 0 fill with the created color",
        "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 0, false);",
        "Excel VBA": "With oChart.Chart.SeriesCollection(1).Format.Fill\n    .Visible = msoTrue\n    .Solid\n    .ForeColor.RGB = RGB(51, 51, 51)\nEnd With"
      },
      {
        "Description": "Create a solid fill color (RGB: 255, 111, 61)",
        "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
        "Excel VBA": "Set oFill = oChart.Chart.SeriesCollection(2).Format.Fill\noFill.Solid\noFill.ForeColor.RGB = RGB(255, 111, 61)"
      },
      {
        "Description": "Set series 1 fill with the created color",
        "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 1, false);",
        "Excel VBA": "With oChart.Chart.SeriesCollection(2).Format.Fill\n    .Visible = msoTrue\n    .Solid\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
      },
      {
        "Description": "Create a stroke with width and color (RGB: 51, 51, 51)",
        "OnlyOffice JS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));",
        "Excel VBA": "With oChart.Chart.Legend.Format.Line\n    .Visible = msoTrue\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(51, 51, 51)\nEnd With"
      },
      {
        "Description": "Set legend outline with the created stroke",
        "OnlyOffice JS": "oChart.SetLegendOutLine(oStroke);",
        "Excel VBA": "With oChart.Chart.Legend.Format.Line\n    .Visible = msoTrue\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(51, 51, 51)\nEnd With"
      }
    ]
  }
}
```**Description:**  
This code creates a financial overview chart by setting specific cell values, adding a 3D bar chart, setting the chart title and legend position, and applying custom colors to the chart series.

```json
{
  "Methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim ws As Worksheet\nSet ws = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel VBA": "ws.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel VBA": "ws.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel VBA": "ws.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel VBA": "ws.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel VBA": "ws.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel VBA": "ws.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel VBA": "ws.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel VBA": "ws.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel VBA": "ws.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel VBA": "ws.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel VBA": "ws.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "Excel VBA": "Dim oChart As ChartObject\nSet oChart = ws.ChartObjects.Add(100, 70, 200, 150)\noChart.Chart.SetSourceData Source:=ws.Range(\"A1:D3\")\noChart.Chart.ChartType = xlBar3D"
    },
    {
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel VBA": "With oChart.Chart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Font.Size = 13\nEnd With"
    },
    {
      "OnlyOffice JS": "oChart.SetLegendPos(\"right\");",
      "Excel VBA": "oChart.Chart.Legend.Position = xlLegendPositionRight"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "Excel VBA": "Dim oFill As Long\noFill = RGB(51, 51, 51)"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 0, false);",
      "Excel VBA": "oChart.Chart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "oFill = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 1, false);",
      "Excel VBA": "oChart.Chart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    }
  ]
}
``````json
{
  "RAGTable": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set value in cell B1",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "VBA": "Range(\"B1\").Value = 2014"
    },
    {
      "Description": "Set value in cell C1",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "VBA": "Range(\"C1\").Value = 2015"
    },
    {
      "Description": "Set value in cell D1",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "VBA": "Range(\"D1\").Value = 2016"
    },
    {
      "Description": "Set value in cell A2",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "VBA": "Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "Description": "Set value in cell A3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "VBA": "Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "Description": "Set value in cell B2",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "VBA": "Range(\"B2\").Value = 200"
    },
    {
      "Description": "Set value in cell B3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "VBA": "Range(\"B3\").Value = 250"
    },
    {
      "Description": "Set value in cell C2",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "VBA": "Range(\"C2\").Value = 240"
    },
    {
      "Description": "Set value in cell C3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "VBA": "Range(\"C3\").Value = 260"
    },
    {
      "Description": "Set value in cell D2",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "VBA": "Range(\"D2\").Value = 280"
    },
    {
      "Description": "Set value in cell D3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "VBA": "Range(\"D3\").Value = 280"
    },
    {
      "Description": "Add a 3D bar chart",
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "VBA": "Set oChart = oWorksheet.Shapes.AddChart3(201, xlBarClustered, 100, 70, 200, 150).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    },
    {
      "Description": "Set chart title",
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "VBA": "oChart.HasTitle = True\noChart.ChartTitle.Text = \"Financial Overview\""
    },
    {
      "Description": "Create a solid fill color (RGB: 51, 51, 51)",
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "VBA": "Dim oFill As Object\nSet oFill = oChart.SeriesCollection(1).Format.Fill\noFill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "Description": "Set series 0 fill color",
      "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 0, false);",
      "VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "Description": "Create a solid fill color (RGB: 255, 111, 61)",
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "VBA": "Set oFill = oChart.SeriesCollection(2).Format.Fill\noFill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "Description": "Set series 1 fill color",
      "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 1, false);",
      "VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "Description": "Create a stroke with width and color",
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(1 * 15000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));",
      "VBA": "With oChart.ChartArea.Format.Line\n    .Visible = msoTrue\n    .Weight = 1.0\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
    },
    {
      "Description": "Set major horizontal gridlines stroke",
      "OnlyOffice_JS": "oChart.SetMajorHorizontalGridlines(oStroke);",
      "VBA": "With oChart.Axes(xlCategory).MajorGridlines.Format.Line\n    .Visible = msoTrue\n    .Weight = 1.0\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
    }
  ]
}
``````json
{
  "Description": "This example specifies the visual properties of the major vertical gridline.",
  "Table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "Excel VBA": "Set oChart = oWorksheet.Shapes.AddChart2(201, xlBar3D, 100, 70, 200, 150).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    },
    {
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel VBA": "oChart.HasTitle = True\n oChart.ChartTitle.Text = \"Financial Overview\"\n oChart.ChartTitle.Font.Size = 13"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "Excel VBA": "Set oFill = oChart.SeriesCollection(1).Format.Fill\n oFill.ForeColor.RGB = RGB(51, 51, 51)\n oFill.Solid"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 0, false);",
      "Excel VBA": "oChart.SeriesCollection(1).Format.Fill = oFill"
    },
    {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "Set oFill = oChart.SeriesCollection(2).Format.Fill\n oFill.ForeColor.RGB = RGB(255, 111, 61)\n oFill.Solid"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 1, false);",
      "Excel VBA": "oChart.SeriesCollection(2).Format.Fill = oFill"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(1 * 15000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));",
      "Excel VBA": "With oChart.Axes(xlValue).Format.Line\n .Weight = 1.5\n .ForeColor.RGB = RGB(255, 111, 61)\n .Visible = msoTrue\nEnd With"
    },
    {
      "OnlyOffice JS": "oChart.SetMajorVerticalGridlines(oStroke);",
      "Excel VBA": "oChart.Axes(xlValue).MajorGridlines.Format.Line = oStroke"
    }
  ]
}
``````json
{
  "RAG_Table": [
    {
      "Description": "Set value of cell B1 to 2014",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "VBA": "Range(\"B1\").Value = 2014"
    },
    {
      "Description": "Set value of cell C1 to 2015",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "VBA": "Range(\"C1\").Value = 2015"
    },
    {
      "Description": "Set value of cell D1 to 2016",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "VBA": "Range(\"D1\").Value = 2016"
    },
    {
      "Description": "Set value of cell A2 to 'Projected Revenue'",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "VBA": "Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "Description": "Set value of cell A3 to 'Estimated Costs'",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "VBA": "Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "Description": "Set value of cell B2 to 200",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "VBA": "Range(\"B2\").Value = 200"
    },
    {
      "Description": "Set value of cell B3 to 250",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "VBA": "Range(\"B3\").Value = 250"
    },
    {
      "Description": "Set value of cell C2 to 240",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "VBA": "Range(\"C2\").Value = 240"
    },
    {
      "Description": "Set value of cell C3 to 260",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "VBA": "Range(\"C3\").Value = 260"
    },
    {
      "Description": "Set value of cell D2 to 280",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "VBA": "Range(\"D2\").Value = 280"
    },
    {
      "Description": "Set value of cell D3 to 280",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "VBA": "Range(\"D3\").Value = 280"
    },
    {
      "Description": "Add a scatter chart with specified range and parameters",
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"scatter\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "VBA": "Dim oChart As Chart\nSet oChart = Charts.Add\nWith oChart\n    .SetSourceData Source:=Sheets(\"Sheet1\").Range(\"A1:D3\")\n    .ChartType = xlXYScatter\n    ' Additional parameters would need to be set accordingly\nEnd With"
    },
    {
      "Description": "Set the chart title to 'Financial Overview' with font size 13",
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "VBA": "oChart.HasTitle = True\noChart.ChartTitle.Text = \"Financial Overview\"\noChart.ChartTitle.Format.TextFrame2.TextRange.Font.Size = 13"
    },
    {
      "Description": "Create a solid fill with RGB color (51, 51, 51) and set it as marker fill for series 0, point 0",
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetMarkerFill(oFill, 0, 0, true);",
      "VBA": "With oChart.SeriesCollection(1).Points(1).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With"
    },
    {
      "Description": "Create a stroke with width 0.5 and RGB color (51, 51, 51) and set it as marker outline for series 0, point 0",
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\noChart.SetMarkerOutLine(oStroke, 0, 0, true);",
      "VBA": "With oChart.SeriesCollection(1).Points(1).Format.Line\n    .Visible = msoTrue\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With"
    },
    {
      "Description": "Create a solid fill with RGB color (255, 111, 61) and set it as marker fill for series 1, point 0",
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetMarkerFill(oFill, 1, 0, true);",
      "VBA": "With oChart.SeriesCollection(2).Points(1).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
    },
    {
      "Description": "Create a stroke with width 0.5 and RGB color (255, 111, 61) and set it as marker outline for series 1, point 0",
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\noChart.SetMarkerOutLine(oStroke, 1, 0, true);",
      "VBA": "With oChart.SeriesCollection(2).Points(1).Format.Line\n    .Visible = msoTrue\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
    }
  ]
}
```**Description:**  
This code populates an active worksheet with data, creates a scatter chart based on the specified data range, sets the chart title, and customizes the marker fill and outline for the chart series.

```json
{
  "EquivalentMethods": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel_VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"scatter\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "Excel_VBA": "Set oChart = oWorksheet.Shapes.AddChart2(-1, xlXYScatter).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\nWith oChart.Parent\n    .Left = 100\n    .Top = 70\n    .Width = 280 'Adjust as needed\n    .Height = 210 'Adjust as needed\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel_VBA": "oChart.HasTitle = True\nWith oChart.ChartTitle\n    .Text = \"Financial Overview\"\n    .Format.TextFrame2.TextRange.Font.Size = 13\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "Excel_VBA": "With oChart.SeriesCollection(1).Format.Fill\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Visible = msoTrue\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.SetMarkerFill(oFill, 0, 0, true);",
      "Excel_VBA": "With oChart.SeriesCollection(1).MarkerBackgroundColor\n    .RGB = RGB(51, 51, 51)\nEnd With\nWith oChart.SeriesCollection(1).MarkerForegroundColor\n    .RGB = RGB(51, 51, 51)\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));",
      "Excel_VBA": "With oChart.SeriesCollection(1).Format.Line\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Weight = 0.5\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.SetMarkerOutLine(oStroke, 0, 0, true);",
      "Excel_VBA": "With oChart.SeriesCollection(1).Format.Line\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Weight = 0.5\nEnd With"
    },
    {
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "With oChart.SeriesCollection(2).Format.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Visible = msoTrue\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.SetMarkerFill(oFill, 1, 0, true);",
      "Excel_VBA": "With oChart.SeriesCollection(2).MarkerBackgroundColor\n    .RGB = RGB(255, 111, 61)\nEnd With\nWith oChart.SeriesCollection(2).MarkerForegroundColor\n    .RGB = RGB(255, 111, 61)\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.SetMarkerOutLine(oStroke, 1, 0, true);",
      "Excel_VBA": "With oChart.SeriesCollection(2).Format.Line\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Weight = 0.5\nEnd With"
    }
  ]
}
``````json
{
  "table": [
    {
      "Description": "Get active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Description": "Set value of cell B1",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "Description": "Set value of cell C1",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "Description": "Set value of cell D1",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "Description": "Set value of cell A2",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "Description": "Set value of cell A3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "Description": "Set value of cell B2",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "Description": "Set value of cell B3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "Description": "Set value of cell C2",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "Description": "Set value of cell C3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "Description": "Set value of cell D2",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "Description": "Set value of cell D3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "Description": "Add a 3D bar chart",
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "VBA": "Set oChart = oWorksheet.Shapes.AddChart2(251, xlBar3D, 200, 100, 300, 200).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    },
    {
      "Description": "Set chart title",
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "VBA": "oChart.HasTitle = True\noChart.ChartTitle.Text = \"Financial Overview\"\nWith oChart.ChartTitle.Format.TextFrame2.TextRange.Font\n    .Size = 13\nEnd With"
    },
    {
      "Description": "Set fill color for series 0",
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
      "VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "Description": "Set fill color for series 1",
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
      "VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "Description": "Set minor horizontal gridlines stroke",
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(1 * 5000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\noChart.SetMinorHorizontalGridlines(oStroke);",
      "VBA": "With oChart.Axes(xlValue).MinorGridlines.Format.Line\n    .Visible = msoTrue\n    .Weight = 1\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
    }
  ]
}
``````json
{
  "description": "This code specifies the visual properties of the minor vertical gridline by setting cell values, adding a chart, setting the chart title, customizing series fill colors, and configuring gridline styles.",
  "table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel_VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "Excel_VBA": "Set oChart = oWorksheet.Shapes.AddChart2(201, xlBar3D, 100, 70, 200, 150).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    },
    {
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel_VBA": "oChart.HasTitle = True\noChart.ChartTitle.Text = \"Financial Overview\"\n'Excel VBA does not use a second parameter for title formatting by default"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "Excel_VBA": "Set oFill = oChart.SeriesCollection(1).Format.Fill\nWith oFill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 0, false);",
      "Excel_VBA": "With oChart.SeriesCollection(1).Format.Fill\n    .ForeColor.RGB = RGB(51, 51, 51)\nEnd With"
    },
    {
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "With oChart.SeriesCollection(2).Format.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Visible = msoTrue\n    .Solid\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 1, false);",
      "Excel_VBA": "With oChart.SeriesCollection(2).Format.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(1 * 5000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));",
      "Excel_VBA": "' Excel VBA handles gridlines differently; setting minor gridline properties requires accessing the axis properties\nDim oStrokeColor As Long\noStrokeColor = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "oChart.SetMinorVerticalGridlines(oStroke);",
      "Excel_VBA": "With oChart.Axes(xlValue)\n    .HasMinorGridlines = True\n    .MinorGridlines.Format.Line.Weight = 1\n    .MinorGridlines.Format.Line.ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
    }
  ]
}
``````json
{
  "description": "This example sets values in cells, adds a 3D bar chart, sets the chart title, and applies solid fills to chart series and the plot area.",
  "steps": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "Excel VBA": "Dim oChart As Chart\nSet oChart = oWorksheet.Shapes.AddChart2(251, xlBarStacked, 100, 70, 200, 150).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    },
    {
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel VBA": "oChart.HasTitle = True\noChart.ChartTitle.Text = \"Financial Overview\"\n'oChart.ChartTitle.Font.Size = 13 ' VBA uses points for font size by default"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "Excel VBA": "Dim oFill As ChartFillFormat\nSet oFill = oChart.SeriesCollection(1).Format.Fill\noFill.Visible = msoTrue\noFill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 0, false);",
      "Excel VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "Set oFill = oChart.SeriesCollection(2).Format.Fill\noFill.Visible = msoTrue\noFill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 1, false);",
      "Excel VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));",
      "Excel VBA": "Dim plotAreaFill As ChartFillFormat\nSet plotAreaFill = oChart.PlotArea.Format.Fill\nplotAreaFill.Visible = msoTrue\nplotAreaFill.ForeColor.RGB = RGB(128, 128, 128)"
    },
    {
      "OnlyOffice JS": "oChart.SetPlotAreaFill(oFill);",
      "Excel VBA": "oChart.PlotArea.Format.Fill.ForeColor.RGB = RGB(128, 128, 128)"
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
  },
  {
    "Description": "Set value of cell B1 to 2014",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
    "Excel_VBA": "oWorksheet.Range(\"B1\").Value = 2014"
  },
  {
    "Description": "Set value of cell C1 to 2015",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
    "Excel_VBA": "oWorksheet.Range(\"C1\").Value = 2015"
  },
  {
    "Description": "Set value of cell D1 to 2016",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
    "Excel_VBA": "oWorksheet.Range(\"D1\").Value = 2016"
  },
  {
    "Description": "Set label in cell A2 to 'Projected Revenue'",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
    "Excel_VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
  },
  {
    "Description": "Set label in cell A3 to 'Estimated Costs'",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
    "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
  },
  {
    "Description": "Set value of cell B2 to 200",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
    "Excel_VBA": "oWorksheet.Range(\"B2\").Value = 200"
  },
  {
    "Description": "Set value of cell B3 to 250",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
    "Excel_VBA": "oWorksheet.Range(\"B3\").Value = 250"
  },
  {
    "Description": "Set value of cell C2 to 240",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
    "Excel_VBA": "oWorksheet.Range(\"C2\").Value = 240"
  },
  {
    "Description": "Set value of cell C3 to 260",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
    "Excel_VBA": "oWorksheet.Range(\"C3\").Value = 260"
  },
  {
    "Description": "Set value of cell D2 to 280",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
    "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 280"
  },
  {
    "Description": "Set value of cell D3 to 280",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
    "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 280"
  },
  {
    "Description": "Add a 3D bar chart to the worksheet",
    "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
    "Excel_VBA": "Dim oChart As ChartObject\nSet oChart = oWorksheet.ChartObjects.Add(Left:=100, Top:=70, Width:=200, Height:=150)\nWith oChart.Chart\n    .ChartType = xlBar3D\n    .SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\nEnd With"
  },
  {
    "Description": "Set the chart title to 'Financial Overview'",
    "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
    "Excel_VBA": "oChart.Chart.HasTitle = True\noChart.Chart.ChartTitle.Text = \"Financial Overview\""
  },
  {
    "Description": "Set the fill color of the first series to RGB(51, 51, 51)",
    "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
    "Excel_VBA": "oChart.Chart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)"
  },
  {
    "Description": "Set the fill color of the second series to RGB(255, 111, 61)",
    "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
    "Excel_VBA": "oChart.Chart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
  },
  {
    "Description": "Set the plot area outline with a specific stroke",
    "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\noChart.SetPlotAreaOutLine(oStroke);",
    "Excel_VBA": "With oChart.Chart.PlotArea.Format.Line\n    .Visible = msoTrue\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
  }
]
``````json
{
  "Description": "This code sets cell values, creates a 3D bar chart, and formats the chart with titles and series fills.",
  "CodeEquivalence": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "Excel VBA": "Set oChart = oWorksheet.Shapes.AddChart2(201, xlBar3D, 100, 70, 200, 150).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    },
    {
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\nEnd With"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriaName(\"Projected Sales\", 0);",
      "Excel VBA": "oChart.SeriesCollection(1).Name = \"Projected Sales\""
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
      "Excel VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
      "Excel VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    }
  ]
}
``````json
{
  "table": {
    "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
      },
      {
        "Description": "Set value of cell B1 to 2014",
        "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
        "Excel VBA": "Range(\"B1\").Value = 2014"
      },
      {
        "Description": "Set value of cell C1 to 2015",
        "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
        "Excel VBA": "Range(\"C1\").Value = 2015"
      },
      {
        "Description": "Set value of cell D1 to 2016",
        "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
        "Excel VBA": "Range(\"D1\").Value = 2016"
      },
      {
        "Description": "Set value of cell A2 to 'Projected Revenue'",
        "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
        "Excel VBA": "Range(\"A2\").Value = \"Projected Revenue\""
      },
      {
        "Description": "Set value of cell A3 to 'Estimated Costs'",
        "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
        "Excel VBA": "Range(\"A3\").Value = \"Estimated Costs\""
      },
      {
        "Description": "Set value of cell B2 to 200",
        "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
        "Excel VBA": "Range(\"B2\").Value = 200"
      },
      {
        "Description": "Set value of cell B3 to 250",
        "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
        "Excel VBA": "Range(\"B3\").Value = 250"
      },
      {
        "Description": "Set value of cell B4 to 260",
        "OnlyOffice JS": "oWorksheet.GetRange(\"B4\").SetValue(260);",
        "Excel VBA": "Range(\"B4\").Value = 260"
      },
      {
        "Description": "Set value of cell C2 to 240",
        "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
        "Excel VBA": "Range(\"C2\").Value = 240"
      },
      {
        "Description": "Set value of cell C3 to 260",
        "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
        "Excel VBA": "Range(\"C3\").Value = 260"
      },
      {
        "Description": "Set value of cell C4 to 270",
        "OnlyOffice JS": "oWorksheet.GetRange(\"C4\").SetValue(270);",
        "Excel VBA": "Range(\"C4\").Value = 270"
      },
      {
        "Description": "Set value of cell D2 to 280",
        "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
        "Excel VBA": "Range(\"D2\").Value = 280"
      },
      {
        "Description": "Set value of cell D3 to 280",
        "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
        "Excel VBA": "Range(\"D3\").Value = 280"
      },
      {
        "Description": "Set value of cell D4 to 300",
        "OnlyOffice JS": "oWorksheet.GetRange(\"D4\").SetValue(300);",
        "Excel VBA": "Range(\"D4\").Value = 300"
      },
      {
        "Description": "Add a 3D bar chart to the worksheet",
        "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
        "Excel VBA": "Set oChart = oWorksheet.Shapes.AddChart2(251, xlBarStacked, 100, 70, 300, 200).Chart\nWith oChart\n    .SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\n    .ChartType = xlBar3DClustered\nEnd With"
      },
      {
        "Description": "Set the title of the chart to 'Financial Overview' with font size 13",
        "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
        "Excel VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Font.Size = 13\nEnd With"
      },
      {
        "Description": "Set series values for the chart",
        "OnlyOffice JS": "oChart.SetSeriaValues(\"'Sheet1'!$B$4:$D$4\", 1);",
        "Excel VBA": "oChart.SeriesCollection(1).Values = oWorksheet.Range(\"B4:D4\")"
      },
      {
        "Description": "Disable data labels for series points",
        "OnlyOffice JS": "oChart.SetShowPointDataLabel(1, 0, false, false, true, false);\noChart.SetShowPointDataLabel(1, 1, false, false, true, false);\noChart.SetShowPointDataLabel(1, 2, false, false, true, false);",
        "Excel VBA": "Dim i As Integer\nFor i = 1 To 3\n    oChart.SeriesCollection(1).Points(i).HasDataLabel = False\nNext i"
      },
      {
        "Description": "Set fill color of the first series to RGB(51, 51, 51)",
        "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
        "Excel VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)"
      },
      {
        "Description": "Set fill color of the second series to RGB(255, 111, 61)",
        "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
        "Excel VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
      }
    ]
  }
}
``````json
{
  "description": "This code sets values in a worksheet and creates a scatter chart with customized markers and outlines.",
  "methods": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel_VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B4\").SetValue(2017);",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = 2017"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C4\").SetValue(2018);",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = 2018"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D4\").SetValue(2019);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 2019"
    },
    {
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"scatter\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "Excel_VBA": "Set oChart = oWorksheet.Shapes.AddChart2(201, xlXYScatter).Chart\nWith oChart\n    .SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\n    .Parent.Left = 100\n    .Parent.Top = 70\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel_VBA": "oChart.HasTitle = True\noChart.ChartTitle.Text = \"Financial Overview\"\nWith oChart.ChartTitle.Format.TextFrame2.TextRange.Font\n    .Size = 13\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.SetSeriaXValues(\"'Sheet1'!$B$4:$D$4\", 0);",
      "Excel_VBA": "oChart.SeriesCollection(1).XValues = oWorksheet.Range(\"B4:D4\")"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "Excel_VBA": "With oChart.SeriesCollection(1).MarkerBackgroundColor\n    .RGB = RGB(51, 51, 51)\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.SetMarkerFill(oFill, 0, 0, true);",
      "Excel_VBA": "With oChart.SeriesCollection(1).Markers(1)\n    .MarkerBackgroundColor.RGB = RGB(51, 51, 51)\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));",
      "Excel_VBA": "' Excel VBA does not have a direct equivalent for stroke settings on markers."
    },
    {
      "OnlyOffice_JS": "oChart.SetMarkerOutLine(oStroke, 0, 0, true);",
      "Excel_VBA": "' Excel VBA does not have a direct equivalent for marker outlines."
    },
    {
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "With oChart.SeriesCollection(2).MarkerBackgroundColor\n    .RGB = RGB(255, 111, 61)\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.SetMarkerFill(oFill, 1, 0, true);",
      "Excel_VBA": "With oChart.SeriesCollection(2).Markers(1)\n    .MarkerBackgroundColor.RGB = RGB(255, 111, 61)\nEnd With"
    },
    {
      "OnlyOffice_JS": "oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));",
      "Excel_VBA": "' Excel VBA does not have a direct equivalent for stroke settings on markers."
    },
    {
      "OnlyOffice_JS": "oChart.SetMarkerOutLine(oStroke, 1, 0, true);",
      "Excel_VBA": "' Excel VBA does not have a direct equivalent for marker outlines."
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
    "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
  },
  {
    "Description": "Set value in cell B1",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
    "VBA": "oWorksheet.Range(\"B1\").Value = 2014"
  },
  {
    "Description": "Set value in cell C1",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
    "VBA": "oWorksheet.Range(\"C1\").Value = 2015"
  },
  {
    "Description": "Set value in cell D1",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
    "VBA": "oWorksheet.Range(\"D1\").Value = 2016"
  },
  {
    "Description": "Set value in cell A2",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
    "VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
  },
  {
    "Description": "Set value in cell A3",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
    "VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
  },
  {
    "Description": "Set value in cell B2",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
    "VBA": "oWorksheet.Range(\"B2\").Value = 200"
  },
  {
    "Description": "Set value in cell B3",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
    "VBA": "oWorksheet.Range(\"B3\").Value = 250"
  },
  {
    "Description": "Set value in cell C2",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
    "VBA": "oWorksheet.Range(\"C2\").Value = 240"
  },
  {
    "Description": "Set value in cell C3",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
    "VBA": "oWorksheet.Range(\"C3\").Value = 260"
  },
  {
    "Description": "Set value in cell D2",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
    "VBA": "oWorksheet.Range(\"D2\").Value = 280"
  },
  {
    "Description": "Set value in cell D3",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
    "VBA": "oWorksheet.Range(\"D3\").Value = 280"
  },
  {
    "Description": "Add a 3D bar chart to the worksheet",
    "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
    "VBA": "Dim oChart As ChartObject\nSet oChart = oWorksheet.ChartObjects.Add(Left:=100, Top:=70, Width:=200, Height:=300)\nWith oChart.Chart\n    .ChartType = xlBar3D\n    .SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\nEnd With"
  },
  {
    "Description": "Set the chart title",
    "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
    "VBA": "oChart.Chart.HasTitle = True\noChart.Chart.ChartTitle.Text = \"Financial Overview\"\nWith oChart.Chart.ChartTitle.Format.TextFrame2.TextRange.Font\n    .Size = 13\nEnd With"
  },
  {
    "Description": "Create a solid fill with RGB color (51, 51, 51)",
    "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
    "VBA": "Dim oFill As Color\noFill = RGB(51, 51, 51)"
  },
  {
    "Description": "Set fill for the first series in the chart",
    "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 0, false);",
    "VBA": "With oChart.Chart.SeriesCollection(1).Format.Fill\n    .ForeColor.RGB = oFill\nEnd With"
  },
  {
    "Description": "Create a solid fill with RGB color (255, 111, 61)",
    "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
    "VBA": "oFill = RGB(255, 111, 61)"
  },
  {
    "Description": "Set fill for the second series in the chart",
    "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 1, false);",
    "VBA": "With oChart.Chart.SeriesCollection(2).Format.Fill\n    .ForeColor.RGB = oFill\nEnd With"
  }
]
``````json
{
  "description": "This code sets cell values, creates a chart, assigns a title to the chart, applies fill colors to chart series, and outlines the chart series.",
  "methods": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel_VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "Excel_VBA": "Set oChart = oWorksheet.Shapes.AddChart2(240, xlBarClustered, 100, 70, 200, 150).Chart"
    },
    {
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel_VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "Excel_VBA": "With oChart.SeriesCollection(1).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 0, false);",
      "Excel_VBA": "oChart.SeriesCollection(1).Format.Fill = oFill"
    },
    {
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "With oChart.SeriesCollection(2).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 1, false);",
      "Excel_VBA": "oChart.SeriesCollection(2).Format.Fill = oFill"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));",
      "Excel_VBA": "With oChart.SeriesCollection(2).Format.Line\n    .Visible = msoTrue\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(51, 51, 51)\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.SetSeriesOutLine(oStroke, 1, false);",
      "Excel_VBA": ""
    }
  ]
}
``````json
[
  {
    "Description": "Set values to cells B1, C1, D1",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);\noWorksheet.GetRange(\"C1\").SetValue(2015);\noWorksheet.GetRange(\"D1\").SetValue(2016);",
    "Excel_VBA": "Range(\"B1\").Value = 2014\r\nRange(\"C1\").Value = 2015\r\nRange(\"D1\").Value = 2016"
  },
  {
    "Description": "Set values to cells A2, A3",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\noWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
    "Excel_VBA": "Range(\"A2\").Value = \"Projected Revenue\"\r\nRange(\"A3\").Value = \"Estimated Costs\""
  },
  {
    "Description": "Set values to cells B2, B3, C2, C3, D2, D3",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);\noWorksheet.GetRange(\"B3\").SetValue(250);\noWorksheet.GetRange(\"C2\").SetValue(240);\noWorksheet.GetRange(\"C3\").SetValue(260);\noWorksheet.GetRange(\"D2\").SetValue(280);\noWorksheet.GetRange(\"D3\").SetValue(280);",
    "Excel_VBA": "Range(\"B2\").Value = 200\r\nRange(\"B3\").Value = 250\r\nRange(\"C2\").Value = 240\r\nRange(\"C3\").Value = 260\r\nRange(\"D2\").Value = 280\r\nRange(\"D3\").Value = 280"
  },
  {
    "Description": "Add a 3D bar chart to the sheet",
    "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
    "Excel_VBA": "Charts.Add\r\nActiveChart.ChartType = xlBar3D\r\nActiveChart.SetSourceData Source:=Sheets(\"Sheet1\").Range(\"A1:D3\")\r\nActiveChart.Location Where:=xlLocationAsObject, Name:=\"Sheet1\"\r\nWith ActiveChart.Parent\r\n    .Left = 100\r\n    .Top = 70\r\n    ' Add additional positioning as needed\r\nEnd With"
  },
  {
    "Description": "Set chart title to 'Financial Overview' with font size 13",
    "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
    "Excel_VBA": "ActiveChart.HasTitle = True\r\nActiveChart.ChartTitle.Text = \"Financial Overview\"\r\nActiveChart.ChartTitle.Font.Size = 13"
  },
  {
    "Description": "Set data labels visibility: ShowSeriesName=false, ShowCategoryName=false, ShowValue=true, ShowPercentage=false",
    "OnlyOffice_JS": "oChart.SetShowDataLabels(false, false, true, false);",
    "Excel_VBA": "With ActiveChart.SeriesCollection(1)\r\n    .HasDataLabels = True\r\n    .DataLabels.ShowSeriesName = False\r\n    .DataLabels.ShowCategoryName = False\r\n    .DataLabels.ShowValue = True\r\n    .DataLabels.ShowPercentage = False\r\nEnd With"
  },
  {
    "Description": "Set series fill color for series 0 to RGB(51, 51, 51)",
    "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
    "Excel_VBA": "ActiveChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)"
  },
  {
    "Description": "Set series fill color for series 1 to RGB(255, 111, 61)",
    "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
    "Excel_VBA": "ActiveChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
  }
]
``````json
{
  "description": "Equivalent VBA code for each OnlyOffice API method used in the provided JavaScript code.",
  "methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "Excel VBA": "Dim oChart As Chart\nSet oChart = oWorksheet.Shapes.AddChart2(201, xlBarClustered, 100, 70, 200, 150).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    },
    {
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel VBA": "oChart.HasTitle = True\noChart.ChartTitle.Text = \"Financial Overview\"\nWith oChart.ChartTitle.Format.TextFrame2.TextRange.Font\n    .Size = 13\nEnd With"
    },
    {
      "OnlyOffice JS": "oChart.SetShowPointDataLabel(1, 0, false, false, true, false);",
      "Excel VBA": "Dim ser As Series\nSet ser = oChart.SeriesCollection(1)\nser.HasDataLabels = True\nWith ser.DataLabels\n    .ShowValue = False\n    .ShowCategoryName = False\n    .ShowSeriesName = True\n    .ShowPercentage = False\nEnd With"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
      "Excel VBA": "Dim oFillColor As Long\noFillColor = RGB(51, 51, 51)\noChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = oFillColor\n"
    },
    {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
      "Excel VBA": "oFillColor = RGB(255, 111, 61)\noChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = oFillColor\n"
    }
  ]
}
``````json
{
  "Description": "This example sets the fill to the chart title.",
  "OnlyOffice_JS_Code": "// This example sets the fill to the chart title.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.GetRange(\"B1\").SetValue(2014);\noWorksheet.GetRange(\"C1\").SetValue(2015);\noWorksheet.GetRange(\"D1\").SetValue(2016);\noWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\noWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\noWorksheet.GetRange(\"B2\").SetValue(200);\noWorksheet.GetRange(\"B3\").SetValue(250);\noWorksheet.GetRange(\"C2\").SetValue(240);\noWorksheet.GetRange(\"C3\").SetValue(260);\noWorksheet.GetRange(\"D2\").SetValue(280);\noWorksheet.GetRange(\"D3\").SetValue(280);\nvar oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\noChart.SetTitle(\"Financial Overview\", 13);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));\noChart.SetTitleFill(oFill);",
  "Excel_VBA_Code": "' This example sets the fill to the chart title.\nSub SetChartFill()\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ActiveSheet\n\n    oWorksheet.Range(\"B1\").Value = 2014\n    oWorksheet.Range(\"C1\").Value = 2015\n    oWorksheet.Range(\"D1\").Value = 2016\n    oWorksheet.Range(\"A2\").Value = \"Projected Revenue\"\n    oWorksheet.Range(\"A3\").Value = \"Estimated Costs\"\n    oWorksheet.Range(\"B2\").Value = 200\n    oWorksheet.Range(\"B3\").Value = 250\n    oWorksheet.Range(\"C2\").Value = 240\n    oWorksheet.Range(\"C3\").Value = 260\n    oWorksheet.Range(\"D2\").Value = 280\n    oWorksheet.Range(\"D3\").Value = 280\n\n    Dim oChart As Chart\n    Set oChart = oWorksheet.Shapes.AddChart2(251, xlBarClustered, 200, 100, 360, 270).Chart\n    oChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\n    oChart.ChartType = xlBar3D\n    oChart.HasTitle = True\n    oChart.ChartTitle.Text = \"Financial Overview\"\n    oChart.ChartTitle.Format.Fill.ForeColor.RGB = RGB(128, 128, 128)\n\n    ' Set series fill colors\n    oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)\n    oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)\nEnd Sub"
}
``````json
{
  "Description": "This example specifies the chart title with the specified parameters.",
  "CodeMapping": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "Excel VBA": "Set oChart = oWorksheet.Shapes.AddChart2(201, xlBar3D, 100, 70, 200, 150).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    },
    {
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\nEnd With"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "Excel VBA": "With oChart.SeriesCollection(1).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\nEnd With"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 0, false);",
      "Excel VBA": "oChart.SeriesCollection(1).Format.Fill = oFill"
    },
    {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "With oChart.SeriesCollection(2).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 1, false);",
      "Excel VBA": "oChart.SeriesCollection(2).Format.Fill = oFill"
    }
  ]
}
```// This code sets up data in a worksheet, adds a 3D bar chart based on the data, sets the chart title, applies specific fill colors to chart series, and outlines the chart title.

```json
{
  "RAGTable": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "Excel VBA": "Set oChart = oWorksheet.Shapes.AddChart2(3, xlBar3D, 100, 70).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    },
    {
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel VBA": "With oChart"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "Excel VBA": "Dim fillColor As Long\nfillColor = RGB(51, 51, 51)"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 0, false);",
      "Excel VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = fillColor"
    },
    {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "fillColor = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 1, false);",
      "Excel VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = fillColor"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));",
      "Excel VBA": "With oChart.ChartTitle.Format.Line\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(51, 51, 51)\nEnd With"
    },
    {
      "OnlyOffice JS": "oChart.SetTitleOutLine(oStroke);",
      "Excel VBA": ""
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Set oWorksheet = ActiveSheet"
  },
  {
    "Description": "Set cell B1 to 2014",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
    "Excel_VBA": "oWorksheet.Range(\"B1\").Value = 2014"
  },
  {
    "Description": "Set cell C1 to 2015",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
    "Excel_VBA": "oWorksheet.Range(\"C1\").Value = 2015"
  },
  {
    "Description": "Set cell D1 to 2016",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
    "Excel_VBA": "oWorksheet.Range(\"D1\").Value = 2016"
  },
  {
    "Description": "Set cell A2 to 'Projected Revenue'",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
    "Excel_VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
  },
  {
    "Description": "Set cell A3 to 'Estimated Costs'",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
    "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
  },
  {
    "Description": "Set cell B2 to 200",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
    "Excel_VBA": "oWorksheet.Range(\"B2\").Value = 200"
  },
  {
    "Description": "Set cell B3 to 250",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
    "Excel_VBA": "oWorksheet.Range(\"B3\").Value = 250"
  },
  {
    "Description": "Set cell C2 to 240",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
    "Excel_VBA": "oWorksheet.Range(\"C2\").Value = 240"
  },
  {
    "Description": "Set cell C3 to 260",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
    "Excel_VBA": "oWorksheet.Range(\"C3\").Value = 260"
  },
  {
    "Description": "Set cell D2 to 280",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
    "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 280"
  },
  {
    "Description": "Set cell D3 to 280",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
    "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 280"
  },
  {
    "Description": "Add a 3D bar chart with specified range and properties",
    "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
    "Excel_VBA": "Set oChart = oWorksheet.Shapes.AddChart2(251, xlBar3D, 100, 70, 200, 150).Chart"
  },
  {
    "Description": "Set chart title to 'Financial Overview' with font size 13",
    "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
    "Excel_VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Font.Size = 13\nEnd With"
  },
  {
    "Description": "Set vertical axis orientation to false",
    "OnlyOffice_JS": "oChart.SetVerAxisOrientation(false);",
    "Excel_VBA": "oChart.Axes(xlValue).ReversePlotOrder = False"
  },
  {
    "Description": "Create a solid fill with RGB (51,51,51) and set it to first series",
    "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
    "Excel_VBA": "With oChart.SeriesCollection(1).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With"
  },
  {
    "Description": "Create a solid fill with RGB (255,111,61) and set it to second series",
    "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
    "Excel_VBA": "With oChart.SeriesCollection(2).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
  }
]
``````json
{
  "table": [
    {
      "Description": "Get the active worksheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Description": "Set value in cell B1 to 2014",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "ExcelVBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "Description": "Set value in cell C1 to 2015",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "ExcelVBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "Description": "Set value in cell D1 to 2016",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "ExcelVBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "Description": "Set value in cell A2 to 'Projected Revenue'",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "ExcelVBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "Description": "Set value in cell A3 to 'Estimated Costs'",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "ExcelVBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "Description": "Set value in cell B2 to 200",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "ExcelVBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "Description": "Set value in cell B3 to 250",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "ExcelVBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "Description": "Set value in cell C2 to 240",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "ExcelVBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "Description": "Set value in cell C3 to 260",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "ExcelVBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "Description": "Set value in cell D2 to 280",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "ExcelVBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "Description": "Set value in cell D3 to 280",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "ExcelVBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "Description": "Add a 3D bar chart to the worksheet",
      "OnlyOfficeJS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "ExcelVBA": "Dim oChart As Chart\nSet oChart = oWorksheet.Shapes.AddChart3(201, xlBarClustered, 200, 100, 500, 300).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    },
    {
      "Description": "Set the chart title to 'Financial Overview' with font size 13",
      "OnlyOfficeJS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "ExcelVBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Format.TextFrame2.TextRange.Font.Size = 13\nEnd With"
    },
    {
      "Description": "Set the vertical axis title to 'USD In Hundred Thousands' with font size 10",
      "OnlyOfficeJS": "oChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);",
      "ExcelVBA": "With oChart.Axes(xlValue)\n    .HasTitle = True\n    .AxisTitle.Text = \"USD In Hundred Thousands\"\n    .AxisTitle.Format.TextFrame2.TextRange.Font.Size = 10\nEnd With"
    },
    {
      "Description": "Set the fill color of the first series to RGB(51, 51, 51)",
      "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
      "ExcelVBA": "With oChart.SeriesCollection(1).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With"
    },
    {
      "Description": "Set the fill color of the second series to RGB(255, 111, 61)",
      "OnlyOfficeJS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
      "ExcelVBA": "With oChart.SeriesCollection(2).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
    }
  ]
}
``````json
{
  "Description": "This code sets cell values, adds a 3D bar chart, sets the chart title and axis label font size, and applies series fill colors.",
  "Methods": [
    {
      "Action": "Get Active Sheet",
      "VBA": "Set oWorksheet = ActiveSheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Action": "Set Cell B1 to 2014",
      "VBA": "oWorksheet.Range(\"B1\").Value = 2014",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B1\").SetValue(2014);"
    },
    {
      "Action": "Set Cell C1 to 2015",
      "VBA": "oWorksheet.Range(\"C1\").Value = 2015",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C1\").SetValue(2015);"
    },
    {
      "Action": "Set Cell D1 to 2016",
      "VBA": "oWorksheet.Range(\"D1\").Value = 2016",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D1\").SetValue(2016);"
    },
    {
      "Action": "Set Cell A2 to 'Projected Revenue'",
      "VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\"",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");"
    },
    {
      "Action": "Set Cell A3 to 'Estimated Costs'",
      "VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\"",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");"
    },
    {
      "Action": "Set Cell B2 to 200",
      "VBA": "oWorksheet.Range(\"B2\").Value = 200",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B2\").SetValue(200);"
    },
    {
      "Action": "Set Cell B3 to 250",
      "VBA": "oWorksheet.Range(\"B3\").Value = 250",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B3\").SetValue(250);"
    },
    {
      "Action": "Set Cell C2 to 240",
      "VBA": "oWorksheet.Range(\"C2\").Value = 240",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C2\").SetValue(240);"
    },
    {
      "Action": "Set Cell C3 to 260",
      "VBA": "oWorksheet.Range(\"C3\").Value = 260",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C3\").SetValue(260);"
    },
    {
      "Action": "Set Cell D2 to 280",
      "VBA": "oWorksheet.Range(\"D2\").Value = 280",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D2\").SetValue(280);"
    },
    {
      "Action": "Set Cell D3 to 280",
      "VBA": "oWorksheet.Range(\"D3\").Value = 280",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D3\").SetValue(280);"
    },
    {
      "Action": "Add 3D Bar Chart",
      "VBA": "Set oChart = oWorksheet.Shapes.AddChart2(201, xlBarClustered, 100, 70, 200, 100).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")",
      "OnlyOfficeJS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);"
    },
    {
      "Action": "Set Chart Title to 'Financial Overview'",
      "VBA": "oChart.HasTitle = True\noChart.ChartTitle.Text = \"Financial Overview\"\n oChart.ChartTitle.Font.Size = 13",
      "OnlyOfficeJS": "oChart.SetTitle(\"Financial Overview\", 13);"
    },
    {
      "Action": "Set Vertical Axis Labels Font Size to 10",
      "VBA": "oChart.Axes(xlValue).TickLabels.Font.Size = 10",
      "OnlyOfficeJS": "oChart.SetVertAxisLablesFontSize(10);"
    },
    {
      "Action": "Set Series 0 Fill Color to RGB(51, 51, 51)",
      "VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)\noChart.SeriesCollection(1).Format.Fill.Visible = msoTrue",
      "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);"
    },
    {
      "Action": "Set Series 1 Fill Color to RGB(255, 111, 61)",
      "VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)\noChart.SeriesCollection(2).Format.Fill.Visible = msoTrue",
      "OnlyOfficeJS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);"
    }
  ]
}
``````json
{
  "Description": "This code populates specific cells with data, creates a scatter chart based on the data range A1:D3, sets the chart title to 'Financial Overview', configures the vertical axis major tick mark to 'cross', and customizes the marker fill and outline colors.",
  "CodeMapping": [
    {
      "OnlyOfficeJS": "Api.GetActiveSheet()",
      "VBAEquivalent": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B1\").SetValue(2014)",
      "VBAEquivalent": "Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C1\").SetValue(2015)",
      "VBAEquivalent": "Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D1\").SetValue(2016)",
      "VBAEquivalent": "Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\")",
      "VBAEquivalent": "Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\")",
      "VBAEquivalent": "Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B2\").SetValue(200)",
      "VBAEquivalent": "Range(\"B2\").Value = 200"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B3\").SetValue(250)",
      "VBAEquivalent": "Range(\"B3\").Value = 250"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C2\").SetValue(240)",
      "VBAEquivalent": "Range(\"C2\").Value = 240"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C3\").SetValue(260)",
      "VBAEquivalent": "Range(\"C3\").Value = 260"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D2\").SetValue(280)",
      "VBAEquivalent": "Range(\"D2\").Value = 280"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D3\").SetValue(280)",
      "VBAEquivalent": "Range(\"D3\").Value = 280"
    },
    {
      "OnlyOfficeJS": "oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"scatter\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000)",
      "VBAEquivalent": "Set oChart = oWorksheet.Shapes.AddChart2(201, xlXYScatter).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    },
    {
      "OnlyOfficeJS": "oChart.SetTitle(\"Financial Overview\", 13)",
      "VBAEquivalent": "oChart.HasTitle = True\noChart.ChartTitle.Text = \"Financial Overview\""
    },
    {
      "OnlyOfficeJS": "oChart.SetVertAxisMajorTickMark(\"cross\")",
      "VBAEquivalent": "oChart.Axes(xlValue).MajorTickMark = xlTickMarkCross"
    },
    {
      "OnlyOfficeJS": "Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51))",
      "VBAEquivalent": "Dim oFill As FillFormat\nSet oFill = oChart.SeriesCollection(1).Points(1).Format.Fill\noFill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "OnlyOfficeJS": "oChart.SetMarkerFill(oFill, 0, 0, true)",
      "VBAEquivalent": "With oChart.SeriesCollection(1).Points(1).MarkerBackgroundColor.RGB = RGB(51, 51, 51)"
    },
    {
      "OnlyOfficeJS": "Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)))",
      "VBAEquivalent": "With oChart.SeriesCollection(1).Points(1).Format.Line\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Weight = 0.5\nEnd With"
    },
    {
      "OnlyOfficeJS": "oChart.SetMarkerOutLine(oStroke, 0, 0, true)",
      "VBAEquivalent": "oChart.SeriesCollection(1).Points(1).Format.Line.Visible = msoTrue\noChart.SeriesCollection(1).Points(1).Format.Line.ForeColor.RGB = RGB(51, 51, 51)\n"
    },
    {
      "OnlyOfficeJS": "Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61))",
      "VBAEquivalent": "oChart.SeriesCollection(2).Points(1).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOfficeJS": "oChart.SetMarkerFill(oFill, 1, 0, true)",
      "VBAEquivalent": "With oChart.SeriesCollection(2).Points(1).MarkerBackgroundColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOfficeJS": "Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)))",
      "VBAEquivalent": "With oChart.SeriesCollection(2).Points(1).Format.Line\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Weight = 0.5\nEnd With"
    },
    {
      "OnlyOfficeJS": "oChart.SetMarkerOutLine(oStroke, 1, 0, true)",
      "VBAEquivalent": "oChart.SeriesCollection(2).Points(1).Format.Line.Visible = msoTrue\noChart.SeriesCollection(2).Points(1).Format.Line.ForeColor.RGB = RGB(255, 111, 61)"
    }
  ]
}
``````json
{
  "Description": "This example populates cells with financial data, adds a scatter chart titled 'Financial Overview', configures its title, sets minor tick marks for the vertical axis, and customizes marker fills and outlines.",
  "CodeMappings": [
    {
      "VBA": "Set oWorksheet = ActiveSheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "VBA": "oWorksheet.Range(\"B1\").Value = 2014\n" +
             "oWorksheet.Range(\"C1\").Value = 2015\n" +
             "oWorksheet.Range(\"D1\").Value = 2016",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B1\").SetValue(2014);\n" +
                      "oWorksheet.GetRange(\"C1\").SetValue(2015);\n" +
                      "oWorksheet.GetRange(\"D1\").SetValue(2016);"
    },
    {
      "VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\"\n" +
             "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\"",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\n" +
                      "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");"
    },
    {
      "VBA": "oWorksheet.Range(\"B2\").Value = 200\n" +
             "oWorksheet.Range(\"B3\").Value = 250\n" +
             "oWorksheet.Range(\"C2\").Value = 240\n" +
             "oWorksheet.Range(\"C3\").Value = 260\n" +
             "oWorksheet.Range(\"D2\").Value = 280\n" +
             "oWorksheet.Range(\"D3\").Value = 280",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B2\").SetValue(200);\n" +
                      "oWorksheet.GetRange(\"B3\").SetValue(250);\n" +
                      "oWorksheet.GetRange(\"C2\").SetValue(240);\n" +
                      "oWorksheet.GetRange(\"C3\").SetValue(260);\n" +
                      "oWorksheet.GetRange(\"D2\").SetValue(280);\n" +
                      "oWorksheet.GetRange(\"D3\").SetValue(280);"
    },
    {
      "VBA": "Set oChart = oWorksheet.Shapes.AddChart2(-1, xlXYScatter, 100, 70, 200, 150).Chart\n" +
             "oChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")",
      "OnlyOfficeJS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"scatter\", 2, 100 * 36000, 70 * 36000, 200, 150, 0, 2 * 36000, 5, 3 * 36000);"
    },
    {
      "VBA": "With oChart\n" +
             "    .HasTitle = True\n" +
             "    .ChartTitle.Text = \"Financial Overview\"\n" +
             "    .ChartTitle.Font.Size = 13\n" +
             "End With",
      "OnlyOfficeJS": "oChart.SetTitle(\"Financial Overview\", 13);"
    },
    {
      "VBA": "oChart.Axes(xlValue).MinorTickMark = xlTickMarkOutside",
      "OnlyOfficeJS": "oChart.SetVertAxisMinorTickMark(\"out\");"
    },
    {
      "VBA": "Set oFill = oChart.SeriesCollection(1).Format.Fill\n" +
             "oFill.ForeColor.RGB = RGB(51, 51, 51)\n" +
             "oFill.Solid",
      "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\n" +
                      "oChart.SetMarkerFill(oFill, 0, 0, true);"
    },
    {
      "VBA": "With oChart.SeriesCollection(1).Format.Line\n" +
             "    .Weight = 0.5\n" +
             "    .ForeColor.RGB = RGB(51, 51, 51)\n" +
             "End With",
      "OnlyOfficeJS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\n" +
                      "oChart.SetMarkerOutLine(oStroke, 0, 0, true);"
    },
    {
      "VBA": "With oChart.SeriesCollection(2).Format.Fill\n" +
             "    .ForeColor.RGB = RGB(255, 111, 61)\n" +
             "    .Solid\n" +
             "End With",
      "OnlyOfficeJS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\n" +
                      "oChart.SetMarkerFill(oFill, 1, 0, true);"
    },
    {
      "VBA": "With oChart.SeriesCollection(2).Format.Line\n" +
             "    .Weight = 0.5\n" +
             "    .ForeColor.RGB = RGB(255, 111, 61)\n" +
             "End With",
      "OnlyOfficeJS": "oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\n" +
                      "oChart.SetMarkerOutLine(oStroke, 1, 0, true);"
    }
  ]
}
```**Description:** The code populates worksheet cells with data, adds a 3D bar chart, sets the chart title and vertical axis tick label position, and applies solid fill colors to the chart series.

```json
{
  "methods": [
    {
      "Description": "Get active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "Description": "Set cell B1 value to 2014",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "Description": "Set cell C1 value to 2015",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "Description": "Set cell D1 value to 2016",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "Description": "Set cell A2 value to \"Projected Revenue\"",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel_VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "Description": "Set cell A3 value to \"Estimated Costs\"",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "Description": "Set cell B2 value to 200",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "Description": "Set cell B3 value to 250",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "Description": "Set cell C2 value to 240",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "Description": "Set cell C3 value to 260",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "Description": "Set cell D2 value to 280",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "Description": "Set cell D3 value to 280",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "Description": "Add 3D bar chart to the worksheet",
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "Excel_VBA": "Set oChart = oWorksheet.Shapes.AddChart2(201, xlBarClustered, 200, 100, 500, 400).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\noChart.ChartType = xlBarClustered"
    },
    {
      "Description": "Set chart title to \"Financial Overview\" with font size 13",
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel_VBA": "oChart.HasTitle = True\noChart.ChartTitle.Text = \"Financial Overview\"\noChart.ChartTitle.Format.TextFrame2.TextRange.Font.Size = 13"
    },
    {
      "Description": "Set vertical axis tick label position to high",
      "OnlyOffice_JS": "oChart.SetVertAxisTickLabelPosition(\"high\");",
      "Excel_VBA": "oChart.Axes(xlValue).TickLabels.Orientation = xlUpward"
    },
    {
      "Description": "Create solid fill color RGB(51,51,51) and apply to series 0 without inversion",
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
      "Excel_VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "Description": "Create solid fill color RGB(255,111,61) and apply to series 1 without inversion",
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
      "Excel_VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    }
  ]
}
``````json
{
  "description": "This code removes a specified series from the current chart, updates worksheet cells, creates a chart, sets its title, removes a series, sets the series fill color, and updates a cell with a message.",
  "code_mappings": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel_VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "Excel_VBA": "Dim oChart As ChartObject\nSet oChart = oWorksheet.ChartObjects.Add(Left:=100, Top:=70, Width:=200, Height:=210)\noChart.Chart.ChartType = xlBar3D\n oChart.Chart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    },
    {
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel_VBA": "With oChart.Chart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Font.Size = 13\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.RemoveSeria(1);",
      "Excel_VBA": "oChart.Chart.SeriesCollection(1).Delete"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "Dim oFillColor As Long\noFillColor = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 0, false);",
      "Excel_VBA": "With oChart.Chart.SeriesCollection(1).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = oFillColor\n    .Solid\nEnd With"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A5\").SetValue(\"The Estimated Costs series was removed from the current chart.\");",
      "Excel_VBA": "oWorksheet.Range(\"A5\").Value = \"The Estimated Costs series was removed from the current chart.\""
    }
  ]
}
``````json
{
  "Description": "This example changes the type of the first series of ApiChart class and inserts the new type into the document.",
  "Table": [
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOfficeJS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"comboBarLine\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "VBA": "Set oChart = oWorksheet.ChartObjects.Add(100, 70, 200, 150).Chart\n    oChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\n    oChart.ChartType = xlColumnClustered ' Equivalent to \"comboBarLine\"'"
    },
    {
      "OnlyOfficeJS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "VBA": "oChart.HasTitle = True\n    oChart.ChartTitle.Text = \"Financial Overview\"\n    oChart.ChartTitle.Font.Size = 13"
    },
    {
      "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\n    oChart.SetSeriesFill(oFill, 0, false);",
      "VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "OnlyOfficeJS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\n    oChart.SetSeriesFill(oFill, 1, false);",
      "VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOfficeJS": "var oSeries = oChart.GetSeries(0);\n    var sSeriesType = oSeries.GetChartType();\n    oWorksheet.GetRange(\"F1\").SetValue(\"Old Series Type = \" + sSeriesType);",
      "VBA": "Dim oSeries As Series\n    Set oSeries = oChart.SeriesCollection(1)\n    Dim sSeriesType As String\n    sSeriesType = oSeries.ChartType\n    oWorksheet.Range(\"F1\").Value = \"Old Series Type = \" & sSeriesType"
    },
    {
      "OnlyOfficeJS": "oSeries.ChangeChartType(\"area\");",
      "VBA": "oSeries.ChartType = xlArea"
    },
    {
      "OnlyOfficeJS": "sSeriesType = oSeries.GetChartType();\n    oWorksheet.GetRange(\"F2\").SetValue(\"New Series Type = \" + sSeriesType);",
      "VBA": "sSeriesType = oSeries.ChartType\n    oWorksheet.Range(\"F2\").Value = \"New Series Type = \" & sSeriesType"
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
  },
  {
    "Description": "Set value in cell B1 to 2014",
    "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
    "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014"
  },
  {
    "Description": "Set value in cell C1 to 2015",
    "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
    "Excel VBA": "oWorksheet.Range(\"C1\").Value = 2015"
  },
  {
    "Description": "Set value in cell D1 to 2016",
    "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
    "Excel VBA": "oWorksheet.Range(\"D1\").Value = 2016"
  },
  {
    "Description": "Set value in cell A2 to 'Projected Revenue'",
    "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
    "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
  },
  {
    "Description": "Set value in cell A3 to 'Estimated Costs'",
    "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
    "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
  },
  {
    "Description": "Set value in cell B2 to 200",
    "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
    "Excel VBA": "oWorksheet.Range(\"B2\").Value = 200"
  },
  {
    "Description": "Set value in cell B3 to 250",
    "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
    "Excel VBA": "oWorksheet.Range(\"B3\").Value = 250"
  },
  {
    "Description": "Set value in cell C2 to 240",
    "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
    "Excel VBA": "oWorksheet.Range(\"C2\").Value = 240"
  },
  {
    "Description": "Set value in cell C3 to 260",
    "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
    "Excel VBA": "oWorksheet.Range(\"C3\").Value = 260"
  },
  {
    "Description": "Set value in cell D2 to 280",
    "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
    "Excel VBA": "oWorksheet.Range(\"D2\").Value = 280"
  },
  {
    "Description": "Set value in cell D3 to 280",
    "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
    "Excel VBA": "oWorksheet.Range(\"D3\").Value = 280"
  },
  {
    "Description": "Add a combo bar-line chart to the worksheet",
    "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"comboBarLine\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
    "Excel VBA": "Dim oChart As Chart\nSet oChart = oWorksheet.Shapes.AddChart2(201, xlColumnClustered, 100, 70, 200, 150).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\noChart.ChartType = xlCombo\n' Additional settings may be required to match comboBarLine specifics"
  },
  {
    "Description": "Set the chart title to 'Financial Overview' with font size 13",
    "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
    "Excel VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Font.Size = 13\nEnd With"
  },
  {
    "Description": "Create a solid fill with RGB color (51, 51, 51)",
    "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
    "Excel VBA": "Dim oFill As FillFormat\nSet oFill = oChart.SeriesCollection(1).Format.Fill\noFill.ForeColor.RGB = RGB(51, 51, 51)"
  },
  {
    "Description": "Set the fill for the first series in the chart",
    "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 0, false);",
    "Excel VBA": "oChart.SeriesCollection(1).Format.Fill = oFill"
  },
  {
    "Description": "Create a solid fill with RGB color (255, 111, 61)",
    "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
    "Excel VBA": "Set oFill = oChart.SeriesCollection(2).Format.Fill\noFill.ForeColor.RGB = RGB(255, 111, 61)"
  },
  {
    "Description": "Set the fill for the second series in the chart",
    "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 1, false);",
    "Excel VBA": "oChart.SeriesCollection(2).Format.Fill = oFill"
  },
  {
    "Description": "Get the first series of the chart",
    "OnlyOffice JS": "var oSeries = oChart.GetSeries(0);",
    "Excel VBA": "Dim oSeries As Series\nSet oSeries = oChart.SeriesCollection(1)"
  },
  {
    "Description": "Get the chart type of the first series",
    "OnlyOffice JS": "var sSeriesType = oSeries.GetChartType();",
    "Excel VBA": "Dim sSeriesType As String\nsSeriesType = oSeries.ChartType"
  },
  {
    "Description": "Set the value of cell F1 to display the series type",
    "OnlyOffice JS": "oWorksheet.GetRange(\"F1\").SetValue(\"Series Type = \" + sSeriesType);",
    "Excel VBA": "oWorksheet.Range(\"F1\").Value = \"Series Type = \" & sSeriesType"
  }
]
``````json
{
  "header": "This code writes data to cells, adds a chart, sets chart title and series fills, and writes class type to a cell.",
  "table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveWorkbook.ActiveSheet",
      "Status": "Green"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014",
      "Status": "Green"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = 2015",
      "Status": "Green"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = 2016",
      "Status": "Green"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\"",
      "Status": "Green"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\"",
      "Status": "Green"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = 200",
      "Status": "Green"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = 250",
      "Status": "Green"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = 240",
      "Status": "Green"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = 260",
      "Status": "Green"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 280",
      "Status": "Green"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 280",
      "Status": "Green"
    },
    {
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"comboBarLine\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "Excel VBA": "Dim oChart As Chart\nSet oChart = Charts.Add\nWith oChart\n    .SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\n    .ChartType = xlColumnClustered ' Adjust chart type as needed\n    .Parent.Left = 100\n    .Parent.Top = 70\n    .Parent.Width = 200 ' Example width\n    .Parent.Height = 150 ' Example height\nEnd With",
      "Status": "Amber"
    },
    {
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Font.Size = 13\nEnd With",
      "Status": "Green"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "Excel VBA": "Dim oFill As Long\noFill = RGB(51, 51, 51)",
      "Status": "Amber"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 0, false);",
      "Excel VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)",
      "Status": "Green"
    },
    {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "oFill = RGB(255, 111, 61)",
      "Status": "Amber"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 1, false);",
      "Excel VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)",
      "Status": "Green"
    },
    {
      "OnlyOffice JS": "var oSeries = oChart.GetSeries(0);",
      "Excel VBA": "Dim oSeries As Series\nSet oSeries = oChart.SeriesCollection(1)",
      "Status": "Green"
    },
    {
      "OnlyOffice JS": "var sClassType = oSeries.GetClassType();",
      "Excel VBA": "Dim sClassType As String\nsClassType = TypeName(oSeries)",
      "Status": "Green"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"F1\").SetValue(\"Class Type = \" + sClassType);",
      "Excel VBA": "oWorksheet.Range(\"F1\").Value = \"Class Type = \" & sClassType",
      "Status": "Green"
    }
  ]
}
``````json
{
  "Description": "This example changes the type of the first series of a chart and inserts the new type into the document.",
  "Code": {
    "OnlyOffice_JS": "// This example changes the type of the first series of ApiChart class and inserts the new type into the document.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.GetRange(\"B1\").SetValue(2014);\noWorksheet.GetRange(\"C1\").SetValue(2015);\noWorksheet.GetRange(\"D1\").SetValue(2016);\noWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\noWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\noWorksheet.GetRange(\"B2\").SetValue(200);\noWorksheet.GetRange(\"B3\").SetValue(250);\noWorksheet.GetRange(\"C2\").SetValue(240);\noWorksheet.GetRange(\"C3\").SetValue(260);\noWorksheet.GetRange(\"D2\").SetValue(280);\noWorksheet.GetRange(\"D3\").SetValue(280);\nvar oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"comboBarLine\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\noChart.SetTitle(\"Financial Overview\", 13);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\nvar oSeries = oChart.GetSeries(0);\nvar sSeriesType = oSeries.GetChartType();\noWorksheet.GetRange(\"F1\").SetValue(\"Old Series Type = \" + sSeriesType);\noSeries.ChangeChartType(\"area\");\nsSeriesType = oSeries.GetChartType();\noWorksheet.GetRange(\"F2\").SetValue(\"New Series Type = \" + sSeriesType);",
    
    "Excel_VBA": "' This example changes the type of the first series of a chart and inserts the new type into the document.\nSub ChangeChartType()\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ActiveSheet\n\n    oWorksheet.Range(""B1"").Value = 2014\n    oWorksheet.Range(""C1"").Value = 2015\n    oWorksheet.Range(""D1"").Value = 2016\n    oWorksheet.Range(""A2"").Value = ""Projected Revenue""\n    oWorksheet.Range(""A3"").Value = ""Estimated Costs""\n    oWorksheet.Range(""B2"").Value = 200\n    oWorksheet.Range(""B3"").Value = 250\n    oWorksheet.Range(""C2"").Value = 240\n    oWorksheet.Range(""C3"").Value = 260\n    oWorksheet.Range(""D2"").Value = 280\n    oWorksheet.Range(""D3"").Value = 280\n\n    Dim oChart As Chart\n    Set oChart = oWorksheet.Shapes.AddChart2(201, xlColumnClustered, 100, 70, 300, 200).Chart\n    oChart.SetSourceData Source:=oWorksheet.Range(""A1:D3"")\n    oChart.ChartType = xlCombo\n    oChart.HasTitle = True\n    oChart.ChartTitle.Text = ""Financial Overview""\n\n    ' Set series fill colors\n    oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)\n    oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)\n\n    ' Change series type\n    oWorksheet.Range(""F1"").Value = ""Old Series Type = "" & oChart.SeriesCollection(1).ChartType\n    oChart.SeriesCollection(1).ChartType = xlArea\n    oWorksheet.Range(""F2"").Value = ""New Series Type = "" & oChart.SeriesCollection(1).ChartType\nEnd Sub"
  }
}
``````json
{
  "RAG_Table": [
    {
      "Description": "Get the active sheet",
      "Excel_VBA": "Set oWorksheet = ActiveSheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Set value 2014 in cell B1",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = 2014",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);"
    },
    {
      "Description": "Set value 2015 in cell C1",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = 2015",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);"
    },
    {
      "Description": "Set value 2016 in cell D1",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = 2016",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);"
    },
    {
      "Description": "Set label 'Projected Revenue' in cell A2",
      "Excel_VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\"",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");"
    },
    {
      "Description": "Set label 'Estimated Costs' in cell A3",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\"",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");"
    },
    {
      "Description": "Set value 200 in cell B2",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = 200",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);"
    },
    {
      "Description": "Set value 250 in cell B3",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = 250",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);"
    },
    {
      "Description": "Set value 240 in cell C2",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = 240",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);"
    },
    {
      "Description": "Set value 260 in cell C3",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = 260",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);"
    },
    {
      "Description": "Set value 280 in cell D2",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 280",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);"
    },
    {
      "Description": "Set value 280 in cell D3",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 280",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);"
    },
    {
      "Description": "Add a combo bar-line chart to the worksheet",
      "Excel_VBA": "Set oChart = oWorksheet.Shapes.AddChart2(201, xlColumnClustered, 100, 70, 300, 200).Chart\n" +
                    "oChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\n" +
                    "oChart.ChartType = xlColumnClustered",
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"comboBarLine\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);"
    },
    {
      "Description": "Set the chart title to 'Financial Overview' with font size 13",
      "Excel_VBA": "oChart.HasTitle = True\n" +
                    "oChart.ChartTitle.Text = \"Financial Overview\"\n" +
                    "oChart.ChartTitle.Font.Size = 13",
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);"
    },
    {
      "Description": "Create a solid fill with RGB color (51, 51, 51)",
      "Excel_VBA": "Set oFill = oChart.SeriesCollection(1).Format.Fill\n" +
                    "oFill.Solid\n" +
                    "oFill.ForeColor.RGB = RGB(51, 51, 51)",
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));"
    },
    {
      "Description": "Set the fill for the first series",
      "Excel_VBA": "oChart.SeriesCollection(1).Format.Fill = oFill\n" +
                    "oChart.SeriesCollection(1).Format.Fill.Visible = msoTrue",
      "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 0, false);"
    },
    {
      "Description": "Create a solid fill with RGB color (255, 111, 61)",
      "Excel_VBA": "Set oFill = oChart.SeriesCollection(2).Format.Fill\n" +
                    "oFill.Solid\n" +
                    "oFill.ForeColor.RGB = RGB(255, 111, 61)",
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));"
    },
    {
      "Description": "Set the fill for the second series",
      "Excel_VBA": "oChart.SeriesCollection(2).Format.Fill = oFill\n" +
                    "oChart.SeriesCollection(2).Format.Fill.Visible = msoTrue",
      "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 1, false);"
    },
    {
      "Description": "Get the first series of the chart",
      "Excel_VBA": "Set oSeries = oChart.SeriesCollection(1)",
      "OnlyOffice_JS": "var oSeries = oChart.GetSeries(0);"
    },
    {
      "Description": "Get the chart type of the first series",
      "Excel_VBA": "sSeriesType = oSeries.ChartType",
      "OnlyOffice_JS": "var sSeriesType = oSeries.GetChartType();"
    },
    {
      "Description": "Set the series type in cell F1",
      "Excel_VBA": "oWorksheet.Range(\"F1\").Value = \"Series Type = \" & sSeriesType",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"F1\").SetValue(\"Series Type = \" + sSeriesType);"
    }
  ]
}
``````json
[
  {
    "description": "Gets the active worksheet.",
    "onlyoffice_js": "var oWorksheet = Api.GetActiveSheet();",
    "excel_vba": "Set oWorksheet = Api.GetActiveSheet()"
  },
  {
    "description": "Sets the value of cell B1 to 2014.",
    "onlyoffice_js": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
    "excel_vba": "oWorksheet.Range(\"B1\").Value = 2014"
  },
  {
    "description": "Sets the value of cell C1 to 2015.",
    "onlyoffice_js": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
    "excel_vba": "oWorksheet.Range(\"C1\").Value = 2015"
  },
  {
    "description": "Sets the value of cell D1 to 2016.",
    "onlyoffice_js": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
    "excel_vba": "oWorksheet.Range(\"D1\").Value = 2016"
  },
  {
    "description": "Sets the value of cell A2 to 'Projected Revenue'.",
    "onlyoffice_js": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
    "excel_vba": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
  },
  {
    "description": "Sets the value of cell A3 to 'Estimated Costs'.",
    "onlyoffice_js": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
    "excel_vba": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
  },
  {
    "description": "Sets the value of cell B2 to 200.",
    "onlyoffice_js": "oWorksheet.GetRange(\"B2\").SetValue(200);",
    "excel_vba": "oWorksheet.Range(\"B2\").Value = 200"
  },
  {
    "description": "Sets the value of cell B3 to 250.",
    "onlyoffice_js": "oWorksheet.GetRange(\"B3\").SetValue(250);",
    "excel_vba": "oWorksheet.Range(\"B3\").Value = 250"
  },
  {
    "description": "Sets the value of cell C2 to 240.",
    "onlyoffice_js": "oWorksheet.GetRange(\"C2\").SetValue(240);",
    "excel_vba": "oWorksheet.Range(\"C2\").Value = 240"
  },
  {
    "description": "Sets the value of cell C3 to 260.",
    "onlyoffice_js": "oWorksheet.GetRange(\"C3\").SetValue(260);",
    "excel_vba": "oWorksheet.Range(\"C3\").Value = 260"
  },
  {
    "description": "Sets the value of cell D2 to 280.",
    "onlyoffice_js": "oWorksheet.GetRange(\"D2\").SetValue(280);",
    "excel_vba": "oWorksheet.Range(\"D2\").Value = 280"
  },
  {
    "description": "Sets the value of cell D3 to 280.",
    "onlyoffice_js": "oWorksheet.GetRange(\"D3\").SetValue(280);",
    "excel_vba": "oWorksheet.Range(\"D3\").Value = 280"
  },
  {
    "description": "Adds a combo bar-line chart to the worksheet with specified parameters.",
    "onlyoffice_js": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"comboBarLine\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
    "excel_vba": "Set oChart = oWorksheet.ChartObjects.Add(Left:=100, Top:=70, Width:=5, Height:=3).Chart\nWith oChart\n    .ChartType = xlComboBarLine\n    .SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\nEnd With"
  },
  {
    "description": "Sets the title of the chart to 'Financial Overview' with font size 13.",
    "onlyoffice_js": "oChart.SetTitle(\"Financial Overview\", 13);",
    "excel_vba": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Format.TextFrame2.TextRange.Font.Size = 13\nEnd With"
  },
  {
    "description": "Creates a solid fill with RGB color (51, 51, 51) and sets it for the first series of the chart.",
    "onlyoffice_js": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
    "excel_vba": "Dim oFill As Object\nSet oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51))\nWith oChart.SeriesCollection(1)\n    .Format.Fill.ForeColor.RGB = RGB(51, 51, 51)\nEnd With"
  },
  {
    "description": "Creates a solid fill with RGB color (255, 111, 61) and sets it for the second series of the chart.",
    "onlyoffice_js": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
    "excel_vba": "Set oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61))\nWith oChart.SeriesCollection(2)\n    .Format.Fill.ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
  },
  {
    "description": "Gets the first series of the chart.",
    "onlyoffice_js": "var oSeries = oChart.GetSeries(0);",
    "excel_vba": "Dim oSeries As Object\nSet oSeries = oChart.SeriesCollection(1)"
  },
  {
    "description": "Gets the class type of the series and sets it in cell F1.",
    "onlyoffice_js": "var sClassType = oSeries.GetClassType();\noWorksheet.GetRange(\"F1\").SetValue(\"Class Type = \" + sClassType);",
    "excel_vba": "Dim sClassType As String\nsClassType = oSeries.Name ' Assuming GetClassType returns the series name\noWorksheet.Range(\"F1\").Value = \"Class Type = \" & sClassType"
  }
]
```**This code sets values in cells and creates a 3D bar chart with a customized title and series colors.**

```json
{
  "RAGTable": [
    {
      "OnlyOffice JS": "Api.GetActiveSheet()",
      "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014)",
      "VBA": "Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015)",
      "VBA": "Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016)",
      "VBA": "Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\")",
      "VBA": "Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\")",
      "VBA": "Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200)",
      "VBA": "Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250)",
      "VBA": "Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240)",
      "VBA": "Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260)",
      "VBA": "Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280)",
      "VBA": "Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280)",
      "VBA": "Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice JS": "oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000)",
      "VBA": "Charts.Add\nSet oChart = ActiveChart\noChart.SetSourceData Source:=Range(\"A1:D3\")\noChart.ChartType = xlBar3D"
    },
    {
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13)",
      "VBA": "With ActiveChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Font.Size = 13\nEnd With"
    },
    {
      "OnlyOffice JS": "oChart.SetAxieNumFormat(\"0.00\", \"left\")",
      "VBA": "ActiveChart.Axes(xlCategory).NumberFormat = \"0.00\""
    },
    {
      "OnlyOffice JS": "Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51))",
      "VBA": "RGBColor = RGB(51, 51, 51)"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 0, false)",
      "VBA": "ActiveChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "OnlyOffice JS": "Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61))",
      "VBA": "RGBColor = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 1, false)",
      "VBA": "ActiveChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    }
  ]
}
``````json
{
  "Table": {
    "Headers": ["Description", "OnlyOfficeJS", "VBA"],
    "Rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
        "VBA": "Set oWorksheet = ActiveSheet"
      },
      {
        "Description": "Set value of cell B1 to 2014",
        "OnlyOfficeJS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
        "VBA": "oWorksheet.Range(\"B1\").Value = 2014"
      },
      {
        "Description": "Set value of cell C1 to 2015",
        "OnlyOfficeJS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
        "VBA": "oWorksheet.Range(\"C1\").Value = 2015"
      },
      {
        "Description": "Set value of cell D1 to 2016",
        "OnlyOfficeJS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
        "VBA": "oWorksheet.Range(\"D1\").Value = 2016"
      },
      {
        "Description": "Set value of cell A2 to 'Projected Revenue'",
        "OnlyOfficeJS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
        "VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
      },
      {
        "Description": "Set value of cell A3 to 'Estimated Costs'",
        "OnlyOfficeJS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
        "VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
      },
      {
        "Description": "Set value of cell B2 to 200",
        "OnlyOfficeJS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
        "VBA": "oWorksheet.Range(\"B2\").Value = 200"
      },
      {
        "Description": "Set value of cell B3 to 250",
        "OnlyOfficeJS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
        "VBA": "oWorksheet.Range(\"B3\").Value = 250"
      },
      {
        "Description": "Set value of cell B4 to 2020",
        "OnlyOfficeJS": "oWorksheet.GetRange(\"B4\").SetValue(2020);",
        "VBA": "oWorksheet.Range(\"B4\").Value = 2020"
      },
      {
        "Description": "Set value of cell C2 to 240",
        "OnlyOfficeJS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
        "VBA": "oWorksheet.Range(\"C2\").Value = 240"
      },
      {
        "Description": "Set value of cell C3 to 260",
        "OnlyOfficeJS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
        "VBA": "oWorksheet.Range(\"C3\").Value = 260"
      },
      {
        "Description": "Set value of cell C4 to 2021",
        "OnlyOfficeJS": "oWorksheet.GetRange(\"C4\").SetValue(2021);",
        "VBA": "oWorksheet.Range(\"C4\").Value = 2021"
      },
      {
        "Description": "Set value of cell D2 to 280",
        "OnlyOfficeJS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
        "VBA": "oWorksheet.Range(\"D2\").Value = 280"
      },
      {
        "Description": "Set value of cell D3 to 280",
        "OnlyOfficeJS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
        "VBA": "oWorksheet.Range(\"D3\").Value = 280"
      },
      {
        "Description": "Set value of cell D4 to 2022",
        "OnlyOfficeJS": "oWorksheet.GetRange(\"D4\").SetValue(2022);",
        "VBA": "oWorksheet.Range(\"D4\").Value = 2022"
      },
      {
        "Description": "Add a 3D bar chart to the worksheet",
        "OnlyOfficeJS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
        "VBA": "Set oChart = oWorksheet.Shapes.AddChart2(Style:=201, X:=100, Y:=70, Width:=300, Height:=200).Chart\n    oChart.ChartType = xl3DBar"
      },
      {
        "Description": "Set the chart title to 'Financial Overview' with font size 13",
        "OnlyOfficeJS": "oChart.SetTitle(\"Financial Overview\", 13);",
        "VBA": "oChart.HasTitle = True\n    oChart.ChartTitle.Text = \"Financial Overview\"\n    oChart.ChartTitle.Format.TextFrame2.TextRange.Font.Size = 13"
      },
      {
        "Description": "Set the category axis formula",
        "OnlyOfficeJS": "oChart.SetCatFormula(\"'Sheet1'!$B$4:$D$4\");",
        "VBA": "oChart.SetSourceData Source:=oWorksheet.Range(\"B4:D4\"), PlotBy:=xlColumns"
      },
      {
        "Description": "Create a solid fill with RGB color (51, 51, 51)",
        "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
        "VBA": "Set oFill = oChart.SeriesCollection(1).Format.Fill\n    oFill.ForeColor.RGB = RGB(51, 51, 51)\n    oFill.Visible = msoTrue"
      },
      {
        "Description": "Set the fill for the first series",
        "OnlyOfficeJS": "oChart.SetSeriesFill(oFill, 0, false);",
        "VBA": "oChart.SeriesCollection(1).Format.Fill.UserPicture \"\" ' Alternatively, set other properties as needed"
      },
      {
        "Description": "Create a solid fill with RGB color (255, 111, 61)",
        "OnlyOfficeJS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
        "VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
      },
      {
        "Description": "Set the fill for the second series",
        "OnlyOfficeJS": "oChart.SetSeriesFill(oFill, 1, false);",
        "VBA": "oChart.SeriesCollection(2).Format.Fill.Transparency = 0 ' Adjust as needed"
      }
    ]
  }
}
``````json
{
  "headers": ["Description", "OnlyOffice_JS", "Excel_VBA"],
  "rows": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set value of cell B1 to 2014",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel_VBA": "Range(\"B1\").Value = 2014"
    },
    {
      "Description": "Set value of cell C1 to 2015",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel_VBA": "Range(\"C1\").Value = 2015"
    },
    {
      "Description": "Set value of cell D1 to 2016",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel_VBA": "Range(\"D1\").Value = 2016"
    },
    {
      "Description": "Set value of cell A2 to 'Projected Revenue'",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel_VBA": "Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "Description": "Set value of cell A3 to 'Estimated Costs'",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel_VBA": "Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "Description": "Set value of cell B2 to 200",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel_VBA": "Range(\"B2\").Value = 200"
    },
    {
      "Description": "Set value of cell B3 to 250",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel_VBA": "Range(\"B3\").Value = 250"
    },
    {
      "Description": "Set value of cell C2 to 240",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel_VBA": "Range(\"C2\").Value = 240"
    },
    {
      "Description": "Set value of cell C3 to 260",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel_VBA": "Range(\"C3\").Value = 260"
    },
    {
      "Description": "Set value of cell D2 to 280",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel_VBA": "Range(\"D2\").Value = 280"
    },
    {
      "Description": "Set value of cell D3 to 280",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel_VBA": "Range(\"D3\").Value = 280"
    },
    {
      "Description": "Add a 3D bar chart to the worksheet",
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "Excel_VBA": "Set oChart = oWorksheet.Shapes.AddChart2(227, xlBar3D, 200, 100, 300, 200).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    },
    {
      "Description": "Set the chart title to 'Financial Overview' with font size 13",
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel_VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Font.Size = 13\nEnd With"
    },
    {
      "Description": "Set the first series fill color to RGB(51, 51, 51)",
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
      "Excel_VBA": "With oChart.SeriesCollection(1).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\nEnd With"
    },
    {
      "Description": "Set the second series fill color to RGB(255, 111, 61)",
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
      "Excel_VBA": "With oChart.SeriesCollection(2).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
    },
    {
      "Description": "Set the fill color of the first data point to RGB(128, 128, 128)",
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));\noChart.SetDataPointFill(oFill, 0, 0, false);",
      "Excel_VBA": "With oChart.SeriesCollection(1).Points(1).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(128, 128, 128)\nEnd With"
    }
  ]
}
``````json
{
  "RAG_Table": {
    "Headers": ["Description", "VBA Code", "OnlyOffice JS Code"],
    "Rows": [
      {
        "Description": "Get the active worksheet",
        "VBA Code": "Set oWorksheet = ThisWorkbook.ActiveSheet",
        "OnlyOffice JS Code": "var oWorksheet = Api.GetActiveSheet();"
      },
      {
        "Description": "Set value in cell B1 to 2014",
        "VBA Code": "Range(\"B1\").Value = 2014",
        "OnlyOffice JS Code": "oWorksheet.GetRange(\"B1\").SetValue(2014);"
      },
      {
        "Description": "Set value in cell C1 to 2015",
        "VBA Code": "Range(\"C1\").Value = 2015",
        "OnlyOffice JS Code": "oWorksheet.GetRange(\"C1\").SetValue(2015);"
      },
      {
        "Description": "Set value in cell D1 to 2016",
        "VBA Code": "Range(\"D1\").Value = 2016",
        "OnlyOffice JS Code": "oWorksheet.GetRange(\"D1\").SetValue(2016);"
      },
      {
        "Description": "Set value in cell A2 to 'Projected Revenue'",
        "VBA Code": "Range(\"A2\").Value = \"Projected Revenue\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");"
      },
      {
        "Description": "Set value in cell A3 to 'Estimated Costs'",
        "VBA Code": "Range(\"A3\").Value = \"Estimated Costs\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");"
      },
      {
        "Description": "Set value in cell B2 to 200",
        "VBA Code": "Range(\"B2\").Value = 200",
        "OnlyOffice JS Code": "oWorksheet.GetRange(\"B2\").SetValue(200);"
      },
      {
        "Description": "Set value in cell B3 to 250",
        "VBA Code": "Range(\"B3\").Value = 250",
        "OnlyOffice JS Code": "oWorksheet.GetRange(\"B3\").SetValue(250);"
      },
      {
        "Description": "Set value in cell C2 to 240",
        "VBA Code": "Range(\"C2\").Value = 240",
        "OnlyOffice JS Code": "oWorksheet.GetRange(\"C2\").SetValue(240);"
      },
      {
        "Description": "Set value in cell C3 to 260",
        "VBA Code": "Range(\"C3\").Value = 260",
        "OnlyOffice JS Code": "oWorksheet.GetRange(\"C3\").SetValue(260);"
      },
      {
        "Description": "Set value in cell D2 to 280",
        "VBA Code": "Range(\"D2\").Value = 280",
        "OnlyOffice JS Code": "oWorksheet.GetRange(\"D2\").SetValue(280);"
      },
      {
        "Description": "Set value in cell D3 to 280",
        "VBA Code": "Range(\"D3\").Value = 280",
        "OnlyOffice JS Code": "oWorksheet.GetRange(\"D3\").SetValue(280);"
      },
      {
        "Description": "Add a 3D bar chart to the worksheet",
        "VBA Code": "Set oChart = oWorksheet.Shapes.AddChart2(227, xlBarClustered, 200, 70, 300, 200).Chart",
        "OnlyOffice JS Code": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);"
      },
      {
        "Description": "Set chart title to 'Financial Overview' with font size 13",
        "VBA Code": "oChart.HasTitle = True\noChart.ChartTitle.Text = \"Financial Overview\"\nWith oChart.ChartTitle.Format.TextFrame2.TextRange.Font\n    .Size = 13\nEnd With",
        "OnlyOffice JS Code": "oChart.SetTitle(\"Financial Overview\", 13);"
      },
      {
        "Description": "Create and set series fill color to RGB(51,51,51)",
        "VBA Code": "With oChart.SeriesCollection(1).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With",
        "OnlyOffice JS Code": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);"
      },
      {
        "Description": "Create and set series fill color to RGB(255,111,61)",
        "VBA Code": "With oChart.SeriesCollection(2).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With",
        "OnlyOffice JS Code": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);"
      },
      {
        "Description": "Create and set data point outline",
        "VBA Code": "With oChart.SeriesCollection(2).Format.Line\n    .Visible = msoTrue\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(51, 51, 51)\nEnd With",
        "OnlyOffice JS Code": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\noChart.SetDataPointOutLine(oStroke, 1, 0, false);"
      }
    ]
  }
}
``````json
{
  "Table": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Description": "Set value of cell B1 to 2014",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "Description": "Set value of cell C1 to 2015",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "Description": "Set value of cell D1 to 2016",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "Description": "Set value of cell A2 to 'Projected Revenue'",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel_VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "Description": "Set value of cell A3 to 'Estimated Costs'",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "Description": "Set value of cell B2 to 200",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "Description": "Set value of cell B3 to 250",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "Description": "Set value of cell C2 to 240",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "Description": "Set value of cell C3 to 260",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "Description": "Set value of cell D2 to 280",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "Description": "Set value of cell D3 to 280",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "Description": "Add a 3D bar chart with specified range and properties",
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "Excel_VBA": "Set oChart = oWorksheet.Shapes.AddChart2(201, xl3DBar).Chart\nWith oChart\n    .SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\n    .Parent.Left = 100\n    .Parent.Top = 70\n    .Parent.Width = 200\n    .Parent.Height = 180\nEnd With"
    },
    {
      "Description": "Set chart title to 'Financial Overview' with font size 13",
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel_VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Format.TextFrame2.TextRange.Font.Size = 13\nEnd With"
    },
    {
      "Description": "Set horizontal axis labels font size to 10",
      "OnlyOffice_JS": "oChart.SetHorAxisLablesFontSize(10);",
      "Excel_VBA": "With oChart.Axes(xlCategory)\n    .TickLabels.Font.Size = 10\nEnd With"
    },
    {
      "Description": "Set fill color of first series to RGB(51, 51, 51)",
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
      "Excel_VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)\n"
    },
    {
      "Description": "Set fill color of second series to RGB(255, 111, 61)",
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
      "Excel_VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)\n"
    }
  ]
}
``````json
{
  "description": "Equivalent methods in Excel VBA for OnlyOffice JS code that manipulates worksheet data, adds and configures a scatter chart with specific formatting.",
  "EquivalentMethods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"scatter\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "Excel VBA": "Set oChart = oWorksheet.Shapes.AddChart2(Style:=xlXYScatter).Chart\nWith oChart\n    .SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\n    .Parent.Left = 100\n    .Parent.Top = 70\n    .Parent.Width = 500 ' Example width\n    .Parent.Height = 300 ' Example height\nEnd With"
    },
    {
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Format.TextFrame2.TextRange.Font.Size = 13\nEnd With"
    },
    {
      "OnlyOffice JS": "oChart.SetHorAxisMajorTickMark(\"cross\");",
      "Excel VBA": "With oChart.Axes(xlCategory)\n    .MajorTickMark = xlTickMarkCross\nEnd With"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "Excel VBA": "Dim oFill As Long\noFill = RGB(51, 51, 51)"
    },
    {
      "OnlyOffice JS": "oChart.SetMarkerFill(oFill, 0, 0, true);",
      "Excel VBA": "With oChart.SeriesCollection(1).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = oFill\n    .Solid\nEnd With"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));",
      "Excel VBA": "With oChart.SeriesCollection(1).Format.Line\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Visible = msoTrue\nEnd With"
    },
    {
      "OnlyOffice JS": "oChart.SetMarkerOutLine(oStroke, 0, 0, true);",
      "Excel VBA": "With oChart.SeriesCollection(1).Format.Line\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Visible = msoTrue\nEnd With"
    },
    {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "oFill = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "oChart.SetMarkerFill(oFill, 1, 0, true);",
      "Excel VBA": "With oChart.SeriesCollection(2).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = oFill\n    .Solid\nEnd With"
    },
    {
      "OnlyOffice JS": "oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));",
      "Excel VBA": "With oChart.SeriesCollection(2).Format.Line\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Visible = msoTrue\nEnd With"
    },
    {
      "OnlyOffice JS": "oChart.SetMarkerOutLine(oStroke, 1, 0, true);",
      "Excel VBA": "With oChart.SeriesCollection(2).Format.Line\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Visible = msoTrue\nEnd With"
    }
  ]
}
``````json
{
  "Description": "This code populates a worksheet with data and creates a scatter chart, setting various properties like titles, axis tick marks, and marker styles using OnlyOffice JS and their Excel VBA equivalents.",
  "Mappings": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"scatter\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "Excel VBA": "Set oChart = oWorksheet.Shapes.AddChart2(XlChartType.xlXYScatter, 100, 70, 200, 150).Chart"
    },
    {
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Format.TextFrame2.TextRange.Font.Size = 13\nEnd With"
    },
    {
      "OnlyOffice JS": "oChart.SetHorAxisMinorTickMark(\"out\");",
      "Excel VBA": "oChart.Axes(xlCategory).MinorTickMark = xlTickMarkOutside"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "Excel VBA": "oChart.SeriesCollection(1).MarkerFormat.Fill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "OnlyOffice JS": "oChart.SetMarkerFill(oFill, 0, 0, true);",
      "Excel VBA": "oChart.SeriesCollection(1).MarkerFormat.Fill.Visible = msoTrue"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));",
      "Excel VBA": "With oChart.SeriesCollection(1).MarkerFormat.Line\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Visible = msoTrue\nEnd With"
    },
    {
      "OnlyOffice JS": "oChart.SetMarkerOutLine(oStroke, 0, 0, true);",
      "Excel VBA": "oChart.SeriesCollection(1).MarkerFormat.Line.Visible = msoTrue"
    },
    {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "oChart.SeriesCollection(2).MarkerFormat.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "oChart.SetMarkerFill(oFill, 1, 0, true);",
      "Excel VBA": "oChart.SeriesCollection(2).MarkerFormat.Fill.Visible = msoTrue"
    },
    {
      "OnlyOffice JS": "oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));",
      "Excel VBA": "With oChart.SeriesCollection(2).MarkerFormat.Line\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Visible = msoTrue\nEnd With"
    },
    {
      "OnlyOffice JS": "oChart.SetMarkerOutLine(oStroke, 1, 0, true);",
      "Excel VBA": "oChart.SeriesCollection(2).MarkerFormat.Line.Visible = msoTrue"
    }
  ]
}
``````json
{
  "table": {
    "headers": ["Description", "VBA", "OnlyOffice_JS"],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "VBA": "Set oWorksheet = ActiveSheet",
        "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();"
      },
      {
        "Description": "Set value of cell B1 to 2014",
        "VBA": "oWorksheet.Range(\"B1\").Value = 2014",
        "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);"
      },
      {
        "Description": "Set value of cell C1 to 2015",
        "VBA": "oWorksheet.Range(\"C1\").Value = 2015",
        "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);"
      },
      {
        "Description": "Set value of cell D1 to 2016",
        "VBA": "oWorksheet.Range(\"D1\").Value = 2016",
        "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);"
      },
      {
        "Description": "Set value of cell A2 to 'Projected Revenue'",
        "VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\"",
        "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");"
      },
      {
        "Description": "Set value of cell A3 to 'Estimated Costs'",
        "VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\"",
        "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");"
      },
      {
        "Description": "Set value of cell B2 to 200",
        "VBA": "oWorksheet.Range(\"B2\").Value = 200",
        "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);"
      },
      {
        "Description": "Set value of cell B3 to 250",
        "VBA": "oWorksheet.Range(\"B3\").Value = 250",
        "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);"
      },
      {
        "Description": "Set value of cell C2 to 240",
        "VBA": "oWorksheet.Range(\"C2\").Value = 240",
        "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);"
      },
      {
        "Description": "Set value of cell C3 to 260",
        "VBA": "oWorksheet.Range(\"C3\").Value = 260",
        "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);"
      },
      {
        "Description": "Set value of cell D2 to 280",
        "VBA": "oWorksheet.Range(\"D2\").Value = 280",
        "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);"
      },
      {
        "Description": "Set value of cell D3 to 280",
        "VBA": "oWorksheet.Range(\"D3\").Value = 280",
        "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);"
      },
      {
        "Description": "Add a 3D bar chart to the worksheet",
        "VBA": "Set oChart = oWorksheet.Shapes.AddChart2(251, xlBarClustered, 100, 70, 200, 150).Chart\n oChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")",
        "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);"
      },
      {
        "Description": "Set the chart title to 'Financial Overview' with font size 13",
        "VBA": "oChart.HasTitle = True\n oChart.ChartTitle.Text = \"Financial Overview\"\n oChart.ChartTitle.Font.Size = 13",
        "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);"
      },
      {
        "Description": "Set horizontal axis orientation to false",
        "VBA": "oChart.Axes(xlCategory).ReversePlotOrder = False",
        "OnlyOffice_JS": "oChart.SetHorAxisOrientation(false);"
      },
      {
        "Description": "Create a solid fill with RGB color (51, 51, 51)",
        "VBA": "Set oFill = oChart.SeriesCollection(1).Format.Fill\n oFill.ForeColor.RGB = RGB(51, 51, 51)\n oFill.Solid",
        "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));"
      },
      {
        "Description": "Set the fill for the first series of the chart",
        "VBA": "oChart.SeriesCollection(1).Format.Fill = oFill",
        "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 0, false);"
      },
      {
        "Description": "Create a solid fill with RGB color (255, 111, 61)",
        "VBA": "Set oFill = oChart.SeriesCollection(2).Format.Fill\n oFill.ForeColor.RGB = RGB(255, 111, 61)\n oFill.Solid",
        "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));"
      },
      {
        "Description": "Set the fill for the second series of the chart",
        "VBA": "oChart.SeriesCollection(2).Format.Fill = oFill",
        "OnlyOffice_JS": "oChart.SetSeriesFill(oFill, 1, false);"
      }
    ]
  }
}
``````json
{
  "description": "The code populates specific cells with data, adds a 3D bar chart to the worksheet, sets the chart title and the position of the horizontal axis tick labels, and applies specific fill colors to the chart series.",
  "table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "VBA": "Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "VBA": "Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "VBA": "Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "VBA": "Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "VBA": "Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "VBA": "Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "VBA": "Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "VBA": "Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "VBA": "Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "VBA": "Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "VBA": "Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "VBA": "Set oChart = oWorksheet.Shapes.AddChart2(251, xlBar3D, 100, 70, 200, 150).Chart\nWith oChart\n    .SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\nEnd With"
    },
    {
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Format.TextFrame2.TextRange.Font.Size = 13\nEnd With"
    },
    {
      "OnlyOffice JS": "oChart.SetHorAxisTickLabelPosition(\"high\");",
      "VBA": "With oChart.Axes(xlCategory)\n    .TickLabelPosition = xlTickLabelPositionHigh\nEnd With"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "VBA": "Set oFill = oChart.SeriesCollection(1).Format.Fill\noFill.Solid\noFill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 0, false);",
      "VBA": "With oChart.SeriesCollection(1).Format.Fill\n    .Visible = msoTrue\n    .Solid\n    .ForeColor.RGB = RGB(51, 51, 51)\nEnd With"
    },
    {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "VBA": "Set oFill = oChart.SeriesCollection(2).Format.Fill\noFill.Solid\noFill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 1, false);",
      "VBA": "With oChart.SeriesCollection(2).Format.Fill\n    .Visible = msoTrue\n    .Solid\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
    }
  ]
}
``````json
{
  "description": "This code sets up data and creates a financial overview chart in a spreadsheet.",
  "methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel VBA": "Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel VBA": "Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel VBA": "Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel VBA": "Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel VBA": "Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel VBA": "Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel VBA": "Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel VBA": "Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel VBA": "Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel VBA": "Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel VBA": "Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "Excel VBA": "Set oChart = oWorksheet.Shapes.AddChart2(251, xlBar3D, 100, 70, 200, 150).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    },
    {
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\nEnd With"
    },
    {
      "OnlyOffice JS": "oChart.SetHorAxisTitle(\"Year\", 11);",
      "Excel VBA": "With oChart.Axes(xlCategory)\n    .HasTitle = True\n    .AxisTitle.Text = \"Year\"\nEnd With"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
      "Excel VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
      "Excel VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    }
  ]
}
``````json
{
  "RAG_Table": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set value of cell B1 to 2014",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel_VBA": "Range(\"B1\").Value = 2014"
    },
    {
      "Description": "Set value of cell C1 to 2015",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel_VBA": "Range(\"C1\").Value = 2015"
    },
    {
      "Description": "Set value of cell D1 to 2016",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel_VBA": "Range(\"D1\").Value = 2016"
    },
    {
      "Description": "Set value of cell A2 to 'Projected Revenue'",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel_VBA": "Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "Description": "Set value of cell A3 to 'Estimated Costs'",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel_VBA": "Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "Description": "Set value of cell B2 to 200",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel_VBA": "Range(\"B2\").Value = 200"
    },
    {
      "Description": "Set value of cell B3 to 250",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel_VBA": "Range(\"B3\").Value = 250"
    },
    {
      "Description": "Set value of cell C2 to 240",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel_VBA": "Range(\"C2\").Value = 240"
    },
    {
      "Description": "Set value of cell C3 to 260",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel_VBA": "Range(\"C3\").Value = 260"
    },
    {
      "Description": "Set value of cell D2 to 280",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel_VBA": "Range(\"D2\").Value = 280"
    },
    {
      "Description": "Set value of cell D3 to 280",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel_VBA": "Range(\"D3\").Value = 280"
    },
    {
      "Description": "Add a 3D bar chart",
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "Excel_VBA": "Set oChart = oWorksheet.Shapes.AddChart2(201, xlBarClustered, 100, 70, 200, 150).Chart"
    },
    {
      "Description": "Set chart title to 'Financial Overview'",
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel_VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Font.Size = 13\nEnd With"
    },
    {
      "Description": "Create solid fill with RGB (51,51,51) and set series 0 fill",
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
      "Excel_VBA": "With oChart.SeriesCollection(1).Format.Fill\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With"
    },
    {
      "Description": "Create solid fill with RGB (255,111,61) and set series 1 fill",
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
      "Excel_VBA": "With oChart.SeriesCollection(2).Format.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
    },
    {
      "Description": "Create solid fill with RGB (128,128,128) and set legend fill",
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));\noChart.SetLegendFill(oFill);",
      "Excel_VBA": "With oChart.Legend.Format.Fill\n    .ForeColor.RGB = RGB(128, 128, 128)\n    .Solid\nEnd With"
    }
  ]
}
``````json
{
  "Excel VBA Equivalent": {
    "Get Active Sheet": {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    "Set Value of Cell B1 to 2014": {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    "Set Value of Cell C1 to 2015": {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    "Set Value of Cell D1 to 2016": {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    "Set Value of Cell A2 to 'Projected Revenue'": {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    "Set Value of Cell A3 to 'Estimated Costs'": {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    "Set Value of Cell B2 to 200": {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    "Set Value of Cell B3 to 250": {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    "Set Value of Cell C2 to 240": {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    "Set Value of Cell C3 to 260": {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    "Set Value of Cell D2 to 280": {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    "Set Value of Cell D3 to 280": {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    "Add 3D Bar Chart": {
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "Excel VBA": "Set oChart = oWorksheet.Shapes.AddChart2(240, xlBarClustered, 100, 70, 200, 300).Chart"
    },
    "Set Chart Title": {
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Font.Size = 13\nEnd With"
    },
    "Set Legend Font Size": {
      "OnlyOffice JS": "oChart.SetLegendFontSize(13);",
      "Excel VBA": "oChart.Legend.Font.Size = 13"
    },
    "Set Series Fill for Series 0": {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
      "Excel VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    "Set Series Fill for Series 1": {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
      "Excel VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    }
  }
}
``````json
{
  "description": "Equivalent methods in Excel VBA for the provided OnlyOffice JS code.",
  "table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "Excel VBA": "Dim oChart As ChartObject\nSet oChart = oWorksheet.ChartObjects.Add(Left:=100, Top:=70, Width:=200, Height:=150)\nWith oChart.Chart\n    .SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\n    .ChartType = xlBar3D\nEnd With"
    },
    {
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel VBA": "oChart.Chart.ChartTitle.Text = \"Financial Overview\"\noChart.Chart.ChartTitle.Font.Size = 13"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
      "Excel VBA": "With oChart.Chart.SeriesCollection(1)\n    .Format.Fill.ForeColor.RGB = RGB(51, 51, 51)\nEnd With"
    },
    {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
      "Excel VBA": "With oChart.Chart.SeriesCollection(2)\n    .Format.Fill.ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\noChart.SetLegendOutLine(oStroke);",
      "Excel VBA": "With oChart.Chart.Legend.Format.Line\n    .Visible = msoTrue\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(51, 51, 51)\nEnd With"
    }
  ]
}
``````json
{
  "RAGTable": [
    {
      "Description": "Get the active worksheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Description": "Set value 2014 in cell B1",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "ExcelVBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "Description": "Set value 2015 in cell C1",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "ExcelVBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "Description": "Set value 2016 in cell D1",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "ExcelVBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "Description": "Set label 'Projected Revenue' in cell A2",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "ExcelVBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "Description": "Set label 'Estimated Costs' in cell A3",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "ExcelVBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "Description": "Set value 200 in cell B2",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "ExcelVBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "Description": "Set value 250 in cell B3",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "ExcelVBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "Description": "Set value 240 in cell C2",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "ExcelVBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "Description": "Set value 260 in cell C3",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "ExcelVBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "Description": "Set value 280 in cell D2",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "ExcelVBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "Description": "Set value 280 in cell D3",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "ExcelVBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "Description": "Add a 3D bar chart",
      "OnlyOfficeJS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "ExcelVBA": "Set oChart = oWorksheet.Shapes.AddChart2(201, xlBar3D).Chart\nWith oChart\n    .SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\n    .Parent.Left = 100\n    .Parent.Top = 70\n    .Parent.Width = 200\n    .Parent.Height = 150\nEnd With"
    },
    {
      "Description": "Set chart title to 'Financial Overview' with font size 13",
      "OnlyOfficeJS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "ExcelVBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Format.TextFrame2.TextRange.Font.Size = 13\nEnd With"
    },
    {
      "Description": "Set chart legend position to right",
      "OnlyOfficeJS": "oChart.SetLegendPos(\"right\");",
      "ExcelVBA": "With oChart.Legend\n    .Position = xlLegendPositionRight\nEnd With"
    },
    {
      "Description": "Create and set solid fill color RGB(51,51,51) for series 0",
      "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
      "ExcelVBA": "With oChart.SeriesCollection(1).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With"
    },
    {
      "Description": "Create and set solid fill color RGB(255,111,61) for series 1",
      "OnlyOfficeJS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
      "ExcelVBA": "With oChart.SeriesCollection(2).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
    "ExcelVBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
  },
  {
    "Description": "Set value 2014 in cell B1",
    "OnlyOfficeJS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
    "ExcelVBA": "oWorksheet.Range(\"B1\").Value = 2014"
  },
  {
    "Description": "Set value 2015 in cell C1",
    "OnlyOfficeJS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
    "ExcelVBA": "oWorksheet.Range(\"C1\").Value = 2015"
  },
  {
    "Description": "Set value 2016 in cell D1",
    "OnlyOfficeJS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
    "ExcelVBA": "oWorksheet.Range(\"D1\").Value = 2016"
  },
  {
    "Description": "Set 'Projected Revenue' in cell A2",
    "OnlyOfficeJS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
    "ExcelVBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
  },
  {
    "Description": "Set 'Estimated Costs' in cell A3",
    "OnlyOfficeJS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
    "ExcelVBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
  },
  {
    "Description": "Set value 200 in cell B2",
    "OnlyOfficeJS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
    "ExcelVBA": "oWorksheet.Range(\"B2\").Value = 200"
  },
  {
    "Description": "Set value 250 in cell B3",
    "OnlyOfficeJS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
    "ExcelVBA": "oWorksheet.Range(\"B3\").Value = 250"
  },
  {
    "Description": "Set value 240 in cell C2",
    "OnlyOfficeJS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
    "ExcelVBA": "oWorksheet.Range(\"C2\").Value = 240"
  },
  {
    "Description": "Set value 260 in cell C3",
    "OnlyOfficeJS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
    "ExcelVBA": "oWorksheet.Range(\"C3\").Value = 260"
  },
  {
    "Description": "Set value 280 in cell D2",
    "OnlyOfficeJS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
    "ExcelVBA": "oWorksheet.Range(\"D2\").Value = 280"
  },
  {
    "Description": "Set value 280 in cell D3",
    "OnlyOfficeJS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
    "ExcelVBA": "oWorksheet.Range(\"D3\").Value = 280"
  },
  {
    "Description": "Add a 3D bar chart to the worksheet",
    "OnlyOfficeJS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
    "ExcelVBA": "Dim oChart As ChartObject\nSet oChart = oWorksheet.ChartObjects.Add(Left:=100, Top:=70, Width:=200, Height:=150)\noChart.Chart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\noChart.Chart.ChartType = xlBarClustered"
  },
  {
    "Description": "Set the title of the chart to 'Financial Overview' with font size 13",
    "OnlyOfficeJS": "oChart.SetTitle(\"Financial Overview\", 13);",
    "ExcelVBA": "With oChart.Chart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Font.Size = 13\nEnd With"
  },
  {
    "Description": "Set the fill color of the first series to RGB(51, 51, 51)",
    "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
    "ExcelVBA": "oChart.Chart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)"
  },
  {
    "Description": "Set the fill color of the second series to RGB(255, 111, 61)",
    "OnlyOfficeJS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
    "ExcelVBA": "oChart.Chart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
  },
  {
    "Description": "Set the major horizontal gridlines with a stroke width and color",
    "OnlyOfficeJS": "var oStroke = Api.CreateStroke(1 * 15000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\noChart.SetMajorHorizontalGridlines(oStroke);",
    "ExcelVBA": "With oChart.Chart.Axes(xlCategory).MajorGridlines.Format.Line\n    .Weight = 1.5\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
  }
]
``````json
{
  "headers": ["Description", "OnlyOffice JS Code", "Excel VBA Code"],
  "rows": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice JS Code": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA Code": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Description": "Set value of cell B1 to 2014",
      "OnlyOffice JS Code": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel VBA Code": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "Description": "Set value of cell C1 to 2015",
      "OnlyOffice JS Code": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel VBA Code": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "Description": "Set value of cell D1 to 2016",
      "OnlyOffice JS Code": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel VBA Code": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "Description": "Set value of cell A2 to 'Projected Revenue'",
      "OnlyOffice JS Code": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel VBA Code": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "Description": "Set value of cell A3 to 'Estimated Costs'",
      "OnlyOffice JS Code": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel VBA Code": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "Description": "Set value of cell B2 to 200",
      "OnlyOffice JS Code": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel VBA Code": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "Description": "Set value of cell B3 to 250",
      "OnlyOffice JS Code": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel VBA Code": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "Description": "Set value of cell C2 to 240",
      "OnlyOffice JS Code": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel VBA Code": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "Description": "Set value of cell C3 to 260",
      "OnlyOffice JS Code": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel VBA Code": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "Description": "Set value of cell D2 to 280",
      "OnlyOffice JS Code": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel VBA Code": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "Description": "Set value of cell D3 to 280",
      "OnlyOffice JS Code": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel VBA Code": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "Description": "Add a 3D bar chart to the worksheet",
      "OnlyOffice JS Code": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "Excel VBA Code": "Dim oChart As Chart\nSet oChart = oWorksheet.Shapes.AddChart2(201, xlBarClustered, 100, 70, 200, 150).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    },
    {
      "Description": "Set the chart title to 'Financial Overview' with font size 13",
      "OnlyOffice JS Code": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel VBA Code": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Font.Size = 13\nEnd With"
    },
    {
      "Description": "Create a solid fill with RGB color (51, 51, 51)",
      "OnlyOffice JS Code": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "Excel VBA Code": "Dim oFill As FillFormat\nSet oFill = oChart.SeriesCollection(1).Format.Fill\noFill.Solid\noFill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "Description": "Set the fill for series 0",
      "OnlyOffice JS Code": "oChart.SetSeriesFill(oFill, 0, false);",
      "Excel VBA Code": "oChart.SeriesCollection(1).Format.Fill = oFill"
    },
    {
      "Description": "Create a solid fill with RGB color (255, 111, 61)",
      "OnlyOffice JS Code": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA Code": "Set oFill = oChart.SeriesCollection(2).Format.Fill\nWith oFill\n    .Solid\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
    },
    {
      "Description": "Set the fill for series 1",
      "OnlyOffice JS Code": "oChart.SetSeriesFill(oFill, 1, false);",
      "Excel VBA Code": "oChart.SeriesCollection(2).Format.Fill = oFill"
    },
    {
      "Description": "Create a stroke with width and fill color (255, 111, 61)",
      "OnlyOffice JS Code": "var oStroke = Api.CreateStroke(1 * 15000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));",
      "Excel VBA Code": "With oChart.Axes(xlValue).MajorGridlines.Format.Line\n    .Visible = msoTrue\n    .Weight = 1.5\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
    },
    {
      "Description": "Set the major vertical gridlines",
      "OnlyOffice JS Code": "oChart.SetMajorVerticalGridlines(oStroke);",
      "Excel VBA Code": "oChart.Axes(xlValue).HasMajorGridlines = True"
    }
  ]
}
``````json
[
  {
    "Set the active worksheet": {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    }
  },
  {
    "Set header values in cells B1, C1, D1": {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B1\").SetValue(2014);\n" +
                    "oWorksheet.GetRange(\"C1\").SetValue(2015);\n" +
                    "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "VBA": "oWorksheet.Range(\"B1\").Value = 2014\n" +
             "oWorksheet.Range(\"C1\").Value = 2015\n" +
             "oWorksheet.Range(\"D1\").Value = 2016"
    }
  },
  {
    "Set labels in cells A2 and A3": {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\n" +
                    "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\"\n" +
             "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    }
  },
  {
    "Set values in cells B2, B3, C2, C3, D2, D3": {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B2\").SetValue(200);\n" +
                    "oWorksheet.GetRange(\"B3\").SetValue(250);\n" +
                    "oWorksheet.GetRange(\"C2\").SetValue(240);\n" +
                    "oWorksheet.GetRange(\"C3\").SetValue(260);\n" +
                    "oWorksheet.GetRange(\"D2\").SetValue(280);\n" +
                    "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "VBA": "oWorksheet.Range(\"B2\").Value = 200\n" +
             "oWorksheet.Range(\"B3\").Value = 250\n" +
             "oWorksheet.Range(\"C2\").Value = 240\n" +
             "oWorksheet.Range(\"C3\").Value = 260\n" +
             "oWorksheet.Range(\"D2\").Value = 280\n" +
             "oWorksheet.Range(\"D3\").Value = 280"
    }
  },
  {
    "Add a scatter chart to the worksheet": {
      "OnlyOfficeJS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"scatter\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "VBA": "Set oChart = oWorksheet.Shapes.AddChart2(-1, xlXYScatter).Chart\n" +
             "' Set the data range\n" +
             "oChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    }
  },
  {
    "Set the chart title": {
      "OnlyOfficeJS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "VBA": "With oChart\n" +
             "    .HasTitle = True\n" +
             "    .ChartTitle.Text = \"Financial Overview\"\n" +
             "    .ChartTitle.Font.Size = 13\n" +
             "End With"
    }
  },
  {
    "Set marker fill for series 0, point 0": {
      "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\n" +
                    "oChart.SetMarkerFill(oFill, 0, 0, true);",
      "VBA": "With oChart.SeriesCollection(1).Points(1).Format.Fill\n" +
             "    .Visible = msoTrue\n" +
             "    .ForeColor.RGB = RGB(51, 51, 51)\n" +
             "    .Solid\n" +
             "End With"
    }
  },
  {
    "Set marker outline for series 0, point 0": {
      "OnlyOfficeJS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\n" +
                    "oChart.SetMarkerOutLine(oStroke, 0, 0, true);",
      "VBA": "With oChart.SeriesCollection(1).Points(1).Format.Line\n" +
             "    .Visible = msoTrue\n" +
             "    .ForeColor.RGB = RGB(51, 51, 51)\n" +
             "    .Weight = 0.5\n" +
             "    .Solid\n" +
             "End With"
    }
  },
  {
    "Set marker fill for series 1, point 0": {
      "OnlyOfficeJS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\n" +
                    "oChart.SetMarkerFill(oFill, 1, 0, true);",
      "VBA": "With oChart.SeriesCollection(2).Points(1).Format.Fill\n" +
             "    .Visible = msoTrue\n" +
             "    .ForeColor.RGB = RGB(255, 111, 61)\n" +
             "    .Solid\n" +
             "End With"
    }
  },
  {
    "Set marker outline for series 1, point 0": {
      "OnlyOfficeJS": "oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\n" +
                    "oChart.SetMarkerOutLine(oStroke, 1, 0, true);",
      "VBA": "With oChart.SeriesCollection(2).Points(1).Format.Line\n" +
             "    .Visible = msoTrue\n" +
             "    .ForeColor.RGB = RGB(255, 111, 61)\n" +
             "    .Weight = 0.5\n" +
             "    .Solid\n" +
             "End With"
    }
  }
]
``````json
{
  "Description": "This script sets values in specific cells, adds a scatter chart, sets the chart title, and customizes marker fill and outlines.",
  "Methods": [
    {
      "VBA": "Range(\"B1\").Value = 2014\nRange(\"C1\").Value = 2015\nRange(\"D1\").Value = 2016",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);\noWorksheet.GetRange(\"C1\").SetValue(2015);\noWorksheet.GetRange(\"D1\").SetValue(2016);"
    },
    {
      "VBA": "Range(\"A2\").Value = \"Projected Revenue\"\nRange(\"A3\").Value = \"Estimated Costs\"",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\noWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");"
    },
    {
      "VBA": "Range(\"B2\").Value = 200\nRange(\"B3\").Value = 250\nRange(\"C2\").Value = 240\nRange(\"C3\").Value = 260\nRange(\"D2\").Value = 280\nRange(\"D3\").Value = 280",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);\noWorksheet.GetRange(\"B3\").SetValue(250);\noWorksheet.GetRange(\"C2\").SetValue(240);\noWorksheet.GetRange(\"C3\").SetValue(260);\noWorksheet.GetRange(\"D2\").SetValue(280);\noWorksheet.GetRange(\"D3\").SetValue(280);"
    },
    {
      "VBA": "Set oChart = Charts.Add\nWith oChart\n    .ChartType = xlXYScatter\n    .SetSourceData Source:=Sheets(\"Sheet1\").Range(\"A1:D3\")\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\nEnd With",
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"scatter\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\noChart.SetTitle(\"Financial Overview\", 13);"
    },
    {
      "VBA": "With oChart.SeriesCollection(1).MarkerBackgroundColor = RGB(51, 51, 51)\n    .MarkerForegroundColor = RGB(51, 51, 51)\nEnd With",
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetMarkerFill(oFill, 0, 0, true);"
    },
    {
      "VBA": "With oChart.SeriesCollection(1).MarkerLine.Color = RGB(51, 51, 51)\n    .MarkerLine.Weight = 0.5\nEnd With",
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\noChart.SetMarkerOutLine(oStroke, 0, 0, true);"
    },
    {
      "VBA": "With oChart.SeriesCollection(2).MarkerBackgroundColor = RGB(255, 111, 61)\n    .MarkerForegroundColor = RGB(255, 111, 61)\nEnd With\nWith oChart.SeriesCollection(2).MarkerLine.Color = RGB(51, 51, 51)\n    .MarkerLine.Weight = 0.5\nEnd With",
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetMarkerFill(oFill, 1, 0, true);\noChart.SetMarkerOutLine(oStroke, 1, 0, true);"
    }
  ]
}
``````json
{
  "description": "Equivalent Excel VBA code for the provided OnlyOffice JS methods to set up data and create a 3D bar chart with specific formatting.",
  "methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "Excel VBA": "Dim oChart As Chart\nSet oChart = oWorksheet.Shapes.AddChart2(201, xlBar3D, 100, 70, 200, 150).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    },
    {
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Font.Size = 13\nEnd With"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "Excel VBA": "Dim oFill As Long\noFill = RGB(51, 51, 51)"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 0, false);",
      "Excel VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = oFill"
    },
    {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "oFill = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 1, false);",
      "Excel VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = oFill"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(1 * 5000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));",
      "Excel VBA": "Dim oStrokeWeight As Single\nDim oStrokeColor As Long\noStrokeWeight = 1\noStrokeColor = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "oChart.SetMinorHorizontalGridlines(oStroke);",
      "Excel VBA": "With oChart.Axes(xlCategory).MajorGridlines.Format.Line\n    .Weight = oStrokeWeight\n    .ForeColor.RGB = oStrokeColor\nEnd With"
    }
  ]
}
``````json
{
  "description": "This code populates specific cells with data and creates a 3D bar chart titled 'Financial Overview' with customized series fills and minor vertical gridlines.",
  "codeMappings": [
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "ExcelVBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "ExcelVBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "ExcelVBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "ExcelVBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "ExcelVBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "ExcelVBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "ExcelVBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "ExcelVBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "ExcelVBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "ExcelVBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "ExcelVBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOfficeJS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "ExcelVBA": "Dim oChart As ChartObject\nSet oChart = oWorksheet.ChartObjects.Add(Left:=100, Top:=70, Width:=200, Height:=150)\noChart.Chart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\noChart.Chart.ChartType = xl3DBarClustered"
    },
    {
      "OnlyOfficeJS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "ExcelVBA": "oChart.Chart.HasTitle = True\nioChart.Chart.ChartTitle.Text = \"Financial Overview\"\noChart.Chart.ChartTitle.Font.Size = 13"
    },
    {
      "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "ExcelVBA": "Dim oFill As Fill\nSet oFill = oChart.Chart.SeriesCollection(1).Format.Fill\noFill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "OnlyOfficeJS": "oChart.SetSeriesFill(oFill, 0, false);",
      "ExcelVBA": "oChart.Chart.SeriesCollection(1).Format.Fill = oFill"
    },
    {
      "OnlyOfficeJS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "ExcelVBA": "Set oFill = oChart.Chart.SeriesCollection(2).Format.Fill\noFill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOfficeJS": "oChart.SetSeriesFill(oFill, 1, false);",
      "ExcelVBA": "oChart.Chart.SeriesCollection(2).Format.Fill = oFill"
    },
    {
      "OnlyOfficeJS": "var oStroke = Api.CreateStroke(1 * 5000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));",
      "ExcelVBA": "With oChart.Chart.Axes(xlValue).MinorGridlines.Format.Line\n    .Weight = 1\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Visible = msoTrue\nEnd With"
    },
    {
      "OnlyOfficeJS": "oChart.SetMinorVerticalGridlines(oStroke);",
      "ExcelVBA": "oChart.Chart.Axes(xlValue).HasMinorGridlines = True"
    }
  ]
}
``````json
{
  "description": "This code sets values in cells, adds a 3D bar chart, sets the chart title, and applies fill colors to chart series and plot area.",
  "methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "Excel VBA": "Set oChart = oWorksheet.Shapes.AddChart2(251, xlBarClustered, 100, 70, 200, 150).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    },
    {
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel VBA": "oChart.HasTitle = True\noChart.ChartTitle.Text = \"Financial Overview\"\noChart.ChartTitle.Font.Size = 13"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "Excel VBA": "Dim oFill As Long\noFill = RGB(51, 51, 51)"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 0, false);",
      "Excel VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = oFill"
    },
    {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "oFill = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 1, false);",
      "Excel VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = oFill"
    },
    {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));",
      "Excel VBA": "oFill = RGB(128, 128, 128)"
    },
    {
      "OnlyOffice JS": "oChart.SetPlotAreaFill(oFill);",
      "Excel VBA": "oChart.PlotArea.Format.Fill.ForeColor.RGB = oFill"
    }
  ]
}
``````json
{
  "RAG_Table": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set value 2014 in cell B1",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "Description": "Set value 2015 in cell C1",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "Description": "Set value 2016 in cell D1",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "Description": "Set label 'Projected Revenue' in cell A2",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel_VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "Description": "Set label 'Estimated Costs' in cell A3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "Description": "Set value 200 in cell B2",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "Description": "Set value 250 in cell B3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "Description": "Set value 240 in cell C2",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "Description": "Set value 260 in cell C3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "Description": "Set value 280 in cell D2",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "Description": "Set value 280 in cell D3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "Description": "Add a 3D bar chart to the worksheet",
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "Excel_VBA": "Dim oChart As ChartObject\nSet oChart = oWorksheet.ChartObjects.Add(Left:=100, Top:=70, Width:=200, Height:=150)\nWith oChart.Chart\n    .SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\n    .ChartType = xlBar3D\nEnd With"
    },
    {
      "Description": "Set the chart title to 'Financial Overview' with font size 13",
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel_VBA": "oChart.Chart.HasTitle = True\noChart.Chart.ChartTitle.Text = \"Financial Overview\"\nWith oChart.Chart.ChartTitle.Format.TextFrame2.TextRange.Font\n    .Size = 13\nEnd With"
    },
    {
      "Description": "Create a solid fill with RGB color (51, 51, 51) and apply to first series",
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
      "Excel_VBA": "With oChart.Chart.SeriesCollection(1).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With"
    },
    {
      "Description": "Create a solid fill with RGB color (255, 111, 61) and apply to second series",
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
      "Excel_VBA": "With oChart.Chart.SeriesCollection(2).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
    },
    {
      "Description": "Create a stroke with weight 0.5 and RGB color (255, 111, 61) for plot area outline",
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\noChart.SetPlotAreaOutLine(oStroke);",
      "Excel_VBA": "With oChart.Chart.PlotArea.Format.Line\n    .Visible = msoTrue\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
    }
  ]
}
``````json
{
  "description": "This example sets values in cells, adds a 3D bar chart, sets chart titles and series names, and applies fill colors to the chart series.",
  "code": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "Excel VBA": "Set oChart = oWorksheet.Shapes.AddChart2(XlChartType:=xlBar3D, Left:=100, Top:=70, Width:=200, Height:=150).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    },
    {
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Font.Size = 13\nEnd With"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriaName(\"Projected Sales\", 0);",
      "Excel VBA": "oChart.SeriesCollection(1).Name = \"Projected Sales\""
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
      "Excel VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
      "Excel VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    }
  ]
}
``````json
{
  "table": {
    "headers": ["Description", "Excel VBA", "OnlyOffice JS"],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "Excel VBA": "Set oWorksheet = ActiveSheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();"
      },
      {
        "Description": "Set value of cell B1 to 2014",
        "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014",
        "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);"
      },
      {
        "Description": "Set value of cell C1 to 2015",
        "Excel VBA": "oWorksheet.Range(\"C1\").Value = 2015",
        "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);"
      },
      {
        "Description": "Set value of cell D1 to 2016",
        "Excel VBA": "oWorksheet.Range(\"D1\").Value = 2016",
        "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);"
      },
      {
        "Description": "Set value of cell A2 to 'Projected Revenue'",
        "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\"",
        "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");"
      },
      {
        "Description": "Set value of cell A3 to 'Estimated Costs'",
        "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\"",
        "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");"
      },
      {
        "Description": "Set value of cell B2 to 200",
        "Excel VBA": "oWorksheet.Range(\"B2\").Value = 200",
        "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);"
      },
      {
        "Description": "Set value of cell B3 to 250",
        "Excel VBA": "oWorksheet.Range(\"B3\").Value = 250",
        "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);"
      },
      {
        "Description": "Set value of cell B4 to 260",
        "Excel VBA": "oWorksheet.Range(\"B4\").Value = 260",
        "OnlyOffice JS": "oWorksheet.GetRange(\"B4\").SetValue(260);"
      },
      {
        "Description": "Set value of cell C2 to 240",
        "Excel VBA": "oWorksheet.Range(\"C2\").Value = 240",
        "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);"
      },
      {
        "Description": "Set value of cell C3 to 260",
        "Excel VBA": "oWorksheet.Range(\"C3\").Value = 260",
        "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);"
      },
      {
        "Description": "Set value of cell C4 to 270",
        "Excel VBA": "oWorksheet.Range(\"C4\").Value = 270",
        "OnlyOffice JS": "oWorksheet.GetRange(\"C4\").SetValue(270);"
      },
      {
        "Description": "Set value of cell D2 to 280",
        "Excel VBA": "oWorksheet.Range(\"D2\").Value = 280",
        "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);"
      },
      {
        "Description": "Set value of cell D3 to 280",
        "Excel VBA": "oWorksheet.Range(\"D3\").Value = 280",
        "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);"
      },
      {
        "Description": "Set value of cell D4 to 300",
        "Excel VBA": "oWorksheet.Range(\"D4\").Value = 300",
        "OnlyOffice JS": "oWorksheet.GetRange(\"D4\").SetValue(300);"
      },
      {
        "Description": "Add a 3D bar chart to the worksheet",
        "Excel VBA": "Set oChart = oWorksheet.Shapes.AddChart2(251, xlBar3D, 100, 70, 300, 200).Chart",
        "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);"
      },
      {
        "Description": "Set the chart title to 'Financial Overview' with font size 13",
        "Excel VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Font.Size = 13\nEnd With",
        "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);"
      },
      {
        "Description": "Set series values from range B4:D4 for series 1",
        "Excel VBA": "oChart.SeriesCollection(1).Values = oWorksheet.Range(\"$B$4:$D$4\")",
        "OnlyOffice JS": "oChart.SetSeriaValues(\"'Sheet1'!$B$4:$D$4\", 1);"
      },
      {
        "Description": "Hide data labels for each point in series 1",
        "Excel VBA": "Dim pt As Point\nFor Each pt In oChart.SeriesCollection(1).Points\n    pt.HasDataLabel = False\nNext pt",
        "OnlyOffice JS": "oChart.SetShowPointDataLabel(1, 0, false, false, true, false);\noChart.SetShowPointDataLabel(1, 1, false, false, true, false);\noChart.SetShowPointDataLabel(1, 2, false, false, true, false);"
      },
      {
        "Description": "Set fill color of series 0 to RGB(51,51,51)",
        "Excel VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)",
        "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);"
      },
      {
        "Description": "Set fill color of series 1 to RGB(255,111,61)",
        "Excel VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)",
        "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);"
      }
    ]
  }
}
``````json
{
  "description": "This example sets the x-axis values from the specified range to the specified series. It is used with the scatter charts only.",
  "code": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel_VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B4\").SetValue(2017);",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = 2017"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C4\").SetValue(2018);",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = 2018"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D4\").SetValue(2019);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 2019"
    },
    {
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"scatter\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "Excel_VBA": "Dim oChart As Chart\nSet oChart = oWorksheet.Shapes.AddChart2(201, xlXYScatter).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    },
    {
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel_VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Format.TextFrame2.TextRange.Font.Size = 13\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.SetSeriaXValues(\"'Sheet1'!$B$4:$D$4\", 0);",
      "Excel_VBA": "oChart.SeriesCollection(1).XValues = oWorksheet.Range(\"B4:D4\")"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "Excel_VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "OnlyOffice_JS": "oChart.SetMarkerFill(oFill, 0, 0, true);",
      "Excel_VBA": "With oChart.SeriesCollection(1).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));",
      "Excel_VBA": "With oChart.SeriesCollection(1).Format.Line\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Weight = 0.5\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.SetMarkerOutLine(oStroke, 0, 0, true);",
      "Excel_VBA": "' Outline already set in previous step"
    },
    {
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "oChart.SetMarkerFill(oFill, 1, 0, true);",
      "Excel_VBA": "With oChart.SeriesCollection(2).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));",
      "Excel_VBA": "With oChart.SeriesCollection(2).Format.Line\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Weight = 0.5\nEnd With"
    },
    {
      "OnlyOffice_JS": "oChart.SetMarkerOutLine(oStroke, 1, 0, true);",
      "Excel_VBA": "' Outline already set in previous step"
    }
  ]
}
```**This code sets up data in a worksheet, adds a 3D bar chart, sets the chart title, and applies specific fill colors to the chart series.**

```json
{
  "RAGTable": [
    {
      "OnlyOfficeMethod": "Api.GetActiveSheet()",
      "Status": "Green",
      "ExcelVBAEquivalent": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOfficeMethod": "oWorksheet.GetRange(\"A1\").SetValue(value)",
      "Status": "Green",
      "ExcelVBAEquivalent": "Range(\"A1\").Value = value"
    },
    {
      "OnlyOfficeMethod": "oWorksheet.AddChart(range, isEmbedded, chartType, left, top, width, height, ...)",
      "Status": "Green",
      "ExcelVBAEquivalent": "Set oChart = Charts.Add\nWith oChart\n    .ChartType = xlBar3D\n    .SetSourceData Source:=Range(\"A1:D3\")\n    .Location Where:=xlLocationAsObject, Name:=\"Sheet1\"\n    .Left = 200\n    .Top = 100\n    .Width = 36000\n    .Height = 70\nEnd With"
    },
    {
      "OnlyOfficeMethod": "oChart.SetTitle(title, fontSize)",
      "Status": "Green",
      "ExcelVBAEquivalent": "oChart.HasTitle = True\noChart.ChartTitle.Text = \"Financial Overview\"\noChart.ChartTitle.Font.Size = 13"
    },
    {
      "OnlyOfficeMethod": "Api.CreateRGBColor(r, g, b)",
      "Status": "Green",
      "ExcelVBAEquivalent": "RGB(r, g, b)"
    },
    {
      "OnlyOfficeMethod": "Api.CreateSolidFill(color)",
      "Status": "Amber",
      "ExcelVBAEquivalent": "Use .Format.Fill.ForeColor.RGB = RGB(r, g, b)"
    },
    {
      "OnlyOfficeMethod": "oChart.SetSeriesFill(fill, seriesIndex, ...)",
      "Status": "Green",
      "ExcelVBAEquivalent": "oChart.SeriesCollection(seriesIndex + 1).Format.Fill.ForeColor.RGB = RGB(r, g, b)"
    }
  ]
}
``````json
{
  "Description": "This example sets values in cells, adds a chart, sets the chart title, and applies formatting to the chart series.",
  "Code": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "Excel VBA": "Dim oChart As Chart\nSet oChart = oWorksheet.Shapes.AddChart2(Style:=xlBar3D, _\n    Left:=100, Top:=70, Width:=200, Height:=150).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    },
    {
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel VBA": "oChart.HasTitle = True\noChart.ChartTitle.Text = \"Financial Overview\"\n'oChart.ChartTitle.Font.Size = 13 ' Excel VBA handles font size differently"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
      "Excel VBA": "With oChart.SeriesCollection(1).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With"
    },
    {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
      "Excel VBA": "With oChart.SeriesCollection(2).Format.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));",
      "Excel VBA": "With oChart.SeriesCollection(2).Format.Line\n    .Visible = msoTrue\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriesOutLine(oStroke, 1, false);",
      "Excel VBA": "' Line formatting already applied in the previous step\n"
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet.",
    "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
  },
  {
    "Description": "Set value of cell B1 to 2014.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
    "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014"
  },
  {
    "Description": "Set value of cell C1 to 2015.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
    "Excel VBA": "oWorksheet.Range(\"C1\").Value = 2015"
  },
  {
    "Description": "Set value of cell D1 to 2016.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
    "Excel VBA": "oWorksheet.Range(\"D1\").Value = 2016"
  },
  {
    "Description": "Set value of cell A2 to 'Projected Revenue'.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
    "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
  },
  {
    "Description": "Set value of cell A3 to 'Estimated Costs'.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
    "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
  },
  {
    "Description": "Set value of cell B2 to 200.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
    "Excel VBA": "oWorksheet.Range(\"B2\").Value = 200"
  },
  {
    "Description": "Set value of cell B3 to 250.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
    "Excel VBA": "oWorksheet.Range(\"B3\").Value = 250"
  },
  {
    "Description": "Set value of cell C2 to 240.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
    "Excel VBA": "oWorksheet.Range(\"C2\").Value = 240"
  },
  {
    "Description": "Set value of cell C3 to 260.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
    "Excel VBA": "oWorksheet.Range(\"C3\").Value = 260"
  },
  {
    "Description": "Set value of cell D2 to 280.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
    "Excel VBA": "oWorksheet.Range(\"D2\").Value = 280"
  },
  {
    "Description": "Set value of cell D3 to 280.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
    "Excel VBA": "oWorksheet.Range(\"D3\").Value = 280"
  },
  {
    "Description": "Add a 3D bar chart to the worksheet.",
    "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
    "Excel VBA": "Dim oChart As Chart\nSet oChart = oWorksheet.Shapes.AddChart(XlChartType.xlBar3D, 100, 70, 200, 150).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
  },
  {
    "Description": "Set the chart title to 'Financial Overview' with font size 13.",
    "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
    "Excel VBA": "With oChart"
    },
  {
    "Description": "Set which data labels are displayed on the chart.",
    "OnlyOffice JS": "oChart.SetShowDataLabels(false, false, true, false);",
    "Excel VBA": "With oChart\n    .HasDataLabels = True\n    ' Customize data labels as needed\nEnd With"
  },
  {
    "Description": "Create a solid fill with RGB color (51, 51, 51) and apply it to series 0.",
    "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
    "Excel VBA": "Dim oFill As FillFormat\nSet oFill = oChart.SeriesCollection(1).Format.Fill\nWith oFill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With"
  },
  {
    "Description": "Create a solid fill with RGB color (255, 111, 61) and apply it to series 1.",
    "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
    "Excel VBA": "Set oFill = oChart.SeriesCollection(2).Format.Fill\nWith oFill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
  }
]
``````json
{
  "Table": {
    "Headers": ["Description", "OnlyOffice JS", "Excel VBA"],
    "Rows": [
      {
        "Description": "Sets cell values, adds a 3D bar chart with specified data range and dimensions, sets the chart title, configures data labels, and applies custom fill colors to chart series.",
        "OnlyOffice_JS": "// This example specifies the show options for the chart data labels.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.GetRange(\"B1\").SetValue(2014);\noWorksheet.GetRange(\"C1\").SetValue(2015);\noWorksheet.GetRange(\"D1\").SetValue(2016);\noWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\noWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\noWorksheet.GetRange(\"B2\").SetValue(200);\noWorksheet.GetRange(\"B3\").SetValue(250);\noWorksheet.GetRange(\"C2\").SetValue(240);\noWorksheet.GetRange(\"C3\").SetValue(260);\noWorksheet.GetRange(\"D2\").SetValue(280);\noWorksheet.GetRange(\"D3\").SetValue(280);\nvar oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\noChart.SetTitle(\"Financial Overview\", 13);\noChart.SetShowPointDataLabel(1, 0, false, false, true, false);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
        "Excel_VBA": "Sub CreateFinancialChart()\n    Dim ws As Worksheet\n    Set ws = ThisWorkbook.ActiveSheet\n    \n    ' Set cell values\n    ws.Range(\"B1\").Value = 2014\n    ws.Range(\"C1\").Value = 2015\n    ws.Range(\"D1\").Value = 2016\n    ws.Range(\"A2\").Value = \"Projected Revenue\"\n    ws.Range(\"A3\").Value = \"Estimated Costs\"\n    ws.Range(\"B2\").Value = 200\n    ws.Range(\"B3\").Value = 250\n    ws.Range(\"C2\").Value = 240\n    ws.Range(\"C3\").Value = 260\n    ws.Range(\"D2\").Value = 280\n    ws.Range(\"D3\").Value = 280\n    \n    ' Add a 3D Bar Chart\n    Dim chartObj As ChartObject\n    Set chartObj = ws.ChartObjects.Add(Left:=200, Top:=100, Width:=360, Height:=270) ' Adjust dimensions as needed\n    With chartObj.Chart\n        .SetSourceData Source:=ws.Range(\"A1:D3\")\n        .ChartType = xlBar3DClustered\n        \n        ' Set chart title\n        .HasTitle = True\n        .ChartTitle.Text = \"Financial Overview\"\n        .ChartTitle.Font.Size = 13\n        \n        ' Configure data labels\n        Dim ser As Series\n        For Each ser In .SeriesCollection\n            ser.HasDataLabels = True\n            With ser.DataLabels\n                .ShowCategoryName = False\n                .ShowValue = True\n                .ShowSeriesName = False\n                .ShowPercentage = False\n            End With\n        Next ser\n        \n        ' Set series fill colors\n        .SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51) ' First series color\n        .SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61) ' Second series color\n    End With\nEnd Sub"
      }
    ]
  }
}
```**This code sets cell values and creates a chart in the worksheet.**

```json
{
  "Mappings": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel VBA": "Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel VBA": "Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel VBA": "Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel VBA": "Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel VBA": "Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel VBA": "Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel VBA": "Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel VBA": "Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel VBA": "Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel VBA": "Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel VBA": "Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "Excel VBA": "Dim oChart As Chart\nSet oChart = Charts.Add\nWith oChart\n    .SetSourceData Source:=Sheets(\"Sheet1\").Range(\"A1:D3\")\n    .ChartType = xlBar3D\n    .Left = 2\n    .Width = 100 * 36000\n    .Height = 70 * 36000\n    .Top = 0\n    .Placement = xlMoveAndSize\nEnd With"
    },
    {
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel VBA": "oChart.HasTitle = True\noChart.ChartTitle.Text = \"Financial Overview\"\n'oChart.ChartTitle.Font.Size = 13"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
      "Excel VBA": "Dim oFill As Color\noFill = RGB(51, 51, 51)\noChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = oFill"
    },
    {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
      "Excel VBA": "oFill = RGB(255, 111, 61)\noChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = oFill"
    },
    {
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));\noChart.SetTitleFill(oFill);",
      "Excel VBA": "oFill = RGB(128, 128, 128)\noChart.ChartTitle.Format.Fill.ForeColor.RGB = oFill"
    }
  ]
}
``````json
{
  "description": "This code populates a worksheet with data and creates a 3D bar chart titled 'Financial Overview' with specified series fills.",
  "methods": [
    {
      "OnlyOffice JS": "Api.GetActiveSheet()",
      "Excel VBA": "ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel VBA": "Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel VBA": "Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel VBA": "Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel VBA": "Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel VBA": "Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel VBA": "Range(\"B2\").Value = 200"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel VBA": "Range(\"B3\").Value = 250"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel VBA": "Range(\"C2\").Value = 240"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel VBA": "Range(\"C3\").Value = 260"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel VBA": "Range(\"D2\").Value = 280"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel VBA": "Range(\"D3\").Value = 280"
    },
    {
      "OnlyOffice JS": "oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "Excel VBA": "Charts.Add\nWith ActiveChart\n    .SetSourceData Source:=Sheets(\"Sheet1\").Range(\"A1:D3\")\n    .ChartType = xlBar3D\n    ' Set position and size as needed\nEnd With"
    },
    {
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel VBA": "With ActiveChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Font.Size = 13\nEnd With"
    },
    {
      "OnlyOffice JS": "Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "Excel VBA": "Dim fillColor As Long\nfillColor = RGB(51, 51, 51)"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 0, false);",
      "Excel VBA": "ActiveChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = fillColor"
    },
    {
      "OnlyOffice JS": "Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "fillColor = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 1, false);",
      "Excel VBA": "ActiveChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = fillColor"
    }
  ]
}
``````json
{
  "Operations": [
    {
      "Description": "Retrieve the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set value of cell B1 to 2014",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel_VBA": "Range(\"B1\").Value = 2014"
    },
    {
      "Description": "Set value of cell C1 to 2015",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel_VBA": "Range(\"C1\").Value = 2015"
    },
    {
      "Description": "Set value of cell D1 to 2016",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel_VBA": "Range(\"D1\").Value = 2016"
    },
    {
      "Description": "Set value of cell A2 to 'Projected Revenue'",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel_VBA": "Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "Description": "Set value of cell A3 to 'Estimated Costs'",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel_VBA": "Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "Description": "Set value of cell B2 to 200",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel_VBA": "Range(\"B2\").Value = 200"
    },
    {
      "Description": "Set value of cell B3 to 250",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel_VBA": "Range(\"B3\").Value = 250"
    },
    {
      "Description": "Set value of cell C2 to 240",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel_VBA": "Range(\"C2\").Value = 240"
    },
    {
      "Description": "Set value of cell C3 to 260",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel_VBA": "Range(\"C3\").Value = 260"
    },
    {
      "Description": "Set value of cell D2 to 280",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel_VBA": "Range(\"D2\").Value = 280"
    },
    {
      "Description": "Set value of cell D3 to 280",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel_VBA": "Range(\"D3\").Value = 280"
    },
    {
      "Description": "Add a 3D bar chart to the worksheet",
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);",
      "Excel_VBA": "Set oChart = oWorksheet.Shapes.AddChart2(201, xlBar3D, 100, 70, 200, 150).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    },
    {
      "Description": "Set the chart title to 'Financial Overview' with font size 13",
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel_VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Format.TextFrame2.TextRange.Font.Size = 13\nEnd With"
    },
    {
      "Description": "Set fill color of the first series to RGB(51, 51, 51)",
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);",
      "Excel_VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "Description": "Set fill color of the second series to RGB(255, 111, 61)",
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);",
      "Excel_VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "Description": "Set the chart title outline with a specific stroke",
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\noChart.SetTitleOutLine(oStroke);",
      "Excel_VBA": "With oChart.ChartTitle.Format.Line\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(51, 51, 51)\nEnd With"
    }
  ]
}
``````json
{
  "Table": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Description": "Set value in cell B1 to 2014",
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "Description": "Set value in cell C1 to 2015",
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "Description": "Set value in cell D1 to 2016",
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "Description": "Set value in cell A2 to 'Projected Revenue'",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "Description": "Set value in cell A3 to 'Estimated Costs'",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "Description": "Set value in cell B2 to 200",
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "Description": "Set value in cell B3 to 250",
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "Description": "Set value in cell C2 to 240",
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "Description": "Set value in cell C3 to 260",
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "Description": "Set value in cell D2 to 280",
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "Description": "Set value in cell D3 to 280",
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "Description": "Add a 3D bar chart to the worksheet",
      "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "Excel VBA": "Set oChart = oWorksheet.Shapes.AddChart2(240, xlBar3DClustered, 100, 70, 200, 150).Chart"
    },
    {
      "Description": "Set chart title to 'Financial Overview' with font size 13",
      "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "Excel VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Format.TextFrame2.TextRange.Font.Size = 13\nEnd With"
    },
    {
      "Description": "Set vertical axis orientation to false",
      "OnlyOffice JS": "oChart.SetVerAxisOrientation(false);",
      "Excel VBA": "oChart.Axes(xlValue).ReversePlotOrder = False"
    },
    {
      "Description": "Create a solid fill with RGB color (51, 51, 51)",
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "Excel VBA": "Dim oFill As Object\nSet oFill = ThisWorkbook.Colors.RGB(51, 51, 51)"
    },
    {
      "Description": "Set the first series fill with the created color",
      "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 0, false);",
      "Excel VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "Description": "Create a solid fill with RGB color (255, 111, 61)",
      "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "Set oFill = ThisWorkbook.Colors.RGB(255, 111, 61)"
    },
    {
      "Description": "Set the second series fill with the created color",
      "OnlyOffice JS": "oChart.SetSeriesFill(oFill, 1, false);",
      "Excel VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    }
  ]
}
``````json
{
  "RAGTable": [
    {
      "Description": "Get the active worksheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set value 2014 in cell B1",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "ExcelVBA": "Range(\"B1\").Value = 2014"
    },
    {
      "Description": "Set value 2015 in cell C1",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "ExcelVBA": "Range(\"C1\").Value = 2015"
    },
    {
      "Description": "Set value 2016 in cell D1",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "ExcelVBA": "Range(\"D1\").Value = 2016"
    },
    {
      "Description": "Set value 'Projected Revenue' in cell A2",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "ExcelVBA": "Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "Description": "Set value 'Estimated Costs' in cell A3",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "ExcelVBA": "Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "Description": "Set value 200 in cell B2",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "ExcelVBA": "Range(\"B2\").Value = 200"
    },
    {
      "Description": "Set value 250 in cell B3",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "ExcelVBA": "Range(\"B3\").Value = 250"
    },
    {
      "Description": "Set value 240 in cell C2",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "ExcelVBA": "Range(\"C2\").Value = 240"
    },
    {
      "Description": "Set value 260 in cell C3",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "ExcelVBA": "Range(\"C3\").Value = 260"
    },
    {
      "Description": "Set value 280 in cell D2",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "ExcelVBA": "Range(\"D2\").Value = 280"
    },
    {
      "Description": "Set value 280 in cell D3",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "ExcelVBA": "Range(\"D3\").Value = 280"
    },
    {
      "Description": "Add a 3D bar chart to the worksheet",
      "OnlyOfficeJS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "ExcelVBA": "Set oChart = oWorksheet.Shapes.AddChart2(, xlBarStacked, 200, 100, 500, 300).Chart"
    },
    {
      "Description": "Set the chart title to 'Financial Overview' with font size 13",
      "OnlyOfficeJS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "ExcelVBA": "oChart.HasTitle = True\noChart.ChartTitle.Text = \"Financial Overview\"\noChart.ChartTitle.Font.Size = 13"
    },
    {
      "Description": "Set the vertical axis title to 'USD In Hundred Thousands' with font size 10",
      "OnlyOfficeJS": "oChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);",
      "ExcelVBA": "With oChart.Axes(xlValue)\n    .HasTitle = True\n    .AxisTitle.Text = \"USD In Hundred Thousands\"\n    .AxisTitle.Font.Size = 10\nEnd With"
    },
    {
      "Description": "Create a solid fill with RGB color (51, 51, 51)",
      "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "ExcelVBA": "Set oFill = oChart.SeriesCollection(1).Format.Fill\noFill.ForeColor.RGB = RGB(51, 51, 51)\noFill.Visible = msoTrue"
    },
    {
      "Description": "Set the fill for the first series with the created fill",
      "OnlyOfficeJS": "oChart.SetSeriesFill(oFill, 0, false);",
      "ExcelVBA": "With oChart.SeriesCollection(1).Format.Fill\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Visible = msoFalse\nEnd With"
    },
    {
      "Description": "Create a solid fill with RGB color (255, 111, 61)",
      "OnlyOfficeJS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "ExcelVBA": "Set oFill = oChart.SeriesCollection(2).Format.Fill\noFill.ForeColor.RGB = RGB(255, 111, 61)\noFill.Visible = msoTrue"
    },
    {
      "Description": "Set the fill for the second series with the created fill",
      "OnlyOfficeJS": "oChart.SetSeriesFill(oFill, 1, false);",
      "ExcelVBA": "With oChart.SeriesCollection(2).Format.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Visible = msoFalse\nEnd With"
    }
  ]
}
``````json
{
  "Table": [
    {
      "Description": "Get the active worksheet.",
      "VBA": "Set oWorksheet = ActiveSheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Set value of cell B1 to 2014.",
      "VBA": "Range(\"B1\").Value = 2014",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);"
    },
    {
      "Description": "Set value of cell C1 to 2015.",
      "VBA": "Range(\"C1\").Value = 2015",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);"
    },
    {
      "Description": "Set value of cell D1 to 2016.",
      "VBA": "Range(\"D1\").Value = 2016",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);"
    },
    {
      "Description": "Set value of cell A2 to 'Projected Revenue'.",
      "VBA": "Range(\"A2\").Value = \"Projected Revenue\"",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");"
    },
    {
      "Description": "Set value of cell A3 to 'Estimated Costs'.",
      "VBA": "Range(\"A3\").Value = \"Estimated Costs\"",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");"
    },
    {
      "Description": "Set value of cell B2 to 200.",
      "VBA": "Range(\"B2\").Value = 200",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B2\").SetValue(200);"
    },
    {
      "Description": "Set value of cell B3 to 250.",
      "VBA": "Range(\"B3\").Value = 250",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(250);"
    },
    {
      "Description": "Set value of cell C2 to 240.",
      "VBA": "Range(\"C2\").Value = 240",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C2\").SetValue(240);"
    },
    {
      "Description": "Set value of cell C3 to 260.",
      "VBA": "Range(\"C3\").Value = 260",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(260);"
    },
    {
      "Description": "Set value of cell D2 to 280.",
      "VBA": "Range(\"D2\").Value = 280",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D2\").SetValue(280);"
    },
    {
      "Description": "Set value of cell D3 to 280.",
      "VBA": "Range(\"D3\").Value = 280",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"D3\").SetValue(280);"
    },
    {
      "Description": "Add a 3D bar chart based on range A1:D3.",
      "VBA": "Set oChart = oWorksheet.Shapes.AddChart3(201, xlBarClustered, 100, 70, 360, 180).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")",
      "OnlyOffice_JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);"
    },
    {
      "Description": "Set the chart title to 'Financial Overview' with font size 13.",
      "VBA": "With oChart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Format.TextFrame2.TextRange.Font.Size = 13\nEnd With",
      "OnlyOffice_JS": "oChart.SetTitle(\"Financial Overview\", 13);"
    },
    {
      "Description": "Set vertical axis labels font size to 10.",
      "VBA": "oChart.Axes(xlValue).TickLabels.Font.Size = 10",
      "OnlyOffice_JS": "oChart.SetVertAxisLablesFontSize(10);"
    },
    {
      "Description": "Set fill color of the first series to RGB(51, 51, 51).",
      "VBA": "oChart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(51, 51, 51)",
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);"
    },
    {
      "Description": "Set fill color of the second series to RGB(255, 111, 61).",
      "VBA": "oChart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(255, 111, 61)",
      "OnlyOffice_JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);"
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet.",
    "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
  },
  {
    "Description": "Set the value of cell B1 to 2014.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
    "Excel VBA": "oWorksheet.Range(\"B1\").Value = 2014"
  },
  {
    "Description": "Set the value of cell C1 to 2015.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
    "Excel VBA": "oWorksheet.Range(\"C1\").Value = 2015"
  },
  {
    "Description": "Set the value of cell D1 to 2016.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
    "Excel VBA": "oWorksheet.Range(\"D1\").Value = 2016"
  },
  {
    "Description": "Set the value of cell A2 to 'Projected Revenue'.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
    "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
  },
  {
    "Description": "Set the value of cell A3 to 'Estimated Costs'.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
    "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
  },
  {
    "Description": "Set the value of cell B2 to 200.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
    "Excel VBA": "oWorksheet.Range(\"B2\").Value = 200"
  },
  {
    "Description": "Set the value of cell B3 to 250.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
    "Excel VBA": "oWorksheet.Range(\"B3\").Value = 250"
  },
  {
    "Description": "Set the value of cell C2 to 240.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
    "Excel VBA": "oWorksheet.Range(\"C2\").Value = 240"
  },
  {
    "Description": "Set the value of cell C3 to 260.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
    "Excel VBA": "oWorksheet.Range(\"C3\").Value = 260"
  },
  {
    "Description": "Set the value of cell D2 to 280.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
    "Excel VBA": "oWorksheet.Range(\"D2\").Value = 280"
  },
  {
    "Description": "Set the value of cell D3 to 280.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
    "Excel VBA": "oWorksheet.Range(\"D3\").Value = 280"
  },
  {
    "Description": "Add a scatter chart to the worksheet with specified range and parameters.",
    "OnlyOffice JS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"scatter\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
    "Excel VBA": "Dim oChart As ChartObject\nSet oChart = oWorksheet.ChartObjects.Add(Left:=100, Top:=70, Width:=200, Height:=150)\nWith oChart.Chart\n    .SetSourceData Source:=oWorksheet.Range(\"A1:D3\")\n    .ChartType = xlXYScatter\nEnd With"
  },
  {
    "Description": "Set the chart title to 'Financial Overview' with font size 13.",
    "OnlyOffice JS": "oChart.SetTitle(\"Financial Overview\", 13);",
    "Excel VBA": "With oChart.Chart\n    .HasTitle = True\n    .ChartTitle.Text = \"Financial Overview\"\n    .ChartTitle.Font.Size = 13\nEnd With"
  },
  {
    "Description": "Set the major tick mark of the vertical axis to 'cross'.",
    "OnlyOffice JS": "oChart.SetVertAxisMajorTickMark(\"cross\");",
    "Excel VBA": "oChart.Chart.Axes(xlValue).MajorTickMark = xlTickMarkCross"
  },
  {
    "Description": "Create a solid fill with RGB color (51, 51, 51).",
    "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
    "Excel VBA": "Dim oFill As Long\noFill = RGB(51, 51, 51)"
  },
  {
    "Description": "Set the marker fill for the first series.",
    "OnlyOffice JS": "oChart.SetMarkerFill(oFill, 0, 0, true);",
    "Excel VBA": "With oChart.Chart.SeriesCollection(1).Format.Fill\n    .ForeColor.RGB = oFill\n    .Visible = msoTrue\nEnd With"
  },
  {
    "Description": "Create a stroke with specified width and RGB color (51, 51, 51).",
    "OnlyOffice JS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));",
    "Excel VBA": "Dim oStrokeWeight As Single\nDim oStrokeColor As Long\noStrokeWeight = 0.5\noStrokeColor = RGB(51, 51, 51)"
  },
  {
    "Description": "Set the marker outline for the first series.",
    "OnlyOffice JS": "oChart.SetMarkerOutLine(oStroke, 0, 0, true);",
    "Excel VBA": "With oChart.Chart.SeriesCollection(1).Format.Line\n    .Weight = oStrokeWeight\n    .ForeColor.RGB = oStrokeColor\n    .Visible = msoTrue\nEnd With"
  },
  {
    "Description": "Create a solid fill with RGB color (255, 111, 61).",
    "OnlyOffice JS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
    "Excel VBA": "oFill = RGB(255, 111, 61)"
  },
  {
    "Description": "Set the marker fill for the second series.",
    "OnlyOffice JS": "oChart.SetMarkerFill(oFill, 1, 0, true);",
    "Excel VBA": "With oChart.Chart.SeriesCollection(2).Format.Fill\n    .ForeColor.RGB = oFill\n    .Visible = msoTrue\nEnd With"
  },
  {
    "Description": "Create a stroke with specified width and RGB color (255, 111, 61).",
    "OnlyOffice JS": "oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));",
    "Excel VBA": "oStrokeWeight = 0.5\noStrokeColor = RGB(255, 111, 61)"
  },
  {
    "Description": "Set the marker outline for the second series.",
    "OnlyOffice JS": "oChart.SetMarkerOutLine(oStroke, 1, 0, true);",
    "Excel VBA": "With oChart.Chart.SeriesCollection(2).Format.Line\n    .Weight = oStrokeWeight\n    .ForeColor.RGB = oStrokeColor\n    .Visible = msoTrue\nEnd With"
  }
]
``````json
{
  "table": [
    {
      "Description": "Get the active worksheet",
      "VBA": "Set oWorksheet = ActiveSheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Set cell B1 to 2014",
      "VBA": "Range(\"B1\").Value = 2014",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B1\").SetValue(2014);"
    },
    {
      "Description": "Set cell C1 to 2015",
      "VBA": "Range(\"C1\").Value = 2015",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C1\").SetValue(2015);"
    },
    {
      "Description": "Set cell D1 to 2016",
      "VBA": "Range(\"D1\").Value = 2016",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D1\").SetValue(2016);"
    },
    {
      "Description": "Set cell A2 to 'Projected Revenue'",
      "VBA": "Range(\"A2\").Value = \"Projected Revenue\"",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");"
    },
    {
      "Description": "Set cell A3 to 'Estimated Costs'",
      "VBA": "Range(\"A3\").Value = \"Estimated Costs\"",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");"
    },
    {
      "Description": "Set cell B2 to 200",
      "VBA": "Range(\"B2\").Value = 200",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B2\").SetValue(200);"
    },
    {
      "Description": "Set cell B3 to 250",
      "VBA": "Range(\"B3\").Value = 250",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B3\").SetValue(250);"
    },
    {
      "Description": "Set cell C2 to 240",
      "VBA": "Range(\"C2\").Value = 240",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C2\").SetValue(240);"
    },
    {
      "Description": "Set cell C3 to 260",
      "VBA": "Range(\"C3\").Value = 260",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C3\").SetValue(260);"
    },
    {
      "Description": "Set cell D2 to 280",
      "VBA": "Range(\"D2\").Value = 280",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D2\").SetValue(280);"
    },
    {
      "Description": "Set cell D3 to 280",
      "VBA": "Range(\"D3\").Value = 280",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D3\").SetValue(280);"
    },
    {
      "Description": "Add a scatter chart to the worksheet",
      "VBA": "Set oChart = oWorksheet.Shapes.AddChart2(-1, xlXYScatter).Chart",
      "OnlyOfficeJS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"scatter\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);"
    },
    {
      "Description": "Set chart title to 'Financial Overview' with font size 13",
      "VBA": "With oChart.ChartTitle\n    .Text = \"Financial Overview\"\n    .Format.TextFrame2.TextRange.Font.Size = 13\nEnd With",
      "OnlyOfficeJS": "oChart.SetTitle(\"Financial Overview\", 13);"
    },
    {
      "Description": "Set vertical axis minor tick mark to 'out'",
      "VBA": "oChart.Axes(xlValue).MinorTickMark = xlTickMarkOutside",
      "OnlyOfficeJS": "oChart.SetVertAxisMinorTickMark(\"out\");"
    },
    {
      "Description": "Create a solid fill with RGB (51, 51, 51)",
      "VBA": "With oChart.SeriesCollection(1).Format.Fill\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With",
      "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));"
    },
    {
      "Description": "Set marker fill for series 0, point 0",
      "VBA": "oChart.SeriesCollection(1).Points(1).MarkerBackgroundColor = RGB(51, 51, 51)",
      "OnlyOfficeJS": "oChart.SetMarkerFill(oFill, 0, 0, true);"
    },
    {
      "Description": "Create stroke with width 0.5 and RGB (51, 51, 51)",
      "VBA": "With oChart.SeriesCollection(1).Points(1).Format.Line\n    .Visible = msoTrue\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(51, 51, 51)\nEnd With",
      "OnlyOfficeJS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));"
    },
    {
      "Description": "Set marker outline for series 0, point 0",
      "VBA": "With oChart.SeriesCollection(1).Points(1).Format.Line\n    .Visible = msoTrue\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(51, 51, 51)\nEnd With",
      "OnlyOfficeJS": "oChart.SetMarkerOutLine(oStroke, 0, 0, true);"
    },
    {
      "Description": "Create a solid fill with RGB (255, 111, 61)",
      "VBA": "With oChart.SeriesCollection(2).Format.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With",
      "OnlyOfficeJS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));"
    },
    {
      "Description": "Set marker fill for series 1, point 0",
      "VBA": "oChart.SeriesCollection(2).Points(1).MarkerBackgroundColor = RGB(255, 111, 61)",
      "OnlyOfficeJS": "oChart.SetMarkerFill(oFill, 1, 0, true);"
    },
    {
      "Description": "Create stroke with width 0.5 and RGB (255, 111, 61)",
      "VBA": "With oChart.SeriesCollection(2).Points(1).Format.Line\n    .Visible = msoTrue\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With",
      "OnlyOfficeJS": "var oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));"
    },
    {
      "Description": "Set marker outline for series 1, point 0",
      "VBA": "With oChart.SeriesCollection(2).Points(1).Format.Line\n    .Visible = msoTrue\n    .Weight = 0.5\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With",
      "OnlyOfficeJS": "oChart.SetMarkerOutLine(oStroke, 1, 0, true);"
    }
  ]
}
```**Description:**  
This code sets up data in a worksheet and creates a 3D bar chart with specific formatting.

```json
{
  "RAGTable": [
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B1\").SetValue(2014);",
      "VBA": "oWorksheet.Range(\"B1\").Value = 2014"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C1\").SetValue(2015);",
      "VBA": "oWorksheet.Range(\"C1\").Value = 2015"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D1\").SetValue(2016);",
      "VBA": "oWorksheet.Range(\"D1\").Value = 2016"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");",
      "VBA": "oWorksheet.Range(\"A2\").Value = \"Projected Revenue\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");",
      "VBA": "oWorksheet.Range(\"A3\").Value = \"Estimated Costs\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B2\").SetValue(200);",
      "VBA": "oWorksheet.Range(\"B2\").Value = 200"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B3\").SetValue(250);",
      "VBA": "oWorksheet.Range(\"B3\").Value = 250"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C2\").SetValue(240);",
      "VBA": "oWorksheet.Range(\"C2\").Value = 240"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C3\").SetValue(260);",
      "VBA": "oWorksheet.Range(\"C3\").Value = 260"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D2\").SetValue(280);",
      "VBA": "oWorksheet.Range(\"D2\").Value = 280"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"D3\").SetValue(280);",
      "VBA": "oWorksheet.Range(\"D3\").Value = 280"
    },
    {
      "OnlyOfficeJS": "var oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);",
      "VBA": "Set oChart = oWorksheet.Shapes.AddChart2(201, xlBarClustered, 100, 70, 200, 150).Chart\noChart.SetSourceData Source:=oWorksheet.Range(\"A1:D3\")"
    },
    {
      "OnlyOfficeJS": "oChart.SetTitle(\"Financial Overview\", 13);",
      "VBA": "oChart.HasTitle = True\noChart.ChartTitle.Text = \"Financial Overview\"\nWith oChart.ChartTitle.Format.TextFrame2.TextRange.Font\n    .Size = 13\nEnd With"
    },
    {
      "OnlyOfficeJS": "oChart.SetVertAxisTickLabelPosition(\"high\");",
      "VBA": "oChart.Axes(xlValue).TickLabelPosition = xlTickLabelPositionHigh"
    },
    {
      "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "VBA": "Dim oFill As FillFormat\nSet oFill = oChart.SeriesCollection(1).Format.Fill\noFill.ForeColor.RGB = RGB(51, 51, 51)\noFill.Solid"
    },
    {
      "OnlyOfficeJS": "oChart.SetSeriesFill(oFill, 0, false);",
      "VBA": "With oChart.SeriesCollection(1).Format.Fill\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With"
    },
    {
      "OnlyOfficeJS": "oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "VBA": "Set oFill = oChart.SeriesCollection(2).Format.Fill\noFill.ForeColor.RGB = RGB(255, 111, 61)\noFill.Solid"
    },
    {
      "OnlyOfficeJS": "oChart.SetSeriesFill(oFill, 1, false);",
      "VBA": "With oChart.SeriesCollection(2).Format.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
    }
  ]
}
``````json
{
  "description": "This example clears all added custom functions, adds a custom ADD function, sets cell A1 to use it, clears functions again, and sets cell A3 with a message.",
  "OnlyOffice_JS": "// This example clear all added custom functions.\nApi.AddCustomFunctionLibrary(\"LibraryName\", function(){\n    /**\n     * Function that returns the argument\n     * @customfunction\n     * @param {any} first First argument.\n     * @returns {any} second Second argument.\n     */\n    Api.AddCustomFunction(function ADD(first, second) {\n        return first + second;\n    });\n});\n\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.GetRange(\"A1\").SetValue(\"=ADD(1, 2)\");\nApi.ClearCustomFunctions();\noWorksheet.GetRange(\"A3\").SetValue(\"All the custom functions were removed.\");",
  "Excel_VBA": "' This example clears all added custom functions.\nSub ManageCustomFunctions()\n    ' Define and add custom function ADD\n    Application.MacroOptions Macro:=\"ADD\", Description:=\"Returns the sum of two arguments.\", Category:=\"User Defined\"\n\n    ' Set cell A1 to use the custom ADD function\n    ActiveSheet.Range(\"A1\").Formula = \"=ADD(1, 2)\"\n\n    ' Clear custom functions (VBA does not support removing custom functions at runtime)\n    ' Therefore, we can remove the macro option if needed\n    ' Note: Removing MacroOptions requires access to the VBA project, which is not recommended at runtime\n\n    ' Set cell A3 with a message\n    ActiveSheet.Range(\"A3\").Value = \"All the custom functions were removed.\"\nEnd Sub\n\n' Define the custom ADD function\nFunction ADD(first As Variant, second As Variant) As Variant\n    ADD = first + second\nEnd Function"
}
``````json
{
  "description": "This example gets a class type and inserts it into the table.",
  "codeComparison": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oColor = Api.CreateColorFromRGB(255, 111, 61);",
      "Excel VBA": "Dim oColor As Long\noColor = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Text with color\");",
      "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Text with color\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetFontColor(oColor);",
      "Excel VBA": "oWorksheet.Range(\"A2\").Font.Color = oColor"
    },
    {
      "OnlyOffice JS": "var sColorClassType = oColor.GetClassType();",
      "Excel VBA": "Dim sColorClassType As String\nsColorClassType = TypeName(oColor)"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A4\").SetValue(\"Class type = \" + sColorClassType);",
      "Excel VBA": "oWorksheet.Range(\"A4\").Value = \"Class type = \" & sColorClassType"
    }
  ]
}
``````json
[
  {
    "Description": "Get active worksheet",
    "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
  },
  {
    "Description": "Create color from RGB",
    "OnlyOffice_JS": "var oColor = Api.CreateColorFromRGB(255, 111, 61);",
    "Excel_VBA": "oColor = RGB(255, 111, 61)"
  },
  {
    "Description": "Set value of cell A2",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Text with color\");",
    "Excel_VBA": "oWorksheet.Range(\"A2\").Value = \"Text with color\""
  },
  {
    "Description": "Set font color of cell A2",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"A2\").SetFontColor(oColor);",
    "Excel_VBA": "oWorksheet.Range(\"A2\").Font.Color = oColor"
  },
  {
    "Description": "Get RGB color",
    "OnlyOffice_JS": "var nColor = oColor.GetRGB();",
    "Excel_VBA": "nColor = oColor"
  },
  {
    "Description": "Set value of cell A4 with RGB color",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"A4\").SetValue(\"Cell color in RGB format: \" + nColor);",
    "Excel_VBA": "oWorksheet.Range(\"A4\").Value = \"Cell color in RGB format: \" & nColor"
  }
]
``````json
{
  "Description": "This example gets a class type and inserts it into the table.",
  "CodeComparison": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oColor = Api.CreateColorFromRGB(255, 111, 61);",
      "Excel VBA": "Dim oColor As Long\noColor = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Text with color\");",
      "Excel VBA": "Range(\"A2\").Value = \"Text with color\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetFontColor(oColor);",
      "Excel VBA": "Range(\"A2\").Font.Color = oColor"
    },
    {
      "OnlyOffice JS": "var sColorClassType = oColor.GetClassType();",
      "Excel VBA": "' VBA does not have a direct equivalent for GetClassType"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A4\").SetValue(\"Class type = \" + sColorClassType);",
      "Excel VBA": "Range(\"A4\").Value = \"Class type = \" & sColorClassType"
    }
  ]
}
``````json
[
  {
    "Description": "Gets the active worksheet",
    "VBA": "Set oWorksheet = ActiveSheet",
    "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();"
  },
  {
    "Description": "Creates a color from RGB values (255, 111, 61)",
    "VBA": "oColor = RGB(255, 111, 61)",
    "OnlyOfficeJS": "var oColor = Api.CreateColorFromRGB(255, 111, 61);"
  },
  {
    "Description": "Sets the value of cell A2 to 'Text with color'",
    "VBA": "oWorksheet.Range(\"A2\").Value = \"Text with color\"",
    "OnlyOfficeJS": "oWorksheet.GetRange(\"A2\").SetValue(\"Text with color\");"
  },
  {
    "Description": "Sets the font color of cell A2",
    "VBA": "oWorksheet.Range(\"A2\").Font.Color = oColor",
    "OnlyOfficeJS": "oWorksheet.GetRange(\"A2\").SetFontColor(oColor);"
  },
  {
    "Description": "Gets the RGB value of the color",
    "VBA": "nColor = oColor",
    "OnlyOfficeJS": "var nColor = oColor.GetRGB();"
  },
  {
    "Description": "Sets the value of cell A4 to display the RGB color",
    "VBA": "oWorksheet.Range(\"A4\").Value = \"Cell color in RGB format: \" & nColor",
    "OnlyOfficeJS": "oWorksheet.GetRange(\"A4\").SetValue(\"Cell color in RGB format: \" + nColor);"
  }
]
```**This code adds a reply to a comment in a cell, sets values, and retrieves the reply text.**

```json
{
  "Methods": [
    {
      "OnlyOffice JS": "Api.GetActiveSheet()",
      "Excel VBA": "ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\")",
      "Excel VBA": "Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\")",
      "Excel VBA": "Range(\"A1\")"
    },
    {
      "OnlyOffice JS": "oRange.AddComment(\"This is just a number.\")",
      "Excel VBA": "Range(\"A1\").AddComment(\"This is just a number.\")"
    },
    {
      "OnlyOffice JS": "oComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\")",
      "Excel VBA": "Range(\"A1\").Comment.Replies.Add(\"Reply 1\", \"John Smith\")"
    },
    {
      "OnlyOffice JS": "oComment.GetReply()",
      "Excel VBA": "Set oReply = Range(\"A1\").Comment.Replies(1)"
    },
    {
      "OnlyOffice JS": "oReply.GetText()",
      "Excel VBA": "oReply.Text"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment's reply text: \")",
      "Excel VBA": "Range(\"A3\").Value = \"Comment's reply text: \""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(oReply.GetText())",
      "Excel VBA": "Range(\"B3\").Value = oReply.Text"
    }
  ]
}
``````json
{
  "Table": [
    {
      "Description": "Get the active sheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "Description": "Set value to cell A1",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "Description": "Get range A1",
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "Description": "Add comment to range",
      "OnlyOffice_JS": "oRange.AddComment(\"This is just a number.\");",
      "Excel_VBA": "oRange.AddComment \"This is just a number.\""
    },
    {
      "Description": "Get comment from range",
      "OnlyOffice_JS": "var oComment = oRange.GetComment();",
      "Excel_VBA": "Set oComment = oRange.Comment"
    },
    {
      "Description": "Delete the comment",
      "OnlyOffice_JS": "oComment.Delete();",
      "Excel_VBA": "oComment.Delete"
    },
    {
      "Description": "Set value to cell A3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"The comment was just deleted from A1.\");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"The comment was just deleted from A1.\""
    }
  ]
}
``````json
{
  "description": "This example shows how to get the comment author's name.",
  "RAGTable": [
    {
      "OnlyOffice JS": "Api.GetActiveSheet()",
      "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\")",
      "Excel VBA": "Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\")",
      "Excel VBA": "Set oRange = Range(\"A1\")"
    },
    {
      "OnlyOffice JS": "oRange.AddComment(\"This is just a number.\")",
      "Excel VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment's author: \")",
      "Excel VBA": "Range(\"A3\").Value = \"Comment's author: \""
    },
    {
      "OnlyOffice JS": "oComment.GetAuthorName()",
      "Excel VBA": "oComment.Author"
    }
  ]
}
``````json
{
  "Description": "This example gets a class type and inserts it into the table.",
  "Code": {
    "OnlyOffice_JS": "// This example gets a class type and inserts it into the table.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.GetRange(\"A1\").SetValue(\"1\");\nvar oRange = oWorksheet.GetRange(\"A1\");\noRange.AddComment(\"This is just a number.\");\nvar oComment = oRange.GetComment();\nvar sType = oComment.GetClassType();\noWorksheet.GetRange(\"A3\").SetValue(\"Type: \" + sType);",
    "Excel_VBA": "' This example gets a class type and inserts it into the table.\nSub Example()\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ThisWorkbook.ActiveSheet\n    oWorksheet.Range(\"A1\").Value = \"1\"\n    Dim oRange As Range\n    Set oRange = oWorksheet.Range(\"A1\")\n    oRange.AddComment \"This is just a number.\"\n    Dim oComment As Comment\n    Set oComment = oRange.Comment\n    ' VBA does not have a direct equivalent of GetClassType, using Shape.Name as an example\n    Dim sType As String\n    sType = oComment.Shape.Name\n    oWorksheet.Range(\"A3\").Value = \"Type: \" & sType\nEnd Sub"
  }
}
``````json
{
  "table": {
    "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Description": "Get the active sheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
      },
      {
        "Description": "Set value in cell A1",
        "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
        "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
      },
      {
        "Description": "Get range A1",
        "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"A1\");",
        "Excel VBA": "Set oRange = oWorksheet.Range(\"A1\")"
      },
      {
        "Description": "Add comment to A1",
        "OnlyOffice JS": "oRange.AddComment(\"This is just a number.\");",
        "Excel VBA": "oRange.AddComment \"This is just a number.\""
      },
      {
        "Description": "Set value in cell A3",
        "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment: \");",
        "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Comment: \""
      },
      {
        "Description": "Set comment ID in cell B3",
        "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(oRange.GetComment().GetId());",
        "Excel VBA": "oWorksheet.Range(\"B3\").Value = oRange.Comment.ID"
      }
    ]
  }
}
``````json
{
  "Description": "This code demonstrates how to set a value in cell A1, add a comment to it, and retrieve the quote text of the comment, then display it in cell B3.",
  "CodeEquivalents": [
    {
      "Method": "GetActiveSheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "Method": "GetRange(\"A1\").SetValue(\"1\")",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "Method": "AddComment",
      "OnlyOfficeJS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "Method": "GetQuoteText",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B3\").SetValue(oComment.GetQuoteText());",
      "VBA": "oWorksheet.Range(\"B3\").Value = oComment.Text"
    }
  ]
}
``````json
{
  "RAGTable": [
    {
      "Description": "Get the active sheet",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set value of cell A1 to '1'",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel VBA": "Range(\"A1\").Value = \"1\""
    },
    {
      "Description": "Get range A1",
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel VBA": "Set oRange = Range(\"A1\")"
    },
    {
      "Description": "Add a comment to the range A1",
      "OnlyOffice JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "Excel VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "Description": "Add a reply to the comment",
      "OnlyOffice JS": "oComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");",
      "Excel VBA": "oComment.Replies.Add \"Reply 1\", \"John Smith\", \"uid-1\""
    },
    {
      "Description": "Set value of cell A3 to 'Comment replies count: '",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment replies count: \");",
      "Excel VBA": "Range(\"A3\").Value = \"Comment replies count: \""
    },
    {
      "Description": "Set value of cell B3 to the number of comment replies",
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(oComment.GetRepliesCount());",
      "Excel VBA": "Range(\"B3\").Value = oComment.Replies.Count"
    }
  ]
}
``````json
{
  "table": {
    "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      [
        "This code sets the value of cell A1, adds a comment to it, adds a reply to the comment, retrieves the reply, and writes the reply text to cells A3 and B3.",
        "// OnlyOffice JS code\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.GetRange(\"A1\").SetValue(\"1\");\nvar oRange = oWorksheet.GetRange(\"A1\");\nvar oComment = oRange.AddComment(\"This is just a number.\");\noComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");\nvar oReply = oComment.GetReply();\noWorksheet.GetRange(\"A3\").SetValue(\"Comment's reply text: \");\noWorksheet.GetRange(\"B3\").SetValue(oReply.GetText());",
        "' Excel VBA equivalent\nSub Example()\n    Dim oWorksheet As Worksheet\n    Dim oRange As Range\n    Dim oComment As CommentThreaded\n    Dim oReply As CommentThreaded\n\n    Set oWorksheet = ActiveSheet\n    oWorksheet.Range(\"A1\").Value = \"1\"\n    Set oRange = oWorksheet.Range(\"A1\")\n    Set oComment = oRange.AddCommentThreaded(\"This is just a number.\")\n    oComment.Replies.Add \"Reply 1\", \"John Smith\", \"uid-1\"\n    \n    If oComment.Replies.Count > 0 Then\n        Set oReply = oComment.Replies(1)\n    End If\n    \n    oWorksheet.Range(\"A3\").Value = \"Comment's reply text: \"\n    If Not oReply Is Nothing Then\n        oWorksheet.Range(\"B3\").Value = oReply.Text\n    End If\nEnd Sub"
      ]
    ]
  }
}
``````json
{
  "description": "This example shows how to get the comment text.",
  "methods": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel_VBA": "Dim oRange As Range\nSet oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "OnlyOffice_JS": "oRange.AddComment(\"This is just a number.\");",
      "Excel_VBA": "oRange.AddComment \"This is just a number.\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment: \");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Comment: \""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(oRange.GetComment().GetText());",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = oRange.Comment.Text"
    }
  ]
}
``````json
{
  "description": "This example shows how to get the timestamp of the comment creation in the current time zone format.",
  "RAG_Table": [
    {
      "Action": "Get active sheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "Action": "Set value to A1",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "Action": "Get range A1",
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "VBA": "Set oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "Action": "Add comment to range",
      "OnlyOffice_JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "Action": "Set value to A3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Timestamp: \");",
      "VBA": "oWorksheet.Range(\"A3\").Value = \"Timestamp: \""
    },
    {
      "Action": "Set value to B3 with comment timestamp",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(oComment.GetTime());",
      "VBA": "oWorksheet.Range(\"B3\").Value = oComment.Time"
    }
  ]
}
``````json
{
  "RAG_Table": {
    "Headers": [
      "Description",
      "OnlyOffice_JS",
      "Excel_VBA"
    ],
    "Rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel_VBA": "Set oWorksheet = ActiveSheet"
      },
      {
        "Description": "Set value '1' to cell A1",
        "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
        "Excel_VBA": "Range(\"A1\").Value = \"1\""
      },
      {
        "Description": "Get range A1",
        "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
        "Excel_VBA": "Set oRange = oWorksheet.Range(\"A1\")"
      },
      {
        "Description": "Add a comment to range A1",
        "OnlyOffice_JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
        "Excel_VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")"
      },
      {
        "Description": "Set value 'Timestamp UTC: ' to cell A3",
        "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Timestamp UTC: \");",
        "Excel_VBA": "Range(\"A3\").Value = \"Timestamp UTC: \""
      },
      {
        "Description": "Set the UTC timestamp of the comment to cell B3",
        "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(oComment.GetTimeUTC());",
        "Excel_VBA": "Range(\"B3\").Value = oComment.Author.Date ' Assuming Author.Date returns UTC timestamp"
      }
    ]
  }
}
``````json
{
  "description": "This example shows how to get the user ID of the comment author.",
  "OnlyOfficeJS": "// This example shows how to get the user ID of the comment author.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.GetRange(\"A1\").SetValue(\"1\");\nvar oRange = oWorksheet.GetRange(\"A1\");\nvar oComment = oRange.AddComment(\"This is just a number.\");\noWorksheet.GetRange(\"A3\").SetValue(\"Comment's user Id: \");\noWorksheet.GetRange(\"B3\").SetValue(oComment.GetUserId());",
  "ExcelVBA": "Sub GetCommentAuthorUserID()\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ActiveSheet\n    oWorksheet.Range(\"A1\").Value = \"1\"\n    Dim oRange As Range\n    Set oRange = oWorksheet.Range(\"A1\")\n    oRange.AddComment \"This is just a number.\"\n    oWorksheet.Range(\"A3\").Value = \"Comment's user Id: \"\n    oWorksheet.Range(\"B3\").Value = oRange.Comment.Author\nEnd Sub"
}
```**This code checks if a comment is solved or not.**

```json
{
  "RAG_Table": [
    {
      "Description": "Get the active worksheet.",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set the value of cell A1 to '1'.",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel_VBA": "Range(\"A1\").Value = \"1\""
    },
    {
      "Description": "Get the range object for cell A1.",
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel_VBA": "Set oRange = Range(\"A1\")"
    },
    {
      "Description": "Add a comment to cell A1.",
      "OnlyOffice_JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "Excel_VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "Description": "Set the value of cell A3 to 'Comment is solved: '.",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment is solved: \");",
      "Excel_VBA": "Range(\"A3\").Value = \"Comment is solved: \""
    },
    {
      "Description": "Set the value of cell B3 to the solved status of the comment.",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(oComment.IsSolved());",
      "Excel_VBA": "Range(\"B3\").Value = oComment.IsSolved"
    }
  ]
}
``````json
{
  "description": "This example adds a reply to a comment.",
  "methods": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = 1"
    },
    {
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel_VBA": "Dim oRange As Range\nSet oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "OnlyOffice_JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "Excel_VBA": "Dim oComment As Comment\nSet oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "OnlyOffice_JS": "oComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");",
      "Excel_VBA": "oComment.Replies.Add \"Reply 1\", \"John Smith\", \"uid-1\""
    },
    {
      "OnlyOffice_JS": "var oReply = oComment.GetReply();",
      "Excel_VBA": "Dim oReply As Reply\nSet oReply = oComment.Replies(1)"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment's reply text: \");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Comment's reply text: \""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(oReply.GetText());",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = oReply.Text"
    }
  ]
}
``````json
{
  "description": "This example deletes the ApiComment object.",
  "methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel VBA": "Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel VBA": "Set oRange = Range(\"A1\")"
    },
    {
      "OnlyOffice JS": "oRange.AddComment(\"This is just a number.\");",
      "Excel VBA": "oRange.AddComment \"This is just a number.\""
    },
    {
      "OnlyOffice JS": "var oComment = oRange.GetComment();",
      "Excel VBA": "Set oComment = oRange.Comment"
    },
    {
      "OnlyOffice JS": "oComment.Delete();",
      "Excel VBA": "oComment.Delete"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"The comment was just deleted from A1.\");",
      "Excel VBA": "Range(\"A3\").Value = \"The comment was just deleted from A1.\""
    }
  ]
}
``````json
{
  "Description": "This example shows how to get the comment author's name.",
  "Steps": [
    {
      "Step": "Get the active worksheet",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Step": "Set value '1' in cell A1",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "Step": "Get range A1",
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel VBA": "Set oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "Step": "Add a comment to range A1",
      "OnlyOffice JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "Excel VBA": "oRange.AddComment \"This is just a number.\"\nSet oComment = oRange.Comment"
    },
    {
      "Step": "Set value 'Comment's author: ' in cell A3",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment's author: \");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Comment's author: \""
    },
    {
      "Step": "Set value of cell B3 to the comment author's name",
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(oComment.GetAuthorName());",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = oComment.Author"
    }
  ]
}
``````json
{
  "description": "This example gets a class type and inserts it into the table.",
  "code_mapping": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel_VBA": "Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel_VBA": "Set oRange = Range(\"A1\")"
    },
    {
      "OnlyOffice_JS": "oRange.AddComment(\"This is just a number.\");",
      "Excel_VBA": "oRange.AddComment \"This is just a number.\""
    },
    {
      "OnlyOffice_JS": "var oComment = oRange.GetComment();",
      "Excel_VBA": "Set oComment = oRange.Comment"
    },
    {
      "OnlyOffice_JS": "var sType = oComment.GetClassType();",
      "Excel_VBA": "sType = TypeName(oComment)"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Type: \" + sType);",
      "Excel_VBA": "Range(\"A3\").Value = \"Type: \" & sType"
    }
  ]
}
``````json
{
  "Description": "This example shows how to get the comment ID.",
  "Methods": [
    {
      "OnlyOffice JS": "// This example shows how to get the comment ID.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.GetRange(\"A1\").SetValue(\"1\");\nvar oRange = oWorksheet.GetRange(\"A1\");\noRange.AddComment(\"This is just a number.\");\noWorksheet.GetRange(\"A3\").SetValue(\"Comment: \");\noWorksheet.GetRange(\"B3\").SetValue(oRange.GetComment().GetId());",
      "Excel VBA": "' This example shows how to get the comment ID\nDim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet\noWorksheet.Range(\"A1\").Value = \"1\"\nDim oRange As Range\nSet oRange = oWorksheet.Range(\"A1\")\noRange.AddComment \"This is just a number.\"\noWorksheet.Range(\"A3\").Value = \"Comment: \"\noWorksheet.Range(\"B3\").Value = oRange.Comment.Text"
    }
  ]
}
``````json
{
  "Headers": ["Description", "OnlyOffice JS", "Excel VBA"],
  "Rows": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Description": "Set value '1' to cell A1",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "Description": "Get range A1",
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel VBA": "Set oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "Description": "Add a comment to range A1 with text 'This is just a number.'",
      "OnlyOffice JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "Excel VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "Description": "Set value 'Comment's quote text: ' to cell A3",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment's quote text: \");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Comment's quote text: \""
    },
    {
      "Description": "Set value of cell B3 to the comment's quote text",
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(oComment.GetQuoteText());",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = oComment.Text"
    }
  ]
}
``````json
{
  "Description": "This example shows how to get a number of the comment replies.",
  "Code_Equivalent": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "OnlyOffice_JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "Excel_VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "OnlyOffice_JS": "oComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");",
      "Excel_VBA": "oComment.Replies.Add \"Reply 1\", \"John Smith\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment replies count: \");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Comment replies count: \""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(oComment.GetRepliesCount());",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = oComment.Replies.Count"
    }
  ]
}
``````json
{
  "Description": "This example shows how to get the specified comment reply.",
  "Mappings": [
    {
      "OnlyOffice_JS": "Api.GetActiveSheet()",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\")",
      "Excel_VBA": "Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\")",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "OnlyOffice_JS": "oRange.AddComment(\"This is just a number.\")",
      "Excel_VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "OnlyOffice_JS": "oComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\")",
      "Excel_VBA": "oComment.Replies.Add \"Reply 1\", \"John Smith\", \"uid-1\""
    },
    {
      "OnlyOffice_JS": "oComment.GetReply()",
      "Excel_VBA": "Set oReply = oComment.Replies.Item(1)"
    },
    {
      "OnlyOffice_JS": "oReply.GetText()",
      "Excel_VBA": "oReply.Text"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment's reply text: \")",
      "Excel_VBA": "Range(\"A3\").Value = \"Comment's reply text: \""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(oReply.GetText())",
      "Excel_VBA": "Range(\"B3\").Value = oReply.Text"
    }
  ]
}
``````json
{
  "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
  "rows": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set value in cell A1",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "Description": "Get range A1",
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel VBA": "Dim oRange As Range\nSet oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "Description": "Add comment to range A1",
      "OnlyOffice JS": "oRange.AddComment(\"This is just a number.\");",
      "Excel VBA": "oRange.AddComment \"This is just a number.\""
    },
    {
      "Description": "Set value in cell A3",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment: \");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Comment: \""
    },
    {
      "Description": "Get comment text from range A1 and set it in cell B3",
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(oRange.GetComment().GetText());",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = oRange.Comment.Text"
    }
  ]
}
``````json
{
  "Description": "This example shows how to get the timestamp of the comment creation in the current time zone format.",
  "Excel VBA": "Sub AddCommentWithTimestamp()\n    Dim ws As Worksheet\n    Dim rng As Range\n    Dim cmt As Comment\n\n    Set ws = ActiveSheet\n    ws.Range(\"A1\").Value = \"1\"\n    Set rng = ws.Range(\"A1\")\n    Set cmt = rng.AddComment(\"This is just a number.\")\n    ws.Range(\"A3\").Value = \"Timestamp: \"\n    ws.Range(\"B3\").Value = Now\nEnd Sub",
  "OnlyOffice JS": "// This example shows how to get the timestamp of the comment creation in the current time zone format.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.GetRange(\"A1\").SetValue(\"1\");\nvar oRange = oWorksheet.GetRange(\"A1\");\nvar oComment = oRange.AddComment(\"This is just a number.\");\noWorksheet.GetRange(\"A3\").SetValue(\"Timestamp: \");\noWorksheet.GetRange(\"B3\").SetValue(oComment.GetTime());"
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
  },
  {
    "Description": "Set the value '1' in cell A1",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
    "Excel_VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
  },
  {
    "Description": "Get the range A1",
    "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
    "Excel_VBA": "Dim oRange As Range\nSet oRange = oWorksheet.Range(\"A1\")"
  },
  {
    "Description": "Add a comment to the range A1",
    "OnlyOffice_JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
    "Excel_VBA": "Dim oComment As Comment\nSet oComment = oRange.AddComment(\"This is just a number.\")"
  },
  {
    "Description": "Set the value 'Timestamp UTC: ' in cell A3",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Timestamp UTC: \");",
    "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Timestamp UTC: \""
  },
  {
    "Description": "Set the UTC timestamp of the comment in cell B3",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(oComment.GetTimeUTC());",
    "Excel_VBA": "oWorksheet.Range(\"B3\").Value = oComment.Temporary"
  }
]
```**Description:** This example sets a value in a cell, adds a comment, and retrieves the user ID of the comment author.

```json
{
  "RAGTable": [
    {
      "Method": "GetActiveSheet",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Method": "GetRange",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\")",
      "Excel VBA": "oWorksheet.Range(\"A1\")"
    },
    {
      "Method": "SetValue",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "Method": "AddComment",
      "OnlyOffice JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "Excel VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "Method": "GetUserId",
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(oComment.GetUserId());",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = oComment.Author"
    }
  ]
}
``````json
{
  "Description": "This example checks if a comment is solved or not.",
  "RAG_Table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "OnlyOffice_JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "Excel_VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment is solved: \");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Comment is solved: \""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(oComment.IsSolved());",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = oComment.Solved"
    }
  ]
}
```**Description:** This example removes the specified comment replies.

```json
{
  "RAGTable": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel VBA": "Dim oRange As Range\nSet oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "OnlyOffice JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "Excel VBA": "Dim oComment As Comment\nSet oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "OnlyOffice JS": "oComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");",
      "Excel VBA": "oComment.Replies.Add \"Reply 1\", \"John Smith\", \"uid-1\""
    },
    {
      "OnlyOffice JS": "oComment.AddReply(\"Reply 2\", \"John Smith\", \"uid-1\");",
      "Excel VBA": "oComment.Replies.Add \"Reply 2\", \"John Smith\", \"uid-1\""
    },
    {
      "OnlyOffice JS": "oComment.RemoveReplies(0, 1, false);",
      "Excel VBA": "oComment.Replies.Remove 1"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment replies count: \");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Comment replies count: \""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(oComment.GetRepliesCount());",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = oComment.Replies.Count"
    }
  ]
}
``````json
{
  "description": "This code sets values in cells, adds a comment with an author to a cell, modifies the comment's author name, and writes the updated author name to another cell.",
  "codeComparison": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel_VBA": "Dim oRange As Range\nSet oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "OnlyOffice_JS": "var oComment = oRange.AddComment(\"This is just a number.\", \"John Smith\");",
      "Excel_VBA": "Dim oComment As Comment\nSet oComment = oRange.AddComment(\"This is just a number.\")\noComment.Author = \"John Smith\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment's author: \");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Comment's author: \""
    },
    {
      "OnlyOffice_JS": "oComment.SetAuthorName(\"Mark Potato\");",
      "Excel_VBA": "oComment.Author = \"Mark Potato\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(oComment.GetAuthorName());",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = oComment.Author"
    }
  ]
}
``````json
{
  "Description": "This example marks a comment as solved.",
  "Table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel VBA": "Set oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "OnlyOffice JS": "var oComment = oRange.AddComment(\"This is just a number.\", \"John Smith\");",
      "Excel VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")\n oComment.Author = \"John Smith\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment is solved: \");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Comment is solved: \""
    },
    {
      "OnlyOffice JS": "oComment.SetSolved(true);",
      "Excel VBA": "oComment.Solved = True"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(oComment.IsSolved());",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = oComment.Solved"
    }
  ]
}
``````json
{
  "Description": "This example sets the comment text.",
  "CodeComparison": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel VBA": "Dim oRange As Range\nSet oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "OnlyOffice JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "Excel VBA": "Dim oComment As Comment\nSet oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "OnlyOffice JS": "oComment.SetText(\"New comment text\");",
      "Excel VBA": "oComment.Text \"New comment text\""
    }
  ]
}
```**This example sets the timestamp of the comment creation in the current time zone format.**

```json
{
  "methods": [
    {
      "OnlyOffice_JS": "Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "VBA": "Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "VBA": "Set oRange = Range(\"A1\")"
    },
    {
      "OnlyOffice_JS": "oRange.AddComment(\"This is just a number.\", \"John Smith\");",
      "VBA": "Range(\"A1\").AddComment \"This is just a number.\"\nRange(\"A1\").Comment.Author = \"John Smith\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Timestamp: \");",
      "VBA": "Range(\"A3\").Value = \"Timestamp: \""
    },
    {
      "OnlyOffice_JS": "oComment.SetTime(Date.now());",
      "VBA": "Range(\"A1\").Comment.Date = Now"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(oComment.GetTime());",
      "VBA": "Range(\"B3\").Value = Range(\"A1\").Comment.Date"
    }
  ]
}
``````json
{
  "description": "This example sets the timestamp of the comment creation in UTC format.",
  "methods": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel_VBA": "Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel_VBA": "Dim oRange As Range\nSet oRange = Range(\"A1\")"
    },
    {
      "OnlyOffice_JS": "var oComment = oRange.AddComment(\"This is just a number.\", \"John Smith\");",
      "Excel_VBA": "Dim oComment As Comment\nSet oComment = oRange.AddComment(\"This is just a number.\")\noComment.Author = \"John Smith\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Timestamp UTC: \");",
      "Excel_VBA": "Range(\"A3\").Value = \"Timestamp UTC: \""
    },
    {
      "OnlyOffice_JS": "oComment.SetTimeUTC(Date.now());",
      "Excel_VBA": "oComment.Shape.TextFrame.Characters.Text = oComment.Shape.TextFrame.Characters.Text & vbCrLf & _\n                                Format(Now, \"yyyy-mm-dd HH:MM:SS\") & \" UTC\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(oComment.GetTimeUTC());",
      "Excel_VBA": "Range(\"B3\").Value = Format(Now, \"yyyy-mm-dd HH:MM:SS\") & \" UTC\""
    }
  ]
}
``````json
{
  "description": "This example sets the user ID to the comment author, assigns values to specific cells, and demonstrates how to manipulate comments and cell values in both OnlyOffice JS and Excel VBA.",
  "table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel VBA": "Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel VBA": "Set oRange = Range(\"A1\")"
    },
    {
      "OnlyOffice JS": "var oComment = oRange.AddComment(\"This is just a number.\", \"John Smith\");",
      "Excel VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")\n oComment.Author = \"John Smith\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment's user Id: \");",
      "Excel VBA": "Range(\"A3\").Value = \"Comment's user Id: \""
    },
    {
      "OnlyOffice JS": "oComment.SetUserId(\"uid-2\");",
      "Excel VBA": "' VBA does not have a direct equivalent for SetUserId"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(oComment.GetUserId());",
      "Excel VBA": "Range(\"B3\").Value = oComment.UserId ' VBA does not have a direct equivalent for GetUserId"
    }
  ]
}
``````json
{
  "description": "This example removes the specified comment replies.",
  "methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "VBA": "Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "VBA": "Set oRange = Range(\"A1\")"
    },
    {
      "OnlyOffice JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "OnlyOffice JS": "oComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");",
      "VBA": "oComment.Replies.Add \"Reply 1\", \"John Smith\""
    },
    {
      "OnlyOffice JS": "oComment.AddReply(\"Reply 2\", \"John Smith\", \"uid-1\");",
      "VBA": "oComment.Replies.Add \"Reply 2\", \"John Smith\""
    },
    {
      "OnlyOffice JS": "oComment.RemoveReplies(0, 1, false);",
      "VBA": "oComment.Replies.Delete 1"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment replies count: \");",
      "VBA": "Range(\"A3\").Value = \"Comment replies count: \""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(oComment.GetRepliesCount());",
      "VBA": "Range(\"B3\").Value = oComment.Replies.Count"
    }
  ]
}
``````json
{
  "description": "This example shows how to get the comment reply author's name.",
  "methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel VBA": "Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel VBA": "Set oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "OnlyOffice JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "Excel VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "OnlyOffice JS": "oComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");",
      "Excel VBA": "oComment.Replies.Add \"Reply 1\", \"John Smith\", \"uid-1\""
    },
    {
      "OnlyOffice JS": "var oReply = oComment.GetReply();",
      "Excel VBA": "Set oReply = oComment.Replies(1)"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment's reply author: \");",
      "Excel VBA": "Range(\"A3\").Value = \"Comment's reply author: \""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(oReply.GetAuthorName());",
      "Excel VBA": "Range(\"B3\").Value = oReply.AuthorName"
    }
  ]
}
``````json
{
  "Description": "This example gets a class type and inserts it into the table.",
  "VBA": "Sub InsertClassType()\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ActiveSheet\n    oWorksheet.Range(\"A1\").Value = \"1\"\n    Dim oRange As Range\n    Set oRange = oWorksheet.Range(\"A1\")\n    Dim oComment As Comment\n    Set oComment = oRange.AddComment(\"This is just a number.\")\n    oComment.Replies.Add \"Reply 1\", \"John Smith\"\n    Dim oReply As CommentReply\n    Set oReply = oComment.Replies(1)\n    Dim sType As String\n    sType = TypeName(oReply)\n    oWorksheet.Range(\"A3\").Value = \"Type: \" & sType\nEnd Sub",
  "OnlyOffice_JS": "// This example gets a class type and inserts it into the table.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.GetRange(\"A1\").SetValue(\"1\");\nvar oRange = oWorksheet.GetRange(\"A1\");\nvar oComment = oRange.AddComment(\"This is just a number.\");\noComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");\nvar oReply = oComment.GetReply();\nvar sType = oReply.GetClassType();\noWorksheet.GetRange(\"A3\").SetValue(\"Type: \" + sType);"
}
``````json
{
  "Description": "This code example demonstrates how to add a comment with a reply to a cell and retrieve the reply text, both in OnlyOffice JavaScript API and Excel VBA.",
  "Mappings": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "OnlyOffice_JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "Excel_VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "OnlyOffice_JS": "oComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");",
      "Excel_VBA": "oComment.Replies.Add \"Reply 1\", \"John Smith\""
    },
    {
      "OnlyOffice_JS": "var oReply = oComment.GetReply();",
      "Excel_VBA": "Set oReply = oComment.Replies(1)"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment's reply text: \");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Comment's reply text:\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(oReply.GetText());",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = oReply.Text"
    }
  ]
}
``````json
{
  "description": "This script sets a value in cell A1, adds a comment with a reply, and then retrieves the timestamp of the reply.",
  "columns": ["OnlyOffice JS", "Excel VBA"],
  "rows": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel VBA": "Dim oRange As Range\nSet oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "OnlyOffice JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "Excel VBA": "Dim oComment As Comment\nSet oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "OnlyOffice JS": "oComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");",
      "Excel VBA": "oComment.Reply \"Reply 1\", \"John Smith\""
    },
    {
      "OnlyOffice JS": "var oReply = oComment.GetReply();",
      "Excel VBA": "Dim oReply As Comment\nSet oReply = oComment.Replies(1)"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment's reply timestamp: \");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Comment's reply timestamp: \""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(oReply.GetTime());",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = oReply.Date"
    }
  ]
}
``````json
{
  "description": "This example shows how to get the timestamp of the comment reply creation in UTC format.",
  "methods": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel_VBA": "Dim oRange As Range\nSet oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "OnlyOffice_JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "Excel_VBA": "Dim oComment As Comment\nSet oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "OnlyOffice_JS": "oComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");",
      "Excel_VBA": "oComment.Replies.Add \"Reply 1\", \"John Smith\", \"uid-1\""
    },
    {
      "OnlyOffice_JS": "var oReply = oComment.GetReply();",
      "Excel_VBA": "Dim oReply As CommentReply\nSet oReply = oComment.Replies(1)"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment's reply timestamp UTC: \");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Comment's reply timestamp UTC: \""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(oReply.GetTimeUTC());",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = oReply.TimeUTC"
    }
  ]
}
```**This code demonstrates how to replicate the functionality of the OnlyOffice JavaScript example using Excel VBA.**

```json
{
  "codeMapping": [
    {
      "description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "description": "Set value '1' in cell A1",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "description": "Get range A1",
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "description": "Add a comment to the range",
      "OnlyOffice_JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "Excel_VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "description": "Add a reply to the comment",
      "OnlyOffice_JS": "oComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");",
      "Excel_VBA": "oComment.Replies.Add \"Reply 1\", \"John Smith\", \"uid-1\""
    },
    {
      "description": "Get the reply from the comment",
      "OnlyOffice_JS": "var oReply = oComment.GetReply();",
      "Excel_VBA": "Set oReply = oComment.Replies(1)"
    },
    {
      "description": "Set label for comment's reply user ID in cell A3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment's reply user Id: \");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Comment's reply user Id: \""
    },
    {
      "description": "Set the reply user ID in cell B3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(oReply.GetUserId());",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = oReply.UserId"
    }
  ]
}
``````json
{
  "description": "This example shows how to get the comment reply author's name.",
  "methods": [
    {
      "OnlyOffice_JS": "Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "OnlyOffice_JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "Excel_VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "OnlyOffice_JS": "oComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");",
      "Excel_VBA": "oComment.Replies.Add \"Reply 1\", \"John Smith\", \"uid-1\""
    },
    {
      "OnlyOffice_JS": "var oReply = oComment.GetReply();",
      "Excel_VBA": "Set oReply = oComment.Replies(1)"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment's reply author: \");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Comment's reply author: \""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(oReply.GetAuthorName());",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = oReply.Author"
    }
  ]
}
``````json
{
  "Description": "This example gets a class type and inserts it into the table.",
  "Code": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel VBA": "Dim oRange As Range\nSet oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "OnlyOffice JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "Excel VBA": "Dim oComment As Comment\nSet oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "OnlyOffice JS": "oComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");",
      "Excel VBA": "oComment.Replies.Add \"Reply 1\", \"John Smith\", \"uid-1\""
    },
    {
      "OnlyOffice JS": "var oReply = oComment.GetReply();",
      "Excel VBA": "Dim oReply As Reply\nSet oReply = oComment.Replies(1)"
    },
    {
      "OnlyOffice JS": "var sType = oReply.GetClassType();",
      "Excel VBA": "Dim sType As String\nsType = oReply.ClassType"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Type: \" + sType);",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Type: \" & sType"
    }
  ]
}
``````json
{
  "description": "This code sets a value in cell A1, adds a comment with a reply to A1, retrieves the reply text, and displays it in cells A3 and B3.",
  "methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel VBA": "Set oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "OnlyOffice JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "Excel VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "OnlyOffice JS": "oComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");",
      "Excel VBA": "oComment.Replies.Add \"Reply 1\", \"John Smith\""
    },
    {
      "OnlyOffice JS": "var oReply = oComment.GetReply();",
      "Excel VBA": "Set oReply = oComment.Replies(1)"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment's reply text: \");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Comment's reply text:\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(oReply.GetText());",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = oReply.Text"
    }
  ]
}
```**Description:**  
This example demonstrates how to obtain the timestamp of a comment reply's creation in the current time zone format using OnlyOffice API and its Excel VBA equivalent.

```json
{
  "RAG_Table": [
    {
      "Action": "Get Active Worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Action": "Set Value in Cell A1",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "Action": "Get Range A1",
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "Action": "Add Comment to Range",
      "OnlyOffice_JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "Excel_VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "Action": "Add Reply to Comment",
      "OnlyOffice_JS": "oComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");",
      "Excel_VBA": "oComment.Replies.Add \"Reply 1\", \"John Smith\", \"uid-1\""
    },
    {
      "Action": "Get Reply from Comment",
      "OnlyOffice_JS": "var oReply = oComment.GetReply();",
      "Excel_VBA": "Set oReply = oComment.Replies(1)"
    },
    {
      "Action": "Set Description in Cell A3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment's reply timestamp: \");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Comment's reply timestamp: \""
    },
    {
      "Action": "Set Timestamp in Cell B3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(oReply.GetTime());",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = oReply.Time"
    }
  ]
}
``````javascript
// This example shows how to get the timestamp of the comment reply creation in UTC format.
{
  "RAGTable": [
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet",
      "Status": "Green"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "VBA": "oWorksheet.Range(\"A1\").Value = \"1\"",
      "Status": "Green"
    },
    {
      "OnlyOfficeJS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "VBA": "Set oRange = oWorksheet.Range(\"A1\")",
      "Status": "Green"
    },
    {
      "OnlyOfficeJS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")",
      "Status": "Green"
    },
    {
      "OnlyOfficeJS": "oComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");",
      "VBA": "oComment.AddReply \"Reply 1\", \"John Smith\", \"uid-1\"",
      "Status": "Green"
    },
    {
      "OnlyOfficeJS": "var oReply = oComment.GetReply();",
      "VBA": "Set oReply = oComment.GetReply()",
      "Status": "Green"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment's reply timestamp UTC: \");",
      "VBA": "oWorksheet.Range(\"A3\").Value = \"Comment's reply timestamp UTC: \"",
      "Status": "Green"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B3\").SetValue(oReply.GetTimeUTC());",
      "VBA": "oWorksheet.Range(\"B3\").Value = oReply.GetTimeUTC()",
      "Status": "Green"
    }
  ]
}
``````json
{
  "Description": "Equivalent Excel VBA code for OnlyOffice JS methods used in the example.",
  "Mappings": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": 'oWorksheet.GetRange("A1").SetValue("1");',
      "Excel VBA": 'oWorksheet.Range("A1").Value = "1"'
    },
    {
      "OnlyOffice JS": 'var oRange = oWorksheet.GetRange("A1");',
      "Excel VBA": 'Set oRange = oWorksheet.Range("A1")'
    },
    {
      "OnlyOffice JS": 'var oComment = oRange.AddComment("This is just a number.");',
      "Excel VBA": 'Set oComment = oRange.AddComment("This is just a number.")'
    },
    {
      "OnlyOffice JS": 'oComment.AddReply("Reply 1", "John Smith", "uid-1");',
      "Excel VBA": 'oComment.AddReply "Reply 1", "John Smith", "uid-1"'
    },
    {
      "OnlyOffice JS": 'var oReply = oComment.GetReply();',
      "Excel VBA": 'Set oReply = oComment.GetReply()'
    },
    {
      "OnlyOffice JS": 'oWorksheet.GetRange("A3").SetValue("Comment\'s reply user Id: ");',
      "Excel VBA": 'oWorksheet.Range("A3").Value = "Comment\'s reply user Id: "'
    },
    {
      "OnlyOffice JS": 'oWorksheet.GetRange("B3").SetValue(oReply.GetUserId());',
      "Excel VBA": 'oWorksheet.Range("B3").Value = oReply.GetUserId()'
    }
  ]
}
``````json
{
  "description": "This example sets the comment reply author's name.",
  "RAG_Table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = \"1\"",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"A1\")",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "Excel_VBA": "oRange.AddComment \"This is just a number.\"",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "oComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");",
      "Excel_VBA": "oComment.Replies.Add \"Reply 1\", \"John Smith\", \"uid-1\"",
      "Status": "Amber"
    },
    {
      "OnlyOffice_JS": "var oReply = oComment.GetReply();",
      "Excel_VBA": "Set oReply = oComment.Replies.Item(1)",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "oReply.SetAuthorName(\"Mark Potato\");",
      "Excel_VBA": "oReply.Author = \"Mark Potato\"",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment's reply author: \");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Comment's reply author: \"",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(oReply.GetAuthorName());",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = oReply.Author",
      "Status": "Green"
    }
  ]
}
``````json
{
  "Description": "This example sets the comment reply text.",
  "Methods": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "Description": "Set the value of cell A1 to '1'",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "Description": "Get the range object for cell A1",
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "Description": "Add a comment to the range with specified text",
      "OnlyOffice_JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "Excel_VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "Description": "Add a reply to the comment",
      "OnlyOffice_JS": "oComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");",
      "Excel_VBA": "oComment.Replies.Add \"Reply 1\", \"John Smith\", \"uid-1\""
    },
    {
      "Description": "Get the last reply added to the comment",
      "OnlyOffice_JS": "var oReply = oComment.GetReply();",
      "Excel_VBA": "Set oReply = oComment.Replies(oComment.Replies.Count)"
    },
    {
      "Description": "Set the text of the reply",
      "OnlyOffice_JS": "oReply.SetText(\"New reply text.\");",
      "Excel_VBA": "oReply.Text = \"New reply text.\""
    },
    {
      "Description": "Set the value of cell A3 to display a label",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment's reply text: \");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Comment's reply text: \""
    },
    {
      "Description": "Set the value of cell B3 to the text of the reply",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(oReply.GetText());",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = oReply.Text"
    }
  ]
}
``````json
{
  "Description": "Sets the timestamp of the comment reply creation in the current time zone format.",
  "Code": {
    "OnlyOffice_JS": "// This example sets the timestamp of the comment reply creation in the current time zone format.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.GetRange(\"A1\").SetValue(\"1\");\nvar oRange = oWorksheet.GetRange(\"A1\");\nvar oComment = oRange.AddComment(\"This is just a number.\");\noComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");\nvar oReply = oComment.GetReply();\noReply.SetTime(Date.now());\noWorksheet.GetRange(\"A3\").SetValue(\"Comment's reply timestamp: \");\noWorksheet.GetRange(\"B3\").SetValue(oReply.GetTime());",
    "Excel_VBA": "' This example sets the timestamp of the comment reply creation in the current time zone format.\nDim ws As Worksheet\nSet ws = ActiveSheet\n\nws.Range(\"A1\").Value = \"1\"\n\nDim rng As Range\nSet rng = ws.Range(\"A1\")\n\nDim cmt As Comment\nSet cmt = rng.AddComment(\"This is just a number.\")\n\n' VBA does not support reply comments directly. This feature may require custom implementation.\n\nws.Range(\"A3\").Value = \"Comment's reply timestamp: \"\nws.Range(\"B3\").Value = Format(Now, \"mm/dd/yyyy hh:mm:ss\")"
  }
}
``````json
[
  {
    "Description": "Get the active worksheet.",
    "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
    "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
  },
  {
    "Description": "Set the value \"1\" to cell A1.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
    "VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
  },
  {
    "Description": "Get range A1.",
    "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"A1\");",
    "VBA": "Dim oRange As Range\nSet oRange = oWorksheet.Range(\"A1\")"
  },
  {
    "Description": "Add a comment to the range.",
    "OnlyOffice JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
    "VBA": "oRange.AddComment \"This is just a number.\""
  },
  {
    "Description": "Add a reply to the comment.",
    "OnlyOffice JS": "oComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");",
    "VBA": "oComment.Replies.Add \"Reply 1\", \"John Smith\", \"uid-1\""
  },
  {
    "Description": "Get the reply.",
    "OnlyOffice JS": "var oReply = oComment.GetReply();",
    "VBA": "Dim oReply As Reply\nSet oReply = oComment.Replies(1)"
  },
  {
    "Description": "Set the timestamp of the reply to current UTC time.",
    "OnlyOffice JS": "oReply.SetTimeUTC(Date.now());",
    "VBA": "oReply.TimeUTC = Now()"
  },
  {
    "Description": "Set text to cell A3.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment's reply timestamp UTC: \");",
    "VBA": "oWorksheet.Range(\"A3\").Value = \"Comment's reply timestamp UTC: \""
  },
  {
    "Description": "Set the UTC timestamp in cell B3.",
    "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(oReply.GetTimeUTC());",
    "VBA": "oWorksheet.Range(\"B3\").Value = oReply.TimeUTC"
  }
]
``````json
{
  "Description": "This example sets the user ID to the comment reply author.",
  "Code": [
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOfficeJS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "VBA": "Set oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "OnlyOfficeJS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "OnlyOfficeJS": "oComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");",
      "VBA": "oComment.Replies.Add \"Reply 1\", \"John Smith\", \"uid-1\""
    },
    {
      "OnlyOfficeJS": "var oReply = oComment.GetReply();",
      "VBA": "Set oReply = oComment.Replies(1)"
    },
    {
      "OnlyOfficeJS": "oReply.SetUserId(\"uid-2\");",
      "VBA": "oReply.Author = \"uid-2\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment's reply user Id: \");",
      "VBA": "oWorksheet.Range(\"A3\").Value = \"Comment's reply user Id: \""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B3\").SetValue(oReply.GetUserId());",
      "VBA": "oWorksheet.Range(\"B3\").Value = oReply.Author"
    }
  ]
}
``````json
{
  "Description": "This example sets the comment reply author's name by adding a comment to cell A1, adding a reply to the comment, updating the reply author's name, and displaying the author's name in cell B3.",
  "OnlyOffice_JS": "// This example sets the comment reply author's name.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.GetRange(\"A1\").SetValue(\"1\");\nvar oRange = oWorksheet.GetRange(\"A1\");\nvar oComment = oRange.AddComment(\"This is just a number.\");\noComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");\nvar oReply = oComment.GetReply();\noReply.SetAuthorName(\"Mark Potato\");\noWorksheet.GetRange(\"A3\").SetValue(\"Comment's reply author: \");\noWorksheet.GetRange(\"B3\").SetValue(oReply.GetAuthorName());",
  "Excel_VBA": "' This example sets the comment reply author's name.\nDim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet\n\noWorksheet.Range(\"A1\").Value = \"1\"\nDim oRange As Range\nSet oRange = oWorksheet.Range(\"A1\")\nDim oComment As Comment\nSet oComment = oRange.AddComment(\"This is just a number.\")\n\n' VBA does not support adding replies directly to comments in the same way as OnlyOffice JS.\n' As a workaround, you can add another comment to simulate a reply.\nDim oReply As Comment\nSet oReply = oWorksheet.Range(\"A1\").AddComment(\"Reply 1 by John Smith\")\n\n' VBA does not have a direct method to change the author of a comment reply.\n' Authors are typically set based on the user's Excel settings.\n\noWorksheet.Range(\"A3\").Value = \"Comment's reply author: \"\noWorksheet.Range(\"B3\").Value = \"Mark Potato\" ' Manually setting the author's name as VBA cannot change it programmatically"
}
``````json
{
  "Description": "Sets the value in cell A1, adds a comment with a reply, modifies the reply text, and writes the reply text to cells A3 and B3.",
  "OnlyOffice_JS": "// This example sets the comment reply text.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.GetRange(\"A1\").SetValue(\"1\");\nvar oRange = oWorksheet.GetRange(\"A1\");\nvar oComment = oRange.AddComment(\"This is just a number.\");\noComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");\nvar oReply = oComment.GetReply();\noReply.SetText(\"New reply text.\");\noWorksheet.GetRange(\"A3\").SetValue(\"Comment's reply text: \");\noWorksheet.GetRange(\"B3\").SetValue(oReply.GetText());",
  "Excel_VBA": "Sub SetCommentReply()\n    ' Sets the value in cell A1\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ThisWorkbook.ActiveSheet\n    oWorksheet.Range(\"A1\").Value = \"1\"\n    \n    ' Adds a comment to cell A1\n    Dim oRange As Range\n    Set oRange = oWorksheet.Range(\"A1\")\n    Dim oComment As Comment\n    Set oComment = oRange.AddComment(\"This is just a number.\")\n    \n    ' Simulates adding a reply to the comment\n    ' VBA does not support threaded replies directly\n    ' Here we append the reply text to the existing comment\n    oComment.Text Text:=oComment.Text & vbCrLf & \"Reply 1 - John Smith: New reply text.\"\n    \n    ' Writes the reply text to cells A3 and B3\n    oWorksheet.Range(\"A3\").Value = \"Comment's reply text:\"\n    oWorksheet.Range(\"B3\").Value = \"New reply text.\"\nEnd Sub"
}
``````json
{
  "table": {
    "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ActiveSheet"
      },
      {
        "Description": "Set value '1' to cell A1",
        "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
        "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
      },
      {
        "Description": "Get range A1",
        "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"A1\");",
        "Excel VBA": "Set oRange = oWorksheet.Range(\"A1\")"
      },
      {
        "Description": "Add comment to the range",
        "OnlyOffice JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
        "Excel VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")"
      },
      {
        "Description": "Add reply to the comment",
        "OnlyOffice JS": "oComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");",
        "Excel VBA": "oComment.Replies.Add \"Reply 1\", \"John Smith\", \"uid-1\""
      },
      {
        "Description": "Get the reply",
        "OnlyOffice JS": "var oReply = oComment.GetReply();",
        "Excel VBA": "Set oReply = oComment.Replies(1)"
      },
      {
        "Description": "Set the reply timestamp",
        "OnlyOffice JS": "oReply.SetTime(Date.now());",
        "Excel VBA": "oReply.Time = Now"
      },
      {
        "Description": "Set value 'Comment's reply timestamp: ' to cell A3",
        "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment's reply timestamp: \");",
        "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Comment's reply timestamp: \""
      },
      {
        "Description": "Set the reply timestamp value to cell B3",
        "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(oReply.GetTime());",
        "Excel VBA": "oWorksheet.Range(\"B3\").Value = oReply.Time"
      }
    ]
  }
}
```### This example sets the timestamp of the comment reply creation in UTC format.

```json
{
  "RAG_Table": [
    {
      "OnlyOffice_JS_Method": "Api.GetActiveSheet()",
      "Excel_VBA_Equivalent": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS_Method": "oWorksheet.GetRange(\"A1\").SetValue(\"1\")",
      "Excel_VBA_Equivalent": "ThisWorkbook.ActiveSheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice_JS_Method": "oWorksheet.GetRange(\"A1\")",
      "Excel_VBA_Equivalent": "Set oRange = ThisWorkbook.ActiveSheet.Range(\"A1\")"
    },
    {
      "OnlyOffice_JS_Method": "oRange.AddComment(\"This is just a number.\")",
      "Excel_VBA_Equivalent": "Set oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "OnlyOffice_JS_Method": "oComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\")",
      "Excel_VBA_Equivalent": "oComment.Replies.Add \"Reply 1\", \"John Smith\""
    },
    {
      "OnlyOffice_JS_Method": "oComment.GetReply()",
      "Excel_VBA_Equivalent": "Set oReply = oComment.Replies(oComment.Replies.Count)"
    },
    {
      "OnlyOffice_JS_Method": "oReply.SetTimeUTC(Date.now())",
      "Excel_VBA_Equivalent": "oReply.Date = Now"
    },
    {
      "OnlyOffice_JS_Method": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment's reply timestamp UTC: \")",
      "Excel_VBA_Equivalent": "ThisWorkbook.ActiveSheet.Range(\"A3\").Value = \"Comment's reply timestamp UTC: \""
    },
    {
      "OnlyOffice_JS_Method": "oWorksheet.GetRange(\"B3\").SetValue(oReply.GetTimeUTC())",
      "Excel_VBA_Equivalent": "ThisWorkbook.ActiveSheet.Range(\"B3\").Value = oReply.Date"
    }
  ]
}
``````json
{
  "Description": "This example sets the user ID to the comment reply author.",
  "OnlyOffice_JS": "// This example sets the user ID to the comment reply author.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.GetRange(\"A1\").SetValue(\"1\");\nvar oRange = oWorksheet.GetRange(\"A1\");\nvar oComment = oRange.AddComment(\"This is just a number.\");\noComment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");\nvar oReply = oComment.GetReply();\noReply.SetUserId(\"uid-2\");\noWorksheet.GetRange(\"A3\").SetValue(\"Comment's reply user Id: \");\noWorksheet.GetRange(\"B3\").SetValue(oReply.GetUserId());",
  "Excel_VBA": "' This example sets the user ID to the comment reply author.\nSub SetCommentReplyUserId()\n    Dim oWorksheet As Worksheet\n    Dim oRange As Range\n    Dim oComment As Comment\n    Dim oReply As CommentThreadedReply\n\n    Set oWorksheet = ActiveSheet\n    oWorksheet.Range(\"A1\").Value = \"1\"\n    Set oRange = oWorksheet.Range(\"A1\")\n    Set oComment = oRange.AddComment(\"This is just a number.\")\n    oComment.Replies.Add \"Reply 1\", \"John Smith\", \"uid-1\"\n    Set oReply = oComment.Replies(1)\n    ' VBA does not support SetUserId directly, so assigning manually\n    oWorksheet.Range(\"A3\").Value = \"Comment's reply user Id: \"\n    oWorksheet.Range(\"B3\").Value = \"uid-2\"\nEnd Sub"
}
``````json
{
  "RAG_Table": {
    "Description": "This example sets the comment author's name.",
    "OnlyOffice_JS": "// This example sets the comment author's name.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.GetRange(\"A1\").SetValue(\"1\");\nvar oRange = oWorksheet.GetRange(\"A1\");\nvar oComment = oRange.AddComment(\"This is just a number.\", \"John Smith\");\noWorksheet.GetRange(\"A3\").SetValue(\"Comment's author: \");\noComment.SetAuthorName(\"Mark Potato\");\noWorksheet.GetRange(\"B3\").SetValue(oComment.GetAuthorName());",
    "Excel_VBA": "' This example sets the comment author's name.\nSub SetCommentAuthor()\n    Dim ws As Worksheet\n    Set ws = ThisWorkbook.ActiveSheet\n    \n    ws.Range(\"A1\").Value = \"1\"\n    \n    Dim cmt As Comment\n    Set cmt = ws.Range(\"A1\").AddComment(\"This is just a number.\")\n    cmt.Author = \"John Smith\"\n    \n    ws.Range(\"A3\").Value = \"Comment's author: \"\n    cmt.Author = \"Mark Potato\"\n    ws.Range(\"B3\").Value = cmt.Author\nEnd Sub"
  }
}
``````json
{
  "Description": "This example marks a comment as solved.",
  "OnlyOfficeJS": "// This example marks a comment as solved.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.GetRange(\"A1\").SetValue(\"1\");\nvar oRange = oWorksheet.GetRange(\"A1\");\nvar oComment = oRange.AddComment(\"This is just a number.\", \"John Smith\");\noWorksheet.GetRange(\"A3\").SetValue(\"Comment is solved: \");\noComment.SetSolved(true);\noWorksheet.GetRange(\"B3\").SetValue(oComment.IsSolved());",
  "ExcelVBA": "' This example marks a comment as solved.\nDim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet\n\noWorksheet.Range(\"A1\").Value = \"1\"\nDim oRange As Range\nSet oRange = oWorksheet.Range(\"A1\")\nDim oComment As Comment\nSet oComment = oRange.AddComment(\"This is just a number.\")\noComment.Author = \"John Smith\"\n\noWorksheet.Range(\"A3\").Value = \"Comment is solved: \"\n' VBA does not have a native SetSolved method. You can simulate it by adding text or using a custom property.\noseSolved = True ' Custom flag to indicate the comment is solved\noWorksheet.Range(\"B3\").Value = osolved"
}
``````json
{
  "description": "This example sets the comment text for cell A1.",
  "table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel VBA": "Set oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "OnlyOffice JS": "var oComment = oRange.AddComment(\"This is just a number.\");",
      "Excel VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")"
    },
    {
      "OnlyOffice JS": "oComment.SetText(\"New comment text\");",
      "Excel VBA": "oComment.Text \"New comment text\""
    }
  ]
}
``````json
{
  "Description": "This example sets the timestamp of the comment creation in the current time zone format.",
  "CodeEquivalents": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "VBA": "Set oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "OnlyOffice JS": "var oComment = oRange.AddComment(\"This is just a number.\", \"John Smith\");",
      "VBA": "Set oComment = oRange.AddComment(\"This is just a number.\")\noComment.Author = \"John Smith\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Timestamp: \");",
      "VBA": "oWorksheet.Range(\"A3\").Value = \"Timestamp: \""
    },
    {
      "OnlyOffice JS": "oComment.SetTime(Date.now());",
      "VBA": "oComment.Shape.TextFrame.Characters.Text = oComment.Shape.TextFrame.Characters.Text & \"\\nTimestamp: \" & Now"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(oComment.GetTime());",
      "VBA": "oWorksheet.Range(\"B3\").Value = Now"
    }
  ]
}
``````json
{
  "Description": "This example sets the timestamp of the comment creation in UTC format.",
  "CodeEquivalents": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel VBA": "Dim oRange As Range\nSet oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "OnlyOffice JS": "var oComment = oRange.AddComment(\"This is just a number.\", \"John Smith\");",
      "Excel VBA": "Dim oComment As Comment\nSet oComment = oRange.AddComment(\"This is just a number.\")\noComment.Author = \"John Smith\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Timestamp UTC: \");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Timestamp UTC: \""
    },
    {
      "OnlyOffice JS": "oComment.SetTimeUTC(Date.now());",
      "Excel VBA": "oComment.Shape.TextFrame.Characters.Text = oComment.Shape.TextFrame.Characters.Text & \"\\nTimestamp UTC: \" & Format(Now, \"yyyy-mm-dd HH:MM:SS\")"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(oComment.GetTimeUTC());",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = Format(oComment.Shape.TextFrame.Characters.Text, \"yyyy-mm-dd HH:MM:SS\")"
    }
  ]
}
``````json
{
  "Description": "This example sets the user ID to the comment author.",
  "Table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel_VBA": "Dim oRange As Range\nSet oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "OnlyOffice_JS": "var oComment = oRange.AddComment(\"This is just a number.\", \"John Smith\");",
      "Excel_VBA": "Dim oComment As Comment\nSet oComment = oRange.AddComment(\"This is just a number.\")\noComment.Author = \"John Smith\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Comment's user Id: \");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Comment's user Id: \""
    },
    {
      "OnlyOffice_JS": "oComment.SetUserId(\"uid-2\");",
      "Excel_VBA": "' VBA Comments do not have a SetUserId method. You may need to use a custom property or alternative approach."
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(oComment.GetUserId());",
      "Excel_VBA": "' VBA Comments do not have a GetUserId method. Retrieve custom property if implemented.\n'oWorksheet.Range(\"B3\").Value = oComment.UserId"
    }
  ]
}
``````json
{
  "description": "Creates a blip fill to apply to the object using the selected image as the object background.",
  "RAG": {
    "OnlyOffice_JS": "// This example creates a blip fill to apply to the object using the selected image as the object background.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateBlipFill(\"https://api.onlyoffice.com/content/img/docbuilder/examples/icon_DocumentEditors.png\", \"tile\");\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\noWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
    "Excel_VBA": "' This example creates a blip fill to apply to the object using the selected image as the object background.\nDim oWorksheet As Worksheet\nDim oShape As Shape\n\nSet oWorksheet = ActiveSheet\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 60, 35, 200, 100)\nWith oShape.Fill\n    .UserPicture \"https://api.onlyoffice.com/content/img/docbuilder/examples/icon_DocumentEditors.png\"\n    .Tile = msoTrue\nEnd With\nWith oShape.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
  }
}
``````json
{
  "description": "This example creates a bullet for a paragraph.",
  "RAG_Table": [
    {
      "Status": "Green",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "oFill = RGB(255, 111, 61)"
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "With oShape.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel_VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOfflineStorage, 120, 35, 200, 300)\nWith oShape.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With\nWith oShape.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "var oDocContent = oShape.GetContent();",
      "Excel_VBA": "Set oDocContent = oShape.TextFrame.Characters"
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel_VBA": "Set oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "var oBullet = Api.CreateBullet(\"-\");",
      "Excel_VBA": "oParagraph.ParagraphFormat.Bullet.Visible = msoTrue\noParagraph.ParagraphFormat.Bullet.Character = 45"
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "oParagraph.SetBullet(oBullet);",
      "Excel_VBA": "oParagraph.ParagraphFormat.Bullet.Visible = msoTrue"
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "oParagraph.AddText(\" This is an example of the bulleted paragraph.\");",
      "Excel_VBA": "oParagraph.Text = \" This is an example of the bulleted paragraph.\""
    }
  ]
}
``````json
{
  "description": "This example creates a color by selecting it from one of the available color presets.",
  "table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oColor = Api.CreateColorByName(\"peachPuff\");",
      "Excel VBA": "Dim oColor As Long\noColor = RGB(255, 218, 185)"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Text with color\");",
      "Excel VBA": "Range(\"A2\").Value = \"Text with color\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetFontColor(oColor);",
      "Excel VBA": "Range(\"A2\").Font.Color = oColor"
    }
  ]
}
``````json
{
  "Description": "This example creates an RGB color by setting the appropriate values for the red, green, and blue color components.",
  "Code": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oColor = Api.CreateColorFromRGB(255, 111, 61);",
      "Excel VBA": "Dim oColor As Long\noColor = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Text with color\");",
      "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Text with color\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetFontColor(oColor);",
      "Excel VBA": "oWorksheet.Range(\"A2\").Font.Color = oColor"
    }
  ]
}
``````json
{
  "Description": "This code creates gradient stops, a linear gradient fill, a stroke, and adds a shape to the active worksheet.",
  "CodeEquivalents": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = Api.GetActiveSheet()"
    },
    {
      "OnlyOffice_JS": "var oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);",
      "Excel_VBA": "Set oGs1 = Api.CreateGradientStop(CreateRGBColor(255, 213, 191), 0)"
    },
    {
      "OnlyOffice_JS": "var oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);",
      "Excel_VBA": "Set oGs2 = Api.CreateGradientStop(CreateRGBColor(255, 111, 61), 100000)"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);",
      "Excel_VBA": "Set oFill = Api.CreateLinearGradientFill(Array(oGs1, oGs2), 5400000)"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "Set oStroke = Api.CreateStroke(0, CreateNoFill())"
    },
    {
      "OnlyOffice_JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
      "Excel_VBA": "oWorksheet.AddShape \"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000"
    }
  ]
}
``````json
{
  "Description": "This example creates a linear gradient fill to apply to the object using the selected linear gradient as the object background.",
  "CodeEquivalents": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);",
      "Excel_VBA": "Dim oGs1 As GradientStop\nSet oGs1 = oFill.GradientStops.Insert(0)\noGs1.Color = RGB(255, 213, 191)"
    },
    {
      "OnlyOffice_JS": "var oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);",
      "Excel_VBA": "Dim oGs2 As GradientStop\nSet oGs2 = oFill.GradientStops.Insert(1)\noGs2.Color = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);",
      "Excel_VBA": "With oShape.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 213, 191)\n    .BackColor.RGB = RGB(255, 111, 61)\n    .TwoColorGradient Style:=msoGradientHorizontal, Variant:=1\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "With oShape.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
      "Excel_VBA": "Dim oShape As Shape\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartAlternateProcess, 60 * 36000 / 72, 35 * 36000 / 72, oWidth, oHeight)\nWith oShape\n    .Fill = oFill\n    .Line = oStroke\n    ' Additional properties as needed\nEnd With"
    }
  ]
}
``````json
{
  "description": "This example creates a new history point.",
  "ragTable": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"This is just a sample text.\");",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice JS": "Api.CreateNewHistoryPoint();",
      "Excel VBA": "// No direct equivalent in VBA"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"New history point was just created.\");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"New history point was just created.\""
    }
  ]
}
``````json
{
  "Description": "This example creates no fill and removes the fill from the element.",
  "Methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);",
      "VBA": "Dim oGs1 As GradientStop\nSet oGs1 = oFill.GradientStops.Insert(1)\noGs1.Color = RGB(255, 213, 191)\noGs1.Position = 0"
    },
    {
      "OnlyOffice JS": "var oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);",
      "VBA": "Dim oGs2 As GradientStop\nSet oGs2 = oFill.GradientStops.Insert(2)\noGs2.Color = RGB(255, 111, 61)\noGs2.Position = 1"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);",
      "VBA": "With oFill\n    .GradientType = msoGradientHorizontal\n    .GradientStops.Clear\n    .GradientStops.Insert(1).Color = RGB(255, 213, 191)\n    .GradientStops.Insert(2).Color = RGB(255, 111, 61)\n    .Rotation = 5400000\nEnd With"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "VBA": "With oStroke\n    .Weight = 0\n    .ForeColor.RGB = RGB(255, 255, 255)\nEnd With"
    },
    {
      "OnlyOffice JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
      "VBA": "Dim oShape As Shape\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartData, 60, 35, 200, 150)\nWith oShape.Fill\n    .Visible = msoFalse\nEnd With\nWith oShape.Line\n    .Visible = msoFalse\nEnd With"
    }
  ]
}
``````json
[
  {
    "description": "Get the active worksheet",
    "VBA": "Set oWorksheet = ActiveSheet",
    "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();"
  },
  {
    "description": "Create a solid fill with RGB color (255, 111, 61)",
    "VBA": "Set oFill = oShape.Fill.ForeColor.RGB = RGB(255, 111, 61)",
    "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));"
  },
  {
    "description": "Create a stroke with weight 0 and no fill",
    "VBA": "With oShape.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With",
    "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());"
  },
  {
    "description": "Add a shape with specified parameters",
    "VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 35, 200, 150)\nWith oShape\n    .Fill.ForeColor.RGB = RGB(255, 111, 61)\n    .Line.Weight = 0\nEnd With",
    "OnlyOffice_JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);"
  },
  {
    "description": "Get the content of the shape",
    "VBA": "Set oDocContent = oShape.TextFrame2.TextRange",
    "OnlyOffice_JS": "var oDocContent = oShape.GetContent();"
  },
  {
    "description": "Get the first paragraph in the document content",
    "VBA": "Set oParagraph = oDocContent.Paragraphs(1)",
    "OnlyOffice_JS": "var oParagraph = oDocContent.GetElement(0);"
  },
  {
    "description": "Create a numbering style with type 'ArabicParenR' and start at 1",
    "VBA": "With oDocContent.ParagraphFormat.ListFormat\n    .ApplyBulletDefault\n    .ListTemplate = ListGalleries(xlListGalleryNumbered).ListTemplates(1)\n    .ListValue = 1\nEnd With",
    "OnlyOffice_JS": "var oBullet = Api.CreateNumbering(\"ArabicParenR\", 1);"
  },
  {
    "description": "Set bullet style to the paragraph",
    "VBA": "oParagraph.ParagraphFormat.ListFormat.ApplyBulletDefault",
    "OnlyOffice_JS": "oParagraph.SetBullet(oBullet);"
  },
  {
    "description": "Add text to the paragraph",
    "VBA": "oParagraph.Text = \" This is an example of the numbered paragraph.\"",
    "OnlyOffice_JS": "oParagraph.AddText(\" This is an example of the numbered paragraph.\");"
  },
  {
    "description": "Create a new paragraph",
    "VBA": "Set oParagraph = oDocContent.Paragraphs.Add()",
    "OnlyOffice_JS": "oParagraph = Api.CreateParagraph();"
  },
  {
    "description": "Set bullet style to the new paragraph",
    "VBA": "oParagraph.ParagraphFormat.ListFormat.ApplyBulletDefault",
    "OnlyOffice_JS": "oParagraph.SetBullet(oBullet);"
  },
  {
    "description": "Add text to the new paragraph",
    "VBA": "oParagraph.Text = \" This is an example of the numbered paragraph.\"",
    "OnlyOffice_JS": "oParagraph.AddText(\" This is an example of the numbered paragraph.\");"
  },
  {
    "description": "Push the new paragraph to the document content",
    "VBA": "// In VBA, adding the paragraph directly incorporates it into the content.",
    "OnlyOffice_JS": "oDocContent.Push(oParagraph);"
  }
]
```**Description:**  
This code creates a new shape in the active worksheet, applies specific fill and stroke properties, clears any existing content within the shape, and adds a new left-aligned paragraph with custom text inside the shape.

```json
{
  "MethodMappings": [
    {
      "OnlyOffice JS": "Api.GetActiveSheet()",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "Api.CreateRGBColor(255, 111, 61)",
      "Excel VBA": "RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61))",
      "Excel VBA": "With oShape.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
    },
    {
      "OnlyOffice JS": "Api.CreateNoFill()",
      "Excel VBA": "msoFalse"
    },
    {
      "OnlyOffice JS": "Api.CreateStroke(0, Api.CreateNoFill())",
      "Excel VBA": "With oShape.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)",
      "Excel VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartPredefined, 60 * 36000, 35 * 36000, 2 * 36000, 3 * 36000)"
    },
    {
      "OnlyOffice JS": "oShape.GetContent()",
      "Excel VBA": "Set oContent = oShape.TextFrame.TextRange"
    },
    {
      "OnlyOffice JS": "oDocContent.RemoveAllElements()",
      "Excel VBA": "oContent.Text = \"\""
    },
    {
      "OnlyOffice JS": "Api.CreateParagraph()",
      "Excel VBA": "Set oParagraph = oContent.Paragraphs.Add"
    },
    {
      "OnlyOffice JS": "oParagraph.SetJc(\"left\")",
      "Excel VBA": "oParagraph.Alignment = xlLeft"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"We removed all elements from the shape and added a new paragraph inside it.\")",
      "Excel VBA": "oParagraph.Text = \"We removed all elements from the shape and added a new paragraph inside it.\""
    },
    {
      "OnlyOffice JS": "oDocContent.Push(oParagraph)",
      "Excel VBA": "// Not directly applicable in VBA as adding the paragraph already includes it in the content"
    }
  ]
}
```**Description:**  
This code creates a pattern fill to apply to a shape object in the active worksheet, sets the fill and stroke properties, and adds the shape to the worksheet with specified dimensions and formatting.

```json
{
  "RAG_Table": [
    {
      "OnlyOffice_JS": "Api.GetActiveSheet()",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51))",
      "Excel_VBA": "Set oFill = oWorksheet.Shapes.AddShape(msoShapeRectangle, 0, 0, 100, 100).Fill\noFill.Patterned msoPatternDashDotDiagonal\noFill.ForeColor.RGB = RGB(255, 111, 61)\n oFill.BackColor.RGB = RGB(51, 51, 51)"
    },
    {
      "OnlyOffice_JS": "Api.CreateStroke(0, Api.CreateNoFill())",
      "Excel_VBA": "With oWorksheet.Shapes.AddShape(msoShapeRectangle, 0, 0, 100, 100).\n    .Line.Weight = 0\n    .Line.Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000)",
      "Excel_VBA": "oWorksheet.Shapes.AddShape(msoShapeFlowchartData, 60, 35, 200, 300).Fill = oFill\nWith oWorksheet.Shapes(oWorksheet.Shapes.Count).\n    .Line.Weight = 0\n    .Line.Visible = msoFalse\nEnd With"
    }
  ]
}
``````json
{
  "description": "This example creates a shape in the active worksheet with a linear gradient fill and no stroke.",
  "code": {
    "OnlyOffice JS": "// This example creates a color selecting it from one of the available color presets.\nvar oWorksheet = Api.GetActiveSheet();\nvar oPresetColor = Api.CreatePresetColor(\"peachPuff\");\nvar oGs1 = Api.CreateGradientStop(oPresetColor, 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\noWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
    "Excel VBA": "Sub AddShapeWithGradientFill()\n    Dim ws As Worksheet\n    Dim shp As Shape\n    \n    Set ws = ActiveSheet\n    \n    ' Add a shape (e.g., a flowchart online storage shape)\n    Set shp = ws.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 60, 35, 200, 100) ' x, y, width, height in points\n    \n    ' Configure gradient fill\n    With shp.Fill\n        .Visible = msoTrue\n        .ForeColor.RGB = RGB(255, 218, 185) ' peach puff color\n        .TwoColorGradient msoGradientHorizontal, 1\n        .GradientStops.Clear\n        .GradientStops.Insert RGB(255, 218, 185), 0 ' Start color\n        .GradientStops.Insert RGB(255, 111, 61), 1 ' End color\n        .GradientStyle = msoGradientLinear\n        .GradientAngle = 180000 ' Adjust as needed\n    End With\n    \n    ' Configure no stroke\n    With shp.Line\n        .Visible = msoFalse\n    End With\nEnd Sub"
  }
}
``````json
{
  "description": "This example creates a radial gradient fill to apply to the object using the selected radial gradient as the object background.",
  "OnlyOffice_JS": "// This example creates a radial gradient fill to apply to the object using the selected radial gradient as the object background.\nvar oWorksheet = Api.GetActiveSheet();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\noWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
  "Excel_VBA": "Sub AddRadialGradientShape()\n    ' Get active sheet\n    Dim ws As Worksheet\n    Set ws = ThisWorkbook.ActiveSheet\n    \n    ' Add shape\n    Dim shp As Shape\n    Set shp = ws.Shapes.AddShape(msoShapeFlowChartOnlineStorage, 60, 35, 200, 100) ' Adjust width and height as needed\n    \n    ' Set gradient fill\n    With shp.Fill\n        .TwoColorGradient msoGradientRadial, 1\n        .ForeColor.RGB = RGB(255, 213, 191)\n        .BackColor.RGB = RGB(255, 111, 61)\n    End With\n    \n    ' Set no stroke\n    With shp.Line\n        .Visible = msoFalse\n    End With\nEnd Sub"
}
``````json
{
  "table": {
    "header": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Description": "Gets the active worksheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
      },
      {
        "Description": "Creates an RGB color with specified red, green, and blue components",
        "OnlyOffice JS": "var color = Api.CreateRGBColor(255, 213, 191);",
        "Excel VBA": "Dim color As Long\ncolor = RGB(255, 213, 191)"
      },
      {
        "Description": "Creates a gradient stop with a specified color and position",
        "OnlyOffice JS": "var oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);",
        "Excel VBA": "Dim oGs1 As GradientStop\nSet oGs1 = CreateGradientStop(RGB(255, 213, 191), 0)"
      },
      {
        "Description": "Creates another gradient stop with a different color and position",
        "OnlyOffice JS": "var oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);",
        "Excel VBA": "Dim oGs2 As GradientStop\nSet oGs2 = CreateGradientStop(RGB(255, 111, 61), 100000)"
      },
      {
        "Description": "Creates a linear gradient fill using the gradient stops and a specified angle",
        "OnlyOffice JS": "var oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);",
        "Excel VBA": "Dim oFill As GradientFill\nSet oFill = CreateLinearGradientFill(Array(oGs1, oGs2), 5400000)"
      },
      {
        "Description": "Creates a stroke with no fill",
        "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
        "Excel VBA": "Dim oStroke As Stroke\nSet oStroke = CreateStroke(0, CreateNoFill())"
      },
      {
        "Description": "Adds a shape to the worksheet with specified properties",
        "OnlyOffice JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
        "Excel VBA": "oWorksheet.Shapes.AddShape(msoShapeFlowChartOfflineStorage, 60 * 36000, 35 * 36000, oFill, oStroke)."
      }
    ]
  }
}
``````json
{
  "description": "This code creates a new smaller text block to be inserted into the paragraph or table.",
  "table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA Equivalent": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "VBA Equivalent": "Set oFill = CreateSolidFill(CreateRGBColor(255, 111, 61))"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "VBA Equivalent": "Set oStroke = CreateStroke(0, CreateNoFill())"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "VBA Equivalent": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "VBA Equivalent": "Set oDocContent = oShape.TextFrame.TextRange"
    },
    {
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "VBA Equivalent": "Set oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "OnlyOffice JS": "var oRun = Api.CreateRun();",
      "VBA Equivalent": "Set oRun = oDocContent.Characters"
    },
    {
      "OnlyOffice JS": "oRun.AddText(\"This is just a sample text. \");",
      "VBA Equivalent": "oRun.Text = \"This is just a sample text. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddElement(oRun);",
      "VBA Equivalent": "oParagraph.Range.InsertAfter oRun.Text"
    },
    {
      "OnlyOffice JS": "oRun = Api.CreateRun();",
      "VBA Equivalent": "Set oRun = oDocContent.Characters"
    },
    {
      "OnlyOffice JS": "oRun.SetFontFamily(\"Comic Sans MS\");",
      "VBA Equivalent": "oRun.Font.Name = \"Comic Sans MS\""
    },
    {
      "OnlyOffice JS": "oRun.AddText(\"This is a text run with the font family set to 'Comic Sans MS'.\");",
      "VBA Equivalent": "oRun.Text = \"This is a text run with the font family set to 'Comic Sans MS'.\""
    },
    {
      "OnlyOffice JS": "oParagraph.AddElement(oRun);",
      "VBA Equivalent": "oParagraph.Range.InsertAfter oRun.Text"
    }
  ]
}
```**Description:**  
This example creates a complex color scheme by selecting from one of the available schemes and adds a curved up arrow shape to the active worksheet with specified dimensions and styling.

```json
{
  "RAG_Table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oSchemeColor = Api.CreateSchemeColor(\"dk1\");",
      "Excel VBA": "Set oSchemeColor = ActiveWorkbook.Colors(\"dk1\")"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(oSchemeColor);",
      "Excel VBA": "Set oFill = oSchemeColor.SolidFill"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "Set oStroke = ActiveWorkbook.Stroke.Create(0, Nothing)"
    },
    {
      "OnlyOffice JS": "oWorksheet.AddShape(\"curvedUpArrow\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
      "Excel VBA": "oWorksheet.Shapes.AddShape(msoShapeCurvedUpArrow, 60, 35, oFill, oStroke, 0, 2, 1, 3)"
    }
  ]
}
```**Description:**
This code creates a solid fill with a selected color and adds a flow chart shape to the active worksheet.

```json
{
  "RAG_Table": [
    {
      "OnlyOffice_JS_Method": "Api.GetActiveSheet()",
      "Excel_VBA_Equivalent": "Set oWorksheet = ActiveSheet",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS_Method": "Api.CreateRGBColor(255, 111, 61)",
      "Excel_VBA_Equivalent": "RGB(255, 111, 61)",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS_Method": "Api.CreateSolidFill(oRGBColor)",
      "Excel_VBA_Equivalent": "oFill.ForeColor.RGB = oRGBColor",
      "Status": "Amber"
    },
    {
      "OnlyOffice_JS_Method": "Api.CreateStroke(0, Api.CreateNoFill())",
      "Excel_VBA_Equivalent": "With oShape.Line\n    .Visible = msoFalse\nEnd With",
      "Status": "Red"
    },
    {
      "OnlyOffice_JS_Method": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000)",
      "Excel_VBA_Equivalent": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, Left, Top, Width, Height)\noShape.Fill.ForeColor.RGB = oRGBColor",
      "Status": "Amber"
    }
  ]
}
``````json
{
  "Description": "Equivalent Excel VBA code for OnlyOffice API methods used in the example.",
  "Mappings": [
    {
      "Operation": "Get active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Operation": "Create first gradient stop with RGB color (255, 213, 191) at position 0",
      "OnlyOffice_JS": "var oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);",
      "Excel_VBA": "Set oGs1 = oFill.GradientStops.Add(0)\noGs1.Color = RGB(255, 213, 191)"
    },
    {
      "Operation": "Create second gradient stop with RGB color (255, 111, 61) at position 100000",
      "OnlyOffice_JS": "var oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);",
      "Excel_VBA": "Set oGs2 = oFill.GradientStops.Add(1)\noGs2.Color = RGB(255, 111, 61)"
    },
    {
      "Operation": "Create linear gradient fill with gradient stops and angle",
      "OnlyOffice_JS": "var oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);",
      "Excel_VBA": "With oFill\n    .TwoColorGradient Style:=msoGradientHorizontal, Variant:=1\n    .GradientStops.Clear\n    .GradientStops.Insert RGB(255, 213, 191), 0\n    .GradientStops.Insert RGB(255, 111, 61), 1\n    .GradientAngle = 90 ' Angle in degrees\nEnd With"
    },
    {
      "Operation": "Create solid fill with RGB color (51, 51, 51)",
      "OnlyOffice_JS": "var oFill1 = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "Excel_VBA": "With oFill1\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Visible = msoTrue\nEnd With"
    },
    {
      "Operation": "Create stroke with weight and fill",
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(3 * 36000, oFill1);",
      "Excel_VBA": "With oStroke\n    .Weight = 3\n    .ForeColor.RGB = RGB(51, 51, 51)\nEnd With"
    },
    {
      "Operation": "Add shape to worksheet with specific parameters",
      "OnlyOffice_JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
      "Excel_VBA": "Dim shp As Shape\nSet shp = oWorksheet.Shapes.AddShape(msoShapeFlowchartProcess, 60, 35, 200, 100)\nWith shp.Fill\n    .ForeColor.RGB = RGB(255, 213, 191)\n    .GradientStops.Clear\n    .GradientStops.Insert RGB(255, 213, 191), 0\n    .GradientStops.Insert RGB(255, 111, 61), 1\nEnd With\nWith shp.Line\n    .Weight = 3\n    .ForeColor.RGB = RGB(51, 51, 51)\nEnd With"
    }
  ]
}
```**This code creates a shape with specified properties and adds formatted text to it.**

```json
{
  "CodeMapping": [
    {
      "OnlyOffice_JS": "Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "Api.CreateRGBColor(255, 111, 61)",
      "Excel_VBA": "RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "Api.CreateSolidFill(color)",
      "Excel_VBA": "With oShape.Fill\n    .ForeColor.RGB = color\n    .Visible = msoTrue\n    .Solid\nEnd With"
    },
    {
      "OnlyOffice_JS": "Api.CreateStroke(0, Api.CreateNoFill())",
      "Excel_VBA": "With oShape.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 80 * 36000, 50 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel_VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartProcess, 80, 50, 200, 150)"
    },
    {
      "OnlyOffice_JS": "oShape.GetContent();",
      "Excel_VBA": "Set oTextFrame = oShape.TextFrame"
    },
    {
      "OnlyOffice_JS": "oDocContent.RemoveAllElements();",
      "Excel_VBA": "oTextFrame.Characters.Text = \"\""
    },
    {
      "OnlyOffice_JS": "Api.CreateTextPr();",
      "Excel_VBA": "" 
    },
    {
      "OnlyOffice_JS": "oTextPr.SetFontSize(30);",
      "Excel_VBA": "With oTextFrame.Characters.Font\n    .Size = 30\nEnd With"
    },
    {
      "OnlyOffice_JS": "oTextPr.SetBold(true);",
      "Excel_VBA": "With oTextFrame.Characters.Font\n    .Bold = msoTrue\nEnd With"
    },
    {
      "OnlyOffice_JS": "Api.CreateParagraph();",
      "Excel_VBA": "" 
    },
    {
      "OnlyOffice_JS": "oParagraph.SetJc(\"left\");",
      "Excel_VBA": "oTextFrame.HorizontalAlignment = xlHAlignLeft"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"This is a sample text with the font size set to 30 and the font weight set to bold.\");",
      "Excel_VBA": "oTextFrame.Characters.Text = \"This is a sample text with the font size set to 30 and the font weight set to bold.\""
    },
    {
      "OnlyOffice_JS": "oParagraph.SetTextPr(oTextPr);",
      "Excel_VBA": "" 
    },
    {
      "OnlyOffice_JS": "oDocContent.Push(oParagraph);",
      "Excel_VBA": "" 
    }
  ]
}
``````json
{
  "description": "This code sets the value of cell A1 to '1', attaches an event handler for worksheet changes, and then detaches the event handler.",
  "methods": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "OnlyOffice_JS": "oRange.SetValue(\"1\");",
      "Excel_VBA": "oRange.Value = \"1\""
    },
    {
      "OnlyOffice_JS": "Api.attachEvent(\"onWorksheetChange\", function(oRange){\n    console.log(\"onWorksheetChange\");\n    console.log(oRange.GetAddress());\n});",
      "Excel_VBA": "Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)\n    Debug.Print \"onWorksheetChange\"\n    Debug.Print Target.Address\nEnd Sub"
    },
    {
      "OnlyOffice_JS": "Api.detachEvent(\"onWorksheetChange\");",
      "Excel_VBA": "' To detach, you would remove or comment out the Workbook_SheetChange event handler."
    }
  ]
}
``````json
{
  "description": "This example adds a paragraph in document content.",
  "code": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = Api.GetActiveSheet()"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "Set oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61))"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "Set oStroke = Api.CreateStroke(0, Api.CreateNoFill())"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 200 * 36000, 60 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Set oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 200 * 36000, 60 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "Excel VBA": "Set oDocContent = oShape.GetContent()"
    },
    {
      "OnlyOffice JS": "oDocContent.RemoveAllElements();",
      "Excel VBA": "oDocContent.RemoveAllElements"
    },
    {
      "OnlyOffice JS": "var oParagraph = Api.CreateParagraph();",
      "Excel VBA": "Set oParagraph = Api.CreateParagraph()"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"We removed all elements from the shape and added a new paragraph inside it.\");",
      "Excel VBA": "oParagraph.AddText \"We removed all elements from the shape and added a new paragraph inside it.\""
    },
    {
      "OnlyOffice JS": "oDocContent.AddElement(oParagraph);",
      "Excel VBA": "oDocContent.AddElement oParagraph"
    },
    {
      "OnlyOffice JS": "oDocContent.Push(oParagraph);",
      "Excel VBA": "oDocContent.Push oParagraph"
    }
  ]
}
``````json
{
  "Description": "This example gets a class type and inserts it into the document.",
  "Methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = Api.GetActiveSheet()"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "VBA": "Set oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61))"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "VBA": "Set oStroke = Api.CreateStroke(0, Api.CreateNoFill())"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 200 * 36000, 60 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "VBA": "Set oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 200 * 36000, 60 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "VBA": "Set oDocContent = oShape.GetContent()"
    },
    {
      "OnlyOffice JS": "var sClassType = oDocContent.GetClassType();",
      "VBA": "sClassType = oDocContent.GetClassType()"
    },
    {
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "VBA": "Set oParagraph = oDocContent.GetElement(0)"
    },
    {
      "OnlyOffice JS": "oParagraph.SetJc(\"left\");",
      "VBA": "oParagraph.SetJc \"left\""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"Class Type = \" + sClassType);",
      "VBA": "oParagraph.AddText \"Class Type = \" & sClassType"
    }
  ]
}
``````json
{
  "RAGTable": {
    "Columns": [
      "Description",
      "OnlyOffice_JS",
      "Excel_VBA"
    ],
    "Rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel_VBA": "Set oWorksheet = ActiveSheet"
      },
      {
        "Description": "Create a solid fill with RGB color (255, 111, 61)",
        "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
        "Excel_VBA": "oFill.Color = RGB(255, 111, 61)"
      },
      {
        "Description": "Create a stroke with no fill",
        "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
        "Excel_VBA": "With oShape.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
      },
      {
        "Description": "Add a shape to the worksheet",
        "OnlyOffice_JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 200 * 36000, 60 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
        "Excel_VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, 200, 60, 200, 300)\nWith oShape.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With\nWith oShape.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
      },
      {
        "Description": "Get content of the shape",
        "OnlyOffice_JS": "var oDocContent = oShape.GetContent();",
        "Excel_VBA": "Set oDocContent = oShape.TextFrame2.TextRange"
      },
      {
        "Description": "Get the first paragraph element of the content",
        "OnlyOffice_JS": "var oParagraph = oDocContent.GetElement(0);",
        "Excel_VBA": "Set oParagraph = oDocContent.Paragraphs(1)"
      },
      {
        "Description": "Get paragraph properties",
        "OnlyOffice_JS": "var oParaPr = oParagraph.GetParaPr();",
        "Excel_VBA": "Set oParaPr = oParagraph.ParagraphFormat"
      },
      {
        "Description": "Set paragraph justification to center",
        "OnlyOffice_JS": "oParaPr.SetJc(\"center\");",
        "Excel_VBA": "oParaPr.Alignment = xlCenter"
      },
      {
        "Description": "Add text to the paragraph",
        "OnlyOffice_JS": "oParagraph.AddText(\"This is a paragraph with the text in it aligned by the center. \");\n" +
                          "oParagraph.AddText(\"The justification is specified in the paragraph style. \");\n" +
                          "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\n" +
                          "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");",
        "Excel_VBA": "With oDocContent\n" +
                     "    .Text = \"This is a paragraph with the text in it aligned by the center. \" & _\n" +
                     "            \"The justification is specified in the paragraph style. \" & _\n" +
                     "            \"These sentences are used to add lines for demonstrative purposes. \" & _\n" +
                     "            \"These sentences are used to add lines for demonstrative purposes.\"\n" +
                     "End With"
      }
    ]
  }
}
``````json
{
  "description": "This code adds a shape to the active worksheet, inserts text into the shape, and counts the number of elements within the shape.",
  "methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "With oWorksheet.Shapes.AddShape(msoShapeRectangle, 200, 60, 100, 50)\n    .Fill.ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "With oWorksheet.Shapes(1).Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 200 * 36000, 60 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 200, 60, 200, 150)"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "Excel VBA": "Set oDocContent = oShape.TextFrame.Characters"
    },
    {
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel VBA": "Dim oParagraph As TextRange\nSet oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"We got the first paragraph inside the shape.\");",
      "Excel VBA": "oParagraph.Text = \"We got the first paragraph inside the shape.\""
    },
    {
      "OnlyOffice JS": "oParagraph.AddLineBreak();",
      "Excel VBA": "oParagraph.InsertAfter vbCrLf"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"Number of elements inside the shape: \" + oDocContent.GetElementsCount());",
      "Excel VBA": "oParagraph.InsertAfter \"Number of elements inside the shape: \" & oDocContent.Length"
    },
    {
      "OnlyOffice JS": "oParagraph.AddLineBreak();",
      "Excel VBA": "oParagraph.InsertAfter vbCrLf"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"Line breaks are NOT counted into the number of elements.\");",
      "Excel VBA": "oParagraph.InsertAfter \"Line breaks are NOT counted into the number of elements.\""
    }
  ]
}
``````json
{
  "Table": {
    "headers": ["Description", "OnlyOffice JS Code", "Excel VBA Code"],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOffice JS Code": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA Code": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveWorkbook.ActiveSheet"
      },
      {
        "Description": "Create a solid fill with RGB color (255, 111, 61)",
        "OnlyOffice JS Code": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
        "Excel VBA Code": "Dim oFill As FillFormat\nSet oFill = oWorksheet.Shapes.AddShape(msoShapeRectangle, 0, 0, 100, 50).Fill\noFill.ForeColor.RGB = RGB(255, 111, 61)"
      },
      {
        "Description": "Create a stroke with no fill",
        "OnlyOffice JS Code": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
        "Excel VBA Code": "Dim oStroke As LineFormat\nSet oStroke = oWorksheet.Shapes(1).Line\nWith oStroke\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
      },
      {
        "Description": "Add a shape to the worksheet with specified parameters",
        "OnlyOffice JS Code": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 200 * 36000, 60 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
        "Excel VBA Code": "Dim oShape As Shape\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartTerminator, 200, 60, 2, 3)\nWith oShape.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With\nWith oShape.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
      },
      {
        "Description": "Get the content of the shape",
        "OnlyOffice JS Code": "var oDocContent = oShape.GetContent();",
        "Excel VBA Code": "' Excel VBA does not have a direct equivalent for GetContent. Text can be managed via the TextFrame property."
      },
      {
        "Description": "Remove all elements from the shape's content",
        "OnlyOffice JS Code": "oDocContent.RemoveAllElements();",
        "Excel VBA Code": "oShape.TextFrame.Characters.Text = \"\""
      },
      {
        "Description": "Create a new paragraph",
        "OnlyOffice JS Code": "var oParagraph = Api.CreateParagraph();",
        "Excel VBA Code": "' Excel VBA handles text as a single string. Creating a new paragraph can be done by adding a newline character."
      },
      {
        "Description": "Add text to the paragraph",
        "OnlyOffice JS Code": "oParagraph.AddText(\"We removed all elements from the shape and added a new paragraph inside it.\");",
        "Excel VBA Code": "oShape.TextFrame.Characters.Text = \"We removed all elements from the shape and added a new paragraph inside it.\""
      },
      {
        "Description": "Add the paragraph to the shape's content",
        "OnlyOffice JS Code": "oDocContent.AddElement(oParagraph);",
        "Excel VBA Code": "' Text is already set in the previous step."
      },
      {
        "Description": "Push the paragraph to update the content",
        "OnlyOffice JS Code": "oDocContent.Push(oParagraph);",
        "Excel VBA Code": "' Changes are automatically applied in VBA after setting the Text property."
      }
    ]
  }
}
``````json
{
  "description": "This example gets a class type and inserts it into the document.",
  "OnlyOffice_JS": "// Original OnlyOffice JavaScript Code\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 200 * 36000, 60 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\nvar sClassType = oDocContent.GetClassType();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class Type = \" + sClassType);",
  "VBA": "' Equivalent Excel VBA Code\nSub InsertClassType()\n    Dim oWorksheet As Worksheet\n    Dim oFill As Object\n    Dim oStroke As Object\n    Dim oShape As Object\n    Dim oDocContent As Object\n    Dim sClassType As String\n    Dim oParagraph As Object\n\n    ' Get the active sheet\n    Set oWorksheet = ActiveSheet\n\n    ' Create a solid fill with RGB color (255, 111, 61)\n    Set oFill = CreateSolidFill(CreateRGBColor(255, 111, 61))\n\n    ' Create a stroke with no fill\n    Set oStroke = CreateStroke(0, CreateNoFill())\n\n    ' Add a shape to the worksheet\n    Set oShape = oWorksheet.Shapes.AddShape( _\n        Type:=msoShapeFlowchartOfflineStorage, _\n        Left:=200 * 36000, _\n        Top:=60 * 36000, _\n        Width:=2 * 36000, _\n        Height:=3 * 36000)\n\n    ' Apply fill and stroke to the shape\n    With oShape\n        .Fill.ForeColor.RGB = RGB(255, 111, 61)\n        .Line.Visible = msoFalse\n    End With\n\n    ' Get the document content of the shape\n    Set oDocContent = oShape.TextFrame\n\n    ' Get the class type\n    sClassType = oDocContent.Text\n\n    ' Get the first paragraph\n    Set oParagraph = oDocContent.TextRange.Paragraphs(1)\n\n    ' Set paragraph alignment to left\n    oParagraph.ParagraphFormat.Alignment = xlLeft\n\n    ' Add text to the paragraph\n    oParagraph.Text = \"Class Type = \" & sClassType\nEnd Sub\n\n' Helper Functions\nFunction CreateRGBColor(R As Integer, G As Integer, B As Integer) As Long\n    CreateRGBColor = RGB(R, G, B)\nEnd Function\n\nFunction CreateSolidFill(color As Long) As Object\n    ' Implementation for creating a solid fill\nEnd Function\n\nFunction CreateNoFill() As Object\n    ' Implementation for creating no fill\nEnd Function\n\nFunction CreateStroke(width As Integer, fill As Object) As Object\n    ' Implementation for creating a stroke\nEnd Function"
}
``````json
{
  "description": "This code adds a flow chart shape to the active worksheet in OnlyOffice, sets its fill and stroke properties, centers the paragraph alignment, and adds text to the shape.",
  "table": [
    {
      "VBA": "Set oWorksheet = ActiveSheet",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "VBA": "Set oFill = ThisWorkbook.Styles.AddFill(RGB(255, 111, 61))",
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));"
    },
    {
      "VBA": "Set oStroke = ThisWorkbook.Styles.AddStroke(0, ThisWorkbook.Styles.AddNoFill())",
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());"
    },
    {
      "VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, 200, 60, oFill, oStroke, 0, 2, 0, 3)",
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 200 * 36000, 60 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);"
    },
    {
      "VBA": "Set oDocContent = oShape.TextFrame.TextRange",
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();"
    },
    {
      "VBA": "Set oParagraph = oDocContent.Paragraphs(1)",
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);"
    },
    {
      "VBA": "Set oParaPr = oParagraph.ParagraphFormat",
      "OnlyOffice JS": "var oParaPr = oParagraph.GetParaPr();"
    },
    {
      "VBA": "oParaPr.Alignment = xlCenter",
      "OnlyOffice JS": "oParaPr.SetJc(\"center\");"
    },
    {
      "VBA": "oParagraph.Text = \"This is a paragraph with the text in it aligned by the center. \" & _\n                    \"The justification is specified in the paragraph style. \" & _\n                    \"These sentences are used to add lines for demonstrative purposes. \" & _\n                    \"These sentences are used to add lines for demonstrative purposes.\"",
      "OnlyOffice JS": "oParagraph.AddText(\"This is a paragraph with the text in it aligned by the center. \");\n" +
                      "oParagraph.AddText(\"The justification is specified in the paragraph style. \");\n" +
                      "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\n" +
                      "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");"
    }
  ]
}
``````json
{
  "description": "This code demonstrates how to manipulate shapes and document content in OnlyOffice using the API by creating shapes, setting their fill and stroke, and adding text with line breaks.",
  "RAGTable": [
    {
      "OnlyOffice_JS_Method": "Api.GetActiveSheet()",
      "VBA_Equivalent": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS_Method": "Api.CreateRGBColor(255, 111, 61)",
      "VBA_Equivalent": "RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS_Method": "Api.CreateSolidFill(color)",
      "VBA_Equivalent": "oFill.ForeColor.RGB = color"
    },
    {
      "OnlyOffice_JS_Method": "Api.CreateNoFill()",
      "VBA_Equivalent": "oFill.Visible = msoFalse"
    },
    {
      "OnlyOffice_JS_Method": "Api.CreateStroke(width, fill)",
      "VBA_Equivalent": "With oShape.Line\n    .Weight = width\n    .ForeColor.RGB = RGB(255, 255, 255)\nEnd With"
    },
    {
      "OnlyOffice_JS_Method": "oWorksheet.AddShape(type, left, top, fill, stroke, ...)",
      "VBA_Equivalent": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, left, top, width, height)"
    },
    {
      "OnlyOffice_JS_Method": "oShape.GetContent()",
      "VBA_Equivalent": "Set oDocContent = oShape.TextFrame"
    },
    {
      "OnlyOffice_JS_Method": "oDocContent.GetElement(0)",
      "VBA_Equivalent": "Set oParagraph = oDocContent.Characters"
    },
    {
      "OnlyOffice_JS_Method": "oParagraph.AddText(text)",
      "VBA_Equivalent": "oDocContent.Text = oDocContent.Text & text"
    },
    {
      "OnlyOffice_JS_Method": "oParagraph.AddLineBreak()",
      "VBA_Equivalent": "oDocContent.Text = oDocContent.Text & vbCrLf"
    },
    {
      "OnlyOffice_JS_Method": "oDocContent.GetElementsCount()",
      "VBA_Equivalent": "ElementCount = UBound(Split(oDocContent.Text, vbCrLf)) + 1"
    }
  ]
}
``````json
{
  "description": "This example pushes 5 paragraphs to actually add it to the document content.",
  "OnlyOffice_JS": "// This example pushes 5 paragraphs to actually add its to the document content.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\noDocContent.RemoveAllElements();\nvar oParagraph = Api.CreateParagraph();\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"We removed all elements from the shape and added a new paragraph inside it.\");\noDocContent.Push(oParagraph);",
  "Excel_VBA": "' This example pushes 5 paragraphs to actually add it to the document content.\nSub AddShapeWithParagraph()\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ActiveSheet\n    \n    ' Create fill color\n    Dim fillColor As Long\n    fillColor = RGB(255, 111, 61)\n    \n    ' Add shape to worksheet\n    Dim oShape As Shape\n    Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartProcess, 60, 35, 200, 150) ' Adjust size as needed\n    With oShape\n        .Fill.ForeColor.RGB = fillColor\n        .Line.Visible = msoFalse\n    End With\n    \n    ' Clear existing text\n    oShape.TextFrame.Characters.Text = ""\n    \n    ' Add new paragraph\n    With oShape.TextFrame.Characters\n        .Text = \"We removed all elements from the shape and added a new paragraph inside it.\"\n        .ParagraphFormat.Alignment = xlLeft\n    End With\nEnd Sub"
}
``````json
{
  "description": "This example removes all the elements from the current document or from the current document content. It then adds a new shape with specified fill and stroke, adds text to the shape, removes all existing elements from the shape's content, and adds a new paragraph with specific text and alignment.",
  "OnlyOffice_JS": "// This example removes all the elements from the current document or from the current document content.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"This is just a sample paragraph.\");\noDocContent.RemoveAllElements();\noParagraph = Api.CreateParagraph();\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"We removed all elements from the shape and added a new paragraph inside it.\");\noDocContent.Push(oParagraph);",
  "VBA": "' This example removes all the elements from the current document or from the current document content.\nSub ModifyShape()\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ThisWorkbook.ActiveSheet\n    \n    ' Add a new flowchart shape with specified position and size\n    Dim oShape As Shape\n    Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartProcess, 60, 35, 200, 100)\n    \n    ' Set fill color to RGB(255, 111, 61)\n    oShape.Fill.ForeColor.RGB = RGB(255, 111, 61)\n    \n    ' Set stroke (border) properties\n    With oShape.Line\n        .Visible = msoTrue\n        .ForeColor.RGB = RGB(0, 0, 0)\n        .Weight = 1\n    End With\n    \n    ' Add initial text to the shape\n    oShape.TextFrame2.TextRange.Text = \"This is just a sample paragraph.\"\n    \n    ' Remove all existing text\n    oShape.TextFrame2.TextRange.Text = \"\"\n    \n    ' Add new paragraph with left alignment\n    With oShape.TextFrame2.TextRange\n        .Text = \"We removed all elements from the shape and added a new paragraph inside it.\"\n        .ParagraphFormat.Alignment = msoAlignLeft\n    End With\nEnd Sub"
}
``````json
{
  "RAG_Table": [
    {
      "Description": "Get the active worksheet",
      "VBA": "Set oWorksheet = ActiveSheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Create a solid fill with RGB(255, 111, 61)",
      "VBA": "Set oFill = oShape.Fill\nWith oFill\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Visible = msoTrue\n    .Solid\nEnd With",
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));"
    },
    {
      "Description": "Create a stroke with width 0 and no fill",
      "VBA": "Set oStroke = oShape.Line\nWith oStroke\n    .Weight = 0\n    .Visible = msoFalse\nEnd With",
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());"
    },
    {
      "Description": "Add a shape to the worksheet with specified parameters",
      "VBA": "Set oShape = oWorksheet.Shapes.AddShape(_\n    Type:=msoShapeFlowchartOnlineStorage, _\n    Left:=200 * 36000, Top:=60 * 36000, _\n    Width:=2 * 36000, Height:=3 * 36000)\n\n' Apply fill and stroke\nSet oFill = oShape.Fill\nWith oFill\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Visible = msoTrue\n    .Solid\nEnd With\n\nSet oStroke = oShape.Line\nWith oStroke\n    .Weight = 0\n    .Visible = msoFalse\nEnd With",
      "OnlyOffice_JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 200 * 36000, 60 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);"
    },
    {
      "Description": "Get the content of the shape",
      "VBA": "Set oDocContent = oShape.TextFrame2.TextRange",
      "OnlyOffice_JS": "var oDocContent = oShape.GetContent();"
    },
    {
      "Description": "Get the first paragraph",
      "VBA": "Set oParagraph = oDocContent.Paragraphs(1)",
      "OnlyOffice_JS": "var oParagraph = oDocContent.GetElement(0);"
    },
    {
      "Description": "Add text to the first paragraph",
      "VBA": "oParagraph.Text = \"This is paragraph #1.\"",
      "OnlyOffice_JS": "oParagraph.AddText(\"This is paragraph #1.\");"
    },
    {
      "Description": "Create and add new paragraphs in a loop",
      "VBA": "Dim nParaIncrease As Integer\nFor nParaIncrease = 2 To 5\n    Set oParagraph = oDocContent.Paragraphs.Add()\n    oParagraph.Text = \"This is paragraph #\" & nParaIncrease & \".\"\nNext nParaIncrease",
      "OnlyOffice_JS": "for (let nParaIncrease = 1; nParaIncrease < 5; ++nParaIncrease) {\n    oParagraph = Api.CreateParagraph();\n    oParagraph.AddText(\"This is paragraph #\" + (nParaIncrease + 1) + \".\");\n    oDocContent.Push(oParagraph);\n}"
    },
    {
      "Description": "Remove the third paragraph",
      "VBA": "oDocContent.Paragraphs(3).Delete",
      "OnlyOffice_JS": "oDocContent.RemoveElement(2);"
    },
    {
      "Description": "Add a new paragraph after removal",
      "VBA": "Set oParagraph = oDocContent.Paragraphs.Add()\noParagraph.Text = \"We removed paragraph #3, check that out above.\"",
      "OnlyOffice_JS": "oParagraph = Api.CreateParagraph();\noParagraph.AddText(\"We removed paragraph #3, check that out above.\");\noDocContent.Push(oParagraph);"
    }
  ]
}
``````json
{
  "description": "This script adds a shape to the active worksheet with specific styling, clears its existing content, and inserts a new left-aligned paragraph with custom text.",
  "codeComparison": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "Set oFill = oWorksheet.Shapes.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "With oWorksheet.Shapes.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel_VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOfflineStorage, 60, 35, 200, 150)\nWith oShape.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With\nWith oShape.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oDocContent = oShape.GetContent();",
      "Excel_VBA": "Set oDocContent = oShape.TextFrame"
    },
    {
      "OnlyOffice_JS": "oDocContent.RemoveAllElements();",
      "Excel_VBA": "oDocContent.Text = \"\""
    },
    {
      "OnlyOffice_JS": "var oParagraph = Api.CreateParagraph();",
      "Excel_VBA": "Set oParagraph = oDocContent.Text"
    },
    {
      "OnlyOffice_JS": "oParagraph.SetJc(\"left\");",
      "Excel_VBA": "oParagraph.ParagraphFormat.Alignment = xlLeft"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"We removed all elements from the shape and added a new paragraph inside it.\");",
      "Excel_VBA": "oParagraph.Text = \"We removed all elements from the shape and added a new paragraph inside it.\""
    },
    {
      "OnlyOffice_JS": "oDocContent.Push(oParagraph);",
      "Excel_VBA": "// Not required as text is directly assigned in VBA"
    }
  ]
}
``````json
{
  "RAG_Table": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Description": "Create a solid fill with RGB color (255, 111, 61)",
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "Set oFill = oWorksheet.Shapes.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "Description": "Create a stroke with no fill",
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "With oWorksheet.Shapes.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "Description": "Add a shape to the worksheet",
      "OnlyOffice_JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel_VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartProcess, 60, 35, 200, 150)\nWith oShape.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With\nWith oShape.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "Description": "Get the content of the shape",
      "OnlyOffice_JS": "var oDocContent = oShape.GetContent();",
      "Excel_VBA": "' Excel VBA does not have a direct equivalent for shape content manipulation as in OnlyOffice"
    },
    {
      "Description": "Get the first paragraph element",
      "OnlyOffice_JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel_VBA": "' Excel VBA does not support paragraph elements within shapes in the same way"
    },
    {
      "Description": "Add text to the paragraph",
      "OnlyOffice_JS": "oParagraph.AddText(\"This is just a sample paragraph.\");",
      "Excel_VBA": "oShape.TextFrame.Characters.Text = \"This is just a sample paragraph.\""
    },
    {
      "Description": "Remove all elements from the shape content",
      "OnlyOffice_JS": "oDocContent.RemoveAllElements();",
      "Excel_VBA": "' To clear text in Excel VBA:\n oShape.TextFrame.Characters.Text = \"\""
    },
    {
      "Description": "Create a new paragraph",
      "OnlyOffice_JS": "oParagraph = Api.CreateParagraph();",
      "Excel_VBA": "' Excel VBA does not support creating paragraph objects within shapes."
    },
    {
      "Description": "Set paragraph alignment to left",
      "OnlyOffice_JS": "oParagraph.SetJc(\"left\");",
      "Excel_VBA": "With oShape.TextFrame\n    .HorizontalAlignment = xlHAlignLeft\nEnd With"
    },
    {
      "Description": "Add new text to the paragraph",
      "OnlyOffice_JS": "oParagraph.AddText(\"We removed all elements from the shape and added a new paragraph inside it.\");",
      "Excel_VBA": "oShape.TextFrame.Characters.Text = \"We removed all elements from the shape and added a new paragraph inside it.\""
    },
    {
      "Description": "Push the new paragraph into the shape content",
      "OnlyOffice_JS": "oDocContent.Push(oParagraph);",
      "Excel_VBA": "' In Excel VBA, setting the Text property replaces existing text. Appending would require concatenation.\n oShape.TextFrame.Characters.Text = oShape.TextFrame.Characters.Text & \"We removed all elements from the shape and added a new paragraph inside it.\""
    }
  ]
}
```**Description:** This example removes an element using the position specified.

```json
{
  "CodeMapping": [
    {
      "OnlyOffice JS": "Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "oFillColor = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "With oShape.Line\n  .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 200 * 36000, 60 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOfflineStorage, 200, 60, 200, 60)"
    },
    {
      "OnlyOffice JS": "oShape.GetContent();",
      "Excel VBA": "Set oDocContent = oShape.TextFrame"
    },
    {
      "OnlyOffice JS": "oDocContent.GetElement(0);",
      "Excel VBA": "sText = oDocContent.Text"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is paragraph #1.\");",
      "Excel VBA": "oDocContent.Text = \"This is paragraph #1.\""
    },
    {
      "OnlyOffice JS": "Api.CreateParagraph();",
      "Excel VBA": "' VBA handles paragraphs within the TextFrame directly"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is paragraph #\" + (nParaIncrease + 1) + \".\");",
      "Excel VBA": "oDocContent.Text = oDocContent.Text & vbCrLf & \"This is paragraph #\" & (nParaIncrease + 1) & \".\""
    },
    {
      "OnlyOffice JS": "oDocContent.Push(oParagraph);",
      "Excel VBA": "' VBA automatically appends text when using the TextFrame.Text property"
    },
    {
      "OnlyOffice JS": "oDocContent.RemoveElement(2);",
      "Excel VBA": "Dim paragraphs() As String\nparagraphs = Split(oDocContent.Text, vbCrLf)\nIf UBound(paragraphs) >= 2 Then\n    oDocContent.Text = Join(paragraphs, vbCrLf, 0, 2) & vbCrLf & Join(paragraphs, vbCrLf, 3)\nEnd If"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"We removed paragraph #3, check that out above.\");",
      "Excel VBA": "oDocContent.Text = oDocContent.Text & vbCrLf & \"We removed paragraph #3, check that out above.\""
    },
    {
      "OnlyOffice JS": "oDocContent.Push(oParagraph);",
      "Excel VBA": "' VBA automatically appends text when using the TextFrame.Text property"
    }
  ]
}
``````json
{
  "description": "This code retrieves the active worksheet, creates fill and stroke styles, adds and configures a shape, retrieves its class type, sets column widths, and assigns a value to cell A1 with the class type.",
  "code": {
    "OnlyOffice JS": "// This example gets a class type and inserts it into the document.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\noDrawing.SetSize(120 * 36000, 70 * 36000);\noDrawing.SetPosition(0, 2 * 36000, 1, 3 * 36000);\nvar sClassType = oDrawing.GetClassType();\noWorksheet.SetColumnWidth(0, 15);\noWorksheet.SetColumnWidth(1, 10);\noWorksheet.GetRange(\"A1\").SetValue(\"Class Type = \" + sClassType);",
    "Excel VBA": "' This example gets a class type and inserts it into the document.\nDim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet\n\n' VBA does not have direct equivalents for Fill and Stroke creation, so we use Color and Line properties instead\nDim fillColor As Long\nfillColor = RGB(255, 111, 61)\n\nDim oDrawing As Shape\nSet oDrawing = oWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, 60, 35, 120, 70)\n\nWith oDrawing.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = fillColor\n    .Solid\nEnd With\n\nWith oDrawing.Line\n    .Visible = msoFalse\nEnd With\n\nDim sClassType As String\nsClassType = oDrawing.AutoShapeType ' Using AutoShapeType as an equivalent\n\noWorksheet.Columns(1).ColumnWidth = 15\noWorksheet.Columns(2).ColumnWidth = 10\noWorksheet.Range("A1").Value = "Class Type = " & sClassType"
  }
}
``````json
{
  "Description": "Equivalent Excel VBA and OnlyOffice JS code for retrieving and setting the height of a drawing in a worksheet.",
  "RAGTable": [
    {
      "Method": "GetActiveSheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Method": "CreateRGBColor",
      "OnlyOffice_JS": "Api.CreateRGBColor(255, 111, 61)",
      "VBA": "RGB(255, 111, 61)"
    },
    {
      "Method": "CreateSolidFill",
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "VBA": "oFill.ForeColor.RGB = RGB(255, 111, 61)\noFill.Visible = msoTrue"
    },
    {
      "Method": "CreateNoFill",
      "OnlyOffice_JS": "Api.CreateNoFill()",
      "VBA": "oDrawing.Fill.Visible = msoFalse"
    },
    {
      "Method": "CreateStroke",
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "VBA": "With oDrawing.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    },
    {
      "Method": "AddShape",
      "OnlyOffice_JS": "var oDrawing = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "VBA": "Set oDrawing = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 60, 35, 120, 70)"
    },
    {
      "Method": "SetSize",
      "OnlyOffice_JS": "oDrawing.SetSize(120 * 36000, 70 * 36000);",
      "VBA": "With oDrawing\n    .Width = 120\n    .Height = 70\nEnd With"
    },
    {
      "Method": "SetPosition",
      "OnlyOffice_JS": "oDrawing.SetPosition(0, 2 * 36000, 1, 3 * 36000);",
      "VBA": "With oDrawing\n    .Left = 0\n    .Top = 2\nEnd With"
    },
    {
      "Method": "GetHeight",
      "OnlyOffice_JS": "var nHeight = oDrawing.GetHeight();",
      "VBA": "nHeight = oDrawing.Height"
    },
    {
      "Method": "SetValue",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"Drawing height = \" + nHeight);",
      "VBA": "oWorksheet.Range(\"A1\").Value = \"Drawing height = \" & nHeight"
    }
  ]
}
```**Description:**  
This code demonstrates how to add a shape to an active worksheet in OnlyOffice, customize its appearance, set its size and position, apply a lock to prevent selection, retrieve the lock status, and display the lock status in cell A1.

```json
{
  "methods": [
    {
      "method": "GetActiveSheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "method": "CreateSolidFill",
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "VBA": "Dim oFill As Object\nSet oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61))"
    },
    {
      "method": "CreateStroke",
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "VBA": "Dim oStroke As Object\nSet oStroke = Api.CreateStroke(0, Api.CreateNoFill())"
    },
    {
      "method": "AddShape",
      "OnlyOffice_JS": "var oDrawing = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "VBA": "Dim oDrawing As Shape\nSet oDrawing = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
    },
    {
      "method": "SetSize",
      "OnlyOffice_JS": "oDrawing.SetSize(120 * 36000, 70 * 36000);",
      "VBA": "oDrawing.Width = 120 * 36000\noDrawing.Height = 70 * 36000"
    },
    {
      "method": "SetPosition",
      "OnlyOffice_JS": "oDrawing.SetPosition(0, 2 * 36000, 1, 3 * 36000);",
      "VBA": "oDrawing.Left = 0 + 2 * 36000\noDrawing.Top = 1 + 3 * 36000"
    },
    {
      "method": "SetLockValue",
      "OnlyOffice_JS": "oDrawing.SetLockValue(\"noSelect\", true);",
      "VBA": "oDrawing.Locked = True ' Assuming 'noSelect' corresponds to the Locked property"
    },
    {
      "method": "GetLockValue",
      "OnlyOffice_JS": "var bLockValue = oDrawing.GetLockValue(\"noSelect\");",
      "VBA": "Dim bLockValue As Boolean\nbLockValue = oDrawing.Locked"
    },
    {
      "method": "SetValue",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"This drawing cannot be selected: \" + bLockValue);",
      "VBA": "oWorksheet.Range(\"A1\").Value = \"This drawing cannot be selected: \" & bLockValue"
    }
  ]
}
```**Description:** This example demonstrates how to retrieve the active sheet, create a solid fill and stroke, add a shape to the sheet, obtain the shape's parent sheet, and add text indicating the parent sheet's name to the shape's content.

```json
{
  "ComparisonTable": [
    {
      "OnlyOffice JS Method": "Api.GetActiveSheet()",
      "Excel VBA Equivalent": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS Method": "Api.CreateRGBColor(255, 111, 61)",
      "Excel VBA Equivalent": "RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS Method": "Api.CreateSolidFill(color)",
      "Excel VBA Equivalent": "Set oFill = oShape.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS Method": "Api.CreateStroke(0, Api.CreateNoFill())",
      "Excel VBA Equivalent": "With oShape.Line\n .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice JS Method": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)",
      "Excel VBA Equivalent": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, 60, 35, 2, 3)\nWith oShape.Fill\n .ForeColor.RGB = RGB(255, 111, 61)\nEnd With\nWith oShape.Line\n .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice JS Method": "oShape.GetParentSheet()",
      "Excel VBA Equivalent": "Set oParentSheet = oShape.Parent"
    },
    {
      "OnlyOffice JS Method": "oShape.GetDocContent()",
      "Excel VBA Equivalent": "Set oDocContent = oShape.TextFrame.Characters"
    },
    {
      "OnlyOffice JS Method": "oDocContent.GetElement(0)",
      "Excel VBA Equivalent": "Set oParagraph = oShape.TextFrame.Characters(1, 1)"
    },
    {
      "OnlyOffice JS Method": "oParagraph.AddText(\"Parent sheet name is \" + oParentSheet.GetName())",
      "Excel VBA Equivalent": "oShape.TextFrame.Characters.Text = \"Parent sheet name is \" & oParentSheet.Name"
    }
  ]
}
``````json
{
  "description": "This code adds a shape to the active worksheet with specified fill and stroke, sets its size and position, retrieves its width, and writes the width to cell A1.",
  "RAG_Table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "Set oFill = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "Set oStroke = Nothing ' No stroke equivalent"
    },
    {
      "OnlyOffice JS": "var oDrawing = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Set oDrawing = oWorksheet.Shapes.AddShape(msoShapeFlowchartOfflineStorage, 60, 35, oFill, oStroke)"
    },
    {
      "OnlyOffice JS": "oDrawing.SetSize(120 * 36000, 70 * 36000);",
      "Excel VBA": "With oDrawing\n    .Width = 120\n    .Height = 70\nEnd With"
    },
    {
      "OnlyOffice JS": "oDrawing.SetPosition(0, 2 * 36000, 1, 3 * 36000);",
      "Excel VBA": "With oDrawing\n    .Left = 0\n    .Top = 2\nEnd With"
    },
    {
      "OnlyOffice JS": "var nWidth = oDrawing.GetWidth();",
      "Excel VBA": "nWidth = oDrawing.Width"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"Drawing width = \" + nWidth);",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"Drawing width = \" & nWidth"
    }
  ]
}
``````json
{
  "Description": "This example gets a class type and inserts it into the document.",
  "OnlyOffice JS": "// This example gets a class type and inserts it into the document.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\noDrawing.SetSize(120 * 36000, 70 * 36000);\noDrawing.SetPosition(0, 2 * 36000, 1, 3 * 36000);\nvar sClassType = oDrawing.GetClassType();\noWorksheet.SetColumnWidth(0, 15);\noWorksheet.SetColumnWidth(1, 10);\noWorksheet.GetRange(\"A1\").SetValue(\"Class Type = \" + sClassType);",
  "Excel VBA": "Sub InsertClassType()\n    ' This example gets a class type and inserts it into the document.\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ActiveSheet\n    Dim oFill As Object ' Replace with appropriate Fill object\n    Set oFill = CreateSolidFill(CreateRGBColor(255, 111, 61))\n    Dim oStroke As Object ' Replace with appropriate Stroke object\n    Set oStroke = CreateStroke(0, CreateNoFill())\n    Dim oDrawing As Shape\n    Set oDrawing = oWorksheet.Shapes.AddShape(msoShapeFlowChartStorage, 60 * 36000, 35 * 36000, 120 * 36000, 70 * 36000)\n    With oDrawing\n        .Left = 0 + 2 * 36000\n        .Top = 1 + 3 * 36000\n    End With\n    Dim sClassType As String\n    sClassType = oDrawing.Name ' Assuming GetClassType equivalent\n    oWorksheet.Columns(1).ColumnWidth = 15\n    oWorksheet.Columns(2).ColumnWidth = 10\n    oWorksheet.Range(\"A1\").Value = \"Class Type = \" & sClassType\nEnd Sub"
}
``````json
{
  "Description": "This example shows how to get the height of the drawing.",
  "Codes": [
    {
      "Language": "VBA",
      "Code": "Sub GetDrawingHeight()\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ActiveSheet\n    \n    Dim oDrawing As Shape\n    Set oDrawing = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 60, 35, 120, 70)\n    \n    ' Set fill color\n    oDrawing.Fill.ForeColor.RGB = RGB(255, 111, 61)\n    \n    ' Set line (stroke) to no line\n    oDrawing.Line.Visible = msoFalse\n    \n    ' Set position\n    oDrawing.Left = 0\n    oDrawing.Top = 2\n    \n    ' Get height\n    Dim nHeight As Double\n    nHeight = oDrawing.Height\n    \n    ' Set cell value\n    oWorksheet.Range(\"A1\").Value = \"Drawing height = \" & nHeight\nEnd Sub"
    },
    {
      "Language": "OnlyOffice JS",
      "Code": "// This example shows how to get the height of the drawing.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\noDrawing.SetSize(120 * 36000, 70 * 36000);\noDrawing.SetPosition(0, 2 * 36000, 1, 3 * 36000);\nvar nHeight = oDrawing.GetHeight();\noWorksheet.GetRange(\"A1\").SetValue(\"Drawing height = \" + nHeight);"
    }
  ]
}
``````json
{
  "description": "This code adds a flowchart shape to the active worksheet in OnlyOffice, sets its size and position, applies a solid fill and no stroke, locks the shape from being selected, retrieves the lock status, and writes a message to cell A1 indicating whether the drawing can be selected.",
  "codeMappings": [
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "ExcelVBA": "oFill.ForeColor.RGB = RGB(255, 111, 61)\noFill.Solid"
    },
    {
      "OnlyOfficeJS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "ExcelVBA": "With oDrawing.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOfficeJS": "var oDrawing = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "ExcelVBA": "Set oDrawing = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 60, 35, 120, 70)"
    },
    {
      "OnlyOfficeJS": "oDrawing.SetSize(120 * 36000, 70 * 36000);",
      "ExcelVBA": "oDrawing.Width = 120\noDrawing.Height = 70"
    },
    {
      "OnlyOfficeJS": "oDrawing.SetPosition(0, 2 * 36000, 1, 3 * 36000);",
      "ExcelVBA": "oDrawing.Left = 0\noDrawing.Top = 1"
    },
    {
      "OnlyOfficeJS": "oDrawing.SetLockValue(\"noSelect\", true);",
      "ExcelVBA": "oDrawing.Locked = True"
    },
    {
      "OnlyOfficeJS": "var bLockValue = oDrawing.GetLockValue(\"noSelect\");",
      "ExcelVBA": "bLockValue = oDrawing.Locked"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A1\").SetValue(\"This drawing cannot be selected: \" + bLockValue);",
      "ExcelVBA": "Range(\"A1\").Value = \"This drawing cannot be selected: \" & bLockValue"
    }
  ]
}
``````json
{
  "description": "This example demonstrates how to get the drawing's parent sheet, create fill and stroke objects, add a shape to the worksheet, retrieve the parent sheet of the shape, and add text to the shape's document content.",
  "code": {
    "OnlyOfficeJS": "// This example shows how to get the drawing's parent sheet.\nlet oWorksheet = Api.GetActiveSheet();\nlet oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nlet oParentSheet = oShape.GetParentSheet();\n\nlet oDocContent = oShape.GetDocContent();\nlet oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"Parent sheet name is \" + oParentSheet.GetName());",
    "VBA": "' This example shows how to get the drawing's parent sheet.\nDim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet\n\nDim oFill As Object\nSet oFill = CreateSolidFill(CreateRGBColor(255, 111, 61))\n\nDim oStroke As Object\nSet oStroke = CreateStroke(0, CreateNoFill())\n\nDim oShape As Shape\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)\n\nDim oParentSheet As Worksheet\nSet oParentSheet = oShape.Parent\n\nDim oDocContent As Object\nSet oDocContent = oShape.TextFrame.TextRange\n\nDim oParagraph As Object\nSet oParagraph = oDocContent.Paragraphs(1)\noParagraph.Text = \"Parent sheet name is \" & oParentSheet.Name"
  }
}
``````json
{
  "Description": "This example shows how to get the width of the drawing.",
  "CodeMapping": [
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "ExcelVBA": "Set oFill = oWorksheet.Shapes.AddShape(msoShapeRectangle, 0, 0, 100, 100).Fill\noFill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOfficeJS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "ExcelVBA": "Set oStroke = oWorksheet.Shapes.AddShape(msoShapeRectangle, 0, 0, 100, 100).Line\noStroke.Visible = msoFalse"
    },
    {
      "OnlyOfficeJS": "var oDrawing = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "ExcelVBA": "Set oDrawing = oWorksheet.Shapes.AddShape(msoShapeFlowChartStorage, 60, 35, oFill, oStroke).Left = 2 * 36000\noDrawing.Top = 3 * 36000"
    },
    {
      "OnlyOfficeJS": "oDrawing.SetSize(120 * 36000, 70 * 36000);",
      "ExcelVBA": "With oDrawing\n    .Width = 120 * 36000\n    .Height = 70 * 36000\nEnd With"
    },
    {
      "OnlyOfficeJS": "oDrawing.SetPosition(0, 2 * 36000, 1, 3 * 36000);",
      "ExcelVBA": "With oDrawing\n    .Left = 2 * 36000\n    .Top = 3 * 36000\nEnd With"
    },
    {
      "OnlyOfficeJS": "var nWidth = oDrawing.GetWidth();",
      "ExcelVBA": "nWidth = oDrawing.Width"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A1\").SetValue(\"Drawing width = \" + nWidth);",
      "ExcelVBA": "oWorksheet.Range(\"A1\").Value = \"Drawing width = \" & nWidth"
    }
  ]
}
``````json
{
  "description": "This example sets the lock value to the specified lock type of the current drawing and displays the lock status in cell A1.",
  "code": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "VBA": "Dim oFill As FillFormat\nSet oFill = oDrawing.Fill\noFill.ForeColor.RGB = RGB(255, 111, 61)\n" +
              "oFill.Solid"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "VBA": "Dim oStroke As LineFormat\nSet oStroke = oDrawing.Line\nWith oStroke\n" +
              "    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oDrawing = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "VBA": "Dim oDrawing As Shape\nSet oDrawing = oWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, " +
              "60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
    },
    {
      "OnlyOffice_JS": "oDrawing.SetSize(120 * 36000, 70 * 36000);",
      "VBA": "With oDrawing\n" +
              "    .Width = 120 * 36000\n" +
              "    .Height = 70 * 36000\n" +
              "End With"
    },
    {
      "OnlyOffice_JS": "oDrawing.SetPosition(0, 2 * 36000, 1, 3 * 36000);",
      "VBA": "With oDrawing\n" +
              "    .Left = 0\n" +
              "    .Top = 2 * 36000\n" +
              "End With"
    },
    {
      "OnlyOffice_JS": "oDrawing.SetLockValue(\"noSelect\", true);",
      "VBA": "oDrawing.Locked = True"
    },
    {
      "OnlyOffice_JS": "var bLockValue = oDrawing.GetLockValue(\"noSelect\");",
      "VBA": "Dim bLockValue As Boolean\nbLockValue = oDrawing.Locked"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"This drawing cannot be selected: \" + bLockValue);",
      "VBA": "oWorksheet.Range(\"A1\").Value = \"This drawing cannot be selected: \" & bLockValue"
    }
  ]
}
``````json
{
  "Description": "This code changes the position for the drawing object.",
  "CodeMappings": [
    {
      "OnlyOffice JS": "Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "oFill = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "oStroke = Nothing"
    },
    {
      "OnlyOffice JS": "oWorksheet.AddShape('flowChartOnlineStorage', 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Set oDrawing = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 60, 35, oFill, oStroke)"
    },
    {
      "OnlyOffice JS": "oDrawing.SetSize(120 * 36000, 70 * 36000);",
      "Excel VBA": "oDrawing.Width = 120\noDrawing.Height = 70"
    },
    {
      "OnlyOffice JS": "oDrawing.SetPosition(0, 2 * 36000, 2, 3 * 36000);",
      "Excel VBA": "oDrawing.Left = 2\noDrawing.Top = 3"
    }
  ]
}
```// Description: This code sets the size and position of a shape's bounding box in the active worksheet.

```json
{
  "RAG_Table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "VBA": "With oWorksheet.Shapes.AddShape(msoShapeRectangle, 0, 0, 100, 100).Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "VBA": "With oWorksheet.Shapes(1).Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oDrawing = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "VBA": "Set oDrawing = oWorksheet.Shapes.AddShape(msoShapeFlowchartDatabase, 60, 35, 100, 100)"
    },
    {
      "OnlyOffice_JS": "oDrawing.SetSize(120 * 36000, 70 * 36000);",
      "VBA": "With oDrawing\n    .Width = 120\n    .Height = 70\nEnd With"
    },
    {
      "OnlyOffice_JS": "oDrawing.SetPosition(0, 2 * 36000, 2, 3 * 36000);",
      "VBA": "With oDrawing\n    .Left = 2\n    .Top = 3\nEnd With"
    }
  ]
}
``````json
{
  "Description": "Sets a lock value to prevent the drawing from being selected and updates cell A1 with the lock status.",
  "OnlyOffice_JS": "// This example sets the lock value to the specified lock type of the current drawing.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\noDrawing.SetSize(120 * 36000, 70 * 36000);\noDrawing.SetPosition(0, 2 * 36000, 1, 3 * 36000);\noDrawing.SetLockValue(\"noSelect\", true);\nvar bLockValue = oDrawing.GetLockValue(\"noSelect\");\noWorksheet.GetRange(\"A1\").SetValue(\"This drawing cannot be selected: \" + bLockValue);",
  "Excel_VBA": "Sub SetDrawingLock()\n    Dim oSheet As Worksheet\n    Dim oShape As Shape\n    Dim lockValue As Boolean\n\n    Set oSheet = ThisWorkbook.ActiveSheet\n    ' Add a shape - equivalent to AddShape\n    Set oShape = oSheet.Shapes.AddShape(msoShapeFlowchartAlternateProcess, 60, 35, 120, 70)\n    ' Set fill color\n    With oShape.Fill\n        .ForeColor.RGB = RGB(255, 111, 61)\n        .Visible = msoTrue\n    End With\n    ' Set no stroke\n    With oShape.Line\n        .Visible = msoFalse\n    End With\n    ' Set position\n    oShape.Left = 60\n    oShape.Top = 35\n    ' Lock the shape from being selected\n    oShape.Locked = True\n    ' Protect the sheet to enforce locking\n    oSheet.Protect Password:=\"\", DrawingObjects:=True, Contents:=True, Scenarios:=True\n    ' Get lock value\n    lockValue = oShape.Locked\n    ' Update cell A1\n    oSheet.Range(\"A1\").Value = \"This drawing cannot be selected: \" & lockValue\nEnd Sub"
}
``````json
{
  "Description": "This example changes the position for the drawing object.",
  "Code": {
    "VBA": "Sub ChangeDrawingPosition()\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ThisWorkbook.ActiveSheet\n\n    ' Create a solid fill with RGB color (255, 111, 61)\n    Dim fillColor As Long\n    fillColor = RGB(255, 111, 61)\n\n    ' Add a flowchart internal storage shape\n    Dim oShape As Shape\n    Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartInternalStorage, 60, 35, 120, 70)\n\n    ' Apply fill color\n    oShape.Fill.ForeColor.RGB = fillColor\n    oShape.Fill.Solid\n\n    ' Remove stroke\n    oShape.Line.Visible = msoFalse\n\n    ' Set position\n    oShape.Left = 2 * 36000\n    oShape.Top = 3 * 36000\nEnd Sub",
    "OnlyOffice_JS": "// This example changes the position for the drawing object.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\noDrawing.SetSize(120 * 36000, 70 * 36000);\noDrawing.SetPosition(0, 2 * 36000, 2, 3 * 36000);"
  }
}
``````json
{
  "description": "This example sets the size of the shape bounding box.",
  "RAG_Table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "Set oFill = ActiveWorkbook.Colors.RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "Set oStroke = Application.CreateStroke(0, Nothing)"
    },
    {
      "OnlyOffice JS": "var oDrawing = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Set oDrawing = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
    },
    {
      "OnlyOffice JS": "oDrawing.SetSize(120 * 36000, 70 * 36000);",
      "Excel VBA": "With oDrawing\n    .Width = 120 * 36000\n    .Height = 70 * 36000\nEnd With"
    },
    {
      "OnlyOffice JS": "oDrawing.SetPosition(0, 2 * 36000, 2, 3 * 36000);",
      "Excel VBA": "With oDrawing\n    .Left = 0 + 2 * 36000\n    .Top = 2 + 3 * 36000\nEnd With"
    }
  ]
}
``````json
{
  "RAG_Table": {
    "Description": "Get the active worksheet",
    "VBA_Code": "Set oWorksheet = ThisWorkbook.ActiveSheet",
    "OnlyOffice_JS_Code": "var oWorksheet = Api.GetActiveSheet();"
  },
  {
    "Description": "Create Gradient Stop 1 with RGB(255,213,191) at position 0",
    "VBA_Code": "Set oGs1 = oWorksheet.Shapes.AddGradientStop(RGB(255, 213, 191), 0)",
    "OnlyOffice_JS_Code": "var oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);"
  },
  {
    "Description": "Create Gradient Stop 2 with RGB(255,111,61) at position 100000",
    "VBA_Code": "Set oGs2 = oWorksheet.Shapes.AddGradientStop(RGB(255, 111, 61), 100000)",
    "OnlyOffice_JS_Code": "var oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);"
  },
  {
    "Description": "Create a linear gradient fill with the gradient stops and angle 5400000",
    "VBA_Code": "Set oFill = oWorksheet.Shapes.AddLinearGradientFill(oGs1, oGs2, 5400000)",
    "OnlyOffice_JS_Code": "var oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);"
  },
  {
    "Description": "Create a stroke with width 0 and no fill",
    "VBA_Code": "Set oStroke = oWorksheet.Shapes.AddStroke(0, msoNoFill)",
    "OnlyOffice_JS_Code": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());"
  },
  {
    "Description": "Add a shape 'flowChartOnlineStorage' with specified properties",
    "VBA_Code": "oWorksheet.Shapes.AddShape(msoShapeFlowchartDatabase, 60, 35, oFill, oStroke, 0, 2, 1, 3)",
    "OnlyOffice_JS_Code": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);"
  },
  {
    "Description": "Get the class type of the fill",
    "VBA_Code": "sClassType = oFill.Type",
    "OnlyOffice_JS_Code": "var sClassType = oFill.GetClassType();"
  },
  {
    "Description": "Set the width of column A to 15",
    "VBA_Code": "oWorksheet.Columns(1).ColumnWidth = 15",
    "OnlyOffice_JS_Code": "oWorksheet.SetColumnWidth(0, 15);"
  },
  {
    "Description": "Set the width of column B to 10",
    "VBA_Code": "oWorksheet.Columns(2).ColumnWidth = 10",
    "OnlyOffice_JS_Code": "oWorksheet.SetColumnWidth(1, 10);"
  },
  {
    "Description": "Set the value of cell A1 to display the class type",
    "VBA_Code": "oWorksheet.Range(\"A1\").Value = \"Class Type = \" & sClassType",
    "OnlyOffice_JS_Code": "oWorksheet.GetRange(\"A1\").SetValue(\"Class Type = \" + sClassType);"
  }
}
``````json
{
  "description": "This code retrieves the active worksheet, creates gradient fills and strokes, adds a specific shape to the worksheet, sets column widths, and writes the class type information into cell A1.",
  "RAG_Table": [
    {
      "Action": "Get active sheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Action": "Create first gradient stop",
      "OnlyOffice_JS": "var oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);",
      "VBA": "Dim oGs1 As Object\nSet oGs1 = oWorksheet.Shapes.AddShape(msoShapeRectangle, 0, 0, 100, 100).Fill.GradientStops.Add(0, RGB(255, 213, 191))"
    },
    {
      "Action": "Create second gradient stop",
      "OnlyOffice_JS": "var oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);",
      "VBA": "Dim oGs2 As Object\nSet oGs2 = oWorksheet.Shapes(1).Fill.GradientStops.Add(1, RGB(255, 111, 61))"
    },
    {
      "Action": "Create linear gradient fill",
      "OnlyOffice_JS": "var oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);",
      "VBA": "With oWorksheet.Shapes(1).Fill\n    .TwoColorGradient msoGradientHorizontal, 1\n    .GradientAngle = 5400000\nEnd With"
    },
    {
      "Action": "Create stroke with no fill",
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "VBA": "With oWorksheet.Shapes(1).Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    },
    {
      "Action": "Add shape to worksheet",
      "OnlyOffice_JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
      "VBA": "Dim shp As Shape\nSet shp = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 60 * 36000, 35 * 36000, 2 * 36000, 3 * 36000)\nWith shp.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 213, 191)\n    ' Additional gradient settings as needed\nEnd With\nWith shp.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "Action": "Get class type of fill",
      "OnlyOffice_JS": "var sClassType = oFill.GetClassType();",
      "VBA": "Dim sClassType As String\nsClassType = TypeName(oWorksheet.Shapes(1).Fill)"
    },
    {
      "Action": "Set column width for column A",
      "OnlyOffice_JS": "oWorksheet.SetColumnWidth(0, 15);",
      "VBA": "oWorksheet.Columns(1).ColumnWidth = 15"
    },
    {
      "Action": "Set column width for column B",
      "OnlyOffice_JS": "oWorksheet.SetColumnWidth(1, 10);",
      "VBA": "oWorksheet.Columns(2).ColumnWidth = 10"
    },
    {
      "Action": "Set value of cell A1",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"Class Type = \" + sClassType);",
      "VBA": "oWorksheet.Range(\"A1\").Value = \"Class Type = \" & sClassType"
    }
  ]
}
```**This code demonstrates how to set and retrieve the bold property of a specific font in a cell using OnlyOffice API and its Excel VBA equivalent.**

```json
{
  "RAG_Table": [
    {
      "OnlyOffice_JS_Method": "Api.GetActiveSheet()",
      "Excel_VBA_Equivalent": "ActiveSheet",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS_Method": "oWorksheet.GetRange(\"B1\")",
      "Excel_VBA_Equivalent": "Range(\"B1\")",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS_Method": "oRange.SetValue(\"This is just a sample text.\")",
      "Excel_VBA_Equivalent": "Range(\"B1\").Value = \"This is just a sample text.\"",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS_Method": "oRange.GetCharacters(9, 4)",
      "Excel_VBA_Equivalent": "Characters(9, 4)",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS_Method": "oCharacters.GetFont()",
      "Excel_VBA_Equivalent": "Font",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS_Method": "oFont.SetBold(true)",
      "Excel_VBA_Equivalent": "Font.Bold = True",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS_Method": "oFont.GetBold()",
      "Excel_VBA_Equivalent": "Font.Bold",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS_Method": "oWorksheet.GetRange(\"B3\").SetValue(\"Bold property: \" + bBold)",
      "Excel_VBA_Equivalent": "Range(\"B3\").Value = \"Bold property: \" & Font.Bold",
      "Status": "Green"
    }
  ]
}
``````json
{
  "table": {
    "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Description": "This example shows how to get the font color property of the specified font.",
        "OnlyOffice JS": "// This example shows how to get the font color property of the specified font.\nvar oWorksheet = Api.GetActiveSheet();\nvar oRange = oWorksheet.GetRange(\"B1\");\noRange.SetValue(\"This is just a sample text.\");\nvar oCharacters = oRange.GetCharacters(9, 4);\nvar oFont = oCharacters.GetFont();\nvar oColor = Api.CreateColorFromRGB(255, 111, 61);\noFont.SetColor(oColor);\noColor = oFont.GetColor();\noCharacters = oRange.GetCharacters(16, 6);\nvar oFont = oCharacters.GetFont();\noFont.SetColor(oColor);",
        "Excel VBA": "' This example shows how to get the font color property of the specified font.\nSub Example()\n    ' Get the active sheet\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ActiveSheet\n    \n    ' Get range B1\n    Dim oRange As Range\n    Set oRange = oWorksheet.Range(\"B1\")\n    \n    ' Set value\n    oRange.Value = \"This is just a sample text.\"\n    \n    ' Get characters 9 to 12\n    Dim oCharacters As Characters\n    Set oCharacters = oRange.Characters(Start:=9, Length:=4)\n    \n    ' Get font\n    Dim oFont As Font\n    Set oFont = oCharacters.Font\n    \n    ' Create color from RGB\n    Dim oColor As Long\n    oColor = RGB(255, 111, 61)\n    \n    ' Set color\n    oFont.Color = oColor\n    \n    ' Get color\n    oColor = oFont.Color\n    \n    ' Get characters 16 to 21\n    Set oCharacters = oRange.Characters(Start:=16, Length:=6)\n    \n    ' Get font\n    Set oFont = oCharacters.Font\n    \n    ' Set color\n    oFont.Color = oColor\nEnd Sub"
      }
    ]
  }
}
``````json
{
  "description": "This example shows how to get the italic property of the specified font.",
  "methods": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOffice_JS": "oRange.SetValue(\"This is just a sample text.\");",
      "Excel_VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice_JS": "var oCharacters = oRange.GetCharacters(9, 4);",
      "Excel_VBA": "Set oCharacters = oRange.Characters(9, 4)"
    },
    {
      "OnlyOffice_JS": "var oFont = oCharacters.GetFont();",
      "Excel_VBA": "Set oFont = oCharacters.Font"
    },
    {
      "OnlyOffice_JS": "oFont.SetItalic(true);",
      "Excel_VBA": "oFont.Italic = True"
    },
    {
      "OnlyOffice_JS": "var bItalic = oFont.GetItalic();",
      "Excel_VBA": "bItalic = oFont.Italic"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(\"Italic property: \" + bItalic);",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"Italic property: \" & bItalic"
    }
  ]
}
``````json
{
  "description": "This example shows how to get the font name property of the specified font.",
  "code": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "Excel VBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOffice JS": "oRange.SetValue(\"This is just a sample text.\");",
      "Excel VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice JS": "var oCharacters = oRange.GetCharacters(9, 4);",
      "Excel VBA": "Set oCharacters = oRange.Characters(9, 4)"
    },
    {
      "OnlyOffice JS": "var oFont = oCharacters.GetFont();",
      "Excel VBA": "Set oFont = oCharacters.Font"
    },
    {
      "OnlyOffice JS": "oFont.SetName(\"Font 1\");",
      "Excel VBA": "oFont.Name = \"Font 1\""
    },
    {
      "OnlyOffice JS": "var sFontName = oFont.GetName();",
      "Excel VBA": "sFontName = oFont.Name"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(\"Font name: \" + sFontName);",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"Font name: \" & sFontName"
    }
  ]
}
``````json
{
  "description": "This example shows how to get the parent ApiCharacters object of the specified font.",
  "RAGTable": [
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOfficeJS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "ExcelVBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOfficeJS": "oRange.SetValue(\"This is just a sample text.\");",
      "ExcelVBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOfficeJS": "var oCharacters = oRange.GetCharacters(23, 4);",
      "ExcelVBA": "Set oCharacters = oRange.Characters(Start:=23, Length:=4)"
    },
    {
      "OnlyOfficeJS": "var oFont = oCharacters.GetFont();",
      "ExcelVBA": "Set oFont = oCharacters.Font"
    },
    {
      "OnlyOfficeJS": "var oParent = oFont.GetParent();",
      "ExcelVBA": "Set oParent = oFont.Parent"
    },
    {
      "OnlyOfficeJS": "oParent.SetText(\"string\");",
      "ExcelVBA": "oParent.Text = \"string\""
    }
  ]
}
``````json
{
  "Description": "This code demonstrates setting a value in a cell, modifying the font size of a substring, and then retrieving and displaying the font size of that substring in both OnlyOffice JavaScript API and Excel VBA.",
  "CodeEquivalents": [
    {
      "Action": "Get Active Sheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "Action": "Get Range B1",
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "Excel_VBA": "Dim oRange As Range\nSet oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "Action": "Set Value in B1",
      "OnlyOffice_JS": "oRange.SetValue(\"This is just a sample text.\");",
      "Excel_VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "Action": "Get Characters 9-12",
      "OnlyOffice_JS": "var oCharacters = oRange.GetCharacters(9, 4);",
      "Excel_VBA": "Dim oCharacters As Characters\nSet oCharacters = oRange.Characters(Start:=9, Length:=4)"
    },
    {
      "Action": "Get Font",
      "OnlyOffice_JS": "var oFont = oCharacters.GetFont();",
      "Excel_VBA": "Dim oFont As Font\nSet oFont = oCharacters.Font"
    },
    {
      "Action": "Set Font Size",
      "OnlyOffice_JS": "oFont.SetSize(18);",
      "Excel_VBA": "oFont.Size = 18"
    },
    {
      "Action": "Get Font Size",
      "OnlyOffice_JS": "var nSize = oFont.GetSize();",
      "Excel_VBA": "Dim nSize As Integer\nnSize = oFont.Size"
    },
    {
      "Action": "Set Value in B3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(\"Size property: \" + nSize);",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"Size property: \" & nSize"
    }
  ]
}
``````json
{
  "Description": "This example shows how to get the strikethrough property of the specified font.",
  "RAG_Table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "VBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOffice JS": "oRange.SetValue(\"This is just a sample text.\");",
      "VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice JS": "var oCharacters = oRange.GetCharacters(9, 4);",
      "VBA": "Set oCharacters = oRange.Characters(9, 4)"
    },
    {
      "OnlyOffice JS": "var oFont = oCharacters.GetFont();",
      "VBA": "Set oFont = oCharacters.Font"
    },
    {
      "OnlyOffice JS": "oFont.SetStrikethrough(true);",
      "VBA": "oFont.Strikethrough = True"
    },
    {
      "OnlyOffice JS": "var bStrikethrough = oFont.GetStrikethrough();",
      "VBA": "bStrikethrough = oFont.Strikethrough"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(\"Strikethrough property: \" + bStrikethrough);",
      "VBA": "oWorksheet.Range(\"B3\").Value = \"Strikethrough property: \" & bStrikethrough"
    }
  ]
}
``````json
{
  "Description": "This example shows how to get the subscript property of the specified font.",
  "OnlyOffice_JS": "// This example shows how to get the subscript property of the specified font.\nvar oWorksheet = Api.GetActiveSheet();\nvar oRange = oWorksheet.GetRange(\"B1\");\noRange.SetValue(\"This is just a sample text.\");\nvar oCharacters = oRange.GetCharacters(9, 4);\nvar oFont = oCharacters.GetFont();\noFont.SetSubscript(true);\nvar bSubscript = oFont.GetSubscript();\noWorksheet.GetRange(\"B3\").SetValue(\"Subscript property: \" + bSubscript);",
  "Excel_VBA": "' This example shows how to get the subscript property of the specified font.\nSub SetSubscript()\n    Dim oWorksheet As Worksheet\n    Dim oRange As Range\n    Dim oCharacters As Characters\n    Dim oFont As Font\n    Dim bSubscript As Boolean\n\n    Set oWorksheet = ThisWorkbook.ActiveSheet\n    Set oRange = oWorksheet.Range(\"B1\")\n    oRange.Value = \"This is just a sample text.\"\n    Set oCharacters = oRange.Characters(Start:=9, Length:=4)\n    Set oFont = oCharacters.Font\n    oFont.Subscript = True\n    bSubscript = oFont.Subscript\n    oWorksheet.Range(\"B3\").Value = \"Subscript property: \" & bSubscript\nEnd Sub"
}
``````json
{
  "description": "This code demonstrates how to set text in a cell, apply superscript formatting to a portion of the text, and retrieve the superscript property using OnlyOffice JavaScript API and its Excel VBA equivalents.",
  "rag_table": [
    {
      "Method": "GetActiveSheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "Method": "GetRange",
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "Method": "SetValue",
      "OnlyOffice_JS": "oRange.SetValue(\"This is just a sample text.\");",
      "Excel_VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "Method": "GetCharacters",
      "OnlyOffice_JS": "var oCharacters = oRange.GetCharacters(9, 4);",
      "Excel_VBA": "Set oCharacters = oRange.Characters(9, 4)"
    },
    {
      "Method": "GetFont",
      "OnlyOffice_JS": "var oFont = oCharacters.GetFont();",
      "Excel_VBA": "Set oFont = oCharacters.Font"
    },
    {
      "Method": "SetSuperscript",
      "OnlyOffice_JS": "oFont.SetSuperscript(true);",
      "Excel_VBA": "oFont.Superscript = True"
    },
    {
      "Method": "GetSuperscript",
      "OnlyOffice_JS": "var bSuperscript = oFont.GetSuperscript();",
      "Excel_VBA": "bSuperscript = oFont.Superscript"
    },
    {
      "Method": "SetValue",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(\"Superscript property: \" + bSuperscript);",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"Superscript property: \" & bSuperscript"
    }
  ]
}
```**Description:**  
This code sets a value in cell B1, retrieves specific characters from the text, applies underline formatting, retrieves the underline property, and displays it in cell B3.

```json
{
  "RAGTable": [
    {
      "OnlyOfficeJS": "Api.GetActiveSheet()",
      "ExcelVBA": "ActiveWorkbook.ActiveSheet",
      "Status": "Green"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B1\")",
      "ExcelVBA": "oWorksheet.Range(\"B1\")",
      "Status": "Green"
    },
    {
      "OnlyOfficeJS": "oRange.SetValue(\"This is just a sample text.\")",
      "ExcelVBA": "oRange.Value = \"This is just a sample text.\"",
      "Status": "Green"
    },
    {
      "OnlyOfficeJS": "oRange.GetCharacters(9, 4)",
      "ExcelVBA": "oRange.Characters(Start:=9, Length:=4)",
      "Status": "Green"
    },
    {
      "OnlyOfficeJS": "oCharacters.GetFont()",
      "ExcelVBA": "oCharacters.Font",
      "Status": "Green"
    },
    {
      "OnlyOfficeJS": "oFont.SetUnderline(\"xlUnderlineStyleSingle\")",
      "ExcelVBA": "oFont.Underline = xlUnderlineStyleSingle",
      "Status": "Green"
    },
    {
      "OnlyOfficeJS": "oFont.GetUnderline()",
      "ExcelVBA": "sUnderline = oFont.Underline",
      "Status": "Green"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B3\").SetValue(\"Underline property: \" + sUnderline)",
      "ExcelVBA": "oWorksheet.Range(\"B3\").Value = \"Underline property: \" & sUnderline",
      "Status": "Green"
    }
  ]
}
``````json
{
  "table": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Description": "Get range B1",
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "Description": "Set value in B1",
      "OnlyOffice_JS": "oRange.SetValue(\"This is just a sample text.\");",
      "Excel_VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "Description": "Get characters starting at position 9, length 4",
      "OnlyOffice_JS": "var oCharacters = oRange.GetCharacters(9, 4);",
      "Excel_VBA": "Set oCharacters = oRange.Characters(Start:=9, Length:=4)"
    },
    {
      "Description": "Get font of the characters",
      "OnlyOffice_JS": "var oFont = oCharacters.GetFont();",
      "Excel_VBA": "Set oFont = oCharacters.Font"
    },
    {
      "Description": "Set bold to true",
      "OnlyOffice_JS": "oFont.SetBold(true);",
      "Excel_VBA": "oFont.Bold = True"
    },
    {
      "Description": "Get bold property",
      "OnlyOffice_JS": "var bBold = oFont.GetBold();",
      "Excel_VBA": "bBold = oFont.Bold"
    },
    {
      "Description": "Set value in B3 with bold property",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(\"Bold property: \" + bBold);",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"Bold property: \" & bBold"
    }
  ]
}
``````json
{
  "description": "This code sets the value of cell B1 and applies font color changes to specific character ranges within the text.",
  "methods": [
    {
      "OnlyOffice_JS": "Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\");",
      "VBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOffice_JS": "oRange.SetValue(\"This is just a sample text.\");",
      "VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice_JS": "oRange.GetCharacters(9, 4);",
      "VBA": "Set oCharacters = oRange.Characters(Start:=9, Length:=4)"
    },
    {
      "OnlyOffice_JS": "oCharacters.GetFont();",
      "VBA": "Set oFont = oCharacters.Font"
    },
    {
      "OnlyOffice_JS": "Api.CreateColorFromRGB(255, 111, 61);",
      "VBA": "oColor = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "oFont.SetColor(oColor);",
      "VBA": "oFont.Color = oColor"
    },
    {
      "OnlyOffice_JS": "oFont.GetColor();",
      "VBA": "oColor = oFont.Color"
    },
    {
      "OnlyOffice_JS": "oRange.GetCharacters(16, 6);",
      "VBA": "Set oCharacters = oRange.Characters(Start:=16, Length:=6)"
    },
    {
      "OnlyOffice_JS": "oCharacters.GetFont();",
      "VBA": "Set oFont = oCharacters.Font"
    },
    {
      "OnlyOffice_JS": "oFont.SetColor(oColor);",
      "VBA": "oFont.Color = oColor"
    }
  ]
}
```**Description:** This code sets the value of cell B1, modifies the italic property of a substring, and displays the italic property in cell B3.

```json
{
  "Methods": [
    {
      "OnlyOffice_JS": "Api.GetActiveSheet()",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\")",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOffice_JS": "oRange.SetValue(\"This is just a sample text.\")",
      "Excel_VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice_JS": "oRange.GetCharacters(9, 4)",
      "Excel_VBA": "Set oCharacters = oRange.Characters(Start:=9, Length:=4)"
    },
    {
      "OnlyOffice_JS": "oCharacters.GetFont()",
      "Excel_VBA": "Set oFont = oCharacters.Font"
    },
    {
      "OnlyOffice_JS": "oFont.SetItalic(true)",
      "Excel_VBA": "oFont.Italic = True"
    },
    {
      "OnlyOffice_JS": "oFont.GetItalic()",
      "Excel_VBA": "bItalic = oFont.Italic"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(\"Italic property: \" + bItalic)",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"Italic property: \" & bItalic"
    }
  ]
}
``````json
{
  "Description": "This example demonstrates how to retrieve and modify the font name property of a specific range in a worksheet, then display the font name in another cell.",
  "CodeEquivalents": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "Excel VBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOffice JS": "oRange.SetValue(\"This is just a sample text.\");",
      "Excel VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice JS": "var oCharacters = oRange.GetCharacters(9, 4);",
      "Excel VBA": "Set oCharacters = oRange.Characters(9, 4)"
    },
    {
      "OnlyOffice JS": "var oFont = oCharacters.GetFont();",
      "Excel VBA": "Set oFont = oCharacters.Font"
    },
    {
      "OnlyOffice JS": "oFont.SetName(\"Font 1\");",
      "Excel VBA": "oFont.Name = \"Font 1\""
    },
    {
      "OnlyOffice JS": "var sFontName = oFont.GetName();",
      "Excel VBA": "sFontName = oFont.Name"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(\"Font name: \" + sFontName);",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"Font name: \" & sFontName"
    }
  ]
}
``````json
{
  "Description": "Equivalent VBA and OnlyOffice JS code for OnlyOffice API methods",
  "Rows": [
    {
      "Description": "Get the active worksheet",
      "VBA": "Set oWorksheet = ActiveSheet",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Get range B1",
      "VBA": "Set oRange = oWorksheet.Range(\"B1\")",
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"B1\");"
    },
    {
      "Description": "Set value to the range",
      "VBA": "oRange.Value = \"This is just a sample text.\"",
      "OnlyOffice JS": "oRange.SetValue(\"This is just a sample text.\");"
    },
    {
      "Description": "Get characters from the range (starting at position 23, length 4)",
      "VBA": "Set oCharacters = oRange.Characters(Start:=23, Length:=4)",
      "OnlyOffice JS": "var oCharacters = oRange.GetCharacters(23, 4);"
    },
    {
      "Description": "Get font of the specified characters",
      "VBA": "Set oFont = oCharacters.Font",
      "OnlyOffice JS": "var oFont = oCharacters.GetFont();"
    },
    {
      "Description": "Get parent object of the font",
      "VBA": "Set oParent = oFont.Parent",
      "OnlyOffice JS": "var oParent = oFont.GetParent();"
    },
    {
      "Description": "Set text of the parent object",
      "VBA": "oParent.Text = \"string\"",
      "OnlyOffice JS": "oParent.SetText(\"string\");"
    }
  ]
}
``````json
{
  "description": "This example shows how to get the font size property of the specified font.",
  "methods": [
    {
      "OnlyOffice_JS": "Api.GetActiveSheet()",
      "VBA": "ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\")",
      "VBA": "Range(\"B1\")"
    },
    {
      "OnlyOffice_JS": "oRange.SetValue(\"This is just a sample text.\")",
      "VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice_JS": "oRange.GetCharacters(9, 4)",
      "VBA": "oRange.Characters(Start:=9, Length:=4)"
    },
    {
      "OnlyOffice_JS": "oCharacters.GetFont()",
      "VBA": "oRange.Characters(Start:=9, Length:=4).Font"
    },
    {
      "OnlyOffice_JS": "oFont.SetSize(18)",
      "VBA": "oFont.Size = 18"
    },
    {
      "OnlyOffice_JS": "oFont.GetSize()",
      "VBA": "oFont.Size"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(\"Size property: \" + nSize)",
      "VBA": "oWorksheet.Range(\"B3\").Value = \"Size property: \" & nSize"
    }
  ]
}
``````json
{
  "Description": "This example shows how to get the strikethrough property of the specified font.",
  "OnlyOffice JS": "// This example shows how to get the strikethrough property of the specified font.\nvar oWorksheet = Api.GetActiveSheet();\nvar oRange = oWorksheet.GetRange(\"B1\");\noRange.SetValue(\"This is just a sample text.\");\nvar oCharacters = oRange.GetCharacters(9, 4);\nvar oFont = oCharacters.GetFont();\noFont.SetStrikethrough(true);\nvar bStrikethrough = oFont.GetStrikethrough();\noWorksheet.GetRange(\"B3\").SetValue(\"Strikethrough property: \" + bStrikethrough);",
  "Excel VBA": "' This example shows how to get the strikethrough property of the specified font.\nSub Example()\n    Dim oWorksheet As Worksheet\n    Dim oRange As Range\n    Dim oCharacters As Characters\n    Dim oFont As Font\n    Dim bStrikethrough As Boolean\n\n    Set oWorksheet = ActiveSheet\n    Set oRange = oWorksheet.Range(\"B1\")\n    oRange.Value = \"This is just a sample text.\"\n    Set oCharacters = oRange.Characters(Start:=9, Length:=4)\n    Set oFont = oCharacters.Font\n    oFont.Strikethrough = True\n    bStrikethrough = oFont.Strikethrough\n    oWorksheet.Range(\"B3\").Value = \"Strikethrough property: \" & bStrikethrough\nEnd Sub"
}
``````json
{
  "description": "This example shows how to get the subscript property of the specified font.",
  "table": {
    "columns": ["OnlyOffice_JS", "Excel_VBA"],
    "rows": [
      [
        "var oWorksheet = Api.GetActiveSheet();",
        "Set oWorksheet = ThisWorkbook.ActiveSheet"
      ],
      [
        "var oRange = oWorksheet.GetRange(\"B1\");",
        "Set oRange = oWorksheet.Range(\"B1\")"
      ],
      [
        "oRange.SetValue(\"This is just a sample text.\");",
        "oRange.Value = \"This is just a sample text.\""
      ],
      [
        "var oCharacters = oRange.GetCharacters(9, 4);",
        "Set oCharacters = oRange.Characters(Start:=9, Length:=4)"
      ],
      [
        "var oFont = oCharacters.GetFont();",
        "Set oFont = oCharacters.Font"
      ],
      [
        "oFont.SetSubscript(true);",
        "oFont.Subscript = True"
      ],
      [
        "var bSubscript = oFont.GetSubscript();",
        "bSubscript = oFont.Subscript"
      ],
      [
        "oWorksheet.GetRange(\"B3\").SetValue(\"Subscript property: \" + bSubscript);",
        "oWorksheet.Range(\"B3\").Value = \"Subscript property: \" & bSubscript"
      ]
    ]
  }
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
  },
  {
    "Description": "Get the range B1",
    "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"B1\");",
    "Excel_VBA": "Set oRange = oWorksheet.Range(\"B1\")"
  },
  {
    "Description": "Set value in range B1",
    "OnlyOffice_JS": "oRange.SetValue(\"This is just a sample text.\");",
    "Excel_VBA": "oRange.Value = \"This is just a sample text.\""
  },
  {
    "Description": "Get characters from position 9 with length 4",
    "OnlyOffice_JS": "var oCharacters = oRange.GetCharacters(9, 4);",
    "Excel_VBA": "Set oCharacters = oRange.Characters(9, 4)"
  },
  {
    "Description": "Get the font of the specified characters",
    "OnlyOffice_JS": "var oFont = oCharacters.GetFont();",
    "Excel_VBA": "Set oFont = oCharacters.Font"
  },
  {
    "Description": "Set superscript property to true",
    "OnlyOffice_JS": "oFont.SetSuperscript(true);",
    "Excel_VBA": "oFont.Superscript = True"
  },
  {
    "Description": "Get the superscript property",
    "OnlyOffice_JS": "var bSuperscript = oFont.GetSuperscript();",
    "Excel_VBA": "bSuperscript = oFont.Superscript"
  },
  {
    "Description": "Set value in range B3 with superscript property",
    "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(\"Superscript property: \" + bSuperscript);",
    "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"Superscript property: \" & bSuperscript"
  }
]
``````json
{
  "RAGTable": [
    {
      "Description": "Get the active worksheet",
      "VBA": "Set oWorksheet = ActiveSheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Get the range B1",
      "VBA": "Set oRange = oWorksheet.Range(\"B1\")",
      "OnlyOfficeJS": "var oRange = oWorksheet.GetRange(\"B1\");"
    },
    {
      "Description": "Set value in range B1",
      "VBA": "oRange.Value = \"This is just a sample text.\"",
      "OnlyOfficeJS": "oRange.SetValue(\"This is just a sample text.\");"
    },
    {
      "Description": "Get characters from position 9 with length 4 in range B1",
      "VBA": "Set oCharacters = oRange.Characters(Start:=9, Length:=4)",
      "OnlyOfficeJS": "var oCharacters = oRange.GetCharacters(9, 4);"
    },
    {
      "Description": "Get font of the selected characters",
      "VBA": "Set oFont = oCharacters.Font",
      "OnlyOfficeJS": "var oFont = oCharacters.GetFont();"
    },
    {
      "Description": "Set underline style to single",
      "VBA": "oFont.Underline = xlUnderlineStyleSingle",
      "OnlyOfficeJS": "oFont.SetUnderline(\"xlUnderlineStyleSingle\");"
    },
    {
      "Description": "Get underline style of the font",
      "VBA": "sUnderline = oFont.Underline",
      "OnlyOfficeJS": "var sUnderline = oFont.GetUnderline();"
    },
    {
      "Description": "Set value in range B3 with underline property",
      "VBA": "oWorksheet.Range(\"B3\").Value = \"Underline property: \" & sUnderline",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B3\").SetValue(\"Underline property: \" + sUnderline);"
    }
  ]
}
``````json
{
  "description": "This example sets the bold property to the specified font.",
  "RAG_Table": [
    {
      "Action": "Get Active Sheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "Action": "Get Range",
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "Action": "Set Value",
      "OnlyOffice_JS": "oRange.SetValue(\"This is just a sample text.\");",
      "Excel_VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "Action": "Get Characters",
      "OnlyOffice_JS": "var oCharacters = oRange.GetCharacters(9, 4);",
      "Excel_VBA": "Set oCharacters = oRange.Characters(9, 4)"
    },
    {
      "Action": "Get Font",
      "OnlyOffice_JS": "var oFont = oCharacters.GetFont();",
      "Excel_VBA": "Set oFont = oCharacters.Font"
    },
    {
      "Action": "Set Bold",
      "OnlyOffice_JS": "oFont.SetBold(true);",
      "Excel_VBA": "oFont.Bold = True"
    }
  ]
}
``````json
{
  "Description": "This example sets the font color property to the specified font.",
  "OnlyOffice_JS": "// This example sets the font color property to the specified font.\nvar oWorksheet = Api.GetActiveSheet();\nvar oRange = oWorksheet.GetRange(\"B1\");\noRange.SetValue(\"This is just a sample text.\");\nvar oCharacters = oRange.GetCharacters(9, 4);\nvar oFont = oCharacters.GetFont();\nvar oColor = Api.CreateColorFromRGB(255, 111, 61);\noFont.SetColor(oColor);",
  "Excel_VBA": "Sub SetFontColor()\n    Dim oWorksheet As Worksheet\n    Dim oRange As Range\n    Dim oCharacters As Characters\n    Dim oFont As Font\n    Dim oColor As Long\n\n    Set oWorksheet = ThisWorkbook.ActiveSheet\n    Set oRange = oWorksheet.Range(\"B1\")\n    oRange.Value = \"This is just a sample text.\"\n    Set oCharacters = oRange.Characters(Start:=9, Length:=4)\n    Set oFont = oCharacters.Font\n    oColor = RGB(255, 111, 61)\n    oFont.Color = oColor\nEnd Sub"
}
``````json
{
  "Description": "This example sets the italic property to the specified font.",
  "OnlyOffice_JS": "// This example sets the italic property to the specified font.\nvar oWorksheet = Api.GetActiveSheet();\nvar oRange = oWorksheet.GetRange(\"B1\");\noRange.SetValue(\"This is just a sample text.\");\nvar oCharacters = oRange.GetCharacters(9, 4);\nvar oFont = oCharacters.GetFont();\noFont.SetItalic(true);",
  "Excel_VBA": "Sub SetItalic()\n    Dim oRange As Range\n    Set oRange = ThisWorkbook.ActiveSheet.Range(\"B1\")\n    oRange.Value = \"This is just a sample text.\"\n    With oRange.Characters(Start:=9, Length:=4).Font\n        .Italic = True\n    End With\nEnd Sub"
}
``````json
{
  "Description": "This example sets the font name property to the specified font.",
  "Code": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "VBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOffice JS": "oRange.SetValue(\"This is just a sample text.\");",
      "VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice JS": "var oCharacters = oRange.GetCharacters(9, 4);",
      "VBA": "Set oCharacters = oRange.Characters(Start:=9, Length:=4)"
    },
    {
      "OnlyOffice JS": "var oFont = oCharacters.GetFont();",
      "VBA": "Set oFont = oCharacters.Font"
    },
    {
      "OnlyOffice JS": "oFont.SetName(\"Font 1\");",
      "VBA": "oFont.Name = \"Font 1\""
    },
    {
      "OnlyOffice JS": "var sFontName = oFont.GetName();",
      "VBA": "sFontName = oFont.Name"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(\"Font name: \" + sFontName);",
      "VBA": "oWorksheet.Range(\"B3\").Value = \"Font name: \" & sFontName"
    }
  ]
}
``````json
{
  "description": "This example sets the font size property to the specified font.",
  "methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "Excel VBA": "Dim oRange As Range\nSet oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOffice JS": "oRange.SetValue(\"This is just a sample text.\");",
      "Excel VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice JS": "var oCharacters = oRange.GetCharacters(9, 4);",
      "Excel VBA": "Dim oCharacters As Characters\nSet oCharacters = oRange.Characters(Start:=9, Length:=4)"
    },
    {
      "OnlyOffice JS": "var oFont = oCharacters.GetFont();",
      "Excel VBA": "Dim oFont As Font\nSet oFont = oCharacters.Font"
    },
    {
      "OnlyOffice JS": "oFont.SetSize(18);",
      "Excel VBA": "oFont.Size = 18"
    }
  ]
}
``````json
{
  "description": "This example sets the strikethrough property to the specified font.",
  "table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOffice_JS": "oRange.SetValue(\"This is just a sample text.\");",
      "Excel_VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice_JS": "var oCharacters = oRange.GetCharacters(9, 4);",
      "Excel_VBA": "Set oCharacters = oRange.Characters(Start:=9, Length:=4)"
    },
    {
      "OnlyOffice_JS": "var oFont = oCharacters.GetFont();",
      "Excel_VBA": "Set oFont = oCharacters.Font"
    },
    {
      "OnlyOffice_JS": "oFont.SetStrikethrough(true);",
      "Excel_VBA": "oFont.Strikethrough = True"
    }
  ]
}
``````json
{
  "Description": "This example sets the subscript property to the specified font.",
  "OnlyOffice JS": "// This example sets the subscript property to the specified font.\nvar oWorksheet = Api.GetActiveSheet();\nvar oRange = oWorksheet.GetRange(\"B1\");\noRange.SetValue(\"This is just a sample text.\");\nvar oCharacters = oRange.GetCharacters(9, 4);\nvar oFont = oCharacters.GetFont();\noFont.SetSubscript(true);",
  "Excel VBA": "Sub SetSubscript()\n    With Worksheets(\"Sheet1\").Range(\"B1\")\n        .Value = \"This is just a sample text.\"\n        .Characters(Start:=9, Length:=4).Font.Subscript = True\n    End With\nEnd Sub"
}
``````json
{
  "description": "This code sets the superscript property to the specified font.",
  "table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "Excel VBA": "Dim oRange As Range\nSet oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOffice JS": "oRange.SetValue(\"This is just a sample text.\");",
      "Excel VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice JS": "var oCharacters = oRange.GetCharacters(9, 4);",
      "Excel VBA": "Dim oCharacters As Characters\nSet oCharacters = oRange.Characters(Start:=9, Length:=4)"
    },
    {
      "OnlyOffice JS": "var oFont = oCharacters.GetFont();",
      "Excel VBA": "Dim oFont As Font\nSet oFont = oCharacters.Font"
    },
    {
      "OnlyOffice JS": "oFont.SetSuperscript(true);",
      "Excel VBA": "oFont.Superscript = True"
    }
  ]
}
``````json
{
  "description": "This example sets an underline of the type specified in the request to the font.",
  "RAG_Table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOffice_JS": "oRange.SetValue(\"This is just a sample text.\");",
      "Excel_VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice_JS": "var oCharacters = oRange.GetCharacters(9, 4);",
      "Excel_VBA": "Set oCharacters = oRange.Characters(Start:=9, Length:=4)"
    },
    {
      "OnlyOffice_JS": "var oFont = oCharacters.GetFont();",
      "Excel_VBA": "Set oFont = oCharacters.Font"
    },
    {
      "OnlyOffice_JS": "oFont.SetUnderline(\"xlUnderlineStyleSingle\");",
      "Excel_VBA": "oFont.Underline = xlUnderlineStyleSingle"
    }
  ]
}
``````json
{
  "description": "This example sets the bold property to the specified font.",
  "code_equivalents": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "Excel_VBA": "Dim oRange As Range\nSet oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOffice_JS": "oRange.SetValue(\"This is just a sample text.\");",
      "Excel_VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice_JS": "var oCharacters = oRange.GetCharacters(9, 4);",
      "Excel_VBA": "Dim oCharacters As Characters\nSet oCharacters = oRange.Characters(Start:=9, Length:=4)"
    },
    {
      "OnlyOffice_JS": "var oFont = oCharacters.GetFont();",
      "Excel_VBA": "Dim oFont As Font\nSet oFont = oCharacters.Font"
    },
    {
      "OnlyOffice_JS": "oFont.SetBold(true);",
      "Excel_VBA": "oFont.Bold = True"
    }
  ]
}
``````json
{
  "description": "This code sets the font color property to the specified font in cell B1.",
  "codeComparison": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "Excel VBA": "Dim oRange As Range\nSet oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOffice JS": "oRange.SetValue(\"This is just a sample text.\");",
      "Excel VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice JS": "var oCharacters = oRange.GetCharacters(9, 4);",
      "Excel VBA": "Dim oCharacters As Characters\nSet oCharacters = oRange.Characters(Start:=9, Length:=4)"
    },
    {
      "OnlyOffice JS": "var oFont = oCharacters.GetFont();",
      "Excel VBA": "Dim oFont As Font\nSet oFont = oCharacters.Font"
    },
    {
      "OnlyOffice JS": "var oColor = Api.CreateColorFromRGB(255, 111, 61);",
      "Excel VBA": "Dim oColor As Long\noColor = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "oFont.SetColor(oColor);",
      "Excel VBA": "oFont.Color = oColor"
    }
  ]
}
``````json
{
  "Description": "This example sets the italic property to the specified font.",
  "Table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "Excel VBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOffice JS": "oRange.SetValue(\"This is just a sample text.\");",
      "Excel VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice JS": "var oCharacters = oRange.GetCharacters(9, 4);",
      "Excel VBA": "Set oCharacters = oRange.Characters(Start:=9, Length:=4)"
    },
    {
      "OnlyOffice JS": "var oFont = oCharacters.GetFont();",
      "Excel VBA": "Set oFont = oCharacters.Font"
    },
    {
      "OnlyOffice JS": "oFont.SetItalic(true);",
      "Excel VBA": "oFont.Italic = True"
    }
  ]
}
``````json
{
  "description": "This example sets the font name property to the specified font.",
  "code": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOffice_JS": "oRange.SetValue(\"This is just a sample text.\");",
      "Excel_VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice_JS": "var oCharacters = oRange.GetCharacters(9, 4);",
      "Excel_VBA": "Set oCharacters = oRange.Characters(9, 4)"
    },
    {
      "OnlyOffice_JS": "var oFont = oCharacters.GetFont();",
      "Excel_VBA": "Set oFont = oCharacters.Font"
    },
    {
      "OnlyOffice_JS": "oFont.SetName(\"Font 1\");",
      "Excel_VBA": "oFont.Name = \"Font 1\""
    },
    {
      "OnlyOffice_JS": "var sFontName = oFont.GetName();",
      "Excel_VBA": "sFontName = oFont.Name"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B3\").SetValue(\"Font name: \" + sFontName);",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"Font name: \" & sFontName"
    }
  ]
}
``````json
{
  "Description": "This example sets the font size property to the specified font.",
  "Methods": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "Excel_VBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOffice_JS": "oRange.SetValue(\"This is just a sample text.\");",
      "Excel_VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice_JS": "var oCharacters = oRange.GetCharacters(9, 4);",
      "Excel_VBA": "Set oCharacters = oRange.Characters(Start:=9, Length:=4)"
    },
    {
      "OnlyOffice_JS": "var oFont = oCharacters.GetFont();",
      "Excel_VBA": "Set oFont = oCharacters.Font"
    },
    {
      "OnlyOffice_JS": "oFont.SetSize(18);",
      "Excel_VBA": "oFont.Size = 18"
    }
  ]
}
``````json
{
  "This example sets the strikethrough property to the specified font.": {
    "OnlyOffice_JS": "// This example sets the strikethrough property to the specified font.\nvar oWorksheet = Api.GetActiveSheet();\nvar oRange = oWorksheet.GetRange(\"B1\");\noRange.SetValue(\"This is just a sample text.\");\nvar oCharacters = oRange.GetCharacters(9, 4);\nvar oFont = oCharacters.GetFont();\noFont.SetStrikethrough(true);",
    "Excel_VBA": "Sub SetStrikethrough()\n    Dim oWorksheet As Worksheet\n    Dim oRange As Range\n    Dim oFont As Font\n    \n    Set oWorksheet = ActiveSheet\n    Set oRange = oWorksheet.Range(\"B1\")\n    oRange.Value = \"This is just a sample text.\"\n    Set oFont = oRange.Characters(Start:=9, Length:=4).Font\n    oFont.Strikethrough = True\nEnd Sub"
  }
}
``````json
{
  "Description": "This example sets the subscript property to the specified font.",
  "OnlyOffice_JS": "// This example sets the subscript property to the specified font.\nvar oWorksheet = Api.GetActiveSheet();\nvar oRange = oWorksheet.GetRange(\"B1\");\noRange.SetValue(\"This is just a sample text.\");\nvar oCharacters = oRange.GetCharacters(9, 4);\nvar oFont = oCharacters.GetFont();\noFont.SetSubscript(true);",
  "VBA": "Sub SetSubscript()\n    Range(\"B1\").Value = \"This is just a sample text.\"\n    With Range(\"B1\").Characters(Start:=9, Length:=4).Font\n        .Subscript = True\n    End With\nEnd Sub"
}
``````json
{
  "Description": "This example sets the superscript property to the specified font.",
  "OnlyOffice_JS": "// This example sets the superscript property to the specified font.\nvar oWorksheet = Api.GetActiveSheet();\nvar oRange = oWorksheet.GetRange(\"B1\");\noRange.SetValue(\"This is just a sample text.\");\nvar oCharacters = oRange.GetCharacters(9, 4);\nvar oFont = oCharacters.GetFont();\noFont.SetSuperscript(true);",
  "Excel_VBA": "' This example sets the superscript property to the specified font.\nSub SetSuperscript()\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ThisWorkbook.ActiveSheet\n    Dim oRange As Range\n    Set oRange = oWorksheet.Range(\"B1\")\n    oRange.Value = \"This is just a sample text.\"\n    Dim oCharacters As Characters\n    Set oCharacters = oRange.Characters(Start:=9, Length:=4)\n    oCharacters.Font.Superscript = True\nEnd Sub"
}
``````json
{
  "description": "This code sets an underline of the type specified in the request to the font.",
  "methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"B1\");",
      "Excel VBA": "Set oRange = oWorksheet.Range(\"B1\")"
    },
    {
      "OnlyOffice JS": "oRange.SetValue(\"This is just a sample text.\");",
      "Excel VBA": "oRange.Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice JS": "var oCharacters = oRange.GetCharacters(9, 4);",
      "Excel VBA": "Set oCharacters = oRange.Characters(Start:=9, Length:=4)"
    },
    {
      "OnlyOffice JS": "var oFont = oCharacters.GetFont();",
      "Excel VBA": "Set oFont = oCharacters.Font"
    },
    {
      "OnlyOffice JS": "oFont.SetUnderline(\"xlUnderlineStyleSingle\");",
      "Excel VBA": "oFont.Underline = xlUnderlineStyleSingle"
    }
  ]
}
```**Description:**  
This code retrieves the active worksheet, formats the number "123456" according to the provided format string "$#,##0", and sets the formatted value in cell A1.

```json
{
  "RAG_Table": [
    {
      "Action": "Get Active Sheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Action": "Format Value",
      "OnlyOffice_JS": "var oFormat = Api.Format(\"123456\", \"$#,##0\");",
      "Excel_VBA": "Dim oFormat As String\noFormat = Format(123456, \"$#,##0\")"
    },
    {
      "Action": "Set Value in Cell",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(oFormat);",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = oFormat"
    }
  ]
}
``````json
{
  "RAG_Table": [
    {
      "Description": "This example freezes the specified range in the top-and-left-most pane of the worksheet.",
      "OnlyOffice_JS": "// This example freezes the specified range in top-and-left-most pane of the worksheet.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFreezePanes = oWorksheet.GetFreezePanes();\nvar oRange = Api.GetRange('H2:K4');\noFreezePanes.FreezeAt(oRange);",
      "Excel_VBA": "With ActiveWindow\n    .FreezePanes = False\n    Range(\"H2:K4\").Select\n    .FreezePanes = True\nEnd With"
    }
  ]
}
``````json
{
  "Description": "This example freezes the first column.",
  "VBA": "Sub FreezeFirstColumn()\n    ActiveWindow.SplitColumn = 1\n    ActiveWindow.FreezePanes = True\nEnd Sub",
  "OnlyOfficeJS": "// This example freezes the the first column.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFreezePanes = oWorksheet.GetFreezePanes();\noFreezePanes.FreezeColumns(1);"
}
``````json
{
  "description": "This example freezes the top row.",
  "table": [
    {
      "OnlyOffice JS": "// This example freezes the top row.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFreezePanes = oWorksheet.GetFreezePanes();\noFreezePanes.FreezeRows(1);",
      "Excel VBA": "Sub FreezeTopRow()\n    With ActiveWindow\n        .FreezePanes = False\n        .SplitRow = 1\n        .FreezePanes = True\n    End With\nEnd Sub"
    }
  ]
}
``````json
{
  "description": "This code example freezes the first column in the active worksheet and inserts the address of the frozen range into cells A1 and B1.",
  "RAG_Table": [
    {
      "OnlyOffice_JS": "Api.SetFreezePanesType('column');",
      "Excel_VBA": "ActiveWindow.SplitColumn = 1\nActiveWindow.FreezePanes = True"
    },
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oFreezePanes = oWorksheet.GetFreezePanes();",
      "Excel_VBA": "Set oFreezePanes = ActiveWindow.FreezePanesRange"
    },
    {
      "OnlyOffice_JS": "var oRange = oFreezePanes.GetLocation();",
      "Excel_VBA": "Set oRange = oFreezePanes.Address"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"Location: \");",
      "Excel_VBA": "Range(\"A1\").Value = \"Location:\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(oRange.GetAddress());",
      "Excel_VBA": "Range(\"B1\").Value = oRange.Address"
    }
  ]
}
``````json
{
  "Description": "This example freezes the specified range in the top-and-left-most pane of the worksheet.",
  "OnlyOffice JS": "// This example freezes the specified range in top-and-left-most pane of the worksheet.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFreezePanes = oWorksheet.GetFreezePanes();\nvar oRange = Api.GetRange('H2:K4');\noFreezePanes.FreezeAt(oRange);",
  "Excel VBA": "Sub FreezePanes()\n    With ActiveWindow\n        .SplitColumn = 7 ' Column H is the 8th column, so SplitColumn is 7\n        .SplitRow = 1 ' Row 2\n        .FreezePanes = True\n    End With\nEnd Sub"
}
``````json
{
  "This example freezes the first column.": {
    "OnlyOffice_JS": "// This example freezes the the first column.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFreezePanes = oWorksheet.GetFreezePanes();\noFreezePanes.FreezeColumns(1);",
    "Excel_VBA": "With ActiveWindow\n    .SplitColumn = 1\n    .FreezePanes = True\nEnd With"
  }
}
``````json
{
  "Table": {
    "Headers": ["Description: This code freezes the top row.", "VBA Code", "OnlyOffice JS Code"],
    "Rows": [
      [
        "This code freezes the top row.",
        "Sub FreezeTopRow()\n    With ActiveWindow\n        .SplitRow = 1\n        .FreezePanes = True\n    End With\nEnd Sub",
        "// This example freezes the top row.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFreezePanes = oWorksheet.GetFreezePanes();\noFreezePanes.FreezeRows(1);"
      ]
    ]
  }
}
``````json
{
  "description": "This example freezes the first column and pastes the address of the frozen range into cells A1 and B1.",
  "table": [
    {
      "OnlyOffice JS": "Api.SetFreezePanesType('column');",
      "VBA": "ActiveWindow.SplitColumn = 1\nActiveWindow.FreezePanes = True"
    },
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oFreezePanes = oWorksheet.GetFreezePanes();",
      "VBA": "Dim oFreezePanes As FreezePanes\nSet oFreezePanes = ActiveWindow.FreezePanes"
    },
    {
      "OnlyOffice JS": "var oRange = oFreezePanes.GetLocation();",
      "VBA": "Dim oRange As Range\nSet oRange = oFreezePanes.Range"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"Location: \");",
      "VBA": "oWorksheet.Range(\"A1\").Value = \"Location: \""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(oRange.GetAddress());",
      "VBA": "oWorksheet.Range(\"B1\").Value = oRange.Address"
    }
  ]
}
``````json
{
  "description": "This example freezes the first column then unfreezes all panes in the worksheet.",
  "methods": [
    {
      "OnlyOfficeJS": "Api.SetFreezePanesType('column');",
      "ExcelVBA": "ActiveWindow.SplitColumn = 1\nActiveWindow.FreezePanes = True"
    },
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOfficeJS": "var oFreezePanes = oWorksheet.GetFreezePanes();",
      "ExcelVBA": "Dim oFreezePanes As FreezePanes\nSet oFreezePanes = ActiveWindow.FreezePanes"
    },
    {
      "OnlyOfficeJS": "oFreezePanes.Unfreeze();",
      "ExcelVBA": "ActiveWindow.FreezePanes = False"
    },
    {
      "OnlyOfficeJS": "var oRange = oFreezePanes.GetLocation();",
      "ExcelVBA": "Dim oRange As Range\nSet oRange = ActiveWindow.SplitRowRange"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A1\").SetValue(\"Location: \");",
      "ExcelVBA": "oWorksheet.Range(\"A1\").Value = \"Location: \""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B1\").SetValue(oRange + \"\");",
      "ExcelVBA": "oWorksheet.Range(\"B1\").Value = oRange.Address"
    }
  ]
}
``````json
{
  "Description": "This table provides Excel VBA equivalents for the OnlyOffice API methods used in the code that freezes the first column, then unfreezes all panes in the worksheet, and sets values in cells A1 and B1.",
  "Methods": [
    {
      "OnlyOfficeJS": "Api.SetFreezePanesType('column');",
      "ExcelVBA": "ActiveWindow.SplitColumn = 1\nActiveWindow.FreezePanes = True",
      "Status": "Green"
    },
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet",
      "Status": "Green"
    },
    {
      "OnlyOfficeJS": "var oFreezePanes = oWorksheet.GetFreezePanes();",
      "ExcelVBA": "Dim oFreezePanes As FreezePanes\nSet oFreezePanes = ActiveWindow.FreezePanes",
      "Status": "Green"
    },
    {
      "OnlyOfficeJS": "oFreezePanes.Unfreeze();",
      "ExcelVBA": "ActiveWindow.FreezePanes = False",
      "Status": "Green"
    },
    {
      "OnlyOfficeJS": "var oRange = oFreezePanes.GetLocation();",
      "ExcelVBA": "Dim oRange As Range\nSet oRange = ActiveWindow.SplitColumn",
      "Status": "Yellow"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A1\").SetValue(\"Location: \");",
      "ExcelVBA": "Range(\"A1\").Value = \"Location: \"",
      "Status": "Green"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B1\").SetValue(oRange + \"\");",
      "ExcelVBA": "Range(\"B1\").Value = oRange.Address",
      "Status": "Green"
    }
  ]
}
``````json
{
  "Description": "This example shows how to get an object that represents the active sheet and sets values in specific cells.",
  "CodeEquivalents": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(\"2\");",
      "Excel VBA": "Range(\"B1\").Value = \"2\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(\"2\");",
      "Excel VBA": "Range(\"B2\").Value = \"2\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"2x2=\");",
      "Excel VBA": "Range(\"A3\").Value = \"2x2=\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(\"=B1*B2\");",
      "Excel VBA": "Range(\"B3\").Formula = \"=B1*B2\""
    }
  ]
}
``````json
{
  "Description": "This code retrieves the active worksheet, adds comments with specified authors to cells, retrieves all comments, and sets values in specific cells based on the comment text and author.",
  "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();\nApi.AddComment(\"Comment 1\", \"John Smith\");\noWorksheet.GetRange(\"A4\").AddComment(\"Comment 2\", \"Mark Potato\");\nvar arrComments = Api.GetAllComments();\noWorksheet.GetRange(\"A1\").SetValue(\"Comment text: \" + arrComments[1].GetText());\noWorksheet.GetRange(\"A2\").SetValue(\"Comment author: \" + arrComments[1].GetAuthorName());",
  "Excel VBA": "' Retrieve the active worksheet\nDim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet\n\n' Add comments with authors\nActiveSheet.Cells(1, 1).AddComment \"Comment 1\"\nActiveSheet.Cells(1, 1).Comment.Author = \"John Smith\"\noWorksheet.Range(\"A4\").AddComment \"Comment 2\"\noWorksheet.Range(\"A4\").Comment.Author = \"Mark Potato\"\n\n' Get all comments\nDim arrComments As Comments\nSet arrComments = ActiveSheet.Comments\n\n' Set cell values based on comment details\noWorksheet.Range(\"A1\").Value = \"Comment text: \" & arrComments(2).Text\noWorksheet.Range(\"A2\").Value = \"Comment author: \" & arrComments(2).Author"
}
``````json
{
  "Table": [
    {
      "Description": "Get the active worksheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set value 'Region' in cell B1",
      "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "ExcelVBA": "Range(\"B1\").Value = \"Region\""
    },
    {
      "Description": "Set value 'Price' in cell C1",
      "OnlyOfficeJS": "oWorksheet.GetRange('C1').SetValue('Price');",
      "ExcelVBA": "Range(\"C1\").Value = \"Price\""
    },
    {
      "Description": "Set value 'East' in cell B2",
      "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');",
      "ExcelVBA": "Range(\"B2\").Value = \"East\""
    },
    {
      "Description": "Set value 'West' in cell B3",
      "OnlyOfficeJS": "oWorksheet.GetRange('B3').SetValue('West');",
      "ExcelVBA": "Range(\"B3\").Value = \"West\""
    },
    {
      "Description": "Set value 42.5 in cell C2",
      "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue(42.5);",
      "ExcelVBA": "Range(\"C2\").Value = 42.5"
    },
    {
      "Description": "Set value 35.2 in cell C3",
      "OnlyOfficeJS": "oWorksheet.GetRange('C3').SetValue(35.2);",
      "ExcelVBA": "Range(\"C3\").Value = 35.2"
    },
    {
      "Description": "Get range B1:C3 from Sheet1",
      "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$C$3\");",
      "ExcelVBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"$B$1:$C$3\")"
    },
    {
      "Description": "Insert a new pivot table worksheet based on dataRef",
      "OnlyOfficeJS": "Api.InsertPivotNewWorksheet(dataRef);",
      "ExcelVBA": "Worksheets.Add After:=Worksheets(Worksheets.Count)\n" +
                  "ActiveSheet.PivotTableWizard SourceType:=xlDatabase, SourceData:=dataRef"
    },
    {
      "Description": "Add 'Price' as a data field to all pivot tables",
      "OnlyOfficeJS": "Api.GetAllPivotTables().forEach(function (pivot) {\n\tpivot.AddDataField('Price');\n});",
      "ExcelVBA": "Dim pt As PivotTable\n" +
                  "For Each pt In ActiveWorkbook.PivotTables\n" +
                  "    pt.AddDataField pt.PivotFields(\"Price\")\n" +
                  "Next pt"
    }
  ]
}
``````json
{
  "Table": {
    "Headers": ["Description", "VBA", "OnlyOffice JS"],
    "Rows": [
      [
        "This example shows how to get a comment from the current document by its ID.",
        "Dim oComment As Comment\n\nSet oComment = ActiveSheet.Comments.Add(ActiveSheet.Range(\"A1\"), \"Comment\")\nDim sId As String\nsId = oComment.Index\nSet oComment = ActiveSheet.Comments(sId)\nActiveSheet.Range(\"A1\").Value = \"Comment Text: \" & oComment.Text\nActiveSheet.Range(\"B1\").Value = \"Comment Author: \" & oComment.Author",
        "var oComment = Api.AddComment(\"Comment\", \"Bob\");\nvar sId = oComment.GetId();\noComment = Api.GetCommentById(sId);\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.GetRange(\"A1\").SetValue(\"Commet Text: \", oComment.GetText());\noWorksheet.GetRange(\"B1\").SetValue(\"Commet Author: \", oComment.GetAuthorName());"
      ]
    ]
  }
}
``````json
{
  "RAG_Table": [
    {
      "Description": "Add the first comment by Bob",
      "OnlyOffice JS": "Api.AddComment(\"Comment 1\", \"Bob\");",
      "Excel VBA": "Api.AddComment \"Comment 1\", \"Bob\""
    },
    {
      "Description": "Add the second comment by Bob",
      "OnlyOffice JS": "Api.AddComment(\"Comment 2\", \"Bob\");",
      "Excel VBA": "Api.AddComment \"Comment 2\", \"Bob\""
    },
    {
      "Description": "Retrieve all comments",
      "OnlyOffice JS": "var arrComments = Api.GetComments();",
      "Excel VBA": "Dim arrComments As Variant\nSet arrComments = Api.GetComments()"
    },
    {
      "Description": "Get the active worksheet",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = Api.GetActiveSheet()"
    },
    {
      "Description": "Set value in cell A1 with comment text",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"Commet Text: \", arrComments(0).GetText());",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"Commet Text: \" & arrComments(0).GetText()"
    },
    {
      "Description": "Set value in cell B1 with comment author name",
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(\"Commet Author: \", arrComments(0).GetAuthorName());",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Commet Author: \" & arrComments(0).GetAuthorName()"
    }
  ]
}
``````json
{
  "description": "This example shows how to get the ApiName object by the range name.",
  "RAG_table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "VBA": "Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(\"2\");",
      "VBA": "Range(\"B1\").Value = \"2\""
    },
    {
      "OnlyOffice_JS": "Api.AddDefName(\"numbers\", \"Sheet1!$A$1:$B$1\");",
      "VBA": "Names.Add Name:=\"numbers\", RefersTo:=Sheets(\"Sheet1\").Range(\"$A$1:$B$1\")"
    },
    {
      "OnlyOffice_JS": "var oDefName = Api.GetDefName(\"numbers\");",
      "VBA": "Set oDefName = Names(\"numbers\")"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"DefName: \" + oDefName.GetName());",
      "VBA": "Range(\"A3\").Value = \"DefName: \" & oDefName.Name"
    }
  ]
}
``````json
{
  "Description": "This code retrieves the document information and sets the application name in cell A1.",
  "Methods": [
    {
      "OnlyOfficeJS": "const oDocInfo = Api.GetDocumentInfo();",
      "VBA": "Dim oDocInfo As DocumentInfo\nSet oDocInfo = Api.GetDocumentInfo()"
    },
    {
      "OnlyOfficeJS": "const oRange = Api.GetActiveSheet().GetRange('A1');",
      "VBA": "Dim oRange As Range\nSet oRange = Api.GetActiveSheet().Range(\"A1\")"
    },
    {
      "OnlyOfficeJS": "oRange.SetValue('This document has been created with: ' + oDocInfo.Application)",
      "VBA": "oRange.Value = \"This document has been created with: \" & oDocInfo.Application"
    }
  ]
}
``````json
{
  "Description": "This example freezes the first column and pastes the freeze type into the table.",
  "Code": {
    "OnlyOffice JS": "// OnlyOffice JS code
Api.SetFreezePanesType('column');
var oWorksheet = Api.GetActiveSheet();
oWorksheet.GetRange(\"A1\").SetValue(\"Type: \");
oWorksheet.GetRange(\"B1\").SetValue(Api.GetFreezePanesType());",
    "Excel VBA": "' Excel VBA equivalent code
Sub FreezeFirstColumn()
    ' Freeze the first column
    ActiveWindow.SplitColumn = 1
    ActiveWindow.FreezePanes = True
    
    ' Set values in cells A1 and B1
    With ActiveSheet
        .Range(\"A1\").Value = \"Type: \"
        ' VBA does not have a direct equivalent for GetFreezePanesType
        .Range(\"B1\").Value = \"Column\"
    End With
End Sub"
  }
}
``````json
{
  "RAGTable": {
    "Description": "This example shows how to get the full name of the currently opened file.",
    "OnlyOfficeJS": "// This example shows how to get the full name of the currently opened file.\nvar oWorksheet = Api.GetActiveSheet();\nvar sName = Api.GetFullName();\noWorksheet.GetRange(\"B1\").SetValue(\"File name: \" + sName);",
    "VBA": "' This example shows how to get the full name of the currently opened file.\nDim oWorksheet As Worksheet\nDim sName As String\nSet oWorksheet = ActiveSheet\nsName = ThisWorkbook.FullName\noWorksheet.Range(\"B1\").Value = \"File name: \" & sName"
  }
}
``````json
{
  "description": "This example shows how to get the current locale ID.",
  "table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "Api.SetLocale(\"en-CA\");",
      "VBA": "Application.LanguageSettings.LanguageID(msoLanguageIDUI) = 3084 ' en-CA"
    },
    {
      "OnlyOffice_JS": "var nLocale = Api.GetLocale();",
      "VBA": "nLocale = Application.LanguageSettings.LanguageID(msoLanguageIDUI)"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"Locale: \" + nLocale);",
      "VBA": "oWorksheet.Range(\"A1\").Value = \"Locale: \" & nLocale"
    }
  ]
}
``````json
{
  "description": "This code initializes the active sheet, sets column widths, populates cells with headers and data, retrieves mail merge data, and displays it in a specific cell.",
  "methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.SetColumnWidth(0, 20);",
      "Excel VBA": "oWorksheet.Columns(1).ColumnWidth = 20"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"Email address\");",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"Email address\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(\"Greeting\");",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Greeting\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(\"First name\");",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"First name\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(\"Last name\");",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Last name\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"user1@example.com\");",
      "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"user1@example.com\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(\"Dear\");",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"Dear\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(\"John\");",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"John\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(\"Smith\");",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = \"Smith\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"user2@example.com\");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"user2@example.com\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(\"Hello\");",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"Hello\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(\"Kate\");",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Kate\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(\"Cage\");",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = \"Cage\""
    },
    {
      "OnlyOffice JS": "var aMailMergeData = Api.GetMailMergeData(0);",
      "Excel VBA": "aMailMergeData = GetMailMergeData(0)"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A5\").SetValue(\"Mail merge data: \" + aMailMergeData);",
      "Excel VBA": "oWorksheet.Range(\"A5\").Value = \"Mail merge data: \" & aMailMergeData"
    }
  ]
}
``````json
{
  "RAG_table": [
    {
      "Description": "Gets the active worksheet.",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "Description": "Sets the value of cell B1 to 'Region'.",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "Description": "Sets the value of cell C1 to 'Price'.",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Price');",
      "VBA": "oWorksheet.Range(\"C1\").Value = \"Price\""
    },
    {
      "Description": "Sets the value of cell B2 to 'East'.",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "Description": "Sets the value of cell B3 to 'West'.",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "Description": "Sets the value of cell C2 to 42.5.",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue(42.5);",
      "VBA": "oWorksheet.Range(\"C2\").Value = 42.5"
    },
    {
      "Description": "Sets the value of cell C3 to 35.2.",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue(35.2);",
      "VBA": "oWorksheet.Range(\"C3\").Value = 35.2"
    },
    {
      "Description": "Gets the range B1:C3 from Sheet1.",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$C$3\");",
      "VBA": "Dim dataRef As Range\nSet dataRef = Worksheets(\"Sheet1\").Range(\"B1:C3\")"
    },
    {
      "Description": "Inserts a pivot table in a new worksheet based on dataRef.",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "VBA": "Dim pivotTable As PivotTable\nSet pivotTable = Worksheets.Add.PivotTableWizard(SourceData:=dataRef)"
    },
    {
      "Description": "Adds 'Region' as row field to the pivot table.",
      "OnlyOffice_JS": "Api.GetPivotByName(pivotTable.GetName()).AddFields({ rows: 'Region', });",
      "VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\nEnd With"
    },
    {
      "Description": "Adds 'Price' as data field to the pivot table.",
      "OnlyOffice_JS": "Api.GetPivotByName(pivotTable.GetName()).AddDataField('Price');",
      "VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
    }
  ]
}
``````json
{
  "description": "This code retrieves the active worksheet, selects the range A1:C1, sets its fill color to a specified RGB value, and updates cell A3 with a message indicating the color change.",
  "table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oRange = Api.GetRange(\"A1:C1\");",
      "Excel VBA": "Dim oRange As Range\nSet oRange = oWorksheet.Range(\"A1:C1\")"
    },
    {
      "OnlyOffice JS": "oRange.SetFillColor(Api.CreateColorFromRGB(255, 213, 191));",
      "Excel VBA": "oRange.Interior.Color = RGB(255, 213, 191)"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"The color was set to the background of cells A1:C1.\");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"The color was set to the background of cells A1:C1.\""
    }
  ]
}
``````json
{
  "description": "This code retrieves the current reference style and sets it to cell A1 in the active worksheet.",
  "RAG_Table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(Api.GetReferenceStyle());",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = Application.ReferenceStyle"
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
  },
  {
    "Description": "Set the value of the selected range to \"selected\"",
    "OnlyOffice_JS": "Api.GetSelection().SetValue(\"selected\");",
    "Excel_VBA": "Selection.Value = \"selected\""
  }
]
``````json
{
  "Description": "This code retrieves the 'Sheet1' worksheet, selects cell A1, and sets its value to a specified text.",
  "Code": {
    "OnlyOffice JS": "// This example shows how to get an object that represents a sheet.\nvar oWorksheet = Api.GetSheet(\"Sheet1\");\noWorksheet.GetRange(\"A1\").SetValue(\"This is a sample text on 'Sheet1'.\");",
    "VBA": "Sub SetCellValue()\n    Dim ws As Worksheet\n    Set ws = ThisWorkbook.Sheets(\"Sheet1\")\n    ws.Range(\"A1\").Value = \"This is a sample text on 'Sheet1'.\"\nEnd Sub"
  }
}
``````json
{
  "description": "This example demonstrates how to manage sheets and set values in the active workbook.",
  "code_mapping": [
    {
      "action": "Add a new sheet named \"new_sheet_name\"",
      "OnlyOffice_JS": "Api.AddSheet(\"new_sheet_name\");",
      "Excel_VBA": "Sheets.Add(After:=Sheets(Sheets.Count)).Name = \"new_sheet_name\""
    },
    {
      "action": "Get all sheets in the active workbook",
      "OnlyOffice_JS": "var sheets = Api.GetSheets();",
      "Excel_VBA": "Dim sheets As Sheets\nSet sheets = ThisWorkbook.Sheets"
    },
    {
      "action": "Get the name of the first sheet",
      "OnlyOffice_JS": "var sheet_name1 = sheets[0].GetName();",
      "Excel_VBA": "Dim sheet_name1 As String\nsheet_name1 = sheets(1).Name"
    },
    {
      "action": "Get the name of the second sheet",
      "OnlyOffice_JS": "var sheet_name2 = sheets[1].GetName();",
      "Excel_VBA": "Dim sheet_name2 As String\nsheet_name2 = sheets(2).Name"
    },
    {
      "action": "Set the value of cell A1 in the second sheet to the first sheet's name",
      "OnlyOffice_JS": "sheets[1].GetRange(\"A1\").SetValue(sheet_name1);",
      "Excel_VBA": "Sheets(2).Range(\"A1\").Value = sheet_name1"
    },
    {
      "action": "Set the value of cell A2 in the second sheet to the second sheet's name",
      "OnlyOffice_JS": "sheets[1].GetRange(\"A2\").SetValue(sheet_name2);",
      "Excel_VBA": "Sheets(2).Range(\"A2\").Value = sheet_name2"
    }
  ]
}
``````json
{
  "Description": "This example shows how to get a list of all the available theme colors for the spreadsheet.",
  "Methods": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var themes = Api.GetThemesColors();",
      "Excel_VBA": "themes = ActiveWorkbook.Theme.ThemeColorScheme.Colors"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A\" + (i + 1)).SetValue(themes[i]);",
      "Excel_VBA": "oWorksheet.Range(\"A\" & (i + 1)).Value = themes(i)"
    }
  ]
}
``````json
{
  "Description": "Equivalent OnlyOffice JS and Excel VBA Methods",
  "Table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oFunction = Api.GetWorksheetFunction();",
      "Excel VBA": "Set oFunction = Application.WorksheetFunction"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(oFunction.ASC(\"text\"));",
      "Excel VBA": "Range(\"A1\").Value = Asc(\"text\")"
    }
  ]
}
``````json
{
  "table": {
    "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Description": "Gets the active worksheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
      },
      {
        "Description": "Creates the first gradient stop with RGB color and position",
        "OnlyOffice JS": "var oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);",
        "Excel VBA": "Set oGs1 = oFill.GradientStops.Insert(0)\noGs1.Color = RGB(255, 213, 191)"
      },
      {
        "Description": "Creates the second gradient stop with RGB color and position",
        "OnlyOffice JS": "var oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);",
        "Excel VBA": "Set oGs2 = oFill.GradientStops.Insert(1)\noGs2.Color = RGB(255, 111, 61)"
      },
      {
        "Description": "Creates a linear gradient fill with the gradient stops and angle",
        "OnlyOffice JS": "var oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);",
        "Excel VBA": "Set oFill = oWorksheet.Shapes.AddShape(msoShapeRectangle, 0, 0, 100, 100).Fill\nWith oFill\n    .TwoColorGradient msoGradientHorizontal, 1\n    .GradientStops.Clear\n    .GradientStops.Insert RGB(255, 213, 191), 0\n    .GradientStops.Insert RGB(255, 111, 61), 1\nEnd With"
      },
      {
        "Description": "Creates a stroke with no fill",
        "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
        "Excel VBA": "Set oStroke = oFill.Stroke\nWith oStroke\n    .DashStyle = msoLineSolid\n    .Visible = msoFalse\nEnd With"
      },
      {
        "Description": "Adds a shape to the worksheet with specified parameters",
        "OnlyOffice JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
        "Excel VBA": "oWorksheet.Shapes.AddShape(msoShapeFlowchartData, 60, 35, 200, 150).Select\nWith Selection.ShapeRange.Fill\n    .ForeColor.RGB = RGB(255, 213, 191)\nEnd With"
      },
      {
        "Description": "Gets the class type of the first gradient stop",
        "OnlyOffice JS": "var sClassType = oGs1.GetClassType();",
        "Excel VBA": "sClassType = TypeName(oGs1)"
      },
      {
        "Description": "Sets the width of the first column to 15",
        "OnlyOffice JS": "oWorksheet.SetColumnWidth(0, 15);",
        "Excel VBA": "oWorksheet.Columns(1).ColumnWidth = 15"
      },
      {
        "Description": "Sets the width of the second column to 10",
        "OnlyOffice JS": "oWorksheet.SetColumnWidth(1, 10);",
        "Excel VBA": "oWorksheet.Columns(2).ColumnWidth = 10"
      },
      {
        "Description": "Sets the value of cell A1 with the class type",
        "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"Class Type = \" + sClassType);",
        "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"Class Type = \" & sClassType"
      }
    ]
  }
}
``````json
[
  {
    "Get the active worksheet": {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    }
  },
  {
    "Create first gradient stop with RGB color (255, 213, 191) at position 0": {
      "OnlyOffice JS": "var oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);",
      "Excel VBA": "Set oGs1 = Api.CreateGradientStop(CreateRGBColor(255, 213, 191), 0)"
    }
  },
  {
    "Create second gradient stop with RGB color (255, 111, 61) at position 100000": {
      "OnlyOffice JS": "var oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);",
      "Excel VBA": "Set oGs2 = Api.CreateGradientStop(CreateRGBColor(255, 111, 61), 100000)"
    }
  },
  {
    "Create linear gradient fill with gradient stops and angle 5400000": {
      "OnlyOffice JS": "var oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);",
      "Excel VBA": "Set oFill = Api.CreateLinearGradientFill(Array(oGs1, oGs2), 5400000)"
    }
  },
  {
    "Create stroke with width 0 and no fill": {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "Set oStroke = Api.CreateStroke(0, Api.CreateNoFill())"
    }
  },
  {
    "Add shape 'flowChartOnlineStorage' to the worksheet with specified dimensions and styles": {
      "OnlyOffice JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
      "Excel VBA": "oWorksheet.Shapes.AddShape(msoShapeFlowChartOnlineStorage, 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000)"
    }
  },
  {
    "Get the class type of the first gradient stop": {
      "OnlyOffice JS": "var sClassType = oGs1.GetClassType();",
      "Excel VBA": "sClassType = oGs1.GetClassType()"
    }
  },
  {
    "Set the width of the first column to 15": {
      "OnlyOffice JS": "oWorksheet.SetColumnWidth(0, 15);",
      "Excel VBA": "oWorksheet.Columns(1).ColumnWidth = 15"
    }
  },
  {
    "Set the width of the second column to 10": {
      "OnlyOffice JS": "oWorksheet.SetColumnWidth(1, 10);",
      "Excel VBA": "oWorksheet.Columns(2).ColumnWidth = 10"
    }
  },
  {
    "Set the value of cell A1 to display the class type": {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"Class Type = \" + sClassType);",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"Class Type = \" & sClassType"
    }
  }
]
```**Description**: This code creates two shapes with different fills and strokes, groups them, retrieves the class type, and adds text to each shape displaying the class type.

```json
{
  "RAGTable": {
    "columns": ["OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "OnlyOffice JS": "let oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
      },
      {
        "OnlyOffice JS": "let oFill1 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
        "Excel VBA": "With oWorksheet.Shapes.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
      },
      {
        "OnlyOffice JS": "let oFill2 = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
        "Excel VBA": "With oWorksheet.Shapes.Fill\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With"
      },
      {
        "OnlyOffice JS": "let oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
        "Excel VBA": "With oWorksheet.Shapes.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
      },
      {
        "OnlyOffice JS": "let oShape1 = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill1, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
        "Excel VBA": "Set oShape1 = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 60, 35, 200, 150)\nWith oShape1.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With\nWith oShape1.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
      },
      {
        "OnlyOffice JS": "let oShape2 = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill2, oStroke, 0, 15 * 36000, 0, 30 * 36000);",
        "Excel VBA": "Set oShape2 = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 60, 35, 500, 300)\nWith oShape2.Fill\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With\nWith oShape2.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
      },
      {
        "OnlyOffice JS": "let oGroup = oWorksheet.GroupDrawings([oShape1, oShape2]);",
        "Excel VBA": "Set oGroup = oWorksheet.Shapes.Range(Array(oShape1.Name, oShape2.Name)).Group"
      },
      {
        "OnlyOffice JS": "let sClassType = oGroup.GetClassType();",
        "Excel VBA": "sClassType = oGroup.Name ' VBA does not have a direct equivalent; using Name as an example'"
      },
      {
        "OnlyOffice JS": "let oDocContent1 = oShape1.GetDocContent();",
        "Excel VBA": "Set oDocContent1 = oShape1.TextFrame"
      },
      {
        "OnlyOffice JS": "let oParagraph1 = oDocContent1.GetElement(0);",
        "Excel VBA": "Set oParagraph1 = oShape1.TextFrame.Characters"
      },
      {
        "OnlyOffice JS": "oParagraph1.AddText(\"Class Type = \" + sClassType);",
        "Excel VBA": "oShape1.TextFrame.Characters.Text = \"Class Type = \" & sClassType"
      },
      {
        "OnlyOffice JS": "let oDocContent2 = oShape2.GetDocContent();",
        "Excel VBA": "Set oDocContent2 = oShape2.TextFrame"
      },
      {
        "OnlyOffice JS": "let oParagraph2 = oDocContent2.GetElement(0);",
        "Excel VBA": "Set oParagraph2 = oShape2.TextFrame.Characters"
      },
      {
        "OnlyOffice JS": "oParagraph2.AddText(\"Class Type = \" + sClassType);",
        "Excel VBA": "oShape2.TextFrame.Characters.Text = \"Class Type = \" & sClassType"
      }
    ]
  }
}
``````json
{
  "Description": "This code retrieves the active worksheet, creates fill and stroke styles, adds shapes to the worksheet, groups the shapes, retrieves the class type of the group, and adds text to each shape indicating the class type.",
  "CodeComparison": [
    {
      "OnlyOffice_JS": "let oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "let oFill1 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "VBA": "Set oFill1 = oWorksheet.Shapes.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "let oFill2 = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "VBA": "Set oFill2 = oWorksheet.Shapes.Fill.ForeColor.RGB = RGB(51, 51, 51)"
    },
    {
      "OnlyOffice_JS": "let oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "VBA": "With oWorksheet.Shapes.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "let oShape1 = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill1, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "VBA": "Set oShape1 = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 60, 35, oFill1, oStroke).Left = 2 * 36000: oShape1.Top = 3 * 36000"
    },
    {
      "OnlyOffice_JS": "let oShape2 = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill2, oStroke, 0, 15 * 36000, 0, 30 * 36000);",
      "VBA": "Set oShape2 = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 60, 35, oFill2, oStroke).Left = 15 * 36000: oShape2.Top = 30 * 36000"
    },
    {
      "OnlyOffice_JS": "let oGroup = oWorksheet.GroupDrawings([oShape1, oShape2]);",
      "VBA": "Set oGroup = oWorksheet.Shapes.Range(Array(oShape1.Name, oShape2.Name)).Group"
    },
    {
      "OnlyOffice_JS": "let sClassType = oGroup.GetClassType();",
      "VBA": "sClassType = oGroup.Name"
    },
    {
      "OnlyOffice_JS": "let oDocContent1 = oShape1.GetDocContent();",
      "VBA": "Set oDocContent1 = oShape1.TextFrame"
    },
    {
      "OnlyOffice_JS": "let oParagraph1 = oDocContent1.GetElement(0);",
      "VBA": "Set oParagraph1 = oDocContent1.TextRange.Paragraphs(1)"
    },
    {
      "OnlyOffice_JS": "oParagraph1.AddText(\"Class Type = \" + sClassType);",
      "VBA": "oParagraph1.Text = \"Class Type = \" & sClassType"
    },
    {
      "OnlyOffice_JS": "let oDocContent2 = oShape2.GetDocContent();",
      "VBA": "Set oDocContent2 = oShape2.TextFrame"
    },
    {
      "OnlyOffice_JS": "let oParagraph2 = oDocContent2.GetElement(0);",
      "VBA": "Set oParagraph2 = oDocContent2.TextRange.Paragraphs(1)"
    },
    {
      "OnlyOffice_JS": "oParagraph2.AddText(\"Class Type = \" + sClassType);",
      "VBA": "oParagraph2.Text = \"Class Type = \" & sClassType"
    }
  ]
}
``````json
{
  "description": "This code demonstrates how to ungroup a group of drawing elements using OnlyOffice JavaScript API and its equivalent implementation in Excel VBA.",
  "methodMappings": [
    {
      "OnlyOffice_JS": "let oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "let oFill1 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "Set oFill1 = oWorksheet.Shapes.AddShape(msoShapeRectangle, 60, 35, 100, 50).Fill\nWith oFill1\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
    },
    {
      "OnlyOffice_JS": "let oFill2 = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "Excel_VBA": "Set oFill2 = oWorksheet.Shapes.AddShape(msoShapeRectangle, 60, 35, 150, 100).Fill\nWith oFill2\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With"
    },
    {
      "OnlyOffice_JS": "let oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "With oWorksheet.Shapes(1).Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "let oShape1 = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill1, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel_VBA": "Set oShape1 = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 60, 35, 200, 150)\nWith oShape1\n    .Fill.ForeColor.RGB = RGB(255, 111, 61)\n    .Line.Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "let oShape2 = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill2, oStroke, 0, 15 * 36000, 0, 30 * 36000);",
      "Excel_VBA": "Set oShape2 = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 60, 35, 300, 200)\nWith oShape2\n    .Fill.ForeColor.RGB = RGB(51, 51, 51)\n    .Line.Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "let oGroup = oWorksheet.GroupDrawings([oShape1, oShape2]);",
      "Excel_VBA": "Set oGroup = oWorksheet.Shapes.Range(Array(oShape1.Name, oShape2.Name)).Group"
    },
    {
      "OnlyOffice_JS": "oGroup.Ungroup();",
      "Excel_VBA": "oGroup.Ungroup"
    },
    {
      "OnlyOffice_JS": "let oDocContent1 = oShape1.GetDocContent();",
      "Excel_VBA": "Set oDocContent1 = oShape1.TextFrame"
    },
    {
      "OnlyOffice_JS": "let oParagraph1 = oDocContent1.GetElement(0);",
      "Excel_VBA": "Set oParagraph1 = oDocContent1.Characters"
    },
    {
      "OnlyOffice_JS": "oParagraph1.AddText(\"Shapes are ungrouped\");",
      "Excel_VBA": "oDocContent1.Text = \"Shapes are ungrouped\""
    },
    {
      "OnlyOffice_JS": "let oDocContent2 = oShape2.GetDocContent();",
      "Excel_VBA": "Set oDocContent2 = oShape2.TextFrame"
    },
    {
      "OnlyOffice_JS": "let oParagraph2 = oDocContent2.GetElement(0);",
      "Excel_VBA": "Set oParagraph2 = oDocContent2.Characters"
    },
    {
      "OnlyOffice_JS": "oParagraph2.AddText(\"Shapes are ungrouped\");",
      "Excel_VBA": "oDocContent2.Text = \"Shapes are ungrouped\""
    }
  ]
}
``````json
{
  "RAG_Table": [
    {
      "Description": "Retrieve the active worksheet",
      "OnlyOffice_JS": "let oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "Description": "Create a solid fill with RGB color (255, 111, 61)",
      "OnlyOffice_JS": "let oFill1 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "VBA": "Set oFill1 = RGB(255, 111, 61)"
    },
    {
      "Description": "Create a solid fill with RGB color (51, 51, 51)",
      "OnlyOffice_JS": "let oFill2 = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));",
      "VBA": "Set oFill2 = RGB(51, 51, 51)"
    },
    {
      "Description": "Create a stroke with no fill",
      "OnlyOffice_JS": "let oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "VBA": "With oStroke\r\n    .Weight = 0\r\n    .ForeColor.RGB = RGB(255, 255, 255)\r\nEnd With"
    },
    {
      "Description": "Add the first shape to the worksheet",
      "OnlyOffice_JS": "let oShape1 = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill1, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "VBA": "Set oShape1 = oWorksheet.Shapes.AddShape(msoShapeFlowchartConnector, 60, 35, 2, 3)\r\noShape1.Fill.ForeColor.RGB = oFill1\r\noShape1.Line.Weight = oStroke.Weight\r\noShape1.Line.Visible = msoFalse"
    },
    {
      "Description": "Add the second shape to the worksheet",
      "OnlyOffice_JS": "let oShape2 = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill2, oStroke, 0, 15 * 36000, 0, 30 * 36000);",
      "VBA": "Set oShape2 = oWorksheet.Shapes.AddShape(msoShapeFlowchartConnector, 60, 35, 15, 30)\r\noShape2.Fill.ForeColor.RGB = oFill2\r\noShape2.Line.Weight = oStroke.Weight\r\noShape2.Line.Visible = msoFalse"
    },
    {
      "Description": "Group the two shapes",
      "OnlyOffice_JS": "let oGroup = oWorksheet.GroupDrawings([oShape1, oShape2]);",
      "VBA": "Set oGroup = oWorksheet.Shapes.Range(Array(oShape1.Name, oShape2.Name)).Group"
    },
    {
      "Description": "Ungroup the grouped shapes",
      "OnlyOffice_JS": "oGroup.Ungroup();",
      "VBA": "oGroup.Ungroup"
    },
    {
      "Description": "Get the document content of the first shape",
      "OnlyOffice_JS": "let oDocContent1 = oShape1.GetDocContent();",
      "VBA": "Dim oDocContent1 As Object\r\nSet oDocContent1 = oShape1.TextFrame.TextRange"
    },
    {
      "Description": "Get the first paragraph of the document content",
      "OnlyOffice_JS": "let oParagraph1 = oDocContent1.GetElement(0);",
      "VBA": "Dim oParagraph1 As Object\r\nSet oParagraph1 = oDocContent1.Paragraphs(1)"
    },
    {
      "Description": "Add text to the first paragraph",
      "OnlyOffice_JS": "oParagraph1.AddText(\"Shapes are ungrouped\");",
      "VBA": "oParagraph1.Text = \"Shapes are ungrouped\""
    },
    {
      "Description": "Get the document content of the second shape",
      "OnlyOffice_JS": "let oDocContent2 = oShape2.GetDocContent();",
      "VBA": "Dim oDocContent2 As Object\r\nSet oDocContent2 = oShape2.TextFrame.TextRange"
    },
    {
      "Description": "Get the first paragraph of the second document content",
      "OnlyOffice_JS": "let oParagraph2 = oDocContent2.GetElement(0);",
      "VBA": "Dim oParagraph2 As Object\r\nSet oParagraph2 = oDocContent2.Paragraphs(1)"
    },
    {
      "Description": "Add text to the second paragraph",
      "OnlyOffice_JS": "oParagraph2.AddText(\"Shapes are ungrouped\");",
      "VBA": "oParagraph2.Text = \"Shapes are ungrouped\""
    }
  ]
}
``````json
{
  "Table": {
    "Description": "This example gets a class type and inserts it into the document.",
    "OnlyOffice_JS": "// This example gets a class type and inserts it into the document.\nvar oWorksheet = Api.GetActiveSheet();\nvar oImage = oWorksheet.AddImage(\"https://api.onlyoffice.com/content/img/docbuilder/examples/coordinate_aspects.png\", 60 * 36000, 35 * 36000, 0, 2 * 36000, 2, 3 * 36000);\nvar sClassType = oImage.GetClassType();\noWorksheet.SetColumnWidth(0, 15);\noWorksheet.SetColumnWidth(1, 10);\noWorksheet.GetRange(\"A1\").SetValue(\"Class Type = \");\noWorksheet.GetRange(\"B1\").SetValue(sClassType);",
    "Excel_VBA": "' This example gets a class type and inserts it into the document.\nSub InsertClassType()\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ActiveSheet\n    \n    ' AddImage equivalent: Download the image first or use a local path.\n    ' Assuming the image is saved locally at "C:\\Images\\coordinate_aspects.png"\n    Dim oImage As Shape\n    Set oImage = oWorksheet.Shapes.AddPicture(\"C:\\Images\\coordinate_aspects.png\", _\n        msoFalse, msoCTrue, 60, 35, 200, 150) ' Adjust the position and size as needed\n    \n    ' VBA does not have GetClassType, using the name as an example\n    Dim sClassType As String\n    sClassType = oImage.Name\n    \n    ' Set column widths\n    oWorksheet.Columns(1).ColumnWidth = 15\n    oWorksheet.Columns(2).ColumnWidth = 10\n    \n    ' Set cell values\n    oWorksheet.Range(\"A1\").Value = \"Class Type = \"\n    oWorksheet.Range(\"B1\").Value = sClassType\nEnd Sub"
  }
}
``````json
{
  "description": "This example retrieves the active worksheet, inserts an image, obtains the image's class type, sets column widths, and assigns values to specific cells.",
  "code": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oImage = oWorksheet.AddImage(\"https://api.onlyoffice.com/content/img/docbuilder/examples/coordinate_aspects.png\", 60 * 36000, 35 * 36000, 0, 2 * 36000, 2, 3 * 36000);",
      "Excel_VBA": "Dim oImage As Shape\nSet oImage = oWorksheet.Shapes.AddPicture(\"https://api.onlyoffice.com/content/img/docbuilder/examples/coordinate_aspects.png\", msoFalse, msoCTrue, 60 * 36000, 35 * 36000, 2 * 36000, 3 * 36000)"
    },
    {
      "OnlyOffice_JS": "var sClassType = oImage.GetClassType();",
      "Excel_VBA": "Dim sClassType As String\nsClassType = oImage.Name ' Adjust based on actual property equivalent to GetClassType"
    },
    {
      "OnlyOffice_JS": "oWorksheet.SetColumnWidth(0, 15);",
      "Excel_VBA": "oWorksheet.Columns(1).ColumnWidth = 15"
    },
    {
      "OnlyOffice_JS": "oWorksheet.SetColumnWidth(1, 10);",
      "Excel_VBA": "oWorksheet.Columns(2).ColumnWidth = 10"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"Class Type = \");",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = \"Class Type = \""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(sClassType);",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = sClassType"
    }
  ]
}
``````json
[
  {
    "Get the active worksheet.": {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    }
  },
  {
    "Set value 'Region' to cell B1.": {
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    }
  },
  {
    "Set value 'Price' to cell C1.": {
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Price');",
      "VBA": "oWorksheet.Range(\"C1\").Value = \"Price\""
    }
  },
  {
    "Set value 'East' to cell B2.": {
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    }
  },
  {
    "Set value 'West' to cell B3.": {
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    }
  },
  {
    "Set value 42.5 to cell C2.": {
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue(42.5);",
      "VBA": "oWorksheet.Range(\"C2\").Value = 42.5"
    }
  },
  {
    "Set value 35.2 to cell C3.": {
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue(35.2);",
      "VBA": "oWorksheet.Range(\"C3\").Value = 35.2"
    }
  },
  {
    "Get range B1:C3 from Sheet1.": {
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$C$3\");",
      "VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"$B$1:$C$3\")"
    }
  },
  {
    "Get range A7 from the active worksheet.": {
      "OnlyOffice_JS": "var pivotRef = oWorksheet.GetRange('A7');",
      "VBA": "Set pivotRef = oWorksheet.Range(\"A7\")"
    }
  },
  {
    "Insert a pivot table using dataRef and pivotRef.": {
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotExistingWorksheet(dataRef, pivotRef);",
      "VBA": "Set pivotTable = oWorksheet.PivotTables.Add(SourceData:=dataRef, TableDestination:=pivotRef)"
    }
  }
]
``````json
{
  "description": "This table provides Excel VBA equivalents for the corresponding OnlyOffice JS methods used to manipulate the active worksheet, set cell values, define a data range, and insert a pivot table.",
  "methods": [
    {
      "OnlyOffice_JS": "Api.GetActiveSheet()",
      "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region')",
      "VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Price')",
      "VBA": "oWorksheet.Range(\"C1\").Value = \"Price\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East')",
      "VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West')",
      "VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue(42.5)",
      "VBA": "oWorksheet.Range(\"C2\").Value = 42.5"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue(35.2)",
      "VBA": "oWorksheet.Range(\"C3\").Value = 35.2"
    },
    {
      "OnlyOffice_JS": "Api.GetRange(\"'Sheet1'!$B$1:$C$3\")",
      "VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:C3\")"
    },
    {
      "OnlyOffice_JS": "Api.InsertPivotNewWorksheet(dataRef)",
      "VBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceData:=dataRef)"
    }
  ]
}
``````json
{
  "Description": "This example shows how to get the ApiRange object that represents the rectangular intersection of two or more ranges and set its fill color.",
  "OnlyOffice_JS": "// OnlyOffice JS code
var oWorksheet = Api.GetActiveSheet();
var oRange1 = oWorksheet.GetRange(\"A1:C5\");
var oRange2 = oWorksheet.GetRange(\"B2:B4\");
var oRange = Api.Intersect(oRange1, oRange2);
oRange.SetFillColor(Api.CreateColorFromRGB(255, 213, 191));",
  "Excel_VBA": "' Excel VBA equivalent
Dim oWorksheet As Worksheet
Dim oRange1 As Range
Dim oRange2 As Range
Dim oRange As Range

Set oWorksheet = ActiveWorkbook.ActiveSheet
Set oRange1 = oWorksheet.Range(\"A1:C5\")
Set oRange2 = oWorksheet.Range(\"B2:B4\")
Set oRange = Application.Intersect(oRange1, oRange2)
If Not oRange Is Nothing Then
    oRange.Interior.Color = RGB(255, 213, 191)
End If"
}
```**Description:**  
This code adds comments to the document, retrieves them, and writes the comment text and author to specific cells in the active worksheet.

```json
{
  "RAG_Table": [
    {
      "Operation": "Add a comment with text and author",
      "Excel_VBA_Code": "ActiveSheet.Comments.Add Range(\"A1\"), \"Comment 1\" \nActiveSheet.Comments(\"A1\").Author = \"Bob\"",
      "OnlyOffice_JS_Code": "Api.AddComment(\"Comment 1\", \"Bob\");"
    },
    {
      "Operation": "Add a comment with text only",
      "Excel_VBA_Code": "ActiveSheet.Comments.Add Range(\"A2\"), \"Comment 2\"",
      "OnlyOffice_JS_Code": "Api.AddComment(\"Comment 2\");"
    },
    {
      "Operation": "Retrieve all comments",
      "Excel_VBA_Code": "Dim arrComments As Comments\nSet arrComments = ActiveSheet.Comments",
      "OnlyOffice_JS_Code": "var arrComments = Api.GetComments();"
    },
    {
      "Operation": "Get the active worksheet",
      "Excel_VBA_Code": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet",
      "OnlyOffice_JS_Code": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Operation": "Set value with comment text in cell A1",
      "Excel_VBA_Code": "Range(\"A1\").Value = \"Comment Text: \" & arrComments(1).Text",
      "OnlyOffice_JS_Code": "oWorksheet.GetRange(\"A1\").SetValue(\"Comment Text: \", arrComments[0].GetText());"
    },
    {
      "Operation": "Set value with comment author in cell B1",
      "Excel_VBA_Code": "Range(\"B1\").Value = \"Comment Author: \" & arrComments(1).Author",
      "OnlyOffice_JS_Code": "oWorksheet.GetRange(\"B1\").SetValue(\"Comment Author: \", arrComments[0].GetAuthorName());"
    }
  ]
}
``````json
{
  "description": "This example calculates custom function result.",
  "table": {
    "headers": ["VBA", "OnlyOffice JS"],
    "rows": [
      [
        "' Define the custom function
Function ADD(first As Variant, second As Variant) As Variant
    ADD = first + second
End Function",
        "// Add custom function library
Api.AddCustomFunctionLibrary(\"LibraryName\", function(){
    /**
     * Function that returns the argument
     * @customfunction
     * @param {any} first First argument.
     * @returns {any} second Second argument.
     */
    Api.AddCustomFunction(function ADD(first, second) {
        return first + second;
    });
});"
      ],
      [
        "' Assign formula to cell A1
Sub SetFormula()
    Range(\"A1\").Formula = \"=ADD(1,2)\"
End Sub",
        "var oWorksheet = Api.GetActiveSheet();
oWorksheet.GetRange('A1').SetValue('=ADD(1,2)');"
      ]
    ]
  }
}
``````json
{
  "Description": "This example adds a new name to a range of cells.",
  "RAG": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(\"2\");",
      "VBA": "oWorksheet.Range(\"B1\").Value = \"2\""
    },
    {
      "OnlyOffice JS": "Api.AddDefName(\"numbers\", \"Sheet1!$A$1:$B$1\");",
      "VBA": "Names.Add Name:=\"numbers\", RefersTo:=\"=Sheet1!$A$1:$B$1\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"We defined a name 'numbers' for a range of cells A1:B1.\");",
      "VBA": "oWorksheet.Range(\"A3\").Value = \"We defined a name 'numbers' for a range of cells A1:B1.\""
    }
  ]
}
``````json
{
  "Description": "This example creates a new worksheet.",
  "OnlyOffice JS": "var oSheet = Api.AddSheet(\"New sheet\");",
  "VBA": "Sub AddSheet()\n    Sheets.Add(After:=Sheets(Sheets.Count)).Name = \"New sheet\"\nEnd Sub"
}
``````json
{
  "Description": "This example shows how to subscribe on \"onWorksheetChange\" event.",
  "Code": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel VBA": "Dim oRange As Range\nSet oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "OnlyOffice JS": "oRange.SetValue(\"1\");",
      "Excel VBA": "oRange.Value = \"1\""
    },
    {
      "OnlyOffice JS": "Api.attachEvent(\"onWorksheetChange\", function(oRange){\n    console.log(\"onWorksheetChange\");\n    console.log(oRange.GetAddress());\n});",
      "Excel VBA": "Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)\n    Debug.Print \"onWorksheetChange\"\n    Debug.Print Target.Address\nEnd Sub"
    }
  ]
}
``````json
{
  "description": "This table provides Excel VBA equivalents for each OnlyOffice JS method used to add custom functions, manipulate worksheet ranges, and clear custom functions.",
  "table": [
    {
      "Functionality": "Add Custom Function Library",
      "OnlyOffice JS": "Api.AddCustomFunctionLibrary(\"LibraryName\", function() { /* ... */ });",
      "VBA Equivalent": "' VBA does not have a direct equivalent to adding a custom function library dynamically."
    },
    {
      "Functionality": "Add Custom Function",
      "OnlyOffice JS": "Api.AddCustomFunction(function ADD(first, second) { return first + second; });",
      "VBA Equivalent": "Function ADD(first As Variant, second As Variant) As Variant\n    ADD = first + second\nEnd Function"
    },
    {
      "Functionality": "Get Active Sheet",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA Equivalent": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Functionality": "Set Value in Range",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"=ADD(1, 2)\");",
      "VBA Equivalent": "oWorksheet.Range(\"A1\").Formula = \"=ADD(1, 2)\""
    },
    {
      "Functionality": "Clear Custom Functions",
      "OnlyOffice JS": "Api.ClearCustomFunctions();",
      "VBA Equivalent": "' VBA does not support clearing custom functions dynamically. Functions must be removed manually from modules."
    },
    {
      "Functionality": "Set Value in Another Range",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"All the custom functions were removed.\");",
      "VBA Equivalent": "oWorksheet.Range(\"A3\").Value = \"All the custom functions were removed.\""
    }
  ]
}
``````json
{
  "description": "This code creates a shape with a background image, applies fill and stroke settings, and adds it to the active worksheet.",
  "RAGTable": [
    {
      "Method": "GetActiveSheet",
      "Status": "Green",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Method": "CreateBlipFill",
      "Status": "Green",
      "OnlyOfficeJS": "var oFill = Api.CreateBlipFill(\"https://api.onlyoffice.com/content/img/docbuilder/examples/icon_DocumentEditors.png\", \"tile\");",
      "VBA": "With oWorksheet.Shapes.AddShape(msoShapeRectangle, Left, Top, Width, Height).Fill\n    .UserPicture \"https://api.onlyoffice.com/content/img/docbuilder/examples/icon_DocumentEditors.png\"\n    .TextureTile = msoTrue\nEnd With"
    },
    {
      "Method": "CreateStroke",
      "Status": "Green",
      "OnlyOfficeJS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "VBA": "With oWorksheet.Shapes(1).Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "Method": "AddShape",
      "Status": "Green",
      "OnlyOfficeJS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
      "VBA": "oWorksheet.Shapes.AddShape(msoShapeFlowchartOfflineStorage, 60 * 36000, 35 * 36000, 2 * 36000, 3 * 36000).Fill = oFill\noWorksheet.Shapes(2).Line = oStroke"
    }
  ]
}
``````json
{
  "RAGTable": [
    {
      "Description": "Get the active worksheet.",
      "VBA Code": "Set oWorksheet = ThisWorkbook.ActiveSheet",
      "OnlyOffice JS Code": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Create a solid fill with specific RGB color.",
      "VBA Code": "Set oFill = oWorksheet.Shapes.AddShape(msoShapeRectangle, 0, 0, 100, 100).Fill\noFill.Solid\noFill.ForeColor.RGB = RGB(255, 111, 61)",
      "OnlyOffice JS Code": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));"
    },
    {
      "Description": "Create a stroke with 0 width and no fill.",
      "VBA Code": "With oShape.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With",
      "OnlyOffice JS Code": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());"
    },
    {
      "Description": "Add a shape to the worksheet with specific parameters.",
      "VBA Code": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 35, 2, 3)",
      "OnlyOffice JS Code": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);"
    },
    {
      "Description": "Get the content of the shape.",
      "VBA Code": "Set oTextFrame = oShape.TextFrame",
      "OnlyOffice JS Code": "var oDocContent = oShape.GetContent();"
    },
    {
      "Description": "Get the first paragraph element from the document content.",
      "VBA Code": "Set oParagraph = oTextFrame.TextRange.Paragraphs(1)",
      "OnlyOffice JS Code": "var oParagraph = oDocContent.GetElement(0);"
    },
    {
      "Description": "Create a bullet with dash.",
      "VBA Code": "With oParagraph.ParagraphFormat.Bullet\n    .Visible = msoTrue\n    .Character = 45 ' ASCII for '-' \nEnd With",
      "OnlyOffice JS Code": "var oBullet = Api.CreateBullet(\"-\");"
    },
    {
      "Description": "Set the bullet for the paragraph.",
      "VBA Code": "oParagraph.ParagraphFormat.Bullet.Visible = msoTrue\noParagraph.ParagraphFormat.Bullet.Character = 45",
      "OnlyOffice JS Code": "oParagraph.SetBullet(oBullet);"
    },
    {
      "Description": "Add text to the paragraph.",
      "VBA Code": "oParagraph.Text = \" This is an example of the bulleted paragraph.\"",
      "OnlyOffice JS Code": "oParagraph.AddText(\" This is an example of the bulleted paragraph.\");"
    }
  ]
}
``````json
{
  "table": {
    "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Description": "Gets the active worksheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ActiveSheet"
      },
      {
        "Description": "Creates a color by name 'peachPuff'",
        "OnlyOffice JS": "var oColor = Api.CreateColorByName(\"peachPuff\");",
        "Excel VBA": "Dim oColor As Long\noColor = RGB(255, 218, 185)"
      },
      {
        "Description": "Sets the value of cell A2 to 'Text with color'",
        "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Text with color\");",
        "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Text with color\""
      },
      {
        "Description": "Sets the font color of cell A2",
        "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetFontColor(oColor);",
        "Excel VBA": "oWorksheet.Range(\"A2\").Font.Color = oColor"
      }
    ]
  }
}
``````json
{
  "description": "This example creates an RGB color setting the appropriate values for the red, green and blue color components.",
  "methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oColor = Api.CreateColorFromRGB(255, 111, 61);",
      "Excel VBA": "oColor = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"Text with color\");",
      "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"Text with color\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetFontColor(oColor);",
      "Excel VBA": "oWorksheet.Range(\"A2\").Font.Color = oColor"
    }
  ]
}
``````json
{
  "description": "This example creates a gradient stop used for different types of gradients.",
  "code": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);",
      "VBA": "Set oGs1 = oFill.GradientStops.Add(0)\nWith oGs1\n    .Color = RGB(255, 213, 191)\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);",
      "VBA": "Set oGs2 = oFill.GradientStops.Add(1)\nWith oGs2\n    .Color = RGB(255, 111, 61)\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);",
      "VBA": "With oFill\n    .GradientStyle = msoGradientHorizontal\n    .GradientVariant = 1\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "VBA": "With oStroke\n    .Weight = 0\n    .ForeColor.RGB = RGB(255, 255, 255) ' No fill equivalent\nEnd With"
    },
    {
      "OnlyOffice_JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
      "VBA": "oWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, 60 * 36000, 35 * 36000, 2 * 36000, 3 * 36000).Select\nWith Selection.ShapeRange.Fill\n    .ForeColor.RGB = RGB(255, 213, 191)\n    .OneColorGradient msoGradientHorizontal, 1, 0\nEnd With\nWith Selection.ShapeRange.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    }
  ]
}
``````json
{
  "methods": [
    {
      "Get the active worksheet": {
        "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
        "ExcelVBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
      }
    },
    {
      "Create an RGB color": {
        "OnlyOfficeJS": "Api.CreateRGBColor(255, 213, 191)",
        "ExcelVBA": "RGB(255, 213, 191)"
      }
    },
    {
      "Create a gradient stop": {
        "OnlyOfficeJS": "var oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);",
        "ExcelVBA": "' Excel VBA does not have a direct equivalent for creating gradient stops."
      }
    },
    {
      "Create a linear gradient fill": {
        "OnlyOfficeJS": "var oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);",
        "ExcelVBA": "With oShape.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .BackColor.RGB = RGB(255, 213, 191)\n    .TwoColorGradient Style:=msoGradientHorizontal, Variant:=1\nEnd With"
      }
    },
    {
      "Create a stroke with no fill": {
        "OnlyOfficeJS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
        "ExcelVBA": "With oShape.Line\n    .Visible = msoFalse\nEnd With"
      }
    },
    {
      "Add a shape to the worksheet": {
        "OnlyOfficeJS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
        "ExcelVBA": "Dim oShape As Shape\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, \n    60 * 36000, 35 * 36000, 2 * 36000, 3 * 36000)\nWith oShape\n    .Fill.ForeColor.RGB = RGB(255, 213, 191)\n    .Fill.BackColor.RGB = RGB(255, 111, 61)\n    .Fill.TwoColorGradient Style:=msoGradientHorizontal, Variant:=1\n    .Line.Visible = msoFalse\nEnd With"
      }
    }
  ]
}
``````json
{
  "Description": "This example creates a new history point.",
  "CodeEquivalents": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"This is just a sample text.\");",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"This is just a sample text.\""
    },
    {
      "OnlyOffice JS": "Api.CreateNewHistoryPoint();",
      "Excel VBA": "' VBA does not have a direct equivalent for creating a history point."
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"New history point was just created.\");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"New history point was just created.\""
    }
  ]
}
``````json
{
  "description": "This example creates a shape with a linear gradient fill and no stroke in the active worksheet.",
  "methods": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);",
      "Excel_VBA": "Set oGs1 = oWorksheet.GradientStops.Add(Color:=RGB(255, 213, 191), Position:=0)"
    },
    {
      "OnlyOffice_JS": "var oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);",
      "Excel_VBA": "Set oGs2 = oWorksheet.GradientStops.Add(Color:=RGB(255, 111, 61), Position:=100)"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);",
      "Excel_VBA": "With oWorksheet.Shapes.AddShape(msoShapeRectangle, 60, 35, 100, 50)\n    .Fill.TwoColorGradient msoGradientHorizontal, 1\n    .Fill.GradientStops.Insert RGB(255, 213, 191), 0\n    .Fill.GradientStops.Insert RGB(255, 111, 61), 1\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "With oWorksheet.Shapes(oWorksheet.Shapes.Count)\n    .Line.Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
      "Excel_VBA": "' Shape is already added and configured in the previous steps"
    }
  ]
}
``````json
{
  "Description": "This example creates a bullet for a paragraph with the numbering character or symbol specified with the sType parameter.",
  "Table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "oFillColor = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "With oShape.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 35, 200, 150)"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "Excel VBA": "Set oDocContent = oShape.TextFrame"
    },
    {
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel VBA": "Set oParagraph = oDocContent.Characters(1, oDocContent.Characters.Count)"
    },
    {
      "OnlyOffice JS": "var oBullet = Api.CreateNumbering(\"ArabicParenR\", 1);",
      "Excel VBA": "oParagraph.Range.ListFormat.ApplyBulletDefault"
    },
    {
      "OnlyOffice JS": "oParagraph.SetBullet(oBullet);",
      "Excel VBA": ""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\" This is an example of the numbered paragraph.\");",
      "Excel VBA": "oParagraph.Range.Text = \"This is an example of the numbered paragraph.\""
    },
    {
      "OnlyOffice JS": "oParagraph = Api.CreateParagraph();",
      "Excel VBA": "oParagraph.Range.InsertAfter vbCrLf"
    },
    {
      "OnlyOffice JS": "oParagraph.SetBullet(oBullet);",
      "Excel VBA": "oParagraph.Range.ListFormat.ApplyBulletDefault"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\" This is an example of the numbered paragraph.\");",
      "Excel VBA": "oParagraph.Range.Text = \"This is an example of the numbered paragraph.\""
    },
    {
      "OnlyOffice JS": "oDocContent.Push(oParagraph);",
      "Excel VBA": ""
    }
  ]
}
``````json
{
  "description": "This example creates a new paragraph.",
  "methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "Dim oFill As Shape\nSet oFill = oWorksheet.Shapes.AddShape(msoShapeRectangle, 60, 35, 100, 50)\noFill.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "With oFill.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Dim oShape As Shape\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartProcess, 60, 35, 200, 150)\nWith oShape\n    .Fill.ForeColor.RGB = RGB(255, 111, 61)\n    .Line.Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "Excel VBA": "' Excel VBA does not have a direct equivalent for GetContent. Use TextFrame instead."
    },
    {
      "OnlyOffice JS": "oDocContent.RemoveAllElements();",
      "Excel VBA": "oShape.TextFrame.Characters.Text = \"\""
    },
    {
      "OnlyOffice JS": "var oParagraph = Api.CreateParagraph();",
      "Excel VBA": "Dim oParagraph As TextRange\nSet oParagraph = oShape.TextFrame.Characters"
    },
    {
      "OnlyOffice JS": "oParagraph.SetJc(\"left\");",
      "Excel VBA": "oShape.TextFrame.HorizontalAlignment = xlHAlignLeft"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"We removed all elements from the shape and added a new paragraph inside it.\");",
      "Excel VBA": "oShape.TextFrame.Characters.Text = \"We removed all elements from the shape and added a new paragraph inside it.\""
    },
    {
      "OnlyOffice JS": "oDocContent.Push(oParagraph);",
      "Excel VBA": "' Text has already been set in the previous step."
    }
  ]
}
``````javascript
// This example creates a pattern fill to apply to the object using the selected pattern as the object background.
{
  "RAGTable": [
    {
      "Method": "GetActiveSheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Method": "CreatePatternFill",
      "OnlyOffice_JS": "var oFill = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));",
      "Excel_VBA": "Set oFill = oWorksheet.Shapes.Fill\nWith oFill\n  .Pattern = msoPatternDashDotDiag\n  .ForeColor.RGB = RGB(255, 111, 61)\n  .BackColor.RGB = RGB(51, 51, 51)\nEnd With"
    },
    {
      "Method": "CreateStroke",
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "With oWorksheet.Shapes.Line\n  .Weight = 0\n  .Visible = msoFalse\nEnd With"
    },
    {
      "Method": "AddShape",
      "OnlyOffice_JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
      "Excel_VBA": "oWorksheet.Shapes.AddShape(msoShapeFlowChartOnlineStorage, 60, 35, 2, 3).Fill = oFill\nWith oWorksheet.Shapes(oWorksheet.Shapes.Count)\n  .Line.Visible = msoFalse\nEnd With"
    }
  ]
}
``````json
{
  "Description": "This example creates a shape with a preset color, applies a linear gradient fill, sets the stroke, and adds the shape to the active worksheet.",
  "CodeComparison": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oPresetColor = Api.CreatePresetColor(\"peachPuff\");",
      "Excel_VBA": "Set oPresetColor = oWorksheet.PresetColors(\"peachPuff\")"
    },
    {
      "OnlyOffice_JS": "var oGs1 = Api.CreateGradientStop(oPresetColor, 0);",
      "Excel_VBA": "Set oGs1 = oWorksheet.GradientStops.Add(oPresetColor, 0)"
    },
    {
      "OnlyOffice_JS": "var oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);",
      "Excel_VBA": "Set oGs2 = oWorksheet.GradientStops.Add(RGB(255, 111, 61), 1) ' Excel uses a scale of 0 to 1"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);",
      "Excel_VBA": "Set oFill = oWorksheet.Shapes.Fill.ForeColor.TwoColorGradient(msoGradientHorizontal, 1)\nWith oFill.GradientStops\n    .Insert RGB(255, 204, 153), 0\n    .Insert RGB(255, 111, 61), 1\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "With oWorksheet.Shapes.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
      "Excel_VBA": "oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 60 * 0.035, 35 * 0.035, oFill, oStroke, 0, 2 * 0.035, 1 * 0.035, 3 * 0.035)"
    }
  ]
}
``````json
{
  "description": "This example creates a radial gradient fill to apply to the object using the selected radial gradient as the object background.",
  "OnlyOffice_JS": "// OnlyOffice JS Code\nvar oWorksheet = Api.GetActiveSheet();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\noWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
  "Excel_VBA": "' Excel VBA Equivalent\nSub CreateRadialGradientShape()\n    Dim ws As Worksheet\n    Set ws = ActiveSheet\n    \n    ' Add shape\n    Dim shp As Shape\n    Set shp = ws.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 60, 35, 200, 100)\n    \n    ' Create radial gradient\n    With shp.Fill\n        .TwoColorGradient msoGradientRadial, 1\n        .GradientStops.Clear\n        .GradientStops.Insert RGB(255, 213, 191), 0\n        .GradientStops.Insert RGB(255, 111, 61), 1\n        .Visible = msoTrue\n    End With\n    \n    ' No stroke\n    shp.Line.Visible = msoFalse\nEnd Sub"
}
``````json
{
  "Description": "Creates a shape with a linear gradient fill and no stroke on the active worksheet.",
  "OnlyOfficeJS": "// This example creates an RGB color setting the appropriate values for the red, green and blue color components.\nvar oWorksheet = Api.GetActiveSheet();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\noWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
  "ExcelVBA": "Sub AddShapeWithGradient()\n    Dim ws As Worksheet\n    Set ws = ActiveSheet\n\n    ' Create RGB colors\n    Dim color1 As Long\n    color1 = RGB(255, 213, 191)\n\n    Dim color2 As Long\n    color2 = RGB(255, 111, 61)\n\n    ' Add the shape\n    Dim shp As Shape\n    Set shp = ws.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 60, 35, 200, 100)\n\n    ' Create gradient fill\n    With shp.Fill\n        .Visible = msoTrue\n        .ForeColor.RGB = color1\n        .BackColor.RGB = color2\n        .TwoColorGradient msoGradientHorizontal, 1\n    End With\n\n    ' No stroke\n    shp.Line.Visible = msoFalse\nEnd Sub"
}
``````json
{
  "Description": "This example creates a new smaller text block to be inserted into the paragraph or table.",
  "CodeEquivalents": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = Api.GetActiveSheet()"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "Set oFill = Api.CreateSolidFill(CreateRGBColor(255, 111, 61))"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "Set oStroke = Api.CreateStroke(0, CreateNoFill())"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Set oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "Excel VBA": "Set oDocContent = oShape.GetContent()"
    },
    {
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel VBA": "Set oParagraph = oDocContent.GetElement(0)"
    },
    {
      "OnlyOffice JS": "var oRun = Api.CreateRun();",
      "Excel VBA": "Set oRun = Api.CreateRun()"
    },
    {
      "OnlyOffice JS": "oRun.AddText(\"This is just a sample text. \");",
      "Excel VBA": "oRun.AddText \"This is just a sample text. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddElement(oRun);",
      "Excel VBA": "oParagraph.AddElement oRun"
    },
    {
      "OnlyOffice JS": "oRun = Api.CreateRun();",
      "Excel VBA": "Set oRun = Api.CreateRun()"
    },
    {
      "OnlyOffice JS": "oRun.SetFontFamily(\"Comic Sans MS\");",
      "Excel VBA": "oRun.SetFontFamily \"Comic Sans MS\""
    },
    {
      "OnlyOffice JS": "oRun.AddText(\"This is a text run with the font family set to 'Comic Sans MS'.\");",
      "Excel VBA": "oRun.AddText \"This is a text run with the font family set to 'Comic Sans MS'.\""
    },
    {
      "OnlyOffice JS": "oParagraph.AddElement(oRun);",
      "Excel VBA": "oParagraph.AddElement oRun"
    }
  ]
}
``````json
{
  "Description": "This example creates a complex color scheme by selecting one of the available schemes and adds a curved up arrow shape to the active worksheet with specified fill and stroke properties.",
  "Code": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oSchemeColor = Api.CreateSchemeColor(\"dk1\");",
      "VBA": "Dim oSchemeColor As Long\n' Assuming 'dk1' corresponds to a specific RGB color\noSchemeColor = RGB(0, 0, 139) ' Dark Blue as an example"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(oSchemeColor);",
      "VBA": "With oWorksheet.Shapes.AddShape(msoShapeRectangle, 0, 0, 100, 100).Fill\n    .Solid\n    .ForeColor.RGB = oSchemeColor\nEnd With"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "VBA": "With oWorksheet.Shapes.AddShape(msoShapeRectangle, 0, 0, 100, 100).Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice JS": "oWorksheet.AddShape(\"curvedUpArrow\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
      "VBA": "Dim shp As Shape\nSet shp = oWorksheet.Shapes.AddShape(msoShapeCurvedUpArrow, 60, 35, 2, 3)\nWith shp.Fill\n    .ForeColor.RGB = oSchemeColor\n    .Solid\nEnd With\nWith shp.Line\n    .Visible = msoFalse\nEnd With"
    }
  ]
}
``````json
{
  "description": "This example creates a solid fill to apply to the object using a selected solid color as the object background.",
  "RAG_table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oRGBColor = Api.CreateRGBColor(255, 111, 61);",
      "Excel VBA": "Dim oRGBColor As Long\noRGBColor = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(oRGBColor);",
      "Excel VBA": "With Shape.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = oRGBColor\n    .Solid\nEnd With"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "With Shape.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
      "Excel VBA": "oWorksheet.Shapes.AddShape(msoShapeFlowchartManualInput, 60, 35, 200, 150).Select\nWith Selection.ShapeRange.Fill\n    .ForeColor.RGB = oRGBColor\n    .Solid\nEnd With\nWith Selection.ShapeRange.Line\n    .Visible = msoFalse\nEnd With"
    }
  ]
}
``````json
{
  "Description": "This example creates a stroke adding shadows to the element.",
  "Mappings": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "Api.CreateRGBColor(255, 213, 191)",
      "VBA": "RGB(255, 213, 191)",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0)",
      "VBA": "With oFill.Gradient.GradientStops\n    .Insert RGB(255, 213, 191), 0\nEnd With",
      "Status": "Amber"
    },
    {
      "OnlyOffice_JS": "Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000)",
      "VBA": "With oFill.Gradient.GradientStops\n    .Insert RGB(255, 111, 61), 1\nEnd With",
      "Status": "Amber"
    },
    {
      "OnlyOffice_JS": "Api.CreateLinearGradientFill([oGs1, oGs2], 5400000)",
      "VBA": "With oFill.Gradient\n    .Style = msoGradientStyleLinear\n    .Angle = 5400000 ' Adjust as needed\nEnd With",
      "Status": "Amber"
    },
    {
      "OnlyOffice_JS": "Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51))",
      "VBA": "With oFill1\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(51, 51, 51)\n    .Solid\nEnd With",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "Api.CreateStroke(3 * 36000, oFill1)",
      "VBA": "With oStroke\n    .Weight = 3\n    .ForeColor.RGB = oFill1.ForeColor.RGB\nEnd With",
      "Status": "Amber"
    },
    {
      "OnlyOffice_JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000)",
      "VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartProcess, 60, 35, 200, 100)\nWith oShape.Fill\n    .ForeColor.RGB = RGB(255, 213, 191) ' Example for gradient fill\nEnd With\nWith oShape.Line\n    .Weight = 3\n    .ForeColor.RGB = RGB(51, 51, 51)\nEnd With",
      "Status": "Amber"
    }
  ]
}
``````json
{
  "Description": "Creates a shape with a specific fill color and no stroke, then adds formatted bold text with font size 30 to the shape.",
  "OnlyOfficeJS": "// This example creates the empty text properties.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 80 * 36000, 50 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\noDocContent.RemoveAllElements();\nvar oTextPr = Api.CreateTextPr();\noTextPr.SetFontSize(30);\noTextPr.SetBold(true);\nvar oParagraph = Api.CreateParagraph();\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"This is a sample text with the font size set to 30 and the font weight set to bold.\");\noParagraph.SetTextPr(oTextPr);\noDocContent.Push(oParagraph);",
  "ExcelVBA": "' Create a shape with specific fill color and no outline\nDim oShape As Shape\nSet oShape = ActiveSheet.Shapes.AddShape(msoShapeFlowchartOfflineStorage, 80, 50, 200, 150)\nWith oShape\n    .Fill.ForeColor.RGB = RGB(255, 111, 61)\n    .Line.Visible = msoFalse\n    ' Add and format text within the shape\n    With .TextFrame.Characters.Font\n        .Size = 30\n        .Bold = True\n    End With\n    .TextFrame.Characters.Text = \"This is a sample text with the font size set to 30 and the font weight set to bold.\"\n    .TextFrame.HorizontalAlignment = xlHAlignLeft\nEnd With"
}
``````json
{
  "actions": [
    {
      "description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "description": "Get range \"A1\" from the worksheet",
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "Excel_VBA": "Dim oRange As Range\nSet oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "description": "Set the value of the range to \"1\"",
      "OnlyOffice_JS": "oRange.SetValue(\"1\");",
      "Excel_VBA": "oRange.Value = \"1\""
    },
    {
      "description": "Attach event handler for worksheet change",
      "OnlyOffice_JS": "Api.attachEvent(\"onWorksheetChange\", function(oRange){\n    console.log(\"onWorksheetChange\");\n    console.log(oRange.GetAddress());\n});",
      "Excel_VBA": "Private Sub Worksheet_Change(ByVal Target As Range)\n    Debug.Print \"onWorksheetChange\"\n    Debug.Print Target.Address\nEnd Sub"
    },
    {
      "description": "Detach event handler for worksheet change",
      "OnlyOffice_JS": "Api.detachEvent(\"onWorksheetChange\");",
      "Excel_VBA": "' VBA does not support detaching event handlers in the same way; you would remove or comment out the Worksheet_Change procedure."
    }
  ]
}
``````json
{
  "Description": "Get active worksheet, format a number as currency, and set it to cell A1.",
  "CodeExamples": {
    "OnlyOffice_JS": "// This example shows how to get a class formatted according to the instructions contained in the format expression.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFormat = Api.Format(\"123456\", \"$#,##0\");\noWorksheet.GetRange(\"A1\").SetValue(oFormat);",
    "Excel_VBA": "Sub SetFormattedValue()\n    Dim ws As Worksheet\n    Set ws = ThisWorkbook.ActiveSheet\n    ws.Range(\"A1\").NumberFormat = \"$#,##0\"\n    ws.Range(\"A1\").Value = 123456\nEnd Sub"
  }
}
``````json
{
  "Description": "This code retrieves the active sheet and sets specific values and a formula in cells B1, B2, A3, and B3.",
  "Code": {
    "OnlyOffice_JS": "// This example shows how to get an object that represents the active sheet.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.GetRange(\"B1\").SetValue(\"2\");\noWorksheet.GetRange(\"B2\").SetValue(\"2\");\noWorksheet.GetRange(\"A3\").SetValue(\"2x2=\");\noWorksheet.GetRange(\"B3\").SetValue(\"=B1*B2\");",
    "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet\noWorksheet.Range(\"B1\").Value = \"2\"\noWorksheet.Range(\"B2\").Value = \"2\"\noWorksheet.Range(\"A3\").Value = \"2x2=\"\noWorksheet.Range(\"B3\").Formula = \"=B1*B2\""
  }
}
``````json
{
  "table": [
    {
      "Description": "Get the active worksheet.",
      "VBA Code": "Set oWorksheet = ActiveSheet",
      "OnlyOffice JS Code": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Add a comment to the active sheet with text 'Comment 1' by author 'John Smith'.",
      "VBA Code": "ActiveSheet.Comments.Add Range(\"A1\"), \"Comment 1\"\nActiveSheet.Comments(\"A1\").Author = \"John Smith\"",
      "OnlyOffice JS Code": "Api.AddComment(\"Comment 1\", \"John Smith\");"
    },
    {
      "Description": "Add a comment to cell A4 with text 'Comment 2' by author 'Mark Potato'.",
      "VBA Code": "With ActiveSheet.Range(\"A4\").AddComment(\"Comment 2\")\n    .Author = \"Mark Potato\"\nEnd With",
      "OnlyOffice JS Code": "oWorksheet.GetRange(\"A4\").AddComment(\"Comment 2\", \"Mark Potato\");"
    },
    {
      "Description": "Get all comments in the worksheet.",
      "VBA Code": "Set arrComments = ActiveSheet.Comments",
      "OnlyOffice JS Code": "var arrComments = Api.GetAllComments();"
    },
    {
      "Description": "Set the value of cell A1 to 'Comment text: ' followed by the text of the second comment.",
      "VBA Code": "ActiveSheet.Range(\"A1\").Value = \"Comment text: \" & arrComments(2).Text",
      "OnlyOffice JS Code": "oWorksheet.GetRange(\"A1\").SetValue(\"Comment text: \" + arrComments[1].GetText());"
    },
    {
      "Description": "Set the value of cell A2 to 'Comment author: ' followed by the author of the second comment.",
      "VBA Code": "ActiveSheet.Range(\"A2\").Value = \"Comment author: \" & arrComments(2).Author",
      "OnlyOffice JS Code": "oWorksheet.GetRange(\"A2\").SetValue(\"Comment author: \" + arrComments[1].GetAuthorName());"
    }
  ]
}
``````json
{
  "Description": "This code sets up a worksheet with region and price data, creates three pivot tables from the specified range, and adds the 'Price' field to each pivot table.",
  "RAG_Table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Price');",
      "Excel_VBA": "Range(\"C1\").Value = \"Price\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue(42.5);",
      "Excel_VBA": "Range(\"C2\").Value = 42.5"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue(35.2);",
      "Excel_VBA": "Range(\"C3\").Value = 35.2"
    },
    {
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$C$3\");",
      "Excel_VBA": "Set dataRef = Range(\"Sheet1!$B$1:$C$3\")"
    },
    {
      "OnlyOffice_JS": "Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable TableDestination:=Sheets.Add.Name"
    },
    {
      "OnlyOffice_JS": "Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable TableDestination:=Sheets.Add.Name"
    },
    {
      "OnlyOffice_JS": "Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable TableDestination:=Sheets.Add.Name"
    },
    {
      "OnlyOffice_JS": "Api.GetAllPivotTables().forEach(function (pivot) { pivot.AddDataField('Price'); });",
      "Excel_VBA": "Dim pt As PivotTable\nFor Each pt In ActiveWorkbook.PivotTables\n    pt.AddDataField pt.PivotFields(\"Price\")\nNext pt"
    }
  ]
}
``````json
{
  "table": [
    {
      "Description": "Add a comment to the document.",
      "OnlyOffice JS": "var oComment = Api.AddComment(\"Comment\", \"Bob\");",
      "Excel VBA": "Set oComment = Api.AddComment(\"Comment\", \"Bob\")"
    },
    {
      "Description": "Get the ID of the added comment.",
      "OnlyOffice JS": "var sId = oComment.GetId();",
      "Excel VBA": "sId = oComment.GetId()"
    },
    {
      "Description": "Retrieve the comment by its ID.",
      "OnlyOffice JS": "oComment = Api.GetCommentById(sId);",
      "Excel VBA": "Set oComment = Api.GetCommentById(sId)"
    },
    {
      "Description": "Get the active worksheet.",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = Api.GetActiveSheet()"
    },
    {
      "Description": "Set value in cell A1 with the comment text.",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"Commet Text: \", oComment.GetText());",
      "Excel VBA": "oWorksheet.GetRange(\"A1\").SetValue \"Commet Text: \", oComment.GetText()"
    },
    {
      "Description": "Set value in cell B1 with the comment author name.",
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(\"Commet Author: \", oComment.GetAuthorName());",
      "Excel VBA": "oWorksheet.GetRange(\"B1\").SetValue \"Commet Author: \", oComment.GetAuthorName()"
    }
  ]
}
``````json
{
  "description": "This code adds two comments authored by Bob, retrieves all comments, and writes the text and author of the first comment to cells A1 and B1 of the active worksheet.",
  "table": [
    {
      "OnlyOffice JS": "Api.AddComment(\"Comment 1\", \"Bob\");",
      "Excel VBA": "Api.AddComment \"Comment 1\", \"Bob\""
    },
    {
      "OnlyOffice JS": "Api.AddComment(\"Comment 2\", \"Bob\");",
      "Excel VBA": "Api.AddComment \"Comment 2\", \"Bob\""
    },
    {
      "OnlyOffice JS": "var arrComments = Api.GetComments();",
      "Excel VBA": "Dim arrComments As Object\nSet arrComments = Api.GetComments()"
    },
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Object\nSet oWorksheet = Api.GetActiveSheet()"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"Comment Text: \", arrComments[0].GetText());",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"Comment Text: \" & arrComments(0).GetText()"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(\"Comment Author: \", arrComments[0].GetAuthorName());",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Comment Author: \" & arrComments(0).GetAuthorName()"
    }
  ]
}
``````json
{
  "description": "This script sets values in cells A1 and B1, defines a named range 'numbers', retrieves it, and sets cell A3 to display the name.",
  "table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(\"2\");",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"2\""
    },
    {
      "OnlyOffice JS": "Api.AddDefName(\"numbers\", \"Sheet1!$A$1:$B$1\");",
      "Excel VBA": "ThisWorkbook.Names.Add Name:=\"numbers\", RefersTo:=\"=Sheet1!$A$1:$B$1\""
    },
    {
      "OnlyOffice JS": "var oDefName = Api.GetDefName(\"numbers\");",
      "Excel VBA": "Set oDefName = ThisWorkbook.Names(\"numbers\")"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"DefName: \" + oDefName.GetName());",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"DefName: \" & oDefName.Name"
    }
  ]
}
``````json
{
  "description": "This example shows how to get the document info and paste the application name into the 'A1' cell.",
  "OnlyOffice_JS": "// This example shows how to get the document info represented as an object and paste the application name into \"A1\" cell.\nconst oDocInfo = Api.GetDocumentInfo();\nconst oRange = Api.GetActiveSheet().GetRange('A1');\noRange.SetValue('This document has been created with: ' + oDocInfo.Application);",
  "Excel_VBA": "' This example shows how to get the document info and paste the application name into A1 cell\nSub SetApplicationName()\n    Dim oDocInfo As DocumentInfo\n    Set oDocInfo = Application.Info\n    Range(\"A1\").Value = \"This document has been created with: \" & oDocInfo.Application\nEnd Sub"
}
``````json
{
  "description": "This example freezes the first column and inserts the freeze type into the table.",
  "methods": [
    {
      "OnlyOffice JS": "// Freeze the first column\nApi.SetFreezePanesType('column');\n\n// Get the active worksheet\nvar oWorksheet = Api.GetActiveSheet();\n\n// Set value in cell A1\noWorksheet.GetRange(\"A1\").SetValue(\"Type: \");\n\n// Set value in cell B1 with the freeze pane type\noWorksheet.GetRange(\"B1\").SetValue(Api.GetFreezePanesType());"
    },
    {
      "Excel VBA": "' Freeze the first column\nSub FreezeFirstColumn()\n    ActiveWindow.SplitColumn = 1\n    ActiveWindow.FreezePanes = True\n\n    ' Insert freeze type into cells\n    Range(\"A1\").Value = \"Type:\"\n    Range(\"B1\").Value = \"Column\"\nEnd Sub"
    }
  ]
}
``````json
{
  "Description": "This example shows how to get the full name of the currently opened file and set it in cell B1 of the active sheet.",
  "Excel VBA": [
    "Sub SetFileName()",
    "    Dim oWorksheet As Worksheet",
    "    Dim sName As String",
    "    Set oWorksheet = ThisWorkbook.ActiveSheet",
    "    sName = ThisWorkbook.FullName",
    "    oWorksheet.Range(\"B1\").Value = \"File name: \" & sName",
    "End Sub"
  ],
  "OnlyOffice JS": [
    "// This example shows how to get the full name of the currently opened file.",
    "var oWorksheet = Api.GetActiveSheet();",
    "var sName = Api.GetFullName();",
    "oWorksheet.GetRange(\"B1\").SetValue(\"File name: \" + sName);"
  ]
}
``````json
{
  "table": {
    "headers": ["Description", "OnlyOffice JS", "VBA"],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "VBA": "Set oWorksheet = ActiveSheet"
      },
      {
        "Description": "Set the locale to en-CA",
        "OnlyOffice JS": "Api.SetLocale(\"en-CA\");",
        "VBA": "Application.LanguageSettings.LanguageID(msoLanguageIDUI) = msoLanguageIDEnglishCanadian"
      },
      {
        "Description": "Get the current locale",
        "OnlyOffice JS": "var nLocale = Api.GetLocale();",
        "VBA": "nLocale = Application.LanguageSettings.LanguageID(msoLanguageIDUI)"
      },
      {
        "Description": "Set the value of cell A1 with the locale",
        "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"Locale: \" + nLocale);",
        "VBA": "oWorksheet.Range(\"A1\").Value = \"Locale: \" & nLocale"
      }
    ]
  }
}
``````json
{
  "Description": "This example shows how to get the mail merge data.",
  "CodeEquivalents": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = Api.GetActiveSheet()"
    },
    {
      "OnlyOffice JS": "oWorksheet.SetColumnWidth(0, 20);",
      "Excel VBA": "oWorksheet.Columns(1).ColumnWidth = 20"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"Email address\");",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"Email address\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(\"Greeting\");",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Greeting\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(\"First name\");",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"First name\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D1\").SetValue(\"Last name\");",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Last name\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A2\").SetValue(\"user1@example.com\");",
      "Excel VBA": "oWorksheet.Range(\"A2\").Value = \"user1@example.com\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B2\").SetValue(\"Dear\");",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"Dear\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C2\").SetValue(\"John\");",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"John\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D2\").SetValue(\"Smith\");",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = \"Smith\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"user2@example.com\");",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"user2@example.com\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B3\").SetValue(\"Hello\");",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"Hello\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"C3\").SetValue(\"Kate\");",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Kate\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"D3\").SetValue(\"Cage\");",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = \"Cage\""
    },
    {
      "OnlyOffice JS": "var aMailMergeData = Api.GetMailMergeData(0);",
      "Excel VBA": "aMailMergeData = Api.GetMailMergeData(0)"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A5\").SetValue(\"Mail merge data: \" + aMailMergeData);",
      "Excel VBA": "oWorksheet.Range(\"A5\").Value = \"Mail merge data: \" & aMailMergeData"
    }
  ]
}
``````json
{
  "Table": {
    "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ActiveSheet"
      },
      {
        "Description": "Set the value 'Region' in cell B1",
        "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
        "Excel VBA": "Range(\"B1\").Value = \"Region\""
      },
      {
        "Description": "Set the value 'Price' in cell C1",
        "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Price');",
        "Excel VBA": "Range(\"C1\").Value = \"Price\""
      },
      {
        "Description": "Set the value 'East' in cell B2",
        "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
        "Excel VBA": "Range(\"B2\").Value = \"East\""
      },
      {
        "Description": "Set the value 'West' in cell B3",
        "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
        "Excel VBA": "Range(\"B3\").Value = \"West\""
      },
      {
        "Description": "Set the value 42.5 in cell C2",
        "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue(42.5);",
        "Excel VBA": "Range(\"C2\").Value = 42.5"
      },
      {
        "Description": "Set the value 35.2 in cell C3",
        "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue(35.2);",
        "Excel VBA": "Range(\"C3\").Value = 35.2"
      },
      {
        "Description": "Get the range B1:C3 from Sheet1",
        "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$C$3\");",
        "Excel VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:C3\")"
      },
      {
        "Description": "Insert a new PivotTable on a new worksheet using the specified range",
        "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
        "Excel VBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
      },
      {
        "Description": "Add 'Region' as a row field to the PivotTable",
        "OnlyOffice JS": "Api.GetPivotByName(pivotTable.GetName()).AddFields({ rows: 'Region' });",
        "Excel VBA": "With pivotTable.PivotFields(\"Region\")\n    .Orientation = xlRowField\n    .Position = 1\nEnd With"
      },
      {
        "Description": "Add 'Price' as a data field to the PivotTable",
        "OnlyOffice JS": "Api.GetPivotByName(pivotTable.GetName()).AddDataField('Price');",
        "Excel VBA": "With pivotTable.PivotFields(\"Price\")\n    .Orientation = xlDataField\n    .Function = xlSum\n    .Name = \"Sum of Price\"\nEnd With"
      }
    ]
  }
}
``````json
{
  "description": "This example shows how to get the ApiRange object by the range reference.",
  "codeComparison": [
    {
      "operation": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "operation": "Get the range A1:C1",
      "OnlyOffice_JS": "var oRange = Api.GetRange(\"A1:C1\");",
      "VBA": "Set oRange = oWorksheet.Range(\"A1:C1\")"
    },
    {
      "operation": "Set the fill color of the range",
      "OnlyOffice_JS": "oRange.SetFillColor(Api.CreateColorFromRGB(255, 213, 191));",
      "VBA": "oRange.Interior.Color = RGB(255, 213, 191)"
    },
    {
      "operation": "Set value in cell A3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"The color was set to the background of cells A1:C1.\");",
      "VBA": "oWorksheet.Range(\"A3\").Value = \"The color was set to the background of cells A1:C1.\""
    }
  ]
}
``````json
{
  "Description": "This example retrieves the active worksheet, accesses cell A1, and sets its value to the current reference style.",
  "CodeEquivalents": [
    {
      "OnlyOffice JS": "// This example gets reference style.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.GetRange(\"A1\").SetValue(Api.GetReferenceStyle());"
    },
    {
      "VBA": "Sub GetReferenceStyle()\n    Range(\"A1\").Value = Application.ReferenceStyle\nEnd Sub"
    }
  ]
}
``````json
{
  "table": {
    "headers": ["Description", "OnlyOffice_JS", "Excel_VBA"],
    "rows": [
      {
        "Description": "Get the active worksheet.",
        "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
      },
      {
        "Description": "Set the value of the selected range.",
        "OnlyOffice_JS": "Api.GetSelection().SetValue(\"selected\");",
        "Excel_VBA": "Selection.Value = \"selected\""
      }
    ]
  }
}
``````json
{
  "description": "This example shows how to get an object that represents a sheet and set a value in a cell.",
  "table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetSheet(\"Sheet1\");",
      "Excel VBA": "Set oWorksheet = ThisWorkbook.Sheets(\"Sheet1\")"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"This is a sample text on 'Sheet1'.\");",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"This is a sample text on 'Sheet1'.\""
    }
  ]
}
``````json
{
  "table": {
    "headers": ["Description", "VBA", "OnlyOffice_JS"],
    "rows": [
      {
        "Description": "Add a new sheet named 'new_sheet_name'",
        "VBA": "Sheets.Add(Name:=\"new_sheet_name\")",
        "OnlyOffice_JS": "Api.AddSheet(\"new_sheet_name\");"
      },
      {
        "Description": "Get all sheets in the active workbook",
        "VBA": "Dim sheets As Sheets\nSet sheets = ThisWorkbook.Sheets",
        "OnlyOffice_JS": "var sheets = Api.GetSheets();"
      },
      {
        "Description": "Get the name of the first sheet",
        "VBA": "Dim sheet_name1 As String\nsheet_name1 = sheets(1).Name",
        "OnlyOffice_JS": "var sheet_name1 = sheets[0].GetName();"
      },
      {
        "Description": "Get the name of the second sheet",
        "VBA": "Dim sheet_name2 As String\nsheet_name2 = sheets(2).Name",
        "OnlyOffice_JS": "var sheet_name2 = sheets[1].GetName();"
      },
      {
        "Description": "Set the value of cell A1 in the second sheet to sheet_name1",
        "VBA": "sheets(2).Range(\"A1\").Value = sheet_name1",
        "OnlyOffice_JS": "sheets[1].GetRange(\"A1\").SetValue(sheet_name1);"
      },
      {
        "Description": "Set the value of cell A2 in the second sheet to sheet_name2",
        "VBA": "sheets(2).Range(\"A2\").Value = sheet_name2",
        "OnlyOffice_JS": "sheets[1].GetRange(\"A2\").SetValue(sheet_name2);"
      }
    ]
  }
}
``````json
{
  "description": "This code retrieves all available theme colors from the active spreadsheet and populates them into column A, starting from A1 downward.",
  "codeMappings": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var themes = Api.GetThemesColors();",
      "Excel_VBA": "themes = ThisWorkbook.Theme.ThemeColorScheme.Colors"
    },
    {
      "OnlyOffice_JS": "for (let i = 0; i < themes.length; ++i) {",
      "Excel_VBA": "For i = LBound(themes) To UBound(themes)"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A\" + (i + 1)).SetValue(themes[i]);",
      "Excel_VBA": "oWorksheet.Range(\"A\" & (i + 1)).Value = themes(i)"
    }
  ]
}
``````json
{
  "Table": [
    {
      "Description": "Get the active worksheet",
      "VBA": "Set oWorksheet = ActiveSheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Get worksheet functions",
      "VBA": "Set oFunction = Application.WorksheetFunction",
      "OnlyOfficeJS": "var oFunction = Api.GetWorksheetFunction();"
    },
    {
      "Description": "Set value of cell A1 using ASC function",
      "VBA": "Range(\"A1\").Value = Asc(\"text\")",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A1\").SetValue(oFunction.ASC(\"text\"));"
    }
  ]
}
``````json
{
  "description": "Conversion of OnlyOffice API methods to Excel VBA equivalents.",
  "methods": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Price\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = 42.5"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = 35.2"
    },
    {
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$C$3\");",
      "Excel_VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:C3\")"
    },
    {
      "OnlyOffice_JS": "var pivotRef = oWorksheet.GetRange('A7');",
      "Excel_VBA": "Set pivotRef = oWorksheet.Range(\"A7\")"
    },
    {
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotExistingWorksheet(dataRef, pivotRef);",
      "Excel_VBA": "Set pivotTable = oWorksheet.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef, TableDestination:=pivotRef)"
    }
  ]
}
``````json
{
  "Description": "Sets values in cells B1:C3 and creates a pivot table based on that range.",
  "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();\n\n" +
                  "oWorksheet.GetRange('B1').SetValue('Region');\n" +
                  "oWorksheet.GetRange('C1').SetValue('Price');\n" +
                  "oWorksheet.GetRange('B2').SetValue('East');\n" +
                  "oWorksheet.GetRange('B3').SetValue('West');\n" +
                  "oWorksheet.GetRange('C2').SetValue(42.5);\n" +
                  "oWorksheet.GetRange('C3').SetValue(35.2);\n\n" +
                  "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$C$3\");\n" +
                  "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
  "Excel VBA": "Sub SetValuesAndCreatePivot()\n" +
              "    Dim oWorksheet As Worksheet\n" +
              "    Set oWorksheet = ActiveSheet\n\n" +
              "    oWorksheet.Range(\"B1\").Value = \"Region\"\n" +
              "    oWorksheet.Range(\"C1\").Value = \"Price\"\n" +
              "    oWorksheet.Range(\"B2\").Value = \"East\"\n" +
              "    oWorksheet.Range(\"B3\").Value = \"West\"\n" +
              "    oWorksheet.Range(\"C2\").Value = 42.5\n" +
              "    oWorksheet.Range(\"C3\").Value = 35.2\n\n" +
              "    Dim dataRef As Range\n" +
              "    Set dataRef = Sheets(\"Sheet1\").Range(\"$B$1:$C$3\")\n" +
              "    Dim pivotCache As PivotCache\n" +
              "    Set pivotCache = ThisWorkbook.PivotCaches.Create(xlDatabase, dataRef)\n" +
              "    pivotCache.CreatePivotTable TableDestination:=Sheets.Add, TableName:=\"PivotTable1\"\n" +
              "End Sub"
}
``````json
{
  "description": "This code retrieves the intersection of two ranges and sets the fill color of the resulting range.",
  "VBA": "Sub SetIntersectionFillColor()\n    Dim ws As Worksheet\n    Dim rng1 As Range, rng2 As Range, intersectRng As Range\n\n    Set ws = ActiveSheet\n    Set rng1 = ws.Range(\"A1:C5\")\n    Set rng2 = ws.Range(\"B2:B4\")\n    Set intersectRng = Application.Intersect(rng1, rng2)\n\n    If Not intersectRng Is Nothing Then\n        intersectRng.Interior.Color = RGB(255, 213, 191)\n    End If\nEnd Sub",
  "OnlyOfficeJS": "// This example shows how to get the ApiRange object that represents the rectangular intersection of two or more ranges.\nvar oWorksheet = Api.GetActiveSheet();\nvar oRange1 = oWorksheet.GetRange(\"A1:C5\");\nvar oRange2 = oWorksheet.GetRange(\"B2:B4\");\nvar oRange = Api.Intersect(oRange1, oRange2);\noRange.SetFillColor(Api.CreateColorFromRGB(255, 213, 191));"
}
``````json
{
  "Attach event handler for worksheet changes": {
    "OnlyOffice JS": "Api.attachEvent(\"onWorksheetChange\", function(oRange){\n    console.log(\"onWorksheetChange\");\n    console.log(oRange.GetAddress());\n});",
    "Excel VBA": "Private Sub Worksheet_Change(ByVal Target As Range)\n    Debug.Print \"onWorksheetChange\"\n    Debug.Print Target.Address\nEnd Sub"
  },
  "Get the active worksheet": {
    "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel VBA": "Set oWorksheet = ActiveSheet"
  },
  "Get range A1 from active worksheet": {
    "OnlyOffice JS": "var oRange = oWorksheet.GetRange(\"A1\");",
    "Excel VBA": "Set oRange = oWorksheet.Range(\"A1\")"
  },
  "Set value of the range to \"1\"": {
    "OnlyOffice JS": "oRange.SetValue(\"1\");",
    "Excel VBA": "oRange.Value = \"1\""
  }
}
``````json
{
  "description": "This example recalculates all formulas in the active workbook.",
  "code": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(1);",
      "VBA": "Range(\"B1\").Value = 1"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(2);",
      "VBA": "Range(\"C1\").Value = 2"
    },
    {
      "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");\noRange.SetValue(\"=SUM(B1:C1)\");",
      "VBA": "Set oRange = Range(\"A1\")\noRange.Formula = \"=SUM(B1:C1)\""
    },
    {
      "OnlyOffice_JS": "oRange = oWorksheet.GetRange(\"E1\");\noRange.SetValue(\"=A1+1\");",
      "VBA": "Set oRange = Range(\"E1\")\noRange.Formula = \"=A1+1\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(3);",
      "VBA": "Range(\"B1\").Value = 3"
    },
    {
      "OnlyOffice_JS": "Api.RecalculateAllFormulas();",
      "VBA": "Application.Calculate"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Formulas from cells A1 and E1 were recalculated with a new value from cell C1.\");",
      "VBA": "Range(\"A3\").Value = \"Formulas from cells A1 and E1 were recalculated with a new value from cell C1.\""
    }
  ]
}
``````json
{
  "CodeConversion": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set value of cell B1 to 'Region'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "Description": "Set value of cell C1 to 'Price'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Price\""
    },
    {
      "Description": "Set value of cell B2 to 'East'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "Description": "Set value of cell B3 to 'West'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "Description": "Set value of cell C2 to 42.5",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = 42.5"
    },
    {
      "Description": "Set value of cell C3 to 35.2",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = 35.2"
    },
    {
      "Description": "Get range B1:C3 from Sheet1",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$C$3\");",
      "Excel_VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"$B$1:$C$3\")"
    },
    {
      "Description": "Insert a new pivot table on a new worksheet based on dataRef",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "Description": "Add 'Region' as row field to the pivot table",
      "OnlyOffice_JS": "Api.GetPivotByName(pivotTable.GetName()).AddFields({\n\trows: 'Region',\n});",
      "Excel_VBA": "With pivotTable.PivotFields(\"Region\")\n    .Orientation = xlRowField\nEnd With"
    },
    {
      "Description": "Add 'Price' as data field to the pivot table",
      "OnlyOffice_JS": "Api.GetPivotByName(pivotTable.GetName()).AddDataField('Price');",
      "Excel_VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\")\nEnd With"
    },
    {
      "Description": "Refresh all pivot tables",
      "OnlyOffice_JS": "Api.RefreshAllPivots();",
      "Excel_VBA": "ThisWorkbook.RefreshAll"
    }
  ]
}
``````json
{
  "table": {
    "headers": [
      "Description",
      "VBA Code",
      "OnlyOffice JS Code"
    ],
    "rows": [
      {
        "Description": "Add custom function library",
        "VBA Code": "' VBA does not support adding custom function libraries in the same way.",
        "OnlyOffice JS Code": "Api.AddCustomFunctionLibrary(\"LibraryName\", function(){\n    Api.AddCustomFunction(function ADD(first, second) {\n        return first + second;\n    });\n});"
      },
      {
        "Description": "Define a custom function ADD",
        "VBA Code": "Function ADD(first As Variant, second As Variant) As Variant\n    ADD = first + second\nEnd Function",
        "OnlyOffice JS Code": "Api.AddCustomFunction(function ADD(first, second) {\n    return first + second;\n});"
      },
      {
        "Description": "Get active worksheet",
        "VBA Code": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet",
        "OnlyOffice JS Code": "var oWorksheet = Api.GetActiveSheet();"
      },
      {
        "Description": "Set cell A1 formula to ADD(1, 2)",
        "VBA Code": "Range(\"A1\").Formula = \"=ADD(1, 2)\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange(\"A1\").SetValue(\"=ADD(1, 2)\");"
      },
      {
        "Description": "Remove custom function ADD",
        "VBA Code": "' VBA does not support removing custom functions dynamically.",
        "OnlyOffice JS Code": "Api.RemoveCustomFunction(\"add\");"
      },
      {
        "Description": "Set cell A3 value",
        "VBA Code": "Range(\"A3\").Value = \"The ADD custom function was removed.\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange(\"A3\").SetValue(\"The ADD custom function was removed.\");"
      }
    ]
  }
}
``````json
{
  "description": "This example replaces each paragraph (or text in cell) in the selection with the corresponding text from an array of strings.",
  "table": {
    "headers": ["OnlyOffice JavaScript", "Excel VBA"],
    "rows": [
      [
        "var oWorksheet = Api.GetActiveSheet();",
        "Set oWorksheet = ThisWorkbook.ActiveSheet"
      ],
      [
        "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
        "oWorksheet.Range(\"A1\").Value = \"1\""
      ],
      [
        "oWorksheet.GetRange(\"A2\").SetValue(\"2\");",
        "oWorksheet.Range(\"A2\").Value = \"2\""
      ],
      [
        "var oRange = oWorksheet.GetRange(\"A1:A2\");",
        "Set oRange = oWorksheet.Range(\"A1:A2\")"
      ],
      [
        "oRange.Select();",
        "oRange.Select"
      ],
      [
        "Api.ReplaceTextSmart([\"Cell 1\", \"Cell 2\"]);",
        "' ReplaceTextSmart equivalent in VBA\n" +
        "oRange.Cells(1, 1).Value = \"Cell 1\"\n" +
        "oRange.Cells(2, 1).Value = \"Cell 2\""
      ]
    ]
  }
}
``````json
{
  "Description": "This example saves changes to the specified document.",
  "Methods": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set value to cell A1",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"This sample text is saved to the worksheet.\");",
      "VBA": "oWorksheet.Range(\"A1\").Value = \"This sample text is saved to the worksheet.\""
    },
    {
      "Description": "Save the document",
      "OnlyOffice_JS": "Api.Save();",
      "VBA": "ThisWorkbook.Save"
    }
  ]
}
``````json
{
  "Description": "This example freezes the first column and pastes the frozen range address into the table.",
  "OnlyOffice_JS": "// This example freezes first column and get pastes a freezed range address into the table.\nApi.SetFreezePanesType('column');\nvar oWorksheet = Api.GetActiveSheet();\nvar oFreezePanes = oWorksheet.GetFreezePanes();\nvar oRange = oFreezePanes.GetLocation();\noWorksheet.GetRange(\"A1\").SetValue(\"Location: \");\noWorksheet.GetRange(\"B1\").SetValue(oRange.GetAddress());",
  "Excel_VBA": "' This example freezes the first column and pastes the frozen range address into the table.\nSub FreezeFirstColumn()\n    ' Freeze first column\n    With ActiveWindow\n        .FreezePanes = False\n        .SplitColumn = 1\n        .FreezePanes = True\n    End With\n    \n    ' Get the address of the frozen panes\n    Dim freezeAddress As String\n    freezeAddress = \"B1\" ' Since freezing the first column affects column A\n    Range(\"A1\").Value = \"Location: \"\n    Range(\"B1\").Value = freezeAddress\nEnd Sub"
}
``````json
{
  "description": "This example sets a locale to the document.",
  "OnlyOffice_JS": "// This example sets a locale to the document.\nvar oWorksheet = Api.GetActiveSheet();\nApi.SetLocale(\"en-CA\");\noWorksheet.GetRange(\"A1\").SetValue(\"A sample spreadsheet with the language set to English (Canada).\");",
  "Excel_VBA": "' This example sets a locale to the document.\nSub SetLocaleAndSetValue()\n    ' Set locale to English (Canada)\n    Application.LanguageSettings.LanguageID(msoLanguageIDUI) = 3084 ' en-CA Locale ID\n    ' Set value to cell A1\n    ActiveSheet.Range(\"A1\").Value = \"A sample spreadsheet with the language set to English (Canada).\"\nEnd Sub"
}
``````json
{
  "description": "This example sets reference style.",
  "code": {
    "OnlyOffice JS": "// This example sets reference style.\nvar oWorksheet = Api.GetActiveSheet();\nApi.SetReferenceStyle(\"xlR1C1\");\noWorksheet.GetRange(\"A1\").SetValue(Api.GetReferenceStyle());",
    "Excel VBA": "' This example sets reference style.\nDim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet\nApplication.ReferenceStyle = xlR1C1\noWorksheet.Range(\"A1\").Value = Application.ReferenceStyle"
  }
}
``````json
{
  "description": "This example sets the theme colors to the current spreadsheet.",
  "methods": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var themes = Api.GetThemesColors();",
      "Excel_VBA": "Dim themes As Variant\nthemes = ThisWorkbook.Theme.ThemeColorScheme.Colors"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A\" + (i + 1)).SetValue(themes[i]);",
      "Excel_VBA": "oWorksheet.Cells(i + 1, \"A\").Value = themes(i)"
    },
    {
      "OnlyOffice_JS": "Api.SetThemeColors(themes[3]);",
      "Excel_VBA": "ThisWorkbook.Theme.ThemeColorScheme.SetCustomColor Index:=4, RGB:=themes(3)"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(\"The 'Apex' theme colors were set to the current spreadsheet.\");",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"The 'Apex' theme colors were set to the current spreadsheet.\""
    }
  ]
}
``````json
{
  "description": "Excel VBA equivalents for OnlyOffice API methods used in the provided code example.",
  "table": {
    "headers": ["OnlyOffice JS", "Excel VBA"],
    "rows": [
      [
        "Api.GetActiveSheet();",
        "Set oWorksheet = ActiveSheet"
      ],
      [
        "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
        "oWorksheet.Range(\"A1\").Value = \"1\""
      ],
      [
        "oWorksheet.GetRange(\"B1\").SetValue(\"2\");",
        "oWorksheet.Range(\"B1\").Value = \"2\""
      ],
      [
        "Api.AddDefName(\"numbers\", \"Sheet1!$A$1:$B$1\");",
        "ThisWorkbook.Names.Add Name:=\"numbers\", RefersTo:=Sheet1.Range(\"A1:B1\")"
      ],
      [
        "Api.GetDefName(\"numbers\");",
        "Set oDefName = ThisWorkbook.Names(\"numbers\")"
      ],
      [
        "oDefName.Delete();",
        "oDefName.Delete"
      ],
      [
        "oWorksheet.GetRange(\"A3\").SetValue(\"The name 'numbers' of the range A1:B1 was deleted.\");",
        "oWorksheet.Range(\"A3\").Value = \"The name 'numbers' of the range A1:B1 was deleted.\""
      ]
    ]
  }
}
```**Description:**  
This code retrieves the active worksheet, sets values in cells A1 and B1, defines a named range "numbers" for the range A1:B1, retrieves the defined name, and sets the value of cell A3 to display the name.

```json
{
  "CodeMappings": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(\"2\");",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"2\""
    },
    {
      "OnlyOffice_JS": "Api.AddDefName(\"numbers\", \"Sheet1!$A$1:$B$1\");",
      "Excel_VBA": "Names.Add Name:=\"numbers\", RefersTo:=\"=Sheet1!$A$1:$B$1\""
    },
    {
      "OnlyOffice_JS": "var oDefName = Api.GetDefName(\"numbers\");",
      "Excel_VBA": "Set oDefName = Names(\"numbers\")"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Name: \" + oDefName.GetName());",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Name: \" & oDefName.Name"
    }
  ]
}
``````json
{
  "description": "This example shows how to get a formula that the name is defined to refer to.",
  "table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = 1"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(\"2\");",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = 2"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(\"=SUM(A1:B1)\");",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Formula = \"=SUM(A1:B1)\""
    },
    {
      "OnlyOffice_JS": "Api.AddDefName(\"summa\", \"Sheet1!$A$1:$B$1\");",
      "Excel_VBA": "ThisWorkbook.Names.Add Name:=\"summa\", RefersTo:=\"=Sheet1!$A$1:$B$1\""
    },
    {
      "OnlyOffice_JS": "var oDefName = Api.GetDefName(\"summa\");",
      "Excel_VBA": "Set oDefName = ThisWorkbook.Names(\"summa\")"
    },
    {
      "OnlyOffice_JS": "oDefName.SetRefersTo(\"=SUM(A1:B1)\");",
      "Excel_VBA": "oDefName.RefersTo = \"=SUM(A1:B1)\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"The name 'summa' refers to the formula from the cell C1.\");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"The name 'summa' refers to the formula from the cell C1.\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A4\").SetValue(\"Formula: \" + oDefName.GetRefersTo());",
      "Excel_VBA": "oWorksheet.Range(\"A4\").Value = \"Formula: \" & oDefName.RefersTo"
    }
  ]
}
``````json
{
  "description": "This example demonstrates retrieving the active worksheet, setting values in cells A1 and B1, defining a named range 'numbers' referring to A1:B1, retrieving that named range, getting its associated range, and applying bold formatting to it.",
  "RAG_table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(\"2\");",
      "VBA": "oWorksheet.Range(\"B1\").Value = \"2\""
    },
    {
      "OnlyOffice_JS": "Api.AddDefName(\"numbers\", \"Sheet1!$A$1:$B$1\");",
      "VBA": "ThisWorkbook.Names.Add Name:=\"numbers\", RefersTo:=\"Sheet1!$A$1:$B$1\""
    },
    {
      "OnlyOffice_JS": "var oDefName = Api.GetDefName(\"numbers\");",
      "VBA": "Dim oDefName As Name\nSet oDefName = ThisWorkbook.Names(\"numbers\")"
    },
    {
      "OnlyOffice_JS": "var oRange = oDefName.GetRefersToRange();",
      "VBA": "Dim oRange As Range\nSet oRange = RefersToRange(oDefName)"
    },
    {
      "OnlyOffice_JS": "oRange.SetBold(true);",
      "VBA": "oRange.Font.Bold = True"
    }
  ]
}
``````json
{
  "Description": "This script deletes the DefName object named 'numbers' and updates specific cells in the worksheet.",
  "Methods": [
    {
      "Language": "OnlyOffice JS",
      "Code": "// This example deletes the DefName object.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.GetRange(\"A1\").SetValue(\"1\");\noWorksheet.GetRange(\"B1\").SetValue(\"2\");\nApi.AddDefName(\"numbers\", \"Sheet1!$A$1:$B$1\");\nvar oDefName = Api.GetDefName(\"numbers\");\noDefName.Delete();\noWorksheet.GetRange(\"A3\").SetValue(\"The name 'numbers' of the range A1:B1 was deleted.\");"
    },
    {
      "Language": "Excel VBA",
      "Code": "' This example deletes the DefName object.\nSub DeleteDefName()\n    Dim ws As Worksheet\n    Set ws = ActiveSheet\n    ws.Range(\"A1\").Value = \"1\"\n    ws.Range(\"B1\").Value = \"2\"\n    ThisWorkbook.Names.Add Name:=\"numbers\", RefersTo:=\"=Sheet1!$A$1:$B$1\"\n    Dim nm As Name\n    Set nm = ThisWorkbook.Names(\"numbers\")\n    nm.Delete\n    ws.Range(\"A3\").Value = \"The name 'numbers' of the range A1:B1 was deleted.\"\nEnd Sub"
    }
  ]
}
``````json
{
  "Table": {
    "Headers": ["Description", "OnlyOffice JS", "Excel VBA"],
    "Rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
      },
      {
        "Description": "Set value '1' to cell A1",
        "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
        "Excel VBA": "Range(\"A1\").Value = \"1\""
      },
      {
        "Description": "Set value '2' to cell B1",
        "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(\"2\");",
        "Excel VBA": "Range(\"B1\").Value = \"2\""
      },
      {
        "Description": "Add a defined name 'numbers' for range A1:B1",
        "OnlyOffice JS": "Api.AddDefName(\"numbers\", \"Sheet1!$A$1:$B$1\");",
        "Excel VBA": "ThisWorkbook.Names.Add Name:=\"numbers\", RefersTo:= \"=Sheet1!$A$1:$B$1\""
      },
      {
        "Description": "Retrieve the defined name 'numbers'",
        "OnlyOffice JS": "var oDefName = Api.GetDefName(\"numbers\");",
        "Excel VBA": "Set oDefName = ThisWorkbook.Names(\"numbers\")"
      },
      {
        "Description": "Set value in cell A3 with the name",
        "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Name: \" + oDefName.GetName());",
        "Excel VBA": "Range(\"A3\").Value = \"Name: \" & oDefName.Name"
      }
    ]
  }
}
``````json
{
  "table": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set value '1' in cell A1",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "VBA": "oWorksheet.Range(\"A1\").Value = 1"
    },
    {
      "Description": "Set value '2' in cell B1",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(\"2\");",
      "VBA": "oWorksheet.Range(\"B1\").Value = 2"
    },
    {
      "Description": "Set formula '=SUM(A1:B1)' in cell C1",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(\"=SUM(A1:B1)\");",
      "VBA": "oWorksheet.Range(\"C1\").Formula = \"=SUM(A1:B1)\""
    },
    {
      "Description": "Add defined name 'summa' referring to range A1:B1",
      "OnlyOffice_JS": "Api.AddDefName(\"summa\", \"Sheet1!$A$1:$B$1\");",
      "VBA": "ThisWorkbook.Names.Add Name:=\"summa\", RefersTo:=\"=Sheet1!$A$1:$B$1\""
    },
    {
      "Description": "Get the defined name 'summa'",
      "OnlyOffice_JS": "var oDefName = Api.GetDefName(\"summa\");",
      "VBA": "Dim oDefName As Name\nSet oDefName = ThisWorkbook.Names(\"summa\")"
    },
    {
      "Description": "Set the formula '=SUM(A1:B1)' for the defined name 'summa'",
      "OnlyOffice_JS": "oDefName.SetRefersTo(\"=SUM(A1:B1)\");",
      "VBA": "oDefName.RefersTo = \"=SUM(Sheet1!$A$1:$B$1)\""
    },
    {
      "Description": "Set descriptive text in cell A3",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"The name 'summa' refers to the formula from the cell C1.\");",
      "VBA": "oWorksheet.Range(\"A3\").Value = \"The name 'summa' refers to the formula from the cell C1.\""
    },
    {
      "Description": "Set formula description in cell A4",
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A4\").SetValue(\"Formula: \" + oDefName.GetRefersTo());",
      "VBA": "oWorksheet.Range(\"A4\").Value = \"Formula: \" & oDefName.RefersTo"
    }
  ]
}
``````json
{
  "Description": "This example demonstrates how to retrieve an ApiRange object by its name using OnlyOffice API and its Excel VBA equivalent.",
  "CodeEquivalents": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "VBA": "Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(\"2\");",
      "VBA": "Range(\"B1\").Value = \"2\""
    },
    {
      "OnlyOffice JS": "Api.AddDefName(\"numbers\", \"Sheet1!$A$1:$B$1\");",
      "VBA": "ThisWorkbook.Names.Add Name:=\"numbers\", RefersTo:=\"=Sheet1!$A$1:$B$1\""
    },
    {
      "OnlyOffice JS": "var oDefName = Api.GetDefName(\"numbers\");",
      "VBA": "Set oDefName = ThisWorkbook.Names(\"numbers\")"
    },
    {
      "OnlyOffice JS": "var oRange = oDefName.GetRefersToRange();",
      "VBA": "Set oRange = oDefName.RefersToRange"
    },
    {
      "OnlyOffice JS": "oRange.SetBold(true);",
      "VBA": "oRange.Font.Bold = True"
    }
  ]
}
``````json
{
  "description": "Equivalent VBA code for OnlyOffice API methods",
  "OnlyOffice_JS_vs_Excel_VBA": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(\"2\");",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"2\""
    },
    {
      "OnlyOffice_JS": "Api.AddDefName(\"name\", \"Sheet1!$A$1:$B$1\");",
      "Excel_VBA": "Names.Add Name:=\"name\", RefersTo:=Sheet1.Range(\"A1:B1\")"
    },
    {
      "OnlyOffice_JS": "var oDefName = Api.GetDefName(\"name\");",
      "Excel_VBA": "Set oDefName = Names(\"name\")"
    },
    {
      "OnlyOffice_JS": "oDefName.SetName(\"new_name\");",
      "Excel_VBA": "oDefName.Name = \"new_name\""
    },
    {
      "OnlyOffice_JS": "var oNewDefName = Api.GetDefName(\"new_name\");",
      "Excel_VBA": "Set oNewDefName = Names(\"new_name\")"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"The new name of the range: \" + oNewDefName.GetName());",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"The new name of the range: \" & oNewDefName.Name"
    }
  ]
}
```**Description:**  
This code sets values in cells A1 and B1, calculates their sum in C1, defines a named range `summa` referring to A1:B1, sets a formula for `summa`, and writes a description in cell A3.

```json
{
  "RAG_Table": [
    {
      "OnlyOffice_JS": "// Get Active Sheet",
      "Excel_VBA": "' Get Active Sheet\nDim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(\"2\");",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"2\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C1\").SetValue(\"=SUM(A1:B1)\");",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Formula = \"=SUM(A1:B1)\""
    },
    {
      "OnlyOffice_JS": "Api.AddDefName(\"summa\", \"Sheet1!$A$1:$B$1\");",
      "Excel_VBA": "ThisWorkbook.Names.Add Name:=\"summa\", RefersTo:=\"=Sheet1!$A$1:$B$1\""
    },
    {
      "OnlyOffice_JS": "var oDefName = Api.GetDefName(\"summa\");",
      "Excel_VBA": "Dim oDefName As Name\nSet oDefName = ThisWorkbook.Names(\"summa\")"
    },
    {
      "OnlyOffice_JS": "oDefName.SetRefersTo(\"=SUM(A1:B1)\");",
      "Excel_VBA": "oDefName.RefersTo = \"=SUM(A1:B1)\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"The name 'summa' refers to the formula from the cell C1.\");",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"The name 'summa' refers to the formula from the cell C1.\""
    }
  ]
}
``````json
{
  "description": "This code sets values in cells A1 and B1, defines a named range, renames it, retrieves the new name, and writes a message in cell A3 with the new range name.",
  "methods": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = \"1\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(\"2\");",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"2\""
    },
    {
      "OnlyOffice_JS": "Api.AddDefName(\"name\", \"Sheet1!$A$1:$B$1\");",
      "Excel_VBA": "Names.Add Name:=\"name\", RefersTo:=\"=Sheet1!$A$1:$B$1\""
    },
    {
      "OnlyOffice_JS": "var oDefName = Api.GetDefName(\"name\");",
      "Excel_VBA": "Dim oDefName As Name\nSet oDefName = Names(\"name\")"
    },
    {
      "OnlyOffice_JS": "oDefName.SetName(\"new_name\");",
      "Excel_VBA": "oDefName.Name = \"new_name\""
    },
    {
      "OnlyOffice_JS": "var oNewDefName = Api.GetDefName(\"new_name\");",
      "Excel_VBA": "Dim oNewDefName As Name\nSet oNewDefName = Names(\"new_name\")"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"The new name of the range: \" + oNewDefName.GetName());",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"The new name of the range: \" & oNewDefName.Name"
    }
  ]
}
``````json
{
  "description": "Sets values in cells A1 and B1, assigns a SUM formula to cell C1, defines and modifies a named range 'summa', and adds a descriptive text to cell A3.",
  "code_comparison": {
    "headers": ["OnlyOffice JS", "Excel VBA"],
    "rows": [
      [
        "var oWorksheet = Api.GetActiveSheet();",
        "Set oWorksheet = ActiveSheet"
      ],
      [
        "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
        "Range(\"A1\").Value = 1"
      ],
      [
        "oWorksheet.GetRange(\"B1\").SetValue(\"2\");",
        "Range(\"B1\").Value = 2"
      ],
      [
        "oWorksheet.GetRange(\"C1\").SetValue(\"=SUM(A1:B1)\");",
        "Range(\"C1\").Formula = \"=SUM(A1:B1)\""
      ],
      [
        "Api.AddDefName(\"summa\", \"Sheet1!$A$1:$B$1\");",
        "Names.Add Name:=\"summa\", RefersTo:=Range(\"A1:B1\")"
      ],
      [
        "var oDefName = Api.GetDefName(\"summa\");",
        "Set oDefName = Names(\"summa\")"
      ],
      [
        "oDefName.SetRefersTo(\"=SUM(A1:B1)\");",
        "oDefName.RefersTo = \"=SUM(A1:B1)\""
      ],
      [
        "oWorksheet.GetRange(\"A3\").SetValue(\"The name 'summa' refers to the formula from the cell C1.\");",
        "Range(\"A3\").Value = \"The name 'summa' refers to the formula from the cell C1.\""
      ]
    ]
  }
}
``````json
{
  "description": "This example shows how to get the application ID from the OLE object.",
  "table": {
    "columns": ["VBA", "OnlyOfficeJS"],
    "rows": [
      {
        "VBA": "Sub GetOLEApplicationID()\n    Dim oWorksheet As Worksheet\n    Dim oOleObject As OLEObject\n    Dim sAppId As String\n\n    Set oWorksheet = ActiveSheet\n    Set oOleObject = oWorksheet.OLEObjects.Add(Filename:=\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", _\n                                               Link:=False, _\n                                               DisplayAsIcon:=False, _\n                                               Left:=130 * 36000, _\n                                               Top:=90 * 36000, _\n                                               Width:=2 * 36000, _\n                                               Height:=3 * 36000)\n\n    sAppId = oOleObject.Object.ApplicationID\n    oWorksheet.Range(\"A1\").Value = \"The OLE object application ID: \" & sAppId\nEnd Sub",
        "OnlyOfficeJS": "// This example shows how to get the application ID from the OLE object.\nvar oWorksheet = Api.GetActiveSheet();\nvar oOleObject = oWorksheet.AddOleObject(\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\", 0, 2 * 36000, 4, 3 * 36000);\nvar sAppId = oOleObject.GetApplicationId();\noWorksheet.GetRange(\"A1\").SetValue(\"The OLE object application ID: \" + sAppId);"
      }
    ]
  }
}
```**Equivalent OnlyOffice JS and Excel VBA Methods**

```json
{
  "Table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oOleObject = oWorksheet.AddOleObject(\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\", 0, 2 * 36000, 4, 3 * 36000);",
      "VBA": "Set oOleObject = oWorksheet.OLEObjects.Add(Filename:=\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", Link:=False, DisplayAsIcon:=False, Left:=130 * 36000, Top:=90 * 36000, Width:=2 * 36000, Height:=3 * 36000)"
    },
    {
      "OnlyOffice_JS": "var sType = oOleObject.GetClassType();",
      "VBA": "sType = oOleObject.progId"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"Class type: \" + sType);",
      "VBA": "oWorksheet.Range(\"A1\").Value = \"Class type: \" & sType"
    }
  ]
}
``````json
{
  "RAGTable": {
    "Headers": [
      "This example shows how to get the string data from the OLE object.",
      "OnlyOffice JS",
      "Excel VBA"
    ],
    "Rows": [
      {
        "OnlyOffice JS": "// This example shows how to get the string data from the OLE object.\nvar oWorksheet = Api.GetActiveSheet();\nvar oOleObject = oWorksheet.AddOleObject(\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\", 0, 2 * 36000, 4, 3 * 36000);\nvar sData = oOleObject.GetData();\noWorksheet.GetRange(\"A1\").SetValue(\"The OLE object data: \" + sData);",
        "Excel VBA": "' This example shows how to get the string data from the OLE object.\nSub GetOLEObjectData()\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ActiveSheet\n    Dim oOleObject As OLEObject\n    Set oOleObject = oWorksheet.OLEObjects.Add(Filename:=\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", Link:=False, DisplayAsIcon:=False, Left:=130 * 360, Top:=90 * 360, Width:=200, Height:=200)\n    Dim sData As String\n    sData = oOleObject.Object.GetData()\n    oWorksheet.Range(\"A1\").Value = \"The OLE object data: \" & sData\nEnd Sub"
      }
    ]
  }
}
```**This code demonstrates how to retrieve the application ID from an OLE object in OnlyOffice using JavaScript and its equivalent implementation in Excel VBA.**

```json
{
  "MethodMappings": [
    {
      "OnlyOffice JS": "Api.GetActiveSheet()",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.AddOleObject(\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\", 0, 2 * 36000, 4, 3 * 36000)",
      "Excel VBA": "Set oOleObject = oWorksheet.OLEObjects.Add(Filename:=\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", Left:=130 * 36000, Top:=90 * 36000, Link:=False, DisplayAsIcon:=False)"
    },
    {
      "OnlyOffice JS": "oOleObject.GetApplicationId()",
      "Excel VBA": "sAppId = oOleObject.Object.ApplicationID"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"The OLE object application ID: \" + sAppId)",
      "Excel VBA": "Range(\"A1\").Value = \"The OLE object application ID: \" & sAppId"
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet",
    "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();"
  },
  {
    "Description": "Add an OLE Object to the worksheet",
    "VBA": "Set oOleObject = oWorksheet.OLEObjects.Add(Filename:=\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", Link:=False, DisplayAsIcon:=True, IconLabel:=\"https://youtu.be/SKGz4pmnpgY\")\n oOleObject.Left = 130 * 36000\n oOleObject.Top = 90 * 36000\n oOleObject.Width = 2 * 36000\n oOleObject.Height = 3 * 36000",
    "OnlyOfficeJS": "var oOleObject = oWorksheet.AddOleObject(\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\", 0, 2 * 36000, 4, 3 * 36000);"
  },
  {
    "Description": "Get the class type of the OLE Object",
    "VBA": "sType = oOleObject.progID",
    "OnlyOfficeJS": "var sType = oOleObject.GetClassType();"
  },
  {
    "Description": "Set value of cell A1",
    "VBA": "oWorksheet.Range(\"A1\").Value = \"Class type: \" & sType",
    "OnlyOfficeJS": "oWorksheet.GetRange(\"A1\").SetValue(\"Class type: \" + sType);"
  }
]
``````json
{
  "Description": "This example shows how to get the string data from the OLE object.",
  "Code": [
    {
      "OnlyOffice JS": "// This example shows how to get the string data from the OLE object.\nvar oWorksheet = Api.GetActiveSheet();\nvar oOleObject = oWorksheet.AddOleObject(\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\", 0, 2 * 36000, 4, 3 * 36000);\nvar sData = oOleObject.GetData();\noWorksheet.GetRange(\"A1\").SetValue(\"The OLE object data: \" + sData);",
      "Excel VBA": "' This example shows how to get the string data from the OLE object.\nDim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet\nDim oOleObject As OLEObject\nSet oOleObject = oWorksheet.OLEObjects.Add(Filename:=\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", Link:=False, DisplayAsIcon:=True, IconURL:=\"https://youtu.be/SKGz4pmnpgY\", IconLabel:=\"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\", Left:=130 * 36000, Top:=90 * 36000, Width:=2 * 36000, Height:=3 * 36000)\nDim sData As String\nsData = oOleObject.Object.GetData()\noWorksheet.Range(\"A1\").Value = \"The OLE object data: \" & sData"
    }
  ]
}
``````json
{
  "Description": "This code sets the application ID of the current OLE object in the active worksheet.",
  "OnlyOffice_JS": "// This example sets the application ID to the current OLE object.\nvar oWorksheet = Api.GetActiveSheet();\nvar oOleObject = oWorksheet.AddOleObject(\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\", 0, 2 * 36000, 4, 3 * 36000);\noOleObject.SetApplicationId(\"asc.{E5773A43-F9B3-4E81-81D9-CE0A132470E7}\");",
  "Excel_VBA": "' This example sets the application ID to the current OLE object.\nSub SetApplicationID()\n    Dim oWorksheet As Worksheet\n    Dim oOleObject As OLEObject\n    Set oWorksheet = ThisWorkbook.ActiveSheet\n    Set oOleObject = oWorksheet.OLEObjects.Add(Filename:=\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", _\n        Link:=False, _\n        DisplayAsIcon:=False, _\n        Left:=130 * 36000, Top:=90 * 36000, Width:=2 * 36000, Height:=3 * 36000)\n    oOleObject.Object.ApplicationID = \"asc.{E5773A43-F9B3-4E81-81D9-CE0A132470E7}\"\nEnd Sub"
}
``````json
{
  "description": "This example sets the data to the current OLE object.",
  "codeMappings": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oOleObject = oWorksheet.AddOleObject(\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\", 0, 2 * 36000, 4, 3 * 36000);",
      "VBA": "Dim oOleObject As OLEObject\nSet oOleObject = oWorksheet.OLEObjects.Add(Filename:= \"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", Link:=False, DisplayAsIcon:=False, Left:=130 * 36000, Top:=90 * 36000)"
    },
    {
      "OnlyOffice_JS": "oOleObject.SetData(\"https://youtu.be/eJxpkjQG6Ew\");",
      "VBA": "oOleObject.Object.Data = \"https://youtu.be/eJxpkjQG6Ew\""
    }
  ]
}
``````json
{
  "table": {
    "headers": [
      "Description",
      "OnlyOffice JS",
      "Excel VBA"
    ],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
      },
      {
        "Description": "Add OLE Object to the worksheet",
        "OnlyOffice JS": "var oOleObject = oWorksheet.AddOleObject(\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\", 0, 2 * 36000, 4, 3 * 36000);",
        "Excel VBA": "Set oOleObject = oWorksheet.OLEObjects.Add(Filename:= \"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", Link:=False, DisplayAsIcon:=False, Left:=130 * 360, Top:=90 * 360, Width:=2 * 360, Height:=3 * 360)"
      },
      {
        "Description": "Set Application ID for the OLE object",
        "OnlyOffice JS": "oOleObject.SetApplicationId(\"asc.{E5773A43-F9B3-4E81-81D9-CE0A132470E7}\");",
        "Excel VBA": "oOleObject.Object.ApplicationID = \"asc.{E5773A43-F9B3-4E81-81D9-CE0A132470E7}\""
      }
    ]
  }
}
``````json
{
  "description": "This example sets the data to the current OLE object.",
  "code_mappings": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oOleObject = oWorksheet.AddOleObject(\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\", 0, 2 * 36000, 4, 3 * 36000);",
      "Excel_VBA": "Set oOleObject = oWorksheet.OLEObjects.Add(Filename:= \"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", Link:=False, DisplayAsIcon:=False, Left:=130 * 36000, Top:=90 * 36000, Width:=2 * 36000, Height:=3 * 36000)"
    },
    {
      "OnlyOffice_JS": "oOleObject.SetData(\"https://youtu.be/eJxpkjQG6Ew\");",
      "Excel_VBA": "oOleObject.Object.SetData \"https://youtu.be/eJxpkjQG6Ew\""
    }
  ]
}
``````json
[
  {
    "description": "Attach an event handler for worksheet changes",
    "OnlyOffice_JS": "Api.attachEvent(\"onWorksheetChange\", function(oRange){\n    console.log(\"onWorksheetChange\");\n    console.log(oRange.GetAddress());\n});",
    "Excel_VBA": "Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)\n    Debug.Print \"onWorksheetChange\"\n    Debug.Print Target.Address\nEnd Sub"
  },
  {
    "description": "Get the active sheet",
    "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
  },
  {
    "description": "Get the range A1",
    "OnlyOffice_JS": "var oRange = oWorksheet.GetRange(\"A1\");",
    "Excel_VBA": "Dim oRange As Range\nSet oRange = oWorksheet.Range(\"A1\")"
  },
  {
    "description": "Set the value of the range to 1",
    "OnlyOffice_JS": "oRange.SetValue(\"1\");",
    "Excel_VBA": "oRange.Value = \"1\""
  }
]
``````json
{
  "description": "This example adds a Run to the paragraph.",
  "methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "Set oFill = oWorksheet.Shapes.AddShape(msoShapeRectangle, 120, 70, 200, 100).Fill\noFill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "With oWorksheet.Shapes.AddShape(msoShapeRectangle, 120, 70, 200, 100).Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 70, 200, 100)\nWith oShape.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With\nWith oShape.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "Excel VBA": "Set oDocContent = oShape.TextFrame2.TextRange"
    },
    {
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel VBA": "Set oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "OnlyOffice JS": "var oRun = Api.CreateRun();",
      "Excel VBA": "Set oRun = oParagraph.Runs.Add"
    },
    {
      "OnlyOffice JS": "oRun.AddText(\"This is just a sample text run. Nothing special.\");",
      "Excel VBA": "oRun.Text = \"This is just a sample text run. Nothing special.\""
    },
    {
      "OnlyOffice JS": "oParagraph.AddElement(oRun);",
      "Excel VBA": "' Text is already added via oRun.Text assignment"
    }
  ]
}
``````json
// This example adds a line break to the current position and starts the next element from a new line.
{
  "RAG_Table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = Api.GetActiveSheet()"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "Set oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61))"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "Set oStroke = Api.CreateStroke(0, Api.CreateNoFill())"
    },
    {
      "OnlyOffice_JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel_VBA": "Set oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
    },
    {
      "OnlyOffice_JS": "var oDocContent = oShape.GetContent();",
      "Excel_VBA": "Set oDocContent = oShape.GetContent()"
    },
    {
      "OnlyOffice_JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel_VBA": "Set oParagraph = oDocContent.GetElement(0)"
    },
    {
      "OnlyOffice_JS": "oParagraph.SetJc(\"left\");",
      "Excel_VBA": "oParagraph.SetJc \"left\""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"This is a text inside the shape aligned left.\");",
      "Excel_VBA": "oParagraph.AddText \"This is a text inside the shape aligned left.\""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddLineBreak();",
      "Excel_VBA": "oParagraph.AddLineBreak"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"This is a text after the line break.\");",
      "Excel_VBA": "oParagraph.AddText \"This is a text after the line break.\""
    }
  ]
}
``````json
{
  "Description": "This example adds a tab stop to the paragraph.",
  "Code": {
    "OnlyOffice_JS": "// This example adds a tab stop to the paragraph.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"This is just a sample text. After it three tab stops will be added.\");\noParagraph.AddTabStop();\noParagraph.AddTabStop();\noParagraph.AddTabStop();\noParagraph.AddText(\"This is the text which starts after the tab stops.\");",
    "Excel_VBA": "' This example adds a tab stop to the paragraph.\nSub AddShapeWithTabStops()\n    Dim oSheet As Worksheet\n    Dim oShape As Shape\n\n    Set oSheet = ActiveSheet\n\n    ' Add a shape\n    Set oShape = oSheet.Shapes.AddShape(msoShapeFlowchartDatabase, 120, 70, 120, 70)\n\n    ' Set fill color to RGB(255,111,61)\n    oShape.Fill.ForeColor.RGB = RGB(255, 111, 61)\n\n    ' Set no line\n    oShape.Line.Visible = msoFalse\n\n    ' Add text with tabs\n    oShape.TextFrame2.TextRange.Text = \"This is just a sample text. After it three tab stops will be added.\" & vbTab & vbTab & vbTab & \"This is the text which starts after the tab stops.\"\nEnd Sub"
  }
}
```**This code adds some text to a paragraph within a shape on the active worksheet, setting the fill color, stroke, and text alignment.**

```json
{
  "RAGTable": [
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "VBA": "Set oFill = oWorksheet.Shapes.AddShape(msoShapeRectangle, 120, 70, 200, 100).Fill\noFill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOfficeJS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "VBA": "With oWorksheet.Shapes(1).Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOfficeJS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, 120, 70, 200, 100)\nSet oShape.Fill = oFill\nSet oShape.Line = oStroke"
    },
    {
      "OnlyOfficeJS": "var oDocContent = oShape.GetContent();",
      "VBA": "Set oDocContent = oShape.TextFrame"
    },
    {
      "OnlyOfficeJS": "var oParagraph = oDocContent.GetElement(0);",
      "VBA": "With oDocContent.TextRange.Paragraphs(1)"
    },
    {
      "OnlyOfficeJS": "oParagraph.SetJc(\"left\");",
      "VBA": "    .ParagraphFormat.Alignment = xlLeft\nEnd With"
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"This is a text inside the shape aligned left.\");",
      "VBA": "oDocContent.TextRange.Text = \"This is a text inside the shape aligned left.\""
    },
    {
      "OnlyOfficeJS": "oParagraph.AddLineBreak();",
      "VBA": "oDocContent.TextRange.InsertAfter vbCrLf"
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"This is a text after the line break.\");",
      "VBA": "oDocContent.TextRange.InsertAfter \"This is a text after the line break.\""
    }
  ]
}
``````json
{
  "Table": [
    {
      "Description": "Gets the active worksheet",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "Description": "Creates a solid fill with RGB color (255, 111, 61)",
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "VBA": "Set oFill = CreateSolidFill(RGB(255, 111, 61))"
    },
    {
      "Description": "Creates a stroke with no fill",
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "VBA": "Set oStroke = CreateStroke(0, CreateNoFill())"
    },
    {
      "Description": "Adds a shape to the worksheet with specific parameters",
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
    },
    {
      "Description": "Gets the content of the shape",
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "VBA": "Set oDocContent = oShape.Content"
    },
    {
      "Description": "Retrieves the first paragraph element",
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "VBA": "Set oParagraph = oDocContent.Elements(1)" // VBA collections are 1-based
    },
    {
      "Description": "Sets paragraph alignment to left",
      "OnlyOffice JS": "oParagraph.SetJc(\"left\");",
      "VBA": "oParagraph.Alignment = xlLeft" // Assuming xlLeft is the appropriate constant
    },
    {
      "Description": "Adds text to the paragraph",
      "OnlyOffice JS": "oParagraph.AddText(\"This is a text inside the shape aligned left.\");",
      "VBA": "oParagraph.Text = \"This is a text inside the shape aligned left.\""
    },
    {
      "Description": "Adds a line break to the paragraph",
      "OnlyOffice JS": "oParagraph.AddLineBreak();",
      "VBA": "oParagraph.Text = oParagraph.Text & vbCrLf"
    },
    {
      "Description": "Adds additional text after the line break",
      "OnlyOffice JS": "oParagraph.AddText(\"This is a text after the line break.\");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"This is a text after the line break.\""
    },
    {
      "Description": "Copies the paragraph",
      "OnlyOffice JS": "var oParagraph2 = oParagraph.Copy();",
      "VBA": "Set oParagraph2 = oParagraph.Duplicate"
    },
    {
      "Description": "Pushes the copied paragraph to the content",
      "OnlyOffice JS": "oDocContent.Push(oParagraph2);",
      "VBA": "oDocContent.Append oParagraph2"
    }
  ]
}
``````json
{
  "Description": "This example deletes the paragraph.",
  "VBA": "Sub DeleteParagraph()\n    ' Get the active sheet\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ActiveSheet\n\n    ' Add a shape with specific properties\n    Dim oShape As Shape\n    Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 60 * 360, 35 * 360, 200, 150)\n\n    ' Set fill color\n    oShape.Fill.ForeColor.RGB = RGB(255, 111, 61)\n\n    ' Set no line\n    oShape.Line.Visible = msoFalse\n\n    ' Remove all text\n    oShape.TextFrame.Characters.Text = \"\"\n\n    ' Add a new paragraph with text\n    oShape.TextFrame.Characters.Text = \"This is just a sample text.\"\n\n    ' Delete the paragraph\n    oShape.TextFrame.Characters.Text = \"\"\n\n    ' Set cell A9 value\n    oWorksheet.Range(\"A9\").Value = \"The paragraph from the shape content was removed.\"\nEnd Sub",
  "OnlyOfficeJS": "// This example deletes the paragraph.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\noDocContent.RemoveAllElements();\nvar oParagraph = Api.CreateParagraph();\noParagraph.AddText(\"This is just a sample text.\");\noDocContent.Push(oParagraph);\noParagraph.Delete();\noWorksheet.GetRange(\"A9\").SetValue(\"The paragraph from the shape content was removed.\");"
}
``````json
{
  "description": "This example gets a class type and inserts it into the document.",
  "OnlyOffice_JS": "// This example gets a class type and inserts it into the document.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar sClassType = oParagraph.GetClassType();\noParagraph.AddText(\"Class Type = \" + sClassType);",
  "Excel_VBA": "' This example gets a class type and inserts it into the document.\nDim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet\n\nDim oFill As Object\nSet oFill = CreateSolidFill(CreateRGBColor(255, 111, 61))\n\nDim oStroke As Object\nSet oStroke = CreateStroke(0, CreateNoFill())\n\nDim oShape As Shape\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)\n\nDim oDocContent As Object\nSet oDocContent = oShape.GetContent()\n\nDim oParagraph As Object\nSet oParagraph = oDocContent.GetElement(0)\n\nDim sClassType As String\nsClassType = oParagraph.GetClassType()\n\noParagraph.AddText \"Class Type = \" & sClassType"
}
``````json
{
  "description": "This example shows how to get a paragraph element using the position specified.",
  "OnlyOfficeJS": "// This example shows how to get a paragraph element using the position specified.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.RemoveAllElements();\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is the text for the first text run. Do not forget a space at its end to separate from the second one. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noRun.AddText(\"This is the text for the second run. We will set it bold afterwards. It also needs space at its end. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noRun.AddText(\"This is the text for the third run. It ends the paragraph.\");\noParagraph.AddElement(oRun);\noRun = oParagraph.GetElement(2);\noRun.SetBold(true);",
  "ExcelVBA": "' This example shows how to get a paragraph element using the position specified.\nSub Example()\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = Api.GetActiveSheet()\n    Dim oFill As Fill\n    Set oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61))\n    Dim oStroke As Stroke\n    Set oStroke = Api.CreateStroke(0, Api.CreateNoFill())\n    Dim oShape As Shape\n    Set oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)\n    Dim oDocContent As Content\n    Set oDocContent = oShape.GetContent()\n    Dim oParagraph As Paragraph\n    Set oParagraph = oDocContent.GetElement(0)\n    oParagraph.RemoveAllElements()\n    Dim oRun As Run\n    Set oRun = Api.CreateRun()\n    oRun.AddText \"This is the text for the first text run. Do not forget a space at its end to separate from the second one. \"\n    oParagraph.AddElement oRun\n    Set oRun = Api.CreateRun()\n    oRun.AddText \"This is the text for the second run. We will set it bold afterwards. It also needs space at its end. \"\n    oParagraph.AddElement oRun\n    Set oRun = Api.CreateRun()\n    oRun.AddText \"This is the text for the third run. It ends the paragraph.\"\n    oParagraph.AddElement oRun\n    Set oRun = oParagraph.GetElement(2)\n    oRun.SetBold True\nEnd Sub"
}
``````json
{
  "description": "This example demonstrates how to retrieve the number of elements in the current paragraph by adding a shape, manipulating its content, and displaying element counts before and after adding a text run.",
  "OnlyOffice_JS": "// This example shows how to get a number of elements in the current paragraph.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape('flowChartOnlineStorage', 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.RemoveAllElements();\nvar oRun = Api.CreateRun();\noRun.AddText('Number of paragraph elements at this point: ');\noRun.AddTabStop();\noRun.AddText('' + oParagraph.GetElementsCount());\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\noRun.AddText('Number of paragraph elements after we added a text run: ');\noRun.AddTabStop();\noRun.AddText('' + oParagraph.GetElementsCount());",
  "Excel_VBA": "' This example shows how to get a number of elements in the current paragraph.\nSub Example()\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ActiveSheet\n\n    ' Create a solid fill color (requires custom function)\n    Dim oFill As Object\n    Set oFill = CreateSolidFill(RGB(255, 111, 61))\n\n    ' Create a stroke with no fill (requires custom function)\n    Dim oStroke As Object\n    Set oStroke = CreateStroke(0, Nothing)\n\n    ' Add a shape to the worksheet\n    Dim oShape As Shape\n    Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 70, 200, 100)\n\n    ' Get the text content of the shape\n    Dim oDocContent As TextRange\n    Set oDocContent = oShape.TextFrame.TextRange\n\n    ' Clear existing text\n    oDocContent.Text = ""\n\n    ' Add initial text run\n    oDocContent.Text = "Number of paragraph elements at this point: " & oDocContent.Characters.Count\n    oDocContent.Text = oDocContent.Text & vbTab & oDocContent.Characters.Count & vbCrLf\n\n    ' Add second text run\n    oDocContent.Text = oDocContent.Text & "Number of paragraph elements after we added a text run: " & oDocContent.Characters.Count\nEnd Sub\n\n' Note: VBA does not have direct equivalents for some OnlyOffice API methods. Custom functions like CreateSolidFill and CreateStroke need to be implemented as needed."
}
``````json
{
  "RAG_Table": [
    {
      "Description": "Get the active worksheet.",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Create a solid fill with specific RGB color.",
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "Set oFill = RGB(255, 111, 61)"
    },
    {
      "Description": "Create a stroke with no fill.",
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "With oShape.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "Description": "Add a shape to the worksheet.",
      "OnlyOffice_JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel_VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartData, Left:=120, Top:=70, Width:=200, Height:=150)\nWith oShape.Fill\n    .ForeColor.RGB = oFill\n    .Visible = msoTrue\nEnd With"
    },
    {
      "Description": "Get the content of the shape.",
      "OnlyOffice_JS": "var oDocContent = oShape.GetContent();",
      "Excel_VBA": "Set oDocContent = oShape.TextFrame2.TextRange"
    },
    {
      "Description": "Get the first paragraph element.",
      "OnlyOffice_JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel_VBA": "Set oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "Description": "Add text to the paragraph.",
      "OnlyOffice_JS": "oParagraph.AddText(\"This is a paragraph with the indent of 1 inch set to the first line. \");",
      "Excel_VBA": "oParagraph.Text = \"This is a paragraph with the indent of 1 inch set to the first line. \""
    },
    {
      "Description": "Add additional text lines to the paragraph.",
      "OnlyOffice_JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");",
      "Excel_VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes. \"\n oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes. \"\n oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes.\""
    },
    {
      "Description": "Set the first line indentation to 1 inch.",
      "OnlyOffice_JS": "oParagraph.SetIndFirstLine(1440);",
      "Excel_VBA": "With oParagraph.ParagraphFormat\n    .FirstLineIndent = InchesToPoints(1)\nEnd With"
    },
    {
      "Description": "Get the first line indentation value.",
      "OnlyOffice_JS": "var nIndFirstLine = oParagraph.GetIndFirstLine();",
      "Excel_VBA": "nIndFirstLine = oParagraph.ParagraphFormat.FirstLineIndent"
    },
    {
      "Description": "Create a new paragraph.",
      "OnlyOffice_JS": "oParagraph = Api.CreateParagraph();",
      "Excel_VBA": "Set oParagraph = oDocContent.Paragraphs.Add"
    },
    {
      "Description": "Add text displaying the first line indentation value.",
      "OnlyOffice_JS": "oParagraph.AddText(\"First line indent: \" + nIndFirstLine);",
      "Excel_VBA": "oParagraph.Text = \"First line indent: \" & nIndFirstLine"
    },
    {
      "Description": "Push the new paragraph to the document content.",
      "OnlyOffice_JS": "oDocContent.Push(oParagraph);",
      "Excel_VBA": "oDocContent.Paragraphs.Add oParagraph"
    }
  ]
}
``````json
{
  "Description": "This example shows how to get the paragraph left side indentation.",
  "Code": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "oFill = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "With oShape.Line\n  .Weight = 0\n  .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 70, 2, 3)\noShape.Fill.ForeColor.RGB = oFill\nWith oShape.Line\n  .Weight = 0\n  .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "Excel VBA": "Set oDocContent = oShape.TextFrame.TextRange"
    },
    {
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel VBA": "Set oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is a paragraph with the indent of 2 inches set to it. \");",
      "Excel VBA": "oParagraph.Text = \"This is a paragraph with the indent of 2 inches set to it. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "Excel VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOffice JS": "oParagraph.SetIndLeft(2880);",
      "Excel VBA": "oParagraph.ParagraphFormat.LeftIndent = InchesToPoints(2)"
    },
    {
      "OnlyOffice JS": "var nIndLeft = oParagraph.GetIndLeft();",
      "Excel VBA": "nIndLeft = oParagraph.ParagraphFormat.LeftIndent"
    },
    {
      "OnlyOffice JS": "oParagraph = Api.CreateParagraph();",
      "Excel VBA": "Set oParagraph = oDocContent.Paragraphs.Add"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"Left indent: \" + nIndLeft);",
      "Excel VBA": "oParagraph.Text = \"Left indent: \" & nIndLeft"
    },
    {
      "OnlyOffice JS": "oDocContent.Push(oParagraph);",
      "Excel VBA": "oDocContent.InsertAfter oParagraph"
    }
  ]
}
``````json
{
  "description": "This example shows how to get the paragraph right side indentation.",
  "methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = Api.GetActiveSheet()"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "Set oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61))"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "Set oStroke = Api.CreateStroke(0, Api.CreateNoFill())"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Set oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "Excel VBA": "Set oDocContent = oShape.GetContent()"
    },
    {
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel VBA": "Set oParagraph = oDocContent.GetElement(0)"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is a paragraph with the right offset of 2 inches set to it. \");",
      "Excel VBA": "oParagraph.AddText \"This is a paragraph with the right offset of 2 inches set to it. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "Excel VBA": "oParagraph.AddText \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOffice JS": "oParagraph.SetJc(\"right\");",
      "Excel VBA": "oParagraph.SetJc \"right\""
    },
    {
      "OnlyOffice JS": "oParagraph.SetIndRight(2880);",
      "Excel VBA": "oParagraph.SetIndRight 2880"
    },
    {
      "OnlyOffice JS": "var nIndRight = oParagraph.GetIndRight();",
      "Excel VBA": "nIndRight = oParagraph.GetIndRight()"
    },
    {
      "OnlyOffice JS": "oParagraph = Api.CreateParagraph();",
      "Excel VBA": "Set oParagraph = Api.CreateParagraph()"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"Right indent: \" + nIndRight);",
      "Excel VBA": "oParagraph.AddText \"Right indent: \" & nIndRight"
    },
    {
      "OnlyOffice JS": "oDocContent.Push(oParagraph);",
      "Excel VBA": "oDocContent.Push oParagraph"
    }
  ]
}
``````json
{
  "Description": "This example shows how to get the paragraph contents justification.",
  "CodeEquivalents": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "VBA": "oShape.Fill.ForeColor.RGB = RGB(255, 111, 61)\noShape.Fill.Visible = msoTrue\noShape.Fill.Solid"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "VBA": "With oShape.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 70, 200, 150) ' Adjust width and height as needed"
    },
    {
      "OnlyOffice_JS": "var oDocContent = oShape.GetContent();",
      "VBA": "Set oDocContent = oShape.TextFrame"
    },
    {
      "OnlyOffice_JS": "var oParagraph = oDocContent.GetElement(0);",
      "VBA": "Set oParagraph = oShape.TextFrame.Paragraphs(1)"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"This is a paragraph with the text in it aligned by the center. \");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"This is a paragraph with the text in it aligned by the center. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes.\""
    },
    {
      "OnlyOffice_JS": "oParagraph.SetJc(\"center\");",
      "VBA": "oShape.TextFrame.HorizontalAlignment = xlCenter"
    },
    {
      "OnlyOffice_JS": "var sJc = oParagraph.GetJc();",
      "VBA": "sJc = oShape.TextFrame.HorizontalAlignment"
    },
    {
      "OnlyOffice_JS": "oParagraph = Api.CreateParagraph();",
      "VBA": "Set oParagraph = oShape.TextFrame.Paragraphs.Add"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"Justification: \" + sJc);",
      "VBA": "oParagraph.Text = \"Justification: \" & sJc"
    },
    {
      "OnlyOffice_JS": "oDocContent.Push(oParagraph);",
      "VBA": "' Text is already part of the TextFrame after setting oParagraph.Text"
    }
  ]
}
``````json
{
  "Description": "This example shows how to get the next paragraph.",
  "Methods": [
    {
      "Step": 1,
      "VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Step": 2,
      "VBA": "Set oFill = oWorksheet.Shapes.Fill.ForeColor.RGB = RGB(255, 111, 61)",
      "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));"
    },
    {
      "Step": 3,
      "VBA": "With oShape.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With",
      "OnlyOfficeJS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());"
    },
    {
      "Step": 4,
      "VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowChartOnlineStorage, 60 * 36000, 35 * 36000, 2 * 36000, 3 * 36000)",
      "OnlyOfficeJS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);"
    },
    {
      "Step": 5,
      "VBA": "Set oDocContent = oShape.TextFrame.TextRange",
      "OnlyOfficeJS": "var oDocContent = oShape.GetContent();"
    },
    {
      "Step": 6,
      "VBA": "oDocContent.Text = \"\"",
      "OnlyOfficeJS": "oDocContent.RemoveAllElements();"
    },
    {
      "Step": 7,
      "VBA": "oDocContent.Text = \"This is the first paragraph.\"",
      "OnlyOfficeJS": "var oParagraph1 = Api.CreateParagraph();\noParagraph1.AddText(\"This is the first paragraph.\");\noDocContent.Push(oParagraph1);"
    },
    {
      "Step": 8,
      "VBA": "oDocContent.Text = oDocContent.Text & vbCrLf & \"This is the second paragraph.\"",
      "OnlyOfficeJS": "var oParagraph2 = Api.CreateParagraph();\noParagraph2.AddText(\"This is the second paragraph.\");\noDocContent.Push(oParagraph2);"
    },
    {
      "Step": 9,
      "VBA": "Set oNextParagraph = oDocContent.Paragraphs(2)",
      "OnlyOfficeJS": "var oNextParagraph = oParagraph1.GetNext();"
    },
    {
      "Step": 10,
      "VBA": "oNextParagraph.Font.Bold = True",
      "OnlyOfficeJS": "oNextParagraph.SetBold(true);"
    }
  ]
}
``````json
{
  "Description": "This example shows how to get the paragraph properties.",
  "Methods": [
    {
      "Action": "Get the active worksheet",
      "VBA": "Set oWorksheet = ActiveSheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Action": "Create a solid fill with RGB color (255, 111, 61)",
      "VBA": "Set oFill = CreateSolidFill(CreateRGBColor(255, 111, 61))",
      "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));"
    },
    {
      "Action": "Create a stroke with weight 0 and no fill",
      "VBA": "Set oStroke = CreateStroke(0, CreateNoFill())",
      "OnlyOfficeJS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());"
    },
    {
      "Action": "Add a shape to the worksheet",
      "VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)",
      "OnlyOfficeJS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);"
    },
    {
      "Action": "Get the content of the shape",
      "VBA": "Set oDocContent = oShape.TextFrame.TextRange",
      "OnlyOfficeJS": "var oDocContent = oShape.GetContent();"
    },
    {
      "Action": "Get the first paragraph",
      "VBA": "Set oParagraph = oDocContent.Paragraphs(1)",
      "OnlyOfficeJS": "var oParagraph = oDocContent.GetElement(0);"
    },
    {
      "Action": "Get paragraph properties",
      "VBA": "Set oParaPr = oParagraph.ParagraphFormat",
      "OnlyOfficeJS": "var oParaPr = oParagraph.GetParaPr();"
    },
    {
      "Action": "Set spacing after the paragraph to 1440",
      "VBA": "oParaPr.SpaceAfter = 1440",
      "OnlyOfficeJS": "oParaPr.SetSpacingAfter(1440);"
    },
    {
      "Action": "Add text to the first paragraph",
      "VBA": "oParagraph.Text = oParagraph.Text & \"This is an example of setting a space after a paragraph. \" & _\n\"The second paragraph will have an offset of one inch from the top. \" & _\n\"This is due to the fact that the first paragraph has this offset enabled.\"",
      "OnlyOfficeJS": "oParagraph.AddText(\"This is an example of setting a space after a paragraph. \");\noParagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");\noParagraph.AddText(\"This is due to the fact that the first paragraph has this offset enabled.\");"
    },
    {
      "Action": "Create a new paragraph",
      "VBA": "Set oParagraph = oDocContent.Paragraphs.Add",
      "OnlyOfficeJS": "oParagraph = Api.CreateParagraph();"
    },
    {
      "Action": "Add text to the second paragraph",
      "VBA": "oParagraph.Text = \"This is the second paragraph and it is one inch away from the first paragraph.\"",
      "OnlyOfficeJS": "oParagraph.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");"
    },
    {
      "Action": "Push the new paragraph to the document content",
      "VBA": "oDocContent.Paragraphs.Add oParagraph",
      "OnlyOfficeJS": "oDocContent.Push(oParagraph);"
    }
  ]
}
``````json
{
  "Description": "This code creates a shape on the active worksheet, sets its fill and stroke, adds two paragraphs to the shape's content, and makes the first paragraph bold by accessing the previous paragraph of the second one.",
  "CodeMapping": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = Api.GetActiveSheet()"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "Set oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61))"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "Set oStroke = Api.CreateStroke(0, Api.CreateNoFill())"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Set oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "Excel VBA": "Set oDocContent = oShape.GetContent()"
    },
    {
      "OnlyOffice JS": "oDocContent.RemoveAllElements();",
      "Excel VBA": "oDocContent.RemoveAllElements"
    },
    {
      "OnlyOffice JS": "var oParagraph1 = Api.CreateParagraph();",
      "Excel VBA": "Set oParagraph1 = Api.CreateParagraph()"
    },
    {
      "OnlyOffice JS": "oParagraph1.AddText(\"This is the first paragraph.\");",
      "Excel VBA": "oParagraph1.AddText \"This is the first paragraph.\""
    },
    {
      "OnlyOffice JS": "oDocContent.Push(oParagraph1);",
      "Excel VBA": "oDocContent.Push oParagraph1"
    },
    {
      "OnlyOffice JS": "var oParagraph2 = Api.CreateParagraph();",
      "Excel VBA": "Set oParagraph2 = Api.CreateParagraph()"
    },
    {
      "OnlyOffice JS": "oParagraph2.AddText(\"This is the second paragraph.\");",
      "Excel VBA": "oParagraph2.AddText \"This is the second paragraph.\""
    },
    {
      "OnlyOffice JS": "oDocContent.Push(oParagraph2);",
      "Excel VBA": "oDocContent.Push oParagraph2"
    },
    {
      "OnlyOffice JS": "var oPreviousParagraph = oParagraph2.GetPrevious();",
      "Excel VBA": "Set oPreviousParagraph = oParagraph2.GetPrevious()"
    },
    {
      "OnlyOffice JS": "oPreviousParagraph.SetBold(true);",
      "Excel VBA": "oPreviousParagraph.SetBold True"
    }
  ]
}
``````
// This code creates a shape with specific fill and stroke properties, adds text paragraphs to the shape, and sets spacing after the first paragraph.

{
  "RAG_Table": [
    {
      "OnlyOffice_JS": "Api.GetActiveSheet()",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "Api.CreateRGBColor(255, 111, 61)",
      "Excel_VBA": "RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "Api.CreateSolidFill(color)",
      "Excel_VBA": "oShape.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "Api.CreateNoFill()",
      "Excel_VBA": "oShape.Line.Visible = msoFalse"
    },
    {
      "OnlyOffice_JS": "Api.CreateStroke(0, fill)",
      "Excel_VBA": "With oShape.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "oWorksheet.AddShape(type, width, height, fill, stroke, left, top, rotation, zOrder)",
      "Excel_VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartProcess, Left, Top, Width, Height)\nWith oShape\n    .Fill.ForeColor.RGB = RGB(255, 111, 61)\n    .Line.Visible = msoFalse\n    .Rotation = Rotation\n    .ZOrder ZOrder\nEnd With"
    },
    {
      "OnlyOffice_JS": "oShape.GetContent()",
      "Excel_VBA": "Set oDocContent = oShape.TextFrame2.TextRange"
    },
    {
      "OnlyOffice_JS": "oDocContent.GetElement(index)",
      "Excel_VBA": "Set oParagraph1 = oDocContent.Paragraphs(index + 1)"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(text)",
      "Excel_VBA": "oParagraph1.Text = oParagraph1.Text & \"This is an example of setting a space after a paragraph. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.SetSpacingAfter(value)",
      "Excel_VBA": "oParagraph1.ParagraphFormat.SpaceAfter = value"
    },
    {
      "OnlyOffice_JS": "Api.CreateParagraph()",
      "Excel_VBA": "Set oParagraph2 = oDocContent.Paragraphs.Add"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddLineBreak()",
      "Excel_VBA": "oParagraph2.Text = oParagraph2.Text & vbLf"
    },
    {
      "OnlyOffice_JS": "oParagraph.GetSpacingAfter()",
      "Excel_VBA": "nSpacingAfter = oParagraph1.ParagraphFormat.SpaceAfter"
    },
    {
      "OnlyOffice_JS": "oDocContent.Push(oParagraph)",
      "Excel_VBA": "oParagraph2.InsertAfter \"Spacing after: \" & nSpacingAfter"
    }
  ]
}
``````json
{
  "description": "This code demonstrates how to create and manipulate shapes and paragraphs, including setting spacing before a paragraph, using OnlyOffice API in JavaScript and its equivalent in Excel VBA.",
  "methods": [
    {
      "OnlyOffice_JS": "Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "Api.CreateRGBColor(255, 111, 61);",
      "Excel_VBA": "RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "Set oFill = CreateSolidFill(RGB(255, 111, 61))"
    },
    {
      "OnlyOffice_JS": "Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "Set oStroke = CreateStroke(0, CreateNoFill())"
    },
    {
      "OnlyOffice_JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel_VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
    },
    {
      "OnlyOffice_JS": "oShape.GetContent();",
      "Excel_VBA": "Set oDocContent = oShape.TextFrame.Characters"
    },
    {
      "OnlyOffice_JS": "oDocContent.GetElement(0);",
      "Excel_VBA": "Set oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"This is an example of setting a space before a paragraph.\");",
      "Excel_VBA": "oParagraph.Text = oParagraph.Text & \"This is an example of setting a space before a paragraph.\""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");",
      "Excel_VBA": "oParagraph.Text = oParagraph.Text & \"The second paragraph will have an offset of one inch from the top. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"This is due to the fact that the second paragraph has this offset enabled.\");",
      "Excel_VBA": "oParagraph.Text = oParagraph.Text & \"This is due to the fact that the second paragraph has this offset enabled.\""
    },
    {
      "OnlyOffice_JS": "Api.CreateParagraph();",
      "Excel_VBA": "Set oParagraph2 = oDocContent.Paragraphs.Add"
    },
    {
      "OnlyOffice_JS": "oParagraph2.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");",
      "Excel_VBA": "oParagraph2.Text = \"This is the second paragraph and it is one inch away from the first paragraph.\""
    },
    {
      "OnlyOffice_JS": "oParagraph2.SetSpacingBefore(1440);",
      "Excel_VBA": "oParagraph2.SpaceBefore = 1440"
    },
    {
      "OnlyOffice_JS": "oDocContent.Push(oParagraph2);",
      "Excel_VBA": "oDocContent.Paragraphs.Add(oParagraph2)"
    },
    {
      "OnlyOffice_JS": "oParagraph2.GetSpacingBefore();",
      "Excel_VBA": "nSpacingBefore = oParagraph2.SpaceBefore"
    },
    {
      "OnlyOffice_JS": "Api.CreateParagraph();",
      "Excel_VBA": "Set oParagraph = oDocContent.Paragraphs.Add"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"Spacing before: \" + nSpacingBefore);",
      "Excel_VBA": "oParagraph.Text = \"Spacing before: \" & nSpacingBefore"
    },
    {
      "OnlyOffice_JS": "oDocContent.Push(oParagraph);",
      "Excel_VBA": "oDocContent.Paragraphs.Add(oParagraph)"
    }
  ]
}
``````json
{
  "description": "This code creates a shape with specific fill and stroke, adds text with custom line spacing, and retrieves the paragraph's line spacing rule.",
  "methods": [
    {
      "OnlyOffice_JS": "Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "oFill = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "With oShape.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 80 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel_VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 80, 2, 3)\nWith oShape.Fill\n    .ForeColor.RGB = oFill\nEnd With\nWith oShape.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "oShape.GetContent();",
      "Excel_VBA": "Set oDocContent = oShape.TextFrame"
    },
    {
      "OnlyOffice_JS": "oDocContent.GetElement(0);",
      "Excel_VBA": "Set oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "OnlyOffice_JS": "oParagraph.SetSpacingLine(3 * 240, \"auto\");",
      "Excel_VBA": "With oParagraph\n    .LineSpacing = 3 * 240\n    .Alignment = xlHAlignCenter ' Assuming \"auto\" aligns center\nEnd With"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\");",
      "Excel_VBA": "oParagraph.Text = \"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddLineBreak();",
      "Excel_VBA": "oParagraph.Text = oParagraph.Text & vbCrLf"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "Excel_VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "Excel_VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddLineBreak();",
      "Excel_VBA": "oParagraph.Text = oParagraph.Text & vbCrLf"
    },
    {
      "OnlyOffice_JS": "oParagraph.GetSpacingLineRule();",
      "Excel_VBA": "sSpacingLineRule = oParagraph.LineSpacingRule"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"Spacing line rule: \" + sSpacingLineRule);",
      "Excel_VBA": "oParagraph.Text = oParagraph.Text & \"Spacing line rule: \" & sSpacingLineRule"
    }
  ]
}
``````json
{
  "Description": "This example shows how to get the paragraph line spacing value.",
  "VBA": "Sub GetParagraphLineSpacing()\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ActiveSheet\n\n    ' Add a flowchart shape\n    Dim oShape As Shape\n    Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 80, 120, 80)\n\n    ' Set the fill color\n    oShape.Fill.ForeColor.RGB = RGB(255, 111, 61)\n\n    ' Remove the stroke\n    oShape.Line.Visible = msoFalse\n\n    ' Access the text frame\n    With oShape.TextFrame2\n        ' Set line spacing to 3 times the common paragraph line spacing\n        .TextRange.ParagraphFormat.SpaceWithin = 3\n        .TextRange.ParagraphFormat.LineSpacingRule = msoLineSpaceMultiple\n\n        ' Add text\n        .TextRange.Text = \"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\" & vbCrLf & _\n                          \"These sentences are used to add lines for demonstrative purposes. \" & _\n                          \"These sentences are used to add lines for demonstrative purposes. \" & vbCrLf & _\n                          \"Spacing line value: \" & .TextRange.ParagraphFormat.SpaceWithin\n    End With\nEnd Sub",
  "OnlyOffice_JS": "// This example shows how to get the paragraph line spacing value.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 80 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetSpacingLine(3 * 240, \"auto\");\noParagraph.AddText(\"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\");\noParagraph.AddLineBreak();\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddLineBreak();\nvar nSpacingLineValue = oParagraph.GetSpacingLineValue();\noParagraph.AddText(\"Spacing line value: \" + nSpacingLineValue);"
}
``````json
{
  "table": [
    {
      "Description": "This example adds a Run to the paragraph.",
      "OnlyOffice_JS": "// This example adds a Run to the paragraph.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text run. Nothing special.\");\noParagraph.AddElement(oRun);",
      "Excel_VBA": "' This example adds a Run to the paragraph.\nDim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet\nDim oFill As Object\nSet oFill = CreateSolidFill(CreateRGBColor(255, 111, 61))\nDim oStroke As Object\nSet oStroke = CreateStroke(0, CreateNoFill())\nDim oShape As Shape\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120 * 36000, 70 * 36000)\n'oFill and oStroke would need to be applied to oShape using appropriate properties\nDim oDocContent As Object\nSet oDocContent = oShape.TextFrame2.TextRange\nDim oParagraph As Object\nSet oParagraph = oDocContent.Paragraphs(1)\nDim oRun As Object\nSet oRun = oParagraph.Runs.Add\noRun.Text = \"This is just a sample text run. Nothing special.\""
    }
  ]
}
``````json
{
  "description": "This example adds a line break to the current position and starts the next element from a new line.",
  "OnlyOffice_JS": "// This example adds a line break to the current position and starts the next element from a new line.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"This is a text inside the shape aligned left.\");\noParagraph.AddLineBreak();\noParagraph.AddText(\"This is a text after the line break.\");",
  "Excel_VBA": "' This example adds a line break to the current position and starts the next element from a new line.\nDim oWorksheet As Object\nDim oFill As Object\nDim oStroke As Object\nDim oShape As Object\nDim oDocContent As Object\nDim oParagraph As Object\n\nSet oWorksheet = Api.GetActiveSheet()\nSet oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61))\nSet oStroke = Api.CreateStroke(0, Api.CreateNoFill())\nSet oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)\nSet oDocContent = oShape.GetContent()\nSet oParagraph = oDocContent.GetElement(0)\noParagraph.SetJc \"left\"\noParagraph.AddText \"This is a text inside the shape aligned left.\"\noParagraph.AddLineBreak\n'oParagraph.AddText \"This is a text after the line break.\""
}
``````json
{
  "description": "This code adds a shape to the active worksheet, styles it, and appends a paragraph with text and tab stops.",
  "code": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = Api.GetActiveSheet()"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "Set oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61))"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "Set oStroke = Api.CreateStroke(0, Api.CreateNoFill())"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Set oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "Excel VBA": "Set oDocContent = oShape.GetContent()"
    },
    {
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel VBA": "Set oParagraph = oDocContent.GetElement(0)"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is just a sample text. After it three tab stops will be added.\");",
      "Excel VBA": "oParagraph.AddText \"This is just a sample text. After it three tab stops will be added.\""
    },
    {
      "OnlyOffice JS": "oParagraph.AddTabStop();",
      "Excel VBA": "oParagraph.AddTabStop"
    },
    {
      "OnlyOffice JS": "oParagraph.AddTabStop();",
      "Excel VBA": "oParagraph.AddTabStop"
    },
    {
      "OnlyOffice JS": "oParagraph.AddTabStop();",
      "Excel VBA": "oParagraph.AddTabStop"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is the text which starts after the tab stops.\");",
      "Excel VBA": "oParagraph.AddText \"This is the text which starts after the tab stops.\""
    }
  ]
}
``````json
{
  "description": "This example adds some text to the paragraph.",
  "methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = Api.GetActiveSheet()"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "Set oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61))"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "Set oStroke = Api.CreateStroke(0, Api.CreateNoFill())"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Set oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "Excel VBA": "Set oDocContent = oShape.GetContent()"
    },
    {
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel VBA": "Set oParagraph = oDocContent.GetElement(0)"
    },
    {
      "OnlyOffice JS": "oParagraph.SetJc(\"left\");",
      "Excel VBA": "oParagraph.SetJc \"left\""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is a text inside the shape aligned left.\");",
      "Excel VBA": "oParagraph.AddText \"This is a text inside the shape aligned left.\""
    },
    {
      "OnlyOffice JS": "oParagraph.AddLineBreak();",
      "Excel VBA": "oParagraph.AddLineBreak"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is a text after the line break.\");",
      "Excel VBA": "oParagraph.AddText \"This is a text after the line break.\""
    }
  ]
}
``````json
{
  "description": "This example creates a paragraph copy.",
  "table": [
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "ExcelVBA": "With oWorksheet.Shapes.AddShape(msoShapeRectangle, 120, 70, 200, 150).Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
    },
    {
      "OnlyOfficeJS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "ExcelVBA": "With oWorksheet.Shapes(oWorksheet.Shapes.Count).Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOfficeJS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "ExcelVBA": "Dim oShape As Shape\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartDataStorage, 120, 70, 200, 300)"
    },
    {
      "OnlyOfficeJS": "var oDocContent = oShape.GetContent();",
      "ExcelVBA": "Dim oDocContent As TextRange\nSet oDocContent = oShape.TextFrame.TextRange"
    },
    {
      "OnlyOfficeJS": "var oParagraph = oDocContent.GetElement(0);",
      "ExcelVBA": "Dim oParagraph As ParagraphFormat\nSet oParagraph = oDocContent.ParagraphFormat"
    },
    {
      "OnlyOfficeJS": "oParagraph.SetJc(\"left\");",
      "ExcelVBA": "oParagraph.Alignment = xlLeft"
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"This is a text inside the shape aligned left.\");",
      "ExcelVBA": "oDocContent.Text = \"This is a text inside the shape aligned left.\""
    },
    {
      "OnlyOfficeJS": "oParagraph.AddLineBreak();",
      "ExcelVBA": "oDocContent.Text = oDocContent.Text & vbCrLf"
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"This is a text after the line break.\");",
      "ExcelVBA": "oDocContent.Text = oDocContent.Text & \"This is a text after the line break.\""
    },
    {
      "OnlyOfficeJS": "var oParagraph2 = oParagraph.Copy();",
      "ExcelVBA": "Dim oParagraph2 As ParagraphFormat\nSet oParagraph2 = oParagraph.Duplicate"
    },
    {
      "OnlyOfficeJS": "oDocContent.Push(oParagraph2);",
      "ExcelVBA": "oDocContent.Text = oDocContent.Text & vbCrLf & oParagraph2.Alignment"
    }
  ]
}
```**Description:**  
This code deletes a paragraph from a shape's content and updates cell A9 with a notification.

```json
{
  "MethodMapping": [
    {
      "OnlyOffice JS Method": "Api.GetActiveSheet()",
      "Excel VBA Equivalent": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS Method": "Api.CreateRGBColor(255, 111, 61)",
      "Excel VBA Equivalent": "RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS Method": "Api.CreateSolidFill(color)",
      "Excel VBA Equivalent": "oFill.ForeColor.RGB = color"
    },
    {
      "OnlyOffice JS Method": "Api.CreateNoFill()",
      "Excel VBA Equivalent": "oFill.Visible = msoFalse"
    },
    {
      "OnlyOffice JS Method": "Api.CreateStroke(0, Api.CreateNoFill())",
      "Excel VBA Equivalent": "With oShape.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice JS Method": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)",
      "Excel VBA Equivalent": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartStorageData, 60, 35, 200, 150)"
    },
    {
      "OnlyOffice JS Method": "oShape.GetContent()",
      "Excel VBA Equivalent": "Set oTextFrame = oShape.TextFrame"
    },
    {
      "OnlyOffice JS Method": "oDocContent.RemoveAllElements()",
      "Excel VBA Equivalent": "oTextFrame.Characters.Text = \"\""
    },
    {
      "OnlyOffice JS Method": "Api.CreateParagraph()",
      "Excel VBA Equivalent": "\" VBA does not have a direct paragraph object, use text manipulation instead"
    },
    {
      "OnlyOffice JS Method": "oParagraph.AddText(\"This is just a sample text.\")",
      "Excel VBA Equivalent": "oTextFrame.Characters.Text = \"This is just a sample text.\""
    },
    {
      "OnlyOffice JS Method": "oDocContent.Push(oParagraph)",
      "Excel VBA Equivalent": "\" Text is already set directly in VBA as shown above"
    },
    {
      "OnlyOffice JS Method": "oParagraph.Delete()",
      "Excel VBA Equivalent": "oTextFrame.Characters.Text = \"\""
    },
    {
      "OnlyOffice JS Method": "oWorksheet.GetRange(\"A9\").SetValue(\"The paragraph from the shape content was removed.\")",
      "Excel VBA Equivalent": "oWorksheet.Range(\"A9\").Value = \"The paragraph from the shape content was removed.\""
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
  },
  {
    "Description": "Create a solid fill with the specified RGB color",
    "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
    "Excel VBA": "Set oFill = CreateSolidFill(CreateRGBColor(255, 111, 61))"
  },
  {
    "Description": "Create a stroke with no fill",
    "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
    "Excel VBA": "Set oStroke = CreateStroke(0, CreateNoFill())"
  },
  {
    "Description": "Add a shape to the worksheet with specified properties",
    "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
    "Excel VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowChartOnlineStorage, 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
  },
  {
    "Description": "Get the content of the shape",
    "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
    "Excel VBA": "Set oDocContent = oShape.TextFrame.TextRange"
  },
  {
    "Description": "Get the first paragraph in the content",
    "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
    "Excel VBA": "Set oParagraph = oDocContent.Paragraphs(1)"
  },
  {
    "Description": "Get the class type of the paragraph",
    "OnlyOffice JS": "var sClassType = oParagraph.GetClassType();",
    "Excel VBA": "sClassType = oParagraph.ClassType"
  },
  {
    "Description": "Add text to the paragraph displaying the class type",
    "OnlyOffice JS": "oParagraph.AddText(\"Class Type = \" + sClassType);",
    "Excel VBA": "oParagraph.Text = \"Class Type = \" & sClassType"
  }
]
``````json
{
  "Description": "This example shows how to get a paragraph element using the position specified.",
  "Code": {
    "OnlyOffice_JS": "// This example shows how to get a paragraph element using the position specified.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.RemoveAllElements();\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is the text for the first text run. Do not forget a space at its end to separate from the second one. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noRun.AddText(\"This is the text for the second run. We will set it bold afterwards. It also needs space at its end. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noRun.AddText(\"This is the text for the third run. It ends the paragraph.\");\noParagraph.AddElement(oRun);\noRun = oParagraph.GetElement(2);\noRun.SetBold(true);",
    "VBA": "' This example shows how to get a paragraph element using the position specified.\nSub AddShapeAndModifyText()\n    Dim oWorksheet As Worksheet\n    Dim oShape As Shape\n    Dim oTextRange As TextRange2\n\n    ' Get active sheet\n    Set oWorksheet = ActiveSheet\n\n    ' Add shape (FlowChartOnlineStorage equivalent)\n    Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, _\n        120, 70, 150, 100) ' Adjust width and height as needed\n\n    ' Set fill color to RGB(255, 111, 61)\n    With oShape.Fill\n        .Visible = msoTrue\n        .Solid\n        .ForeColor.RGB = RGB(255, 111, 61)\n    End With\n\n    ' Remove line (stroke)\n    With oShape.Line\n        .Weight = 0\n        .Visible = msoFalse\n    End With\n\n    ' Access the text frame\n    Set oTextRange = oShape.TextFrame2.TextRange\n\n    ' Clear existing text\n    oTextRange.Text = ""\n\n    ' Add first run\n    oTextRange.Text = "This is the text for the first text run. Do not forget a space at its end to separate from the second one. "\n\n    ' Add second run\n    oTextRange.InsertAfter "This is the text for the second run. We will set it bold afterwards. It also needs space at its end. "\n\n    ' Add third run\n    oTextRange.InsertAfter "This is the text for the third run. It ends the paragraph."\n\n    ' Set the third run to bold\n    ' Calculate the start position of the third run\n    Dim firstRunLength As Long\n    Dim secondRunLength As Long\n    Dim thirdRunStart As Long\n    firstRunLength = Len("This is the text for the first text run. Do not forget a space at its end to separate from the second one. ")\n    secondRunLength = Len("This is the text for the second run. We will set it bold afterwards. It also needs space at its end. ")\n    thirdRunStart = firstRunLength + secondRunLength + 1 ' +1 for space\n    oTextRange.Characters(thirdRunStart, Len("This is the text for the third run. It ends the paragraph.")).Font.Bold = msoTrue\nEnd Sub"
  }
}
``````json
{
  "Description": "This code adds a shape to the active sheet, modifies its content by setting text runs, and displays counts of paragraph elements before and after adding text.",
  "CodeEquivalents": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "Dim oFill As FillFormat\nSet oFill = oShape.Fill\noFill.ForeColor.RGB = RGB(255, 111, 61)\n oFill.Visible = msoTrue"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "Dim oStroke As LineFormat\nSet oStroke = oShape.Line\noStroke.Weight = 0\noStroke.Visible = msoFalse"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Dim oShape As Shape\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowChartManualInput, 120, 70, 200, 150)\nWith oShape\n    .Fill.ForeColor.RGB = RGB(255, 111, 61)\n    .Line.Weight = 0\n    .Line.Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "Excel VBA": "Dim oDocContent As TextRange\nSet oDocContent = oShape.TextFrame.TextRange"
    },
    {
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel VBA": "Dim oParagraph As ParagraphFormat\nSet oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "OnlyOffice JS": "oParagraph.RemoveAllElements();",
      "Excel VBA": "oDocContent.Text = \"\""
    },
    {
      "OnlyOffice JS": "var oRun = Api.CreateRun();",
      "Excel VBA": "Dim oRun As TextRange\nSet oRun = oDocContent.Characters"
    },
    {
      "OnlyOffice JS": "oRun.AddText(\"Number of paragraph elements at this point: \");",
      "Excel VBA": "oRun.Text = \"Number of paragraph elements at this point: \""
    },
    {
      "OnlyOffice JS": "oRun.AddTabStop();",
      "Excel VBA": "oRun.Text = oRun.Text & vbTab"
    },
    {
      "OnlyOffice JS": "oRun.AddText(\"\" + oParagraph.GetElementsCount());",
      "Excel VBA": "Dim count As Integer\ncount = oDocContent.Paragraphs.Count\noRun.Text = oRun.Text & CStr(count)"
    },
    {
      "OnlyOffice JS": "oRun.AddLineBreak();",
      "Excel VBA": "oRun.Text = oRun.Text & vbCrLf"
    },
    {
      "OnlyOffice JS": "oParagraph.AddElement(oRun);",
      "Excel VBA": "' Already added text to the paragraph in previous steps"
    },
    {
      "OnlyOffice JS": "oRun.AddText(\"Number of paragraph elements after we added a text run: \");",
      "Excel VBA": "oRun.Text = oRun.Text & \"Number of paragraph elements after we added a text run: \""
    },
    {
      "OnlyOffice JS": "oRun.AddTabStop();",
      "Excel VBA": "oRun.Text = oRun.Text & vbTab"
    },
    {
      "OnlyOffice JS": "oRun.AddText(\"\" + oParagraph.GetElementsCount());",
      "Excel VBA": "oRun.Text = oRun.Text & CStr(oDocContent.Paragraphs.Count)"
    }
  ]
}
``````json
{
  "Table": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Create a solid fill with RGB color",
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "Dim oFill As Object\nSet oFill = ActiveWorkbook.Styles.Add(\"CustomFill\")\nWith oFill\n    .Interior.Color = RGB(255, 111, 61)\nEnd With"
    },
    {
      "Description": "Create a stroke with no fill",
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "' Excel VBA does not have a direct equivalent for stroke creation."
    },
    {
      "Description": "Add a shape to the worksheet",
      "OnlyOffice_JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel_VBA": "Dim oShape As Shape\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 70, 200, 100)\n'oFill and oStroke can be applied separately if needed"
    },
    {
      "Description": "Get content of the shape",
      "OnlyOffice_JS": "var oDocContent = oShape.GetContent();",
      "Excel_VBA": "Dim oDocContent As TextRange\nSet oDocContent = oShape.TextFrame.Characters"
    },
    {
      "Description": "Get the first paragraph element",
      "OnlyOffice_JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel_VBA": "Dim oParagraph As TextRange\nSet oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "Description": "Add text to the paragraph",
      "OnlyOffice_JS": "oParagraph.AddText(\"This is a paragraph with the indent of 1 inch set to the first line. \");",
      "Excel_VBA": "oParagraph.Text = oParagraph.Text & \"This is a paragraph with the indent of 1 inch set to the first line. \""
    },
    {
      "Description": "Set first line indentation",
      "OnlyOffice_JS": "oParagraph.SetIndFirstLine(1440);",
      "Excel_VBA": "With oParagraph.ParagraphFormat\n    .FirstLineIndent = InchesToPoints(1)\nEnd With"
    },
    {
      "Description": "Get first line indentation",
      "OnlyOffice_JS": "var nIndFirstLine = oParagraph.GetIndFirstLine();",
      "Excel_VBA": "Dim nIndFirstLine As Single\nnIndFirstLine = oParagraph.ParagraphFormat.FirstLineIndent"
    },
    {
      "Description": "Create a new paragraph",
      "OnlyOffice_JS": "oParagraph = Api.CreateParagraph();",
      "Excel_VBA": "Set oParagraph = oDocContent.Paragraphs.Add"
    },
    {
      "Description": "Add text with indentation value",
      "OnlyOffice_JS": "oParagraph.AddText(\"First line indent: \" + nIndFirstLine);",
      "Excel_VBA": "oParagraph.Text = \"First line indent: \" & nIndFirstLine"
    },
    {
      "Description": "Push paragraph to document content",
      "OnlyOffice_JS": "oDocContent.Push(oParagraph);",
      "Excel_VBA": "' In Excel VBA, the paragraph is already part of oDocContent after adding."
    }
  ]
}
```**This code creates a shape with a paragraph having a 2-inch left indentation and displays the indent value.**

```json
{
  "RAGTable": [
    {
      "OnlyOfficeJSMethod": "Api.GetActiveSheet()",
      "ExcelVBAEquivalent": "Set oWorksheet = ActiveSheet",
      "Status": "Green"
    },
    {
      "OnlyOfficeJSMethod": "Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61))",
      "ExcelVBAEquivalent": "oFill.Color = RGB(255, 111, 61)",
      "Status": "Green"
    },
    {
      "OnlyOfficeJSMethod": "Api.CreateStroke(0, Api.CreateNoFill())",
      "ExcelVBAEquivalent": "With oStroke\n    .Weight = 0\n    .Visible = msoFalse\nEnd With",
      "Status": "Green"
    },
    {
      "OnlyOfficeJSMethod": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)",
      "ExcelVBAEquivalent": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 70, oFill, oStroke)",
      "Status": "Yellow"
    },
    {
      "OnlyOfficeJSMethod": "oShape.GetContent()",
      "ExcelVBAEquivalent": "Set oDocContent = oShape.TextFrame.Characters",
      "Status": "Green"
    },
    {
      "OnlyOfficeJSMethod": "oDocContent.GetElement(0)",
      "ExcelVBAEquivalent": "Set oParagraph = oDocContent.Paragraphs(1)",
      "Status": "Green"
    },
    {
      "OnlyOfficeJSMethod": "oParagraph.AddText(\"This is a paragraph with the indent of 2 inches set to it. \")",
      "ExcelVBAEquivalent": "oParagraph.Text = oParagraph.Text & \"This is a paragraph with the indent of 2 inches set to it. \"",
      "Status": "Green"
    },
    {
      "OnlyOfficeJSMethod": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \")",
      "ExcelVBAEquivalent": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes. \"",
      "Status": "Green"
    },
    {
      "OnlyOfficeJSMethod": "oParagraph.SetIndLeft(2880)",
      "ExcelVBAEquivalent": "oParagraph.ParagraphFormat.LeftIndent = InchesToPoints(2)",
      "Status": "Green"
    },
    {
      "OnlyOfficeJSMethod": "oParagraph.GetIndLeft()",
      "ExcelVBAEquivalent": "nIndLeft = oParagraph.ParagraphFormat.LeftIndent",
      "Status": "Green"
    },
    {
      "OnlyOfficeJSMethod": "Api.CreateParagraph()",
      "ExcelVBAEquivalent": "Set oParagraph = oDocContent.Paragraphs.Add",
      "Status": "Yellow"
    },
    {
      "OnlyOfficeJSMethod": "oParagraph.AddText(\"Left indent: \" + nIndLeft)",
      "ExcelVBAEquivalent": "oParagraph.Text = \"Left indent: \" & nIndLeft",
      "Status": "Green"
    },
    {
      "OnlyOfficeJSMethod": "oDocContent.Push(oParagraph)",
      "ExcelVBAEquivalent": "oDocContent.InsertAfter oParagraph",
      "Status": "Yellow"
    }
  ]
}
``````json
{
  "description": "Equivalent Excel VBA code for the provided OnlyOffice JavaScript API example, demonstrating shape creation, paragraph formatting, and indentation retrieval.",
  "RAG_Table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "oFill = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "' No direct equivalent; to remove line: oShape.Line.Visible = msoFalse"
    },
    {
      "OnlyOffice_JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel_VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 70, 2 * 72, 3 * 72)"
    },
    {
      "OnlyOffice_JS": "var oDocContent = oShape.GetContent();",
      "Excel_VBA": "Set oDocContent = oShape.TextFrame"
    },
    {
      "OnlyOffice_JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel_VBA": "Set oParagraph = oShape.TextFrame.Characters"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"This is a paragraph with the right offset of 2 inches set to it. \");",
      "Excel_VBA": "oShape.TextFrame.Characters.Text = \"This is a paragraph with the right offset of 2 inches set to it. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "Excel_VBA": "oShape.TextFrame.Characters.Text = oShape.TextFrame.Characters.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.SetJc(\"right\");",
      "Excel_VBA": "oShape.TextFrame.HorizontalAlignment = xlRight"
    },
    {
      "OnlyOffice_JS": "oParagraph.SetIndRight(2880);",
      "Excel_VBA": "oShape.TextFrame.MarginRight = 2 * 72"
    },
    {
      "OnlyOffice_JS": "var nIndRight = oParagraph.GetIndRight();",
      "Excel_VBA": "nIndRight = oShape.TextFrame.MarginRight"
    },
    {
      "OnlyOffice_JS": "oParagraph = Api.CreateParagraph();",
      "Excel_VBA": "' VBA does not have a direct method to create a new paragraph; use separate TextFrame or Shapes"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"Right indent: \" + nIndRight);",
      "Excel_VBA": "oParagraph.TextFrame.Characters.Text = \"Right indent: \" & nIndRight"
    },
    {
      "OnlyOffice_JS": "oDocContent.Push(oParagraph);",
      "Excel_VBA": "oShape.TextFrame.Characters.Text = oShape.TextFrame.Characters.Text & oParagraph.TextFrame.Characters.Text"
    }
  ]
}
``````json
{
  "Description": "This example demonstrates how to create a shape with specific fill and stroke on the active worksheet, add paragraphs with centered justification, and display the justification setting.",
  "CodeComparison": [
    {
      "Method": "GetActiveSheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet",
      "Status": "Green"
    },
    {
      "Method": "CreateSolidFill",
      "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "VBA": "Set oFill = CreateSolidFill(RGB(255, 111, 61))",
      "Status": "Green"
    },
    {
      "Method": "CreateStroke",
      "OnlyOfficeJS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "VBA": "Set oStroke = CreateStroke(0, CreateNoFill())",
      "Status": "Green"
    },
    {
      "Method": "AddShape",
      "OnlyOfficeJS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, 120 * 36000, 70 * 36000, 200, 100)",
      "Status": "Amber"
    },
    {
      "Method": "GetContent",
      "OnlyOfficeJS": "var oDocContent = oShape.GetContent();",
      "VBA": "Set oDocContent = oShape.TextFrame.Characters",
      "Status": "Green"
    },
    {
      "Method": "GetElement",
      "OnlyOfficeJS": "var oParagraph = oDocContent.GetElement(0);",
      "VBA": "Set oParagraph = oDocContent(1)",
      "Status": "Green"
    },
    {
      "Method": "AddText",
      "OnlyOfficeJS": "oParagraph.AddText(\"This is a paragraph with the text in it aligned by the center. \");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"This is a paragraph with the text in it aligned by the center. \"",
      "Status": "Green"
    },
    {
      "Method": "SetJc",
      "OnlyOfficeJS": "oParagraph.SetJc(\"center\");",
      "VBA": "oParagraph.ParagraphFormat.Alignment = xlCenter",
      "Status": "Green"
    },
    {
      "Method": "GetJc",
      "OnlyOfficeJS": "var sJc = oParagraph.GetJc();",
      "VBA": "sJc = oParagraph.ParagraphFormat.Alignment",
      "Status": "Green"
    },
    {
      "Method": "CreateParagraph",
      "OnlyOfficeJS": "oParagraph = Api.CreateParagraph();",
      "VBA": "Set oParagraph = oDocContent.AddNewParagraph",
      "Status": "Amber"
    },
    {
      "Method": "Push",
      "OnlyOfficeJS": "oDocContent.Push(oParagraph);",
      "VBA": "oDocContent.Add oParagraph",
      "Status": "Green"
    }
  ]
}
``````json
{
  "description": "This code adds a flowchart shape to the active sheet, sets its fill and stroke, adds two paragraphs of text, and makes the second paragraph bold.",
  "codeMappings": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "VBA": "Set oFill = oWorksheet.Shapes.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "VBA": "With oWorksheet.Shapes.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 60, 35, 200, 150)\nWith oShape\n    .Fill.ForeColor.RGB = RGB(255, 111, 61)\n    .Line.Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oDocContent = oShape.GetContent();",
      "VBA": "Set oDocContent = oShape.TextFrame2.TextRange"
    },
    {
      "OnlyOffice_JS": "oDocContent.RemoveAllElements();",
      "VBA": "oDocContent.Text = \"\""
    },
    {
      "OnlyOffice_JS": "var oParagraph1 = Api.CreateParagraph();\noParagraph1.AddText(\"This is the first paragraph.\");\noDocContent.Push(oParagraph1);",
      "VBA": "With oDocContent\n    .Text = .Text & vbCrLf & \"This is the first paragraph.\"\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oParagraph2 = Api.CreateParagraph();\noParagraph2.AddText(\"This is the second paragraph.\");\noDocContent.Push(oParagraph2);",
      "VBA": "With oDocContent\n    .Text = .Text & vbCrLf & \"This is the second paragraph.\"\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oNextParagraph = oParagraph1.GetNext();\noNextParagraph.SetBold(true);",
      "VBA": "With oShape.TextFrame2.TextRange.Paragraphs(2).Font\n    .Bold = msoTrue\nEnd With"
    }
  ]
}
``````json
{
  "description": "This example shows how to get the paragraph properties.",
  "codeComparison": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = Api.GetActiveSheet()"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "Set oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61))"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "Set oStroke = Api.CreateStroke(0, Api.CreateNoFill())"
    },
    {
      "OnlyOffice_JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel_VBA": "Set oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
    },
    {
      "OnlyOffice_JS": "var oDocContent = oShape.GetContent();",
      "Excel_VBA": "Set oDocContent = oShape.GetContent()"
    },
    {
      "OnlyOffice_JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel_VBA": "Set oParagraph = oDocContent.GetElement(0)"
    },
    {
      "OnlyOffice_JS": "var oParaPr = oParagraph.GetParaPr();",
      "Excel_VBA": "Set oParaPr = oParagraph.GetParaPr()"
    },
    {
      "OnlyOffice_JS": "oParaPr.SetSpacingAfter(1440);",
      "Excel_VBA": "oParaPr.SetSpacingAfter 1440"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"This is an example of setting a space after a paragraph. \");",
      "Excel_VBA": "oParagraph.AddText \"This is an example of setting a space after a paragraph. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");",
      "Excel_VBA": "oParagraph.AddText \"The second paragraph will have an offset of one inch from the top. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"This is due to the fact that the first paragraph has this offset enabled.\");",
      "Excel_VBA": "oParagraph.AddText \"This is due to the fact that the first paragraph has this offset enabled.\""
    },
    {
      "OnlyOffice_JS": "oParagraph = Api.CreateParagraph();",
      "Excel_VBA": "Set oParagraph = Api.CreateParagraph()"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");",
      "Excel_VBA": "oParagraph.AddText \"This is the second paragraph and it is one inch away from the first paragraph.\""
    },
    {
      "OnlyOffice_JS": "oDocContent.Push(oParagraph);",
      "Excel_VBA": "oDocContent.Push oParagraph"
    }
  ]
}
``````json
{
  "description": "This example shows how to get the previous paragraph.",
  "codes": [
    {
      "OnlyOfficeJS": "// This example shows how to get the previous paragraph.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\noDocContent.RemoveAllElements();\nvar oParagraph1 = Api.CreateParagraph();\noParagraph1.AddText(\"This is the first paragraph.\");\noDocContent.Push(oParagraph1);\nvar oParagraph2 = Api.CreateParagraph();\noParagraph2.AddText(\"This is the second paragraph.\");\noDocContent.Push(oParagraph2);\nvar oPreviousParagraph = oParagraph2.GetPrevious();\noPreviousParagraph.SetBold(true);"
    },
    {
      "ExcelVBA": "' This example shows how to get the previous paragraph.\nDim oWorksheet As Object\nSet oWorksheet = Api.GetActiveSheet()\nDim oFill As Object\nSet oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61))\nDim oStroke As Object\nSet oStroke = Api.CreateStroke(0, Api.CreateNoFill())\nDim oShape As Object\nSet oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)\nDim oDocContent As Object\nSet oDocContent = oShape.GetContent()\noDocContent.RemoveAllElements()\nDim oParagraph1 As Object\nSet oParagraph1 = Api.CreateParagraph()\noParagraph1.AddText(\"This is the first paragraph.\")\noDocContent.Push oParagraph1\nDim oParagraph2 As Object\nSet oParagraph2 = Api.CreateParagraph()\noParagraph2.AddText(\"This is the second paragraph.\")\noDocContent.Push oParagraph2\nDim oPreviousParagraph As Object\nSet oPreviousParagraph = oParagraph2.GetPrevious()\noPreviousParagraph.SetBold True"
    }
  ]
}
``````json
{
  "description": "This example shows how to get and set the spacing after value of the paragraph.",
  "codeComparison": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "Dim oFill As FillFormat\nSet oFill = oShape.Fill\noFill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "With oShape.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel_VBA": "Dim oShape As Shape\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 70, 200, 150)\nWith oShape.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With\nWith oShape.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oDocContent = oShape.GetContent();",
      "Excel_VBA": "Dim oDocContent As TextFrame2\nSet oDocContent = oShape.TextFrame2"
    },
    {
      "OnlyOffice_JS": "var oParagraph1 = oDocContent.GetElement(0);",
      "Excel_VBA": ""
    },
    {
      "OnlyOffice_JS": "oParagraph1.AddText(\"This is an example of setting a space after a paragraph. \");",
      "Excel_VBA": "oDocContent.Text = \"This is an example of setting a space after a paragraph. \""
    },
    {
      "OnlyOffice_JS": "oParagraph1.AddText(\"The second paragraph will have an offset of one inch from the top. \");",
      "Excel_VBA": "oDocContent.Text = oDocContent.Text & \"The second paragraph will have an offset of one inch from the top. \""
    },
    {
      "OnlyOffice_JS": "oParagraph1.AddText(\"This is due to the fact that the first paragraph has this offset enabled.\");",
      "Excel_VBA": "oDocContent.Text = oDocContent.Text & \"This is due to the fact that the first paragraph has this offset enabled.\""
    },
    {
      "OnlyOffice_JS": "oParagraph1.SetSpacingAfter(1440);",
      "Excel_VBA": "oShape.TextFrame2.TextRange.ParagraphFormat.SpaceAfter = 1440"
    },
    {
      "OnlyOffice_JS": "var oParagraph2 = Api.CreateParagraph();",
      "Excel_VBA": ""
    },
    {
      "OnlyOffice_JS": "oParagraph2.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");",
      "Excel_VBA": "oDocContent.Text = oDocContent.Text & vbCrLf & \"This is the second paragraph and it is one inch away from the first paragraph.\""
    },
    {
      "OnlyOffice_JS": "oParagraph2.AddLineBreak();",
      "Excel_VBA": "oDocContent.Text = oDocContent.Text & vbCrLf"
    },
    {
      "OnlyOffice_JS": "var nSpacingAfter = oParagraph1.GetSpacingAfter();",
      "Excel_VBA": "Dim nSpacingAfter As Single\nnSpacingAfter = oShape.TextFrame2.TextRange.ParagraphFormat.SpaceAfter"
    },
    {
      "OnlyOffice_JS": "oParagraph2.AddText(\"Spacing after: \" + nSpacingAfter);",
      "Excel_VBA": "oDocContent.Text = oDocContent.Text & \"Spacing after: \" & nSpacingAfter"
    },
    {
      "OnlyOffice_JS": "oDocContent.Push(oParagraph2);",
      "Excel_VBA": ""
    }
  ]
}
``````json
{
  "table": {
    "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Description": "Get the active worksheet.",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
      },
      {
        "Description": "Create an RGB color.",
        "OnlyOffice JS": "var oRGBColor = Api.CreateRGBColor(255, 111, 61);",
        "Excel VBA": "Dim oRGBColor As Long\noRGBColor = RGB(255, 111, 61)"
      },
      {
        "Description": "Create a solid fill with the RGB color.",
        "OnlyOffice JS": "var oFill = Api.CreateSolidFill(oRGBColor);",
        "Excel VBA": "Dim oFill As Object\nSet oFill = oWorksheet.Range(\"A1\").Interior\noFill.Color = oRGBColor"
      },
      {
        "Description": "Create a stroke with no fill.",
        "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
        "Excel VBA": "Dim oStroke As Object\nSet oStroke = oWorksheet.Shapes.AddLine(0, 0, 100, 100)\noStroke.Line.Visible = msoFalse"
      },
      {
        "Description": "Add a shape to the worksheet.",
        "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
        "Excel VBA": "Dim oShape As Shape\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartData, 120, 70, 200, 100)\noShape.Fill.ForeColor.RGB = oRGBColor\n'oShape.Line.Visible = msoFalse ' Equivalent to no stroke"
      },
      {
        "Description": "Get the content of the shape.",
        "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
        "Excel VBA": "Dim oDocContent As Object\nSet oDocContent = oShape.TextFrame"
      },
      {
        "Description": "Get the first paragraph from the content.",
        "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
        "Excel VBA": "Dim oParagraph As TextRange\nSet oParagraph = oDocContent.Characters"
      },
      {
        "Description": "Add text to the first paragraph.",
        "OnlyOffice JS": "oParagraph.AddText(\"This is an example of setting a space before a paragraph.\");",
        "Excel VBA": "oParagraph.Text = \"This is an example of setting a space before a paragraph.\""
      },
      {
        "Description": "Add more text to the first paragraph.",
        "OnlyOffice JS": "oParagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");",
        "Excel VBA": "oParagraph.InsertAfter \"The second paragraph will have an offset of one inch from the top.\""
      },
      {
        "Description": "Add additional text to the first paragraph.",
        "OnlyOffice JS": "oParagraph.AddText(\"This is due to the fact that the second paragraph has this offset enabled.\");",
        "Excel VBA": "oParagraph.InsertAfter \"This is due to the fact that the second paragraph has this offset enabled.\""
      },
      {
        "Description": "Create a second paragraph.",
        "OnlyOffice JS": "var oParagraph2 = Api.CreateParagraph();",
        "Excel VBA": "Dim oParagraph2 As TextRange\nSet oParagraph2 = oDocContent.InsertAfter(\"\")"
      },
      {
        "Description": "Add text to the second paragraph.",
        "OnlyOffice JS": "oParagraph2.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");",
        "Excel VBA": "oParagraph2.Text = \"This is the second paragraph and it is one inch away from the first paragraph.\""
      },
      {
        "Description": "Set spacing before for the second paragraph.",
        "OnlyOffice JS": "oParagraph2.SetSpacingBefore(1440);",
        "Excel VBA": "With oParagraph2.ParagraphFormat\n    .SpaceBefore = 72 ' Points (1 inch)\nEnd With"
      },
      {
        "Description": "Push the second paragraph to the document content.",
        "OnlyOffice JS": "oDocContent.Push(oParagraph2);",
        "Excel VBA": "' In VBA, the paragraph is already part of the TextFrame after insertion."
      },
      {
        "Description": "Get the spacing before value of the second paragraph.",
        "OnlyOffice JS": "var nSpacingBefore = oParagraph2.GetSpacingBefore();",
        "Excel VBA": "Dim nSpacingBefore As Long\nnSpacingBefore = oParagraph2.ParagraphFormat.SpaceBefore"
      },
      {
        "Description": "Create a third paragraph.",
        "OnlyOffice JS": "var oParagraph = Api.CreateParagraph();",
        "Excel VBA": "Dim oParagraph3 As TextRange\nSet oParagraph3 = oDocContent.InsertAfter(\"\")"
      },
      {
        "Description": "Add text with spacing information to the third paragraph.",
        "OnlyOffice JS": "oParagraph.AddText(\"Spacing before: \" + nSpacingBefore);",
        "Excel VBA": "oParagraph3.Text = \"Spacing before: \" & nSpacingBefore"
      },
      {
        "Description": "Push the third paragraph to the document content.",
        "OnlyOffice JS": "oDocContent.Push(oParagraph);",
        "Excel VBA": "' In VBA, the paragraph is already part of the TextFrame after insertion."
      }
    ]
  }
}
``````json
{
  "description": "This code creates a shape with specific fill and stroke, adds paragraphs with line spacing and text, and retrieves the spacing line rule.",
  "methods": [
    {
      "OnlyOfficeJS": "Api.GetActiveSheet();",
      "ExcelVBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOfficeJS": "Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "ExcelVBA": "Set oFill = CreateSolidFill(CreateRGBColor(255, 111, 61))"
    },
    {
      "OnlyOfficeJS": "Api.CreateStroke(0, Api.CreateNoFill());",
      "ExcelVBA": "Set oStroke = CreateStroke(0, CreateNoFill())"
    },
    {
      "OnlyOfficeJS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 80 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "ExcelVBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowChartOnlineStorage, 120, 80, oFill, oStroke, 0, 2, 0, 3)"
    },
    {
      "OnlyOfficeJS": "oShape.GetContent();",
      "ExcelVBA": "Set oDocContent = oShape.GetContent()"
    },
    {
      "OnlyOfficeJS": "oDocContent.GetElement(0);",
      "ExcelVBA": "Set oParagraph = oDocContent.Elements(0)"
    },
    {
      "OnlyOfficeJS": "oParagraph.SetSpacingLine(3 * 240, \"auto\");",
      "ExcelVBA": "oParagraph.SetSpacingLine 3 * 240, \"auto\""
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\");",
      "ExcelVBA": "oParagraph.AddText \"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\""
    },
    {
      "OnlyOfficeJS": "oParagraph.AddLineBreak();",
      "ExcelVBA": "oParagraph.AddLineBreak"
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "ExcelVBA": "oParagraph.AddText \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "ExcelVBA": "oParagraph.AddText \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOfficeJS": "oParagraph.AddLineBreak();",
      "ExcelVBA": "oParagraph.AddLineBreak"
    },
    {
      "OnlyOfficeJS": "oParagraph.GetSpacingLineRule();",
      "ExcelVBA": "sSpacingLineRule = oParagraph.GetSpacingLineRule()"
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"Spacing line rule: \" + sSpacingLineRule);",
      "ExcelVBA": "oParagraph.AddText \"Spacing line rule: \" & sSpacingLineRule"
    }
  ]
}
``````json
{
  "description": "This code adds a shape to the active worksheet with specific fill and stroke properties, sets paragraph line spacing, adds text with line breaks, and retrieves the line spacing value.",
  "methodMappings": [
    {
      "OnlyOffice_JS": "Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "Api.CreateRGBColor(255, 111, 61)",
      "Excel_VBA": "RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "Api.CreateSolidFill(color)",
      "Excel_VBA": "With oShape.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
    },
    {
      "OnlyOffice_JS": "Api.CreateStroke(0, Api.CreateNoFill())",
      "Excel_VBA": "With oShape.Line\n    .Visible = msoTrue\n    .Weight = 0\n    .ForeColor.RGB = RGB(255, 255, 255)\n    .Transparency = 1\nEnd With"
    },
    {
      "OnlyOffice_JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 80 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel_VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, 120, 80, 200, 150)"
    },
    {
      "OnlyOffice_JS": "oShape.GetContent();",
      "Excel_VBA": "Set oTextFrame = oShape.TextFrame"
    },
    {
      "OnlyOffice_JS": "oDocContent.GetElement(0);",
      "Excel_VBA": "Set oParagraph = oTextFrame.TextRange.Paragraphs(1)"
    },
    {
      "OnlyOffice_JS": "oParagraph.SetSpacingLine(3 * 240, \"auto\");",
      "Excel_VBA": "With oTextFrame.TextRange.ParagraphFormat\n    .LineSpacing = 3 * 240\n    .LineSpacingRule = xlLineSpaceAutomatic\nEnd With"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\");",
      "Excel_VBA": "oTextFrame.TextRange.Text = \"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddLineBreak();",
      "Excel_VBA": "oTextFrame.TextRange.InsertAfter vbCrLf"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "Excel_VBA": "oTextFrame.TextRange.InsertAfter \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddLineBreak();",
      "Excel_VBA": "oTextFrame.TextRange.InsertAfter vbCrLf"
    },
    {
      "OnlyOffice_JS": "var nSpacingLineValue = oParagraph.GetSpacingLineValue();",
      "Excel_VBA": "nSpacingLineValue = oTextFrame.TextRange.ParagraphFormat.LineSpacing"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"Spacing line value: \" + nSpacingLineValue);",
      "Excel_VBA": "oTextFrame.TextRange.InsertAfter \"Spacing line value: \" & nSpacingLineValue"
    }
  ]
}
``````json
{
  "description": "This example removes all the elements from the current paragraph.",
  "code": {
    "OnlyOffice_JS": "// This example removes all the elements from the current paragraph.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is the first text run in the current paragraph.\");\noParagraph.AddElement(oRun);\noParagraph.RemoveAllElements();\noRun = Api.CreateRun();\noRun.AddText(\"We removed all the paragraph elements and added a new text run inside it.\");\noParagraph.AddElement(oRun);\noDocContent.Push(oParagraph);",
    "Excel_VBA": "Sub RemoveAllParagraphElements()\n    ' Get the active worksheet\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ActiveSheet\n    \n    ' Create fill and stroke\n    Dim oFill As Object\n    Set oFill = CreateSolidFill(CreateRGBColor(255, 111, 61))\n    \n    Dim oStroke As Object\n    Set oStroke = CreateStroke(0, CreateNoFill())\n    \n    ' Add a shape to the worksheet\n    Dim oShape As Shape\n    Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartProcess, 120 * 72, 70 * 72, _\n        2 * 72, 3 * 72) ' Excel uses points (1 inch = 72 points)\n    \n    ' Set shape fill and stroke\n    With oShape.Fill\n        .ForeColor.RGB = RGB(255, 111, 61)\n        .Solid\n    End With\n    With oShape.Line\n        .Visible = msoFalse\n    End With\n    \n    ' Get the shape's text frame and paragraph\n    Dim oDocContent As TextFrame2\n    Set oDocContent = oShape.TextFrame2\n    \n    Dim oParagraph As ParagraphFormat2\n    Set oParagraph = oDocContent.TextRange.ParagraphFormat\n    \n    ' Add first text run\n    oDocContent.TextRange.Text = \"This is the first text run in the current paragraph.\"\n    \n    ' Remove all text\n    oDocContent.TextRange.Text = \"\"\n    \n    ' Add new text run\n    oDocContent.TextRange.Text = \"We removed all the paragraph elements and added a new text run inside it.\"\nEnd Sub"
  }
}
``````json
[
  {
    "Get the active worksheet.": {
      "VBA": "Set oWorksheet = ActiveSheet",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();"
    }
  },
  {
    "Create a solid fill with specified RGB color.": {
      "VBA": "Set oFill = oWorksheet.Shapes.Fill.ForeColor.RGB = RGB(255, 111, 61)",
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));"
    }
  },
  {
    "Create a stroke with no fill.": {
      "VBA": "With oWorksheet.Shapes.Line\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(0, 0, 0)\n    .Weight = 1\nEnd With",
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());"
    }
  },
  {
    "Add a shape to the worksheet with specific parameters.": {
      "VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, 120, 70, 2, 3)",
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);"
    }
  },
  {
    "Get content of the shape.": {
      "VBA": "Set oDocContent = oShape.TextFrame",
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();"
    }
  },
  {
    "Get the first paragraph element.": {
      "VBA": "Set oParagraph = oDocContent.TextRange.Paragraphs(1)",
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);"
    }
  },
  {
    "Remove all elements from the paragraph.": {
      "VBA": "oParagraph.TextRange.Text = \"\"",
      "OnlyOffice JS": "oParagraph.RemoveAllElements();"
    }
  },
  {
    "Create a run and add text to the paragraph.": {
      "VBA": "oParagraph.TextRange.Text = oParagraph.TextRange.Text & \"This is the first paragraph element. \"",
      "OnlyOffice JS": "var oRun = Api.CreateRun();\noRun.AddText(\"This is the first paragraph element. \");\noParagraph.AddElement(oRun);"
    }
  },
  {
    "Add additional runs with text.": {
      "VBA": "oParagraph.TextRange.Text = oParagraph.TextRange.Text & \"This is the second paragraph element. \"",
      "OnlyOffice JS": "oRun = Api.CreateRun();\noRun.AddText(\"This is the second paragraph element. \");\noParagraph.AddElement(oRun);"
    }
  },
  {
    "Add a third run which will be removed later.": {
      "VBA": "oParagraph.TextRange.Text = oParagraph.TextRange.Text & \"This is the third paragraph element (it will be removed from the paragraph and we will not see it). \"",
      "OnlyOffice JS": "oRun = Api.CreateRun();\noRun.AddText(\"This is the third paragraph element (it will be removed from the paragraph and we will not see it). \");\noParagraph.AddElement(oRun);"
    }
  },
  {
    "Add a line break to the paragraph.": {
      "VBA": "oParagraph.TextRange.InsertAfter vbCrLf",
      "OnlyOffice JS": "oParagraph.AddLineBreak();"
    }
  },
  {
    "Add a fourth run after the line break.": {
      "VBA": "oParagraph.TextRange.InsertAfter \"This is the fourth paragraph element - it became the third, because we removed the previous run from the paragraph. \"",
      "OnlyOffice JS": "oRun = Api.CreateRun();\noRun.AddText(\"This is the fourth paragraph element - it became the third, because we removed the previous run from the paragraph. \");\noParagraph.AddElement(oRun);"
    }
  },
  {
    "Add another line break.": {
      "VBA": "oParagraph.TextRange.InsertAfter vbCrLf",
      "OnlyOffice JS": "oParagraph.AddLineBreak();"
    }
  },
  {
    "Add a final run with note about line breaks.": {
      "VBA": "oParagraph.TextRange.InsertAfter \"Please note that line breaks are not counted into paragraph elements!\"",
      "OnlyOffice JS": "oRun = Api.CreateRun();\noRun.AddText(\"Please note that line breaks are not counted into paragraph elements!\");\noParagraph.AddElement(oRun);"
    }
  },
  {
    "Remove the third element from the paragraph.": {
      "VBA": "oParagraph.TextRange.Characters(Start:=..., Length:=...).Delete",
      "OnlyOffice JS": "oParagraph.RemoveElement(3);"
    }
  }
]
``````json
{
  "Description": "This example sets the bullet or numbering to the paragraph.",
  "OnlyOffice_JS": "// This example sets the bullet or numbering to the paragraph.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oBullet = Api.CreateBullet(\"-\");\noParagraph.SetBullet(oBullet);\noParagraph.AddText(\" This is an example of the bulleted paragraph.\");",
  "Excel_VBA": "' This example sets the bullet or numbering to the paragraph.\nSub SetBullet()\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ActiveSheet\n\n    Dim oShape As Shape\n    Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 35, 200, 100)\n\n    ' Set fill color\n    oShape.Fill.ForeColor.RGB = RGB(255, 111, 61)\n\n    ' Remove stroke\n    oShape.Line.Visible = msoFalse\n\n    ' Set bullet for the first paragraph\n    With oShape.TextFrame.Characters.ParagraphFormat\n        .Bullet.Visible = msoTrue\n        .Bullet.Character = 45 ' ASCII code for '-'\n    End With\n    oShape.TextFrame.Characters.Text = \" This is an example of the bulleted paragraph.\"\nEnd Sub"
}
```**Description:**  
This code sets the first line indentation of a paragraph, creates a shape with a specific fill color and no stroke, adds text to the shape's content, and manages paragraph formatting within the active worksheet.

```json
{
  "CodeMappings": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "VBA": "oFillColor = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "VBA": "Set oStroke = Nothing ' VBA does not have a direct equivalent for stroke"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 70, 200, 150)\nWith oShape.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With\nWith oShape.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "VBA": "Set oDocContent = oShape.TextFrame"
    },
    {
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "VBA": "Set oParagraph = oDocContent.Characters"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is a paragraph with the indent of 1 inch set to the first line. \");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"This is a paragraph with the indent of 1 inch set to the first line. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes.\""
    },
    {
      "OnlyOffice JS": "oParagraph.SetIndFirstLine(1440);",
      "VBA": "With oParagraph.ParagraphFormat\n    .FirstLineIndent = 72 ' Points equivalent to 1 inch\nEnd With"
    },
    {
      "OnlyOffice JS": "oParagraph = Api.CreateParagraph();",
      "VBA": "Set oParagraph = oDocContent.Paragraphs.Add"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is a paragraph without any indent set to the first line. \");",
      "VBA": "oParagraph.Text = \"This is a paragraph without any indent set to the first line. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes.\""
    },
    {
      "OnlyOffice JS": "oDocContent.Push(oParagraph);",
      "VBA": "' VBA automatically handles adding the paragraph to the text frame."
    }
  ]
}
``````json
{
  "description": "This example sets the paragraph left side indentation.",
  "methods": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "VBA": "oShape.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "VBA": "oShape.Line.Visible = msoFalse"
    },
    {
      "OnlyOffice_JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 70, 200, 150)\nWith oShape\n    .Fill.ForeColor.RGB = RGB(255, 111, 61)\n    .Line.Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oDocContent = oShape.GetContent();",
      "VBA": "Set oTextFrame = oShape.TextFrame"
    },
    {
      "OnlyOffice_JS": "var oParagraph = oDocContent.GetElement(0);",
      "VBA": "Set oParagraph = oTextFrame.Characters"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"This is a paragraph with the indent of 2 inches set to it. \");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"This is a paragraph with the indent of 2 inches set to it. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.SetIndLeft(2880);",
      "VBA": "With oTextFrame.MarginLeft\n    .LeftIndent = InchesToPoints(2)\nEnd With"
    },
    {
      "OnlyOffice_JS": "oParagraph = Api.CreateParagraph();",
      "VBA": "oTextFrame.Characters.InsertAfter vbCrLf"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"This is a paragraph without any indent set to it. \");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"This is a paragraph without any indent set to it. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOffice_JS": "oDocContent.Push(oParagraph);",
      "VBA": " ' No direct equivalent needed as text is already appended"
    }
  ]
}
``````json
{
  "description": "This example sets the paragraph right side indentation.",
  "table": {
    "headers": ["OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
      },
      {
        "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
        "Excel VBA": "Dim oFill As Fill\nSet oFill = oShape.Fill\nWith oFill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
      },
      {
        "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
        "Excel VBA": "Dim oStroke As LineFormat\nSet oStroke = oShape.Line\nWith oStroke\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
      },
      {
        "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
        "Excel VBA": "Dim oShape As Shape\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowChartOnlineStorage, 120, 70, 2, 3)\nWith oShape\n    .Fill.ForeColor.RGB = RGB(255, 111, 61)\n    .Line.Visible = msoFalse\nEnd With"
      },
      {
        "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
        "Excel VBA": "Dim oTextFrame As TextFrame\nSet oTextFrame = oShape.TextFrame"
      },
      {
        "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
        "Excel VBA": "Dim oParagraph As TextRange\nSet oParagraph = oTextFrame.TextRange.Paragraphs(1)"
      },
      {
        "OnlyOffice JS": "oParagraph.AddText(\"This is a paragraph with the right offset of 2 inches set to it. \");",
        "Excel VBA": "oParagraph.Text = oParagraph.Text & \"This is a paragraph with the right offset of 2 inches set to it. \""
      },
      {
        "OnlyOffice JS": "oParagraph.AddText(\"We also aligned the text in it by the right side. \");",
        "Excel VBA": "oParagraph.Text = oParagraph.Text & \"We also aligned the text in it by the right side. \""
      },
      {
        "OnlyOffice JS": "oParagraph.AddText(\"This sentence is used to add lines for demonstrative purposes.\");",
        "Excel VBA": "oParagraph.Text = oParagraph.Text & \"This sentence is used to add lines for demonstrative purposes.\""
      },
      {
        "OnlyOffice JS": "oParagraph.SetJc(\"right\");",
        "Excel VBA": "oParagraph.ParagraphFormat.Alignment = xlRight"
      },
      {
        "OnlyOffice JS": "oParagraph.SetIndRight(2880);",
        "Excel VBA": "oParagraph.ParagraphFormat.RightIndent = InchesToPoints(2)"
      },
      {
        "OnlyOffice JS": "oParagraph = Api.CreateParagraph();",
        "Excel VBA": "Set oParagraph = oTextFrame.TextRange.Paragraphs.Add"
      },
      {
        "OnlyOffice JS": "oParagraph.AddText(\"This is a paragraph without any offset set to it. \");",
        "Excel VBA": "oParagraph.Text = \"This is a paragraph without any offset set to it. \""
      },
      {
        "OnlyOffice JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
        "Excel VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes. \""
      },
      {
        "OnlyOffice JS": "oDocContent.Push(oParagraph);",
        "Excel VBA": "' The paragraph has already been added via oTextFrame.TextRange.Paragraphs.Add"
      }
    ]
  }
}
``````json
{
  "Description": "Set the active worksheet",
  "VBA Code": "Set oWorksheet = ActiveSheet",
  "OnlyOffice JS Code": "var oWorksheet = Api.GetActiveSheet();"
},
{
  "Description": "Create a solid fill with RGB color (255, 111, 61)",
  "VBA Code": "Set oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61))",
  "OnlyOffice JS Code": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));"
},
{
  "Description": "Create a stroke with no fill",
  "VBA Code": "Set oStroke = Api.CreateStroke(0, Api.CreateNoFill())",
  "OnlyOffice JS Code": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());"
},
{
  "Description": "Add a shape to the worksheet",
  "VBA Code": "Set oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)",
  "OnlyOffice JS Code": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);"
},
{
  "Description": "Get the content of the shape",
  "VBA Code": "Set oDocContent = oShape.GetContent()",
  "OnlyOffice JS Code": "var oDocContent = oShape.GetContent();"
},
{
  "Description": "Get the first paragraph element",
  "VBA Code": "Set oParagraph = oDocContent.GetElement(0)",
  "OnlyOffice JS Code": "var oParagraph = oDocContent.GetElement(0);"
},
{
  "Description": "Add text to the paragraph",
  "VBA Code": "oParagraph.AddText \"This is a paragraph with the text in it aligned by the center. \"\n" +
              "oParagraph.AddText \"These sentences are used to add lines for demonstrative purposes. \"\n" +
              "oParagraph.AddText \"These sentences are used to add lines for demonstrative purposes.\"",
  "OnlyOffice JS Code": "oParagraph.AddText(\"This is a paragraph with the text in it aligned by the center. \");\n" +
                           "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\n" +
                           "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");"
},
{
  "Description": "Set paragraph justification to center",
  "VBA Code": "oParagraph.SetJc \"center\"",
  "OnlyOffice JS Code": "oParagraph.SetJc(\"center\");"
},
{
  "Description": "Create a new paragraph",
  "VBA Code": "Set oParagraph = Api.CreateParagraph()",
  "OnlyOffice JS Code": "oParagraph = Api.CreateParagraph();"
},
{
  "Description": "Add text to the new paragraph",
  "VBA Code": "oParagraph.AddText \"This is a paragraph with the text in it aligned by the right side. \"\n" +
              "oParagraph.AddText \"These sentences are used to add lines for demonstrative purposes. \"\n" +
              "oParagraph.AddText \"These sentences are used to add lines for demonstrative purposes.\"",
  "OnlyOffice JS Code": "oParagraph.AddText(\"This is a paragraph with the text in it aligned by the right side. \");\n" +
                           "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\n" +
                           "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");"
},
{
  "Description": "Set paragraph justification to right",
  "VBA Code": "oParagraph.SetJc \"right\"",
  "OnlyOffice JS Code": "oParagraph.SetJc(\"right\");"
},
{
  "Description": "Push the new paragraph to the document content",
  "VBA Code": "oDocContent.Push oParagraph",
  "OnlyOffice JS Code": "oDocContent.Push(oParagraph);"
},
{
  "Description": "Create another new paragraph",
  "VBA Code": "Set oParagraph = Api.CreateParagraph()",
  "OnlyOffice JS Code": "oParagraph = Api.CreateParagraph();"
},
{
  "Description": "Add text to the new paragraph",
  "VBA Code": "oParagraph.AddText \"This is a paragraph with the text in it aligned by the left side. \"\n" +
              "oParagraph.AddText \"These sentences are used to add lines for demonstrative purposes. \"\n" +
              "oParagraph.AddText \"These sentences are used to add lines for demonstrative purposes.\"",
  "OnlyOffice JS Code": "oParagraph.AddText(\"This is a paragraph with the text in it aligned by the left side. \");\n" +
                           "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\n" +
                           "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");"
},
{
  "Description": "Set paragraph justification to left",
  "VBA Code": "oParagraph.SetJc \"left\"",
  "OnlyOffice JS Code": "oParagraph.SetJc(\"left\");"
},
{
  "Description": "Push the new paragraph to the document content",
  "VBA Code": "oDocContent.Push oParagraph",
  "OnlyOffice JS Code": "oDocContent.Push(oParagraph);"
}
```**This code creates a shape on the active worksheet with specific formatting, adds text with paragraph spacing, and inserts a second paragraph with an offset.**

```json
{
  "Methods": [
    {
      "OnlyOffice JS": "Api.GetActiveSheet()",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "Api.CreateRGBColor(255, 111, 61)",
      "Excel VBA": "RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "Api.CreateSolidFill(color)",
      "Excel VBA": "With oShape.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
    },
    {
      "OnlyOffice JS": "Api.CreateStroke(0, Api.CreateNoFill())",
      "Excel VBA": "With oShape.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", left, top, fill, stroke, rotation, width, height)",
      "Excel VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartArchive, Left:=120, Top:=70, Width:=120, Height:=70)"
    },
    {
      "OnlyOffice JS": "oShape.GetContent()",
      "Excel VBA": "Set oTextFrame = oShape.TextFrame"
    },
    {
      "OnlyOffice JS": "oDocContent.GetElement(0)",
      "Excel VBA": "Set oParagraph = oTextFrame.Characters"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"text\")",
      "Excel VBA": "oParagraph.Text = oParagraph.Text & \"text\""
    },
    {
      "OnlyOffice JS": "oParagraph.SetSpacingAfter(1440)",
      "Excel VBA": "oTextFrame.MarginBottom = 72 ' Points equivalent to spacing"
    },
    {
      "OnlyOffice JS": "Api.CreateParagraph()",
      "Excel VBA": "oShape.TextFrame.Characters.InsertAfter \"This is the second paragraph and it is one inch away from the first paragraph.\""
    },
    {
      "OnlyOffice JS": "oDocContent.Push(oParagraph)",
      "Excel VBA": "oTextFrame.Characters.InsertAfter \"This is the second paragraph and it is one inch away from the first paragraph.\""
    }
  ]
}
``````json
{
  "Description": "This example sets the spacing before the paragraph.",
  "OnlyOffice_JS": "// This example sets the spacing before the paragraph.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"This is an example of setting a space before a paragraph. \");\noParagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");\noParagraph.AddText(\"This is due to the fact that the second paragraph has this offset enabled.\");\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");\noParagraph.SetSpacingBefore(1440);\noDocContent.Push(oParagraph);",
  "Excel_VBA": "Sub AddShapeWithParagraphSpacing()\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ActiveSheet\n    \n    ' Define fill color (RGB 255, 111, 61)\n    Dim oShape As Shape\n    Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartProcess, 120, 70, 300, 150)\n    oShape.Fill.ForeColor.RGB = RGB(255, 111, 61)\n    oShape.Fill.Solid\n    \n    ' Define stroke\n    With oShape.Line\n        .Weight = 0\n        .Visible = msoFalse\n    End With\n    \n    ' Add text\n    oShape.TextFrame2.TextRange.Text = \"This is an example of setting a space before a paragraph.\" & vbCrLf & _\n        \"The second paragraph will have an offset of one inch from the top.\" & vbCrLf & _\n        \"This is due to the fact that the second paragraph has this offset enabled.\" & vbCrLf & _\n        \"This is the second paragraph and it is one inch away from the first paragraph.\"\n    \n    ' Set spacing before for the fourth paragraph\n    With oShape.TextFrame2.TextRange.Paragraphs(4).ParagraphFormat\n        .SpaceBefore = 1440 ' Points or may require unit conversion\n    End With\nEnd Sub"
}
``````json
{
  "description": "This example sets the paragraph line spacing, creates a shape with specific fill and stroke properties, and adds text content with various line spacings using OnlyOffice API and their Excel VBA equivalents.",
  "codeMapping": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "oFillColor = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "With oShape.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel_VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowChartOnlineStorage, 120, 70, 200, 150)\nWith oShape.Fill\n    .ForeColor.RGB = oFillColor\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oDocContent = oShape.GetContent();",
      "Excel_VBA": "Set oDocContent = oShape.TextFrame.TextRange"
    },
    {
      "OnlyOffice_JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel_VBA": "Set oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "OnlyOffice_JS": "oParagraph.SetSpacingLine(2 * 240, \"auto\");",
      "Excel_VBA": "oParagraph.ParagraphFormat.SpaceWithin = 2"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"Paragraph 1. Spacing: 2 times of a common paragraph line spacing.\");",
      "Excel_VBA": "oParagraph.Text = \"Paragraph 1. Spacing: 2 times of a common paragraph line spacing.\""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddLineBreak();",
      "Excel_VBA": "oDocContent.Text = oDocContent.Text & vbCrLf"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "Excel_VBA": "oDocContent.Text = oDocContent.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "Excel_VBA": "oDocContent.Text = oDocContent.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOffice_JS": "oParagraph = Api.CreateParagraph();",
      "Excel_VBA": "Set oParagraph = oDocContent.Paragraphs.Add"
    },
    {
      "OnlyOffice_JS": "oParagraph.SetSpacingLine(200, \"exact\");",
      "Excel_VBA": "oParagraph.ParagraphFormat.SpaceAfter = 10"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"Paragraph 2. Spacing: exact 10 points.\");",
      "Excel_VBA": "oParagraph.Text = \"Paragraph 2. Spacing: exact 10 points.\""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddLineBreak();",
      "Excel_VBA": "oDocContent.Text = oDocContent.Text & vbCrLf"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "Excel_VBA": "oDocContent.Text = oDocContent.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "Excel_VBA": "oDocContent.Text = oDocContent.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "Excel_VBA": "oDocContent.Text = oDocContent.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOffice_JS": "oDocContent.Push(oParagraph);",
      "Excel_VBA": "' VBA automatically handles adding the paragraph to the TextRange"
    }
  ]
}
```**Description:** This code sets custom tab stops in a shape within the active OnlyOffice sheet, adding text with specific formatting and tab stops.

```json
{
  "RAG_Table": [
    {
      "OnlyOffice_JS_Method": "Api.GetActiveSheet()",
      "Excel_VBA_Equivalent": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS_Method": "Api.CreateRGBColor(255, 111, 61)",
      "Excel_VBA_Equivalent": "RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS_Method": "Api.CreateSolidFill(color)",
      "Excel_VBA_Equivalent": "With oShape.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
    },
    {
      "OnlyOffice_JS_Method": "Api.CreateStroke(0, Api.CreateNoFill())",
      "Excel_VBA_Equivalent": "With oShape.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS_Method": "oWorksheet.AddShape(name, width, height, fill, stroke, left, top, anchor, rotation)",
      "Excel_VBA_Equivalent": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, 150, 70, oShapeWidth, oShapeHeight)\nWith oShape\n    .Fill.ForeColor.RGB = RGB(255, 111, 61)\n    .Line.Visible = msoFalse\n    .Left = 2\n    .Top = 3\nEnd With"
    },
    {
      "OnlyOffice_JS_Method": "oShape.GetContent()",
      "Excel_VBA_Equivalent": "Set oDocContent = oShape.TextFrame2.TextRange"
    },
    {
      "OnlyOffice_JS_Method": "oDocContent.GetElement(0)",
      "Excel_VBA_Equivalent": "Set oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "OnlyOffice_JS_Method": "oParagraph.SetTabs([1440, 2880, 4320], ['left', 'center', 'right'])",
      "Excel_VBA_Equivalent": "With oParagraph.ParagraphFormat.TabStops\n    .ClearAll\n    .Add Position:=72, Alignment:=xlLeft\n    .Add Position:=144, Alignment:=xlCenter\n    .Add Position:=216, Alignment:=xlRight\nEnd With"
    },
    {
      "OnlyOffice_JS_Method": "oParagraph.AddTabStop()",
      "Excel_VBA_Equivalent": "oParagraph.Range.InsertTab"
    },
    {
      "OnlyOffice_JS_Method": "oParagraph.AddText('Custom tab - 1 inch left')",
      "Excel_VBA_Equivalent": "oParagraph.Range.Text = \"Custom tab - 1 inch left\""
    },
    {
      "OnlyOffice_JS_Method": "oParagraph.AddLineBreak()",
      "Excel_VBA_Equivalent": "oParagraph.Range.InsertParagraphAfter"
    }
  ]
}
``````json
{
  "description": "This code removes all elements from the current paragraph, adds a shape with a specific fill and stroke to the active worksheet, manages text runs within the paragraph, and updates the document content.",
  "methods_mapping": [
    {
      "OnlyOffice_JS": "Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "Set oFill = ThisWorkbook.ActiveSheet.Shapes.AddShape(msoShapeRectangle, 0, 0, 100, 50).Fill\noFill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "With oShape.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel_VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartPredefined, 120, 70, 200, 150)\noShape.Fill = oFill\n'oStroke is handled by setting .Visible = msoFalse above"
    },
    {
      "OnlyOffice_JS": "oShape.GetContent();",
      "Excel_VBA": "Set oDocContent = oShape.TextFrame"
    },
    {
      "OnlyOffice_JS": "oDocContent.GetElement(0);",
      "Excel_VBA": "Set oParagraph = oDocContent.TextRange.Paragraphs(1)"
    },
    {
      "OnlyOffice_JS": "Api.CreateRun();",
      "Excel_VBA": "Set oRun = oDocContent.TextRange.Characters"
    },
    {
      "OnlyOffice_JS": "oRun.AddText(\"This is the first text run in the current paragraph.\");",
      "Excel_VBA": "oRun.Text = \"This is the first text run in the current paragraph.\""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddElement(oRun);",
      "Excel_VBA": "' Already added via oRun.Text"
    },
    {
      "OnlyOffice_JS": "oParagraph.RemoveAllElements();",
      "Excel_VBA": "oDocContent.Text = \"\""
    },
    {
      "OnlyOffice_JS": "oRun = Api.CreateRun();",
      "Excel_VBA": "Set oRun = oDocContent.TextRange.Characters"
    },
    {
      "OnlyOffice_JS": "oRun.AddText(\"We removed all the paragraph elements and added a new text run inside it.\");",
      "Excel_VBA": "oRun.Text = \"We removed all the paragraph elements and added a new text run inside it.\""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddElement(oRun);",
      "Excel_VBA": "' Already added via oRun.Text"
    },
    {
      "OnlyOffice_JS": "oDocContent.Push(oParagraph);",
      "Excel_VBA": "' Changes are reflected automatically in Excel VBA"
    }
  ]
}
``````json
{
  "description": "This table maps OnlyOffice API methods used in the example to their equivalent Excel VBA methods.",
  "mapping": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "oShape.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "With oShape.Line\r\n    .Visible = msoFalse\r\nEnd With"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 70, 200, 100)"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "Excel VBA": "Set oTextFrame = oShape.TextFrame2"
    },
    {
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel VBA": "Set oParagraph = oTextFrame.TextRange.Paragraphs(1)"
    },
    {
      "OnlyOffice JS": "oParagraph.RemoveAllElements();",
      "Excel VBA": "oParagraph.Text = \"\""
    },
    {
      "OnlyOffice JS": "var oRun = Api.CreateRun();\noRun.AddText(\"This is the first paragraph element. \");\noParagraph.AddElement(oRun);",
      "Excel VBA": "oParagraph.Text = oParagraph.Text & \"This is the first paragraph element. \""
    },
    {
      "OnlyOffice JS": "oRun = Api.CreateRun();\noRun.AddText(\"This is the second paragraph element. \");\noParagraph.AddElement(oRun);",
      "Excel VBA": "oParagraph.Text = oParagraph.Text & \"This is the second paragraph element. \""
    },
    {
      "OnlyOffice JS": "oRun = Api.CreateRun();\noRun.AddText(\"This is the third paragraph element (it will be removed from the paragraph and we will not see it). \");\noParagraph.AddElement(oRun);",
      "Excel VBA": "oParagraph.Text = oParagraph.Text & \"This is the third paragraph element (it will be removed from the paragraph and we will not see it). \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddLineBreak();",
      "Excel VBA": "oParagraph.Text = oParagraph.Text & vbLf"
    },
    {
      "OnlyOffice JS": "oRun = Api.CreateRun();\noRun.AddText(\"This is the fourth paragraph element - it became the third, because we removed the previous run from the paragraph. \");\noParagraph.AddElement(oRun);",
      "Excel VBA": "oParagraph.Text = oParagraph.Text & \"This is the fourth paragraph element - it became the third, because we removed the previous run from the paragraph. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddLineBreak();",
      "Excel VBA": "oParagraph.Text = oParagraph.Text & vbLf"
    },
    {
      "OnlyOffice JS": "oRun = Api.CreateRun();\noRun.AddText(\"Please note that line breaks are not counted into paragraph elements!\");\noParagraph.AddElement(oRun);",
      "Excel VBA": "oParagraph.Text = oParagraph.Text & \"Please note that line breaks are not counted into paragraph elements!\""
    },
    {
      "OnlyOffice JS": "oParagraph.RemoveElement(3);",
      "Excel VBA": "Dim arr() As String\r\narr = Split(oParagraph.Text, vbLf)\r\nIf UBound(arr) >= 2 Then\r\n    arr(2) = \"\"\r\n    oParagraph.Text = Join(arr, vbLf)\r\nEnd If"
    }
  ]
}
``````json
{
  "description": "This code sets the bullet or numbering to the paragraph.",
  "code": {
    "OnlyOffice_JS": "// This example sets the bullet or numbering to the paragraph.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oBullet = Api.CreateBullet(\"-\");\noParagraph.SetBullet(oBullet);\noParagraph.AddText(\" This is an example of the bulleted paragraph.\");",
    "Excel_VBA": "' This example sets the bullet or numbering to the paragraph.\nDim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet\n\nDim oShape As Shape\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartManualInput, 120, 35, 200, 100) ' Width and Height are illustrative\n\nWith oShape.TextFrame2.TextRange.Paragraphs(1).ParagraphFormat.Bullet\n    .Visible = msoTrue\n    .Character = 8226 ' Unicode for bullet character\nEnd With\n\noShape.TextFrame2.TextRange.Text = \" This is an example of the bulleted paragraph.\""
  }
}
``````json
{
  "Description": "This example sets the paragraph first line indentation.",
  "OnlyOffice_JS": "// This example sets the paragraph first line indentation.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"This is a paragraph with the indent of 1 inch set to the first line. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\noParagraph.SetIndFirstLine(1440);\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"This is a paragraph without any indent set to the first line. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\noDocContent.Push(oParagraph);",
  "VBA": "' This example sets the paragraph first line indentation.\nSub SetParagraphIndentation()\n    Dim ws As Worksheet\n    Set ws = ActiveSheet\n\n    ' Add a textbox shape\n    Dim shp As Shape\n    Set shp = ws.Shapes.AddTextbox( _\n        Orientation:=msoTextOrientationHorizontal, _\n        Left:=120, Top:=70, Width:=300, Height:=150)\n\n    ' Set the fill color (RGB 255, 111, 61)\n    With shp.Fill\n        .Visible = msoTrue\n        .ForeColor.RGB = RGB(255, 111, 61)\n        .Solid\n    End With\n\n    ' Remove the line (stroke)\n    With shp.Line\n        .Visible = msoFalse\n    End With\n\n    ' Add text to the textbox\n    Dim txt As TextRange\n    Set txt = shp.TextFrame.Characters.Text\n    txt = \"This is a paragraph with the indent of 1 inch set to the first line. \" & _\n          \"These sentences are used to add lines for demonstrative purposes. \" & _\n          \"These sentences are used to add lines for demonstrative purposes. \" & _\n          \"These sentences are used to add lines for demonstrative purposes.\"\n\n    ' Set first line indentation to 1 inch (72 points)\n    With shp.TextFrame2.TextRange.ParagraphFormat\n        .FirstLineIndent = 72 ' Points\n    End With\n\n    ' Add another paragraph without indentation\n    txt = txt & vbCrLf & \"This is a paragraph without any indent set to the first line. \" & _\n          \"These sentences are used to add lines for demonstrative purposes. \" & _\n          \"These sentences are used to add lines for demonstrative purposes.\"\n\n    ' Ensure the second paragraph has no indentation\n    With shp.TextFrame2.TextRange.Paragraphs(2).ParagraphFormat\n        .FirstLineIndent = 0\n    End With\nEnd Sub"
}
``````json
{
  "description": "This example sets the paragraph left side indentation.",
  "OnlyOffice_JS": "// This example sets the paragraph left side indentation.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"This is a paragraph with the indent of 2 inches set to it. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.SetIndLeft(2880);\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"This is a paragraph without any indent set to it. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noDocContent.Push(oParagraph);",
  "Excel_VBA": "Sub SetParagraphIndent()\n    Dim ws As Worksheet\n    Set ws = ActiveSheet\n    \n    ' Create a fill with RGB(255, 111, 61)\n    Dim shp As Shape\n    Set shp = ws.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120 * 36, 70 * 36, 200, 100) ' Adjust width and height as needed\n    shp.Fill.ForeColor.RGB = RGB(255, 111, 61)\n    \n    ' Set stroke - no line\n    With shp.Line\n        .Visible = msoFalse\n    End With\n    \n    ' Add text to the shape\n    With shp.TextFrame2.TextRange\n        .Text = \"This is a paragraph with the indent of 2 inches set to it. These sentences are used to add lines for demonstrative purposes.\"\n        ' Set left indentation to 2 inches (144 points)\n        .ParagraphFormat.LeftIndent = 144 ' points\n    End With\n    \n    ' Add a new paragraph without indentation\n    With shp.TextFrame2.TextRange\n        .Text = .Text & vbCrLf & \"This is a paragraph without any indent set to it. These sentences are used to add lines for demonstrative purposes.\"\n        .Paragraphs(2).ParagraphFormat.LeftIndent = 0\n    End With\nEnd Sub"
}
``````json
{
  "Actions": [
    {
      "Description": "Set the active worksheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "Description": "Create a solid fill with RGB(255, 111, 61)",
      "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "ExcelVBA": "Dim fillColor As Long\nfillColor = RGB(255, 111, 61)"
    },
    {
      "Description": "Create a stroke with weight 0 and no fill",
      "OnlyOfficeJS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "ExcelVBA": "With oShape.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    },
    {
      "Description": "Add a shape to the worksheet",
      "OnlyOfficeJS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "ExcelVBA": "Set oShape = oWorksheet.Shapes.AddShape(_\n    Type:=msoShapeFlowchartOfflineStorage, _\n    Left:=120 * 36000 / 72, _\n    Top:=70 * 36000 / 72, _\n    Width:=100, _\n    Height:=50)\nWith oShape.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With\nWith oShape.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With"
    },
    {
      "Description": "Get content of the shape",
      "OnlyOfficeJS": "var oDocContent = oShape.GetContent();",
      "ExcelVBA": "Set oDocContent = oShape.TextFrame.TextRange"
    },
    {
      "Description": "Get the first paragraph element",
      "OnlyOfficeJS": "var oParagraph = oDocContent.GetElement(0);",
      "ExcelVBA": "Set oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "Description": "Add first text to the paragraph",
      "OnlyOfficeJS": "oParagraph.AddText(\"This is a paragraph with the right offset of 2 inches set to it. \");",
      "ExcelVBA": "oParagraph.Text = oParagraph.Text & \"This is a paragraph with the right offset of 2 inches set to it. \""
    },
    {
      "Description": "Add second text to the paragraph",
      "OnlyOfficeJS": "oParagraph.AddText(\"We also aligned the text in it by the right side. \");",
      "ExcelVBA": "oParagraph.Text = oParagraph.Text & \"We also aligned the text in it by the right side. \""
    },
    {
      "Description": "Add third text to the paragraph",
      "OnlyOfficeJS": "oParagraph.AddText(\"This sentence is used to add lines for demonstrative purposes.\");",
      "ExcelVBA": "oParagraph.Text = oParagraph.Text & \"This sentence is used to add lines for demonstrative purposes.\""
    },
    {
      "Description": "Set paragraph alignment to right",
      "OnlyOfficeJS": "oParagraph.SetJc(\"right\");",
      "ExcelVBA": "With oParagraph.ParagraphFormat\n    .Alignment = xlRight\nEnd With"
    },
    {
      "Description": "Set paragraph right indentation to 2880",
      "OnlyOfficeJS": "oParagraph.SetIndRight(2880);",
      "ExcelVBA": "oParagraph.ParagraphFormat.RightIndent = 2880  ' Units may need adjustment"
    },
    {
      "Description": "Create a new paragraph",
      "OnlyOfficeJS": "oParagraph = Api.CreateParagraph();",
      "ExcelVBA": "Set oParagraph = oDocContent.Paragraphs.Add"
    },
    {
      "Description": "Add first text to the new paragraph",
      "OnlyOfficeJS": "oParagraph.AddText(\"This is a paragraph without any offset set to it. \");",
      "ExcelVBA": "oParagraph.Text = oParagraph.Text & \"This is a paragraph without any offset set to it. \""
    },
    {
      "Description": "Add second text to the new paragraph",
      "OnlyOfficeJS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "ExcelVBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "Description": "Push the new paragraph to document content",
      "OnlyOfficeJS": "oDocContent.Push(oParagraph);",
      "ExcelVBA": "' In VBA, adding the paragraph is handled by the previous Paragraphs.Add method"
    }
  ]
}
``````json
{
  "description": "This example sets the paragraph contents justification.",
  "OnlyOffice_JS": "// This example sets the paragraph contents justification.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"This is a paragraph with the text in it aligned by the center. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\noParagraph.SetJc(\"center\");\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"This is a paragraph with the text in it aligned by the right side. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\noParagraph.SetJc(\"right\");\noDocContent.Push(oParagraph);\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"This is a paragraph with the text in it aligned by the left side. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\noParagraph.SetJc(\"left\");\noDocContent.Push(oParagraph);",
  "Excel_VBA": "' This example sets the paragraph contents justification.\nDim oWorksheet As Worksheet\nDim oShape As Shape\nDim oFill As FillFormat\nDim oStroke As LineFormat\nDim oTextFrame As TextFrame\n\nSet oWorksheet = ActiveSheet\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120 * 72, 70 * 72, 200, 100) ' Adjust size as needed\nSet oFill = oShape.Fill\noFill.ForeColor.RGB = RGB(255, 111, 61)\nSet oStroke = oShape.Line\noStroke.Visible = msoFalse\nSet oTextFrame = oShape.TextFrame\nWith oTextFrame.Characters.Text\n    .Text = \"This is a paragraph with the text in it aligned by the center. \" & _\n            \"These sentences are used to add lines for demonstrative purposes. \" & _\n            \"These sentences are used to add lines for demonstrative purposes.\"\n    .ParagraphFormat.Alignment = xlCenter\nEnd With\n' Add another paragraph\nWith oTextFrame.Characters.InsertAfter(\"This is a paragraph with the text in it aligned by the right side. \" & _\n        \"These sentences are used to add lines for demonstrative purposes. \" & _\n        \"These sentences are used to add lines for demonstrative purposes.\")\n    .ParagraphFormat.Alignment = xlRight\nEnd With\n' Add another paragraph\nWith oTextFrame.Characters.InsertAfter(\"This is a paragraph with the text in it aligned by the left side. \" & _\n        \"These sentences are used to add lines for demonstrative purposes. \" & _\n        \"These sentences are used to add lines for demonstrative purposes.\")\n    .ParagraphFormat.Alignment = xlLeft\nEnd With"
}
``````json
{
  "description": "This code sets up a shape on the active sheet with specific fill and stroke properties, adds text content with multiple paragraphs, and sets spacing after paragraphs.",
  "table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "Set oFill = CreateObject(\"SolidFill\")\nWith oFill\n    .Color = RGB(255, 111, 61)\nEnd With"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "Set oStroke = CreateObject(\"Stroke\")\nWith oStroke\n    .Weight = 0\n    .Fill = Nothing\nEnd With"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 70, oFill, oStroke, 0, 2, 0, 3)"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "Excel VBA": "Set oDocContent = oShape.TextFrame2.TextRange"
    },
    {
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel VBA": "Set oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is an example of setting a space after a paragraph. \");",
      "Excel VBA": "oParagraph.Text = oParagraph.Text & \"This is an example of setting a space after a paragraph. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");",
      "Excel VBA": "oParagraph.Text = oParagraph.Text & \"The second paragraph will have an offset of one inch from the top. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is due to the fact that the first paragraph has this offset enabled.\");",
      "Excel VBA": "oParagraph.Text = oParagraph.Text & \"This is due to the fact that the first paragraph has this offset enabled.\""
    },
    {
      "OnlyOffice JS": "oParagraph.SetSpacingAfter(1440);",
      "Excel VBA": "oParagraph.SpacingAfter = 1440"
    },
    {
      "OnlyOffice JS": "oParagraph = Api.CreateParagraph();",
      "Excel VBA": "Set oParagraph = oDocContent.Paragraphs.Add"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");",
      "Excel VBA": "oParagraph.Text = \"This is the second paragraph and it is one inch away from the first paragraph.\""
    },
    {
      "OnlyOffice JS": "oDocContent.Push(oParagraph);",
      "Excel VBA": "oDocContent.Paragraphs(2).Insert oParagraph"
    }
  ]
}
``````json
{
  "description": "This example sets the spacing before the paragraph.",
  "methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "Set oFill = ActiveSheet.Shapes(\"ShapeName\").Fill\noFill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "With ActiveSheet.Shapes(\"ShapeName\").Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Set oShape = ActiveSheet.Shapes.AddShape(msoShapeFlowchartOfflineStorage, 120, 70, 200, 300)\nWith oShape.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With\nWith oShape.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "Excel VBA": "Set oDocContent = oShape.TextFrame2.TextRange"
    },
    {
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel VBA": "Set oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is an example of setting a space before a paragraph. \");",
      "Excel VBA": "oParagraph.Text = \"This is an example of setting a space before a paragraph. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");",
      "Excel VBA": "oParagraph.Text = oParagraph.Text & \"The second paragraph will have an offset of one inch from the top. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is due to the fact that the second paragraph has this offset enabled.\");",
      "Excel VBA": "oParagraph.Text = oParagraph.Text & \"This is due to the fact that the second paragraph has this offset enabled.\""
    },
    {
      "OnlyOffice JS": "oParagraph = Api.CreateParagraph();",
      "Excel VBA": "Set oParagraph = oDocContent.Paragraphs.Add"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");",
      "Excel VBA": "oParagraph.Text = \"This is the second paragraph and it is one inch away from the first paragraph.\""
    },
    {
      "OnlyOffice JS": "oParagraph.SetSpacingBefore(1440);",
      "Excel VBA": "oParagraph.SpaceBefore = 1440"
    },
    {
      "OnlyOffice JS": "oDocContent.Push(oParagraph);",
      "Excel VBA": "' In Excel VBA, the paragraph is already added to the text range."
    }
  ]
}
``````json
{
  "description": "This example sets the paragraph line spacing, adds a shape to the active sheet, and modifies the shape's content with different paragraph spacings and texts.",
  "code": {
    "OnlyOffice_JS": "// This example sets the paragraph line spacing.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetSpacingLine(2 * 240, \"auto\");\noParagraph.AddText(\"Paragraph 1. Spacing: 2 times of a common paragraph line spacing.\");\noParagraph.AddLineBreak();\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph = Api.CreateParagraph();\noParagraph.SetSpacingLine(200, \"exact\");\noParagraph.AddText(\"Paragraph 2. Spacing: exact 10 points.\");\noParagraph.AddLineBreak();\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noDocContent.Push(oParagraph);",
    "Excel_VBA": "' This example sets the paragraph line spacing.\nDim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet\n\nDim oShape As Shape\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowChartOnlineStorage, 120 * 360, 70 * 360, 200, 150)\n\nWith oShape.TextFrame2.TextRange.ParagraphFormat\n    .LineSpacingRule = msoLineSpacingDouble\n    .LineSpacing = 0 ' 'auto' spacing not directly available\nEnd With\nWith oShape.TextFrame2.TextRange\n    .Text = \"Paragraph 1. Spacing: 2 times of a common paragraph line spacing.\"\n    .Characters.Paragraphs(1).InsertAfter vbCrLf\n    .Characters.Paragraphs(2).Text = \"These sentences are used to add lines for demonstrative purposes. \"\n    .Characters.Paragraphs(2).Text = \"These sentences are used to add lines for demonstrative purposes. \"\nEnd With\n\nDim oParagraph As TextRange2\nSet oParagraph = oShape.TextFrame2.TextRange.Paragraphs.Add\nWith oParagraph.ParagraphFormat\n    .LineSpacingRule = msoLineSpacingExactly\n    .LineSpacing = 10 ' 10 points\nEnd With\nWith oParagraph.TextRange\n    .Text = \"Paragraph 2. Spacing: exact 10 points.\"\n    .InsertAfter vbCrLf\n    .InsertAfter \"These sentences are used to add lines for demonstrative purposes. \"\n    .InsertAfter \"These sentences are used to add lines for demonstrative purposes. \"\n    .InsertAfter \"These sentences are used to add lines for demonstrative purposes. \"\nEnd With"
  }
}
``````json
{
  "Description": "This example sets a sequence of custom tab stops which will be used for any tab characters in the paragraph.",
  "CodeMappings": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "Set oFill = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "With oShape.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 150 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, 150, 70, 72, 108)\nWith oShape.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With\nWith oShape.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "Excel VBA": "Set oDocContent = oShape.TextFrame.TextRange"
    },
    {
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel VBA": "Set oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "OnlyOffice JS": "oParagraph.SetTabs([1440, 2880, 4320], [\"left\", \"center\", \"right\"]);",
      "Excel VBA": "With oParagraph.ParagraphFormat\n    .TabStops.ClearAll\n    .TabStops.Add Position:=72, Alignment:=xlLeft\n    .TabStops.Add Position:=144, Alignment:=xlCenter\n    .TabStops.Add Position:=216, Alignment:=xlRight\nEnd With"
    },
    {
      "OnlyOffice JS": "oParagraph.AddTabStop();",
      "Excel VBA": "oDocContent.InsertTab"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"Custom tab - 1 inch left\");",
      "Excel VBA": "oDocContent.InsertAfter \"Custom tab - 1 inch left\""
    },
    {
      "OnlyOffice JS": "oParagraph.AddLineBreak();",
      "Excel VBA": "oDocContent.InsertAfter vbCrLf"
    },
    {
      "OnlyOffice JS": "oParagraph.AddTabStop();",
      "Excel VBA": "oDocContent.InsertTab"
    },
    {
      "OnlyOffice JS": "oParagraph.AddTabStop();",
      "Excel VBA": "oDocContent.InsertTab"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"Custom tab - 2 inches center\");",
      "Excel VBA": "oDocContent.InsertAfter \"Custom tab - 2 inches center\""
    },
    {
      "OnlyOffice JS": "oParagraph.AddLineBreak();",
      "Excel VBA": "oDocContent.InsertAfter vbCrLf"
    },
    {
      "OnlyOffice JS": "oParagraph.AddTabStop();",
      "Excel VBA": "oDocContent.InsertTab"
    },
    {
      "OnlyOffice JS": "oParagraph.AddTabStop();",
      "Excel VBA": "oDocContent.InsertTab"
    },
    {
      "OnlyOffice JS": "oParagraph.AddTabStop();",
      "Excel VBA": "oDocContent.InsertTab"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"Custom tab - 3 inches right\");",
      "Excel VBA": "oDocContent.InsertAfter \"Custom tab - 3 inches right\""
    }
  ]
}
``````
// This example gets a class type and inserts it into the document.
{
  "CodeEquivalents": [
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set oWorksheet = Api.GetActiveSheet()"
    },
    {
      "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "ExcelVBA": "Set oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61))"
    },
    {
      "OnlyOfficeJS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "ExcelVBA": "Set oStroke = Api.CreateStroke(0, Api.CreateNoFill())"
    },
    {
      "OnlyOfficeJS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "ExcelVBA": "Set oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
    },
    {
      "OnlyOfficeJS": "var oDocContent = oShape.GetContent();",
      "ExcelVBA": "Set oDocContent = oShape.GetContent()"
    },
    {
      "OnlyOfficeJS": "var oParagraph = oDocContent.GetElement(0);",
      "ExcelVBA": "Set oParagraph = oDocContent.GetElement(0)"
    },
    {
      "OnlyOfficeJS": "var oParaPr = oParagraph.GetParaPr();",
      "ExcelVBA": "Set oParaPr = oParagraph.GetParaPr()"
    },
    {
      "OnlyOfficeJS": "var sClassType = oParaPr.GetClassType();",
      "ExcelVBA": "sClassType = oParaPr.GetClassType()"
    },
    {
      "OnlyOfficeJS": "oParaPr.SetIndFirstLine(1440);",
      "ExcelVBA": "oParaPr.SetIndFirstLine 1440"
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"This is the first paragraph with the indent of 1 inch set to the first line. \");",
      "ExcelVBA": "oParagraph.AddText \"This is the first paragraph with the indent of 1 inch set to the first line. \""
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");",
      "ExcelVBA": "oParagraph.AddText \"This indent is set by the paragraph style. No paragraph inline style is applied. \""
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "ExcelVBA": "oParagraph.AddText \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");",
      "ExcelVBA": "oParagraph.AddText \"These sentences are used to add lines for demonstrative purposes.\""
    },
    {
      "OnlyOfficeJS": "oParagraph = Api.CreateParagraph();",
      "ExcelVBA": "Set oParagraph = Api.CreateParagraph()"
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"Class Type = \" + sClassType);",
      "ExcelVBA": "oParagraph.AddText \"Class Type = \" & sClassType"
    },
    {
      "OnlyOfficeJS": "oDocContent.Push(oParagraph);",
      "ExcelVBA": "oDocContent.Push oParagraph"
    }
  ]
}
``````json
{
  "description": "This table provides the Excel VBA equivalents for each method used in the provided OnlyOffice JavaScript code. The code adds a flowchart shape to the active worksheet, sets its fill and stroke properties, adjusts paragraph indentation, adds multiple text lines, retrieves the indentation value, creates a new paragraph displaying this value, and appends it to the shape's document content.",
  "RAG_table": [
    {
      "OnlyOffice_JS_Method": "Api.GetActiveSheet()",
      "Excel_VBA_Equivalent": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS_Method": "Api.CreateRGBColor(255, 111, 61)",
      "Excel_VBA_Equivalent": "RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS_Method": "Api.CreateSolidFill(color)",
      "Excel_VBA_Equivalent": "oFill.ForeColor.RGB = RGB(255, 111, 61)\noFill.Visible = msoTrue"
    },
    {
      "OnlyOffice_JS_Method": "Api.CreateStroke(0, Api.CreateNoFill())",
      "Excel_VBA_Equivalent": "With oStroke\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS_Method": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)",
      "Excel_VBA_Equivalent": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 70, 200, 150)\n' Adjust size as needed"
    },
    {
      "OnlyOffice_JS_Method": "oShape.GetContent()",
      "Excel_VBA_Equivalent": "Set oDocContent = oShape.TextFrame2.TextRange"
    },
    {
      "OnlyOffice_JS_Method": "oDocContent.GetElement(0)",
      "Excel_VBA_Equivalent": "Set oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "OnlyOffice_JS_Method": "oParagraph.GetParaPr()",
      "Excel_VBA_Equivalent": "Set oParaPr = oParagraph.ParagraphFormat"
    },
    {
      "OnlyOffice_JS_Method": "oParaPr.SetIndFirstLine(1440)",
      "Excel_VBA_Equivalent": "oParaPr.FirstLineIndent = 720 ' Points (1 inch)"
    },
    {
      "OnlyOffice_JS_Method": "oParagraph.AddText(\"Sample text.\")",
      "Excel_VBA_Equivalent": "oDocContent.Text = oDocContent.Text & \"Sample text.\""
    },
    {
      "OnlyOffice_JS_Method": "oParaPr.GetIndFirstLine()",
      "Excel_VBA_Equivalent": "nIndFirstLine = oParaPr.FirstLineIndent"
    },
    {
      "OnlyOffice_JS_Method": "Api.CreateParagraph()",
      "Excel_VBA_Equivalent": "' VBA does not require explicit paragraph creation; append text directly."
    },
    {
      "OnlyOffice_JS_Method": "oDocContent.Push(oParagraph)",
      "Excel_VBA_Equivalent": "' Text is already appended using oDocContent.Text"
    }
  ]
}
``````json
{
  "description": "This example shows how to get the paragraph left side indentation.",
  "OnlyOffice_JS": "// This example shows how to get the paragraph left side indentation.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetIndLeft(2880);\noParagraph.AddText(\"This is the first paragraph with the indent of 2 inches set to it. \");\noParagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\nvar nIndLeft = oParaPr.GetIndLeft();\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"Left indent: \" + nIndLeft);\noDocContent.Push(oParagraph);",
  "Excel_VBA": "' This example shows how to get the paragraph left side indentation.\nSub SetParagraphIndent()\n    Dim ws As Worksheet\n    Set ws = ThisWorkbook.ActiveSheet\n    \n    ' Add a shape to the worksheet\n    Dim shp As Shape\n    Set shp = ws.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 70, 300, 150)\n    \n    ' Set the fill color\n    shp.Fill.ForeColor.RGB = RGB(255, 111, 61)\n    \n    ' Remove the line (stroke)\n    shp.Line.Visible = msoFalse\n    \n    ' Add text to the shape\n    With shp.TextFrame2.TextRange.ParagraphFormat\n        .LeftIndent = 2880 ' Points\n    End With\n    shp.TextFrame2.TextRange.Text = \"This is the first paragraph with the indent of 2 inches set to it. \" & _\n                                     \"This indent is set by the paragraph style. No paragraph inline style is applied.\"\n    \n    ' Get the left indent value\n    Dim nIndLeft As Single\n    nIndLeft = shp.TextFrame2.TextRange.ParagraphFormat.LeftIndent\n    \n    ' Add a new shape to display the indent value\n    Dim shpIndent As Shape\n    Set shpIndent = ws.Shapes.AddTextbox(msoTextOrientationHorizontal, 120, 230, 300, 50)\n    shpIndent.TextFrame2.TextRange.Text = \"Left indent: \" & nIndLeft\nEnd Sub"
}
``````json
{
  "description": "This example shows how to get the paragraph right side indentation.",
  "table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "Dim oFill As FillFormat\nSet oFill = oShape.Fill\noFill.ForeColor.RGB = RGB(255, 111, 61)\noFill.Solid"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "With oShape.Line\n    .Visible = msoTrue\n    .Weight = 0\n    .ForeColor.RGB = RGB(255, 255, 255) ' No fill equivalent\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel_VBA": "Dim oShape As Shape\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, 120, 70, 200, 150)\nWith oShape.Fill\n    .Visible = msoTrue\n    .ForeColor.RGB = RGB(255, 111, 61)\n    .Solid\nEnd With\nWith oShape.Line\n    .Visible = msoTrue\n    .Weight = 0\n    .ForeColor.RGB = RGB(255, 255, 255)\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oDocContent = oShape.GetContent();",
      "Excel_VBA": "Dim oDocContent As TextRange\nSet oDocContent = oShape.TextFrame2.TextRange"
    },
    {
      "OnlyOffice_JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel_VBA": "Dim oParagraph As ParagraphFormat\nSet oParagraph = oDocContent.Paragraphs(1).ParagraphFormat"
    },
    {
      "OnlyOffice_JS": "var oParaPr = oParagraph.GetParaPr();",
      "Excel_VBA": "Dim oParaPr As ParagraphFormat\nSet oParaPr = oParagraph"
    },
    {
      "OnlyOffice_JS": "oParaPr.SetIndRight(2880);",
      "Excel_VBA": "oParaPr.RightIndent = 36 ' Points (2 inches)"
    },
    {
      "OnlyOffice_JS": "oParaPr.SetJc(\"right\");",
      "Excel_VBA": "oParaPr.Alignment = msoAlignRight"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"This is the first paragraph with the right offset of 2 inches set to it. \");\n oParagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");",
      "Excel_VBA": "oDocContent.Text = \"This is the first paragraph with the right offset of 2 inches set to it. \" & _\n                     \"This indent is set by the paragraph style. No paragraph inline style is applied.\""
    },
    {
      "OnlyOffice_JS": "var nIndRight = oParaPr.GetIndRight();",
      "Excel_VBA": "Dim nIndRight As Single\nnIndRight = oParaPr.RightIndent"
    },
    {
      "OnlyOffice_JS": "oParagraph = Api.CreateParagraph();",
      "Excel_VBA": "Dim oNewParagraph As TextRange\nSet oNewParagraph = oDocContent.Paragraphs.Add"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"Right indent: \" + nIndRight);",
      "Excel_VBA": "oNewParagraph.Text = \"Right indent: \" & nIndRight"
    },
    {
      "OnlyOffice_JS": "oDocContent.Push(oParagraph);",
      "Excel_VBA": "' Not directly applicable; adding text updates the TextRange automatically."
    }
  ]
}
``````json
{
  "description": "This table provides the Excel VBA equivalents for each OnlyOffice API method used in the provided JavaScript code example.",
  "codeMappings": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "Dim oFill As Long\noFill = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "With oShape.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel_VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartPredefinedProcess, 120, 70, 200, 300)\nWith oShape.Fill\n    .ForeColor.RGB = oFill\nEnd With\nWith oShape.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oDocContent = oShape.GetContent();",
      "Excel_VBA": "Dim oDocContent As TextRange\nSet oDocContent = oShape.TextFrame2.TextRange"
    },
    {
      "OnlyOffice_JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel_VBA": "Dim oParagraph As TextRange\nSet oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "OnlyOffice_JS": "var oParaPr = oParagraph.GetParaPr();",
      "Excel_VBA": "With oParagraph.ParagraphFormat\n    .Alignment = xlCenter\nEnd With"
    },
    {
      "OnlyOffice_JS": "oParaPr.SetJc(\"center\");",
      "Excel_VBA": "oParagraph.ParagraphFormat.Alignment = xlCenter"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"This is a paragraph with the text in it aligned by the center. \");",
      "Excel_VBA": "oParagraph.Text = oParagraph.Text & \"This is a paragraph with the text in it aligned by the center. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"The justification is specified in the paragraph style. \");",
      "Excel_VBA": "oParagraph.Text = oParagraph.Text & \"The justification is specified in the paragraph style. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "Excel_VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "Excel_VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");",
      "Excel_VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes.\""
    },
    {
      "OnlyOffice_JS": "var sJc = oParaPr.GetJc();",
      "Excel_VBA": "Dim sJc As XlVAlign\nsJc = oParagraph.ParagraphFormat.Alignment"
    },
    {
      "OnlyOffice_JS": "oParagraph = Api.CreateParagraph();",
      "Excel_VBA": "Set oParagraph = oDocContent.Paragraphs.Add"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"Justification: \" + sJc);",
      "Excel_VBA": "oParagraph.Text = \"Justification: \" & sJc"
    },
    {
      "OnlyOffice_JS": "oDocContent.Push(oParagraph);",
      "Excel_VBA": "oDocContent.InsertAfter oParagraph.Text"
    }
  ]
}
``````json
{
  "table": {
    "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
      },
      {
        "Description": "Create a solid fill with RGB color (255, 111, 61)",
        "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
        "Excel VBA": "Dim oFill As Object\nSet oFill = CreateSolidFill(RGB(255, 111, 61))"
      },
      {
        "Description": "Create a stroke with 0 width and no fill",
        "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
        "Excel VBA": "Dim oStroke As Object\nSet oStroke = CreateStroke(0, CreateNoFill())"
      },
      {
        "Description": "Add a shape to the worksheet with specified parameters",
        "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
        "Excel VBA": "Dim oShape As Shape\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartProcess, 120 * 36000, 70 * 36000, 2 * 36000, 3 * 36000)\noShape.Fill.ForeColor.RGB = RGB(255, 111, 61)\noShape.Line.Visible = msoFalse"
      },
      {
        "Description": "Get the content of the shape",
        "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
        "Excel VBA": "Dim oDocContent As TextRange\nSet oDocContent = oShape.TextFrame.TextRange"
      },
      {
        "Description": "Get the first paragraph from the content",
        "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
        "Excel VBA": "Dim oParagraph As ParagraphFormat\nSet oParagraph = oDocContent.Paragraphs(1).ParagraphFormat"
      },
      {
        "Description": "Get paragraph properties",
        "OnlyOffice JS": "var oParaPr = oParagraph.GetParaPr();",
        "Excel VBA": "Dim oParaPr As ParagraphFormat\nSet oParaPr = oParagraph.ParagraphFormat"
      },
      {
        "Description": "Set spacing after the paragraph to 1440",
        "OnlyOffice JS": "oParaPr.SetSpacingAfter(1440);",
        "Excel VBA": "oParaPr.SpaceAfter = 1440"
      },
      {
        "Description": "Add text to the paragraph",
        "OnlyOffice JS": "oParagraph.AddText(\"This is an example of setting a space after a paragraph. \");",
        "Excel VBA": "oDocContent.Text = oDocContent.Text & \"This is an example of setting a space after a paragraph. \""
      },
      {
        "Description": "Get spacing after value of the paragraph",
        "OnlyOffice JS": "var nSpacingAfter = oParaPr.GetSpacingAfter();",
        "Excel VBA": "Dim nSpacingAfter As Long\nnSpacingAfter = oParaPr.SpaceAfter"
      },
      {
        "Description": "Create a new paragraph",
        "OnlyOffice JS": "oParagraph = Api.CreateParagraph();",
        "Excel VBA": "Set oParagraph = oDocContent.Paragraphs.Add"
      },
      {
        "Description": "Add text displaying the spacing after value",
        "OnlyOffice JS": "oParagraph.AddText(\"Spacing after : \" + nSpacingAfter);",
        "Excel VBA": "oParagraph.Text = \"Spacing after: \" & nSpacingAfter"
      },
      {
        "Description": "Append the new paragraph to the document content",
        "OnlyOffice JS": "oDocContent.Push(oParagraph);",
        "Excel VBA": "oDocContent.Paragraphs.Add oParagraph"
      }
    ]
  }
}
``````json
{
  "description": "This JSON table provides the Excel VBA equivalents for each method used in the provided OnlyOffice JavaScript API example.",
  "table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = Api.GetActiveSheet()"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "Set oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61))"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "Set oStroke = Api.CreateStroke(0, Api.CreateNoFill())"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Set oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "Excel VBA": "Set oDocContent = oShape.GetContent()"
    },
    {
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel VBA": "Set oParagraph = oDocContent.GetElement(0)"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is an example of setting a space before a paragraph.\");",
      "Excel VBA": "oParagraph.AddText \"This is an example of setting a space before a paragraph.\""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");",
      "Excel VBA": "oParagraph.AddText \"The second paragraph will have an offset of one inch from the top. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is due to the fact that the second paragraph has this offset enabled.\");",
      "Excel VBA": "oParagraph.AddText \"This is due to the fact that the second paragraph has this offset enabled.\""
    },
    {
      "OnlyOffice JS": "var oParagraph2 = Api.CreateParagraph();",
      "Excel VBA": "Set oParagraph2 = Api.CreateParagraph()"
    },
    {
      "OnlyOffice JS": "oParagraph2.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");",
      "Excel VBA": "oParagraph2.AddText \"This is the second paragraph and it is one inch away from the first paragraph.\""
    },
    {
      "OnlyOffice JS": "oDocContent.Push(oParagraph2);",
      "Excel VBA": "oDocContent.Push oParagraph2"
    },
    {
      "OnlyOffice JS": "var oParaPr = oParagraph2.GetParaPr();",
      "Excel VBA": "Set oParaPr = oParagraph2.GetParaPr()"
    },
    {
      "OnlyOffice JS": "oParaPr.SetSpacingBefore(1440);",
      "Excel VBA": "oParaPr.SetSpacingBefore 1440"
    },
    {
      "OnlyOffice JS": "var nSpacingBefore = oParaPr.GetSpacingBefore();",
      "Excel VBA": "nSpacingBefore = oParaPr.GetSpacingBefore()"
    },
    {
      "OnlyOffice JS": "oParagraph = Api.CreateParagraph();",
      "Excel VBA": "Set oParagraph = Api.CreateParagraph()"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"Spacing before: \" + nSpacingBefore);",
      "Excel VBA": "oParagraph.AddText \"Spacing before: \" & nSpacingBefore"
    },
    {
      "OnlyOffice JS": "oDocContent.Push(oParagraph);",
      "Excel VBA": "oDocContent.Push oParagraph"
    }
  ]
}
``````json
{
  "Description": "This example demonstrates how to replicate OnlyOffice API methods using Excel VBA.",
  "Steps": [
    {
      "Description": "Get the active worksheet.",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Create a solid fill with RGB color (255, 111, 61).",
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "Set oFill = oWorksheet.Shapes.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "Description": "Create a stroke with specific parameters.",
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "With oWorksheet.Shapes.Stroke\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    },
    {
      "Description": "Add a shape to the worksheet with specified properties.",
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 70, 200, 150)\nWith oShape\n    .Fill.ForeColor.RGB = RGB(255, 111, 61)\n    .Line.Visible = msoFalse\nEnd With"
    },
    {
      "Description": "Get the content of the shape.",
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "Excel VBA": "' Excel VBA does not have a direct equivalent; content management differs."
    },
    {
      "Description": "Get the first paragraph element.",
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel VBA": "' Excel VBA does not have a direct equivalent for paragraph elements within shapes."
    },
    {
      "Description": "Get paragraph properties.",
      "OnlyOffice JS": "var oParaPr = oParagraph.GetParaPr();",
      "Excel VBA": "' Excel VBA uses different objects for paragraph properties, typically accessed via TextFrame."
    },
    {
      "Description": "Set line spacing to 3 times the common paragraph line spacing.",
      "OnlyOffice JS": "oParaPr.SetSpacingLine(3 * 240, \"auto\");",
      "Excel VBA": "With oShape.TextFrame2.TextRange.ParagraphFormat\n    .LineSpacingRule = msoLineSpaceMultiple\n    .LineSpacing = 3 * 240\nEnd With"
    },
    {
      "Description": "Add text to the paragraph.",
      "OnlyOffice JS": "oParagraph.AddText(\"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\");",
      "Excel VBA": "oShape.TextFrame2.TextRange.Text = \"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\""
    },
    {
      "Description": "Add a line break.",
      "OnlyOffice JS": "oParagraph.AddLineBreak();",
      "Excel VBA": "oShape.TextFrame2.TextRange.InsertAfter vbCrLf"
    },
    {
      "Description": "Add additional text for demonstration.",
      "OnlyOffice JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");",
      "Excel VBA": "oShape.TextFrame2.TextRange.InsertAfter \"These sentences are used to add lines for demonstrative purposes.\""
    },
    {
      "Description": "Get the spacing line rule.",
      "OnlyOffice JS": "var sSpacingLineRule = oParaPr.GetSpacingLineRule();",
      "Excel VBA": "' Excel VBA does not provide a direct method to get the line spacing rule as a string."
    },
    {
      "Description": "Create a new paragraph.",
      "OnlyOffice JS": "oParagraph = Api.CreateParagraph();",
      "Excel VBA": "' Excel VBA manages paragraphs within TextRange objects differently."
    },
    {
      "Description": "Add text displaying the spacing line rule.",
      "OnlyOffice JS": "oParagraph.AddText(\"Spacing line rule : \" + sSpacingLineRule);",
      "Excel VBA": "oShape.TextFrame2.TextRange.InsertAfter \"Spacing line rule : \" & LineSpacingRule"
    },
    {
      "Description": "Push the new paragraph to the document content.",
      "OnlyOffice JS": "oDocContent.Push(oParagraph);",
      "Excel VBA": "' In Excel VBA, changes to TextRange are automatically reflected; no push method is needed."
    }
  ]
}
``````json
{
  "Description": "This example demonstrates how to manipulate a worksheet by adding a shape with specific fill and stroke properties, modifying paragraph line spacing, and adding text with line breaks.",
  "Conversions": [
    {
      "Step": "Get the active worksheet",
      "VBA Equivalent": "Set oWorksheet = ActiveSheet",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Step": "Create a solid fill with RGB color (255, 111, 61)",
      "VBA Equivalent": "oFill = RGB(255, 111, 61)",
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));"
    },
    {
      "Step": "Create a stroke with no fill",
      "VBA Equivalent": "With oShape.Line\n    .Visible = msoFalse\nEnd With",
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());"
    },
    {
      "Step": "Add a shape to the worksheet",
      "VBA Equivalent": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartProcess, 120, 70, 200, 150)\nWith oShape.Fill\n    .ForeColor.RGB = oFill\nEnd With\nWith oShape.Line\n    .Visible = msoFalse\nEnd With",
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape('flowChartOnlineStorage', 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);"
    },
    {
      "Step": "Get the content of the shape",
      "VBA Equivalent": "Set oDocContent = oShape.TextFrame",
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();"
    },
    {
      "Step": "Retrieve the first paragraph",
      "VBA Equivalent": "Set oParagraph = oDocContent.Characters",
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);"
    },
    {
      "Step": "Get paragraph properties",
      "VBA Equivalent": "With oShape.TextFrame.Characters.ParagraphFormat\n    ' VBA has limited paragraph spacing options\nEnd With",
      "OnlyOffice JS": "var oParaPr = oParagraph.GetParaPr();"
    },
    {
      "Step": "Set line spacing to 3 times the common paragraph line spacing",
      "VBA Equivalent": "With oShape.TextFrame\n    .Characters.ParagraphFormat.SpaceWithin = 3\nEnd With",
      "OnlyOffice JS": "oParaPr.SetSpacingLine(3 * 240, 'auto');"
    },
    {
      "Step": "Add first text to the paragraph",
      "VBA Equivalent": "oShape.TextFrame.Characters.Text = 'Paragraph 1. Spacing: 3 times of a common paragraph line spacing.'",
      "OnlyOffice JS": "oParagraph.AddText('Paragraph 1. Spacing: 3 times of a common paragraph line spacing.');"
    },
    {
      "Step": "Add a line break",
      "VBA Equivalent": "oShape.TextFrame.Characters.Text = oShape.TextFrame.Characters.Text & vbCrLf",
      "OnlyOffice JS": "oParagraph.AddLineBreak();"
    },
    {
      "Step": "Add additional text for demonstration",
      "VBA Equivalent": "oShape.TextFrame.Characters.Text = oShape.TextFrame.Characters.Text & 'These sentences are used to add lines for demonstrative purposes.'",
      "OnlyOffice JS": "oParagraph.AddText('These sentences are used to add lines for demonstrative purposes.');"
    },
    {
      "Step": "Retrieve the line spacing value",
      "VBA Equivalent": "' VBA does not provide a direct way to get line spacing value",
      "OnlyOffice JS": "var nSpacingLineValue = oParaPr.GetSpacingLineValue();"
    },
    {
      "Step": "Create a new paragraph with spacing line value",
      "VBA Equivalent": "oShape.TextFrame.Characters.Text = oShape.TextFrame.Characters.Text & vbCrLf & 'Spacing line value: ' & nSpacingLineValue",
      "OnlyOffice JS": "oParagraph = Api.CreateParagraph();\noParagraph.AddText('Spacing line value : ' + nSpacingLineValue);\noDocContent.Push(oParagraph);"
    }
  ]
}
``````json
{
  "Description": "This example gets a class type and inserts it into the document.",
  "Methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "Set oFill = CreateSolidFill(CreateRGBColor(255, 111, 61))"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "Set oStroke = CreateStroke(0, CreateNoFill())"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "Excel VBA": "Set oDocContent = oShape.GetContent"
    },
    {
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel VBA": "Set oParagraph = oDocContent.Elements(0)"
    },
    {
      "OnlyOffice JS": "var oParaPr = oParagraph.GetParaPr();",
      "Excel VBA": "Set oParaPr = oParagraph.GetParaPr"
    },
    {
      "OnlyOffice JS": "var sClassType = oParaPr.GetClassType();",
      "Excel VBA": "sClassType = oParaPr.ClassType"
    },
    {
      "OnlyOffice JS": "oParaPr.SetIndFirstLine(1440);",
      "Excel VBA": "oParaPr.IndentFirstLine = 1440"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is the first paragraph with the indent of 1 inch set to the first line. \");",
      "Excel VBA": "oParagraph.AddText \"This is the first paragraph with the indent of 1 inch set to the first line. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");",
      "Excel VBA": "oParagraph.AddText \"This indent is set by the paragraph style. No paragraph inline style is applied. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "Excel VBA": "oParagraph.AddText \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");",
      "Excel VBA": "oParagraph.AddText \"These sentences are used to add lines for demonstrative purposes.\""
    },
    {
      "OnlyOffice JS": "oParagraph = Api.CreateParagraph();",
      "Excel VBA": "Set oParagraph = CreateParagraph()"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"Class Type = \" + sClassType);",
      "Excel VBA": "oParagraph.AddText \"Class Type = \" & sClassType"
    },
    {
      "OnlyOffice JS": "oDocContent.Push(oParagraph);",
      "Excel VBA": "oDocContent.Push oParagraph"
    }
  ]
}
``````json
{
  "description": "This code demonstrates how to create a shape, set paragraph indentation, add text, and retrieve indentation settings using the OnlyOffice API and their Excel VBA equivalents.",
  "table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "Dim oFill As FillFormat\nSet oFill = oWorksheet.Shapes.AddShape(msoShapeRectangle, 0, 0, 100, 100).Fill\noFill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "Dim oStroke As LineFormat\nSet oStroke = oWorksheet.Shapes(1).Line\noStroke.Weight = 0\noStroke.Visible = msoFalse"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Dim oShape As Shape\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, 120, 70, 200, 150)\nWith oShape\n    .Fill.ForeColor.RGB = RGB(255, 111, 61)\n    .Line.Weight = 0\n    .Line.Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "Excel VBA": "Dim oTextFrame As TextFrame\nSet oTextFrame = oShape.TextFrame"
    },
    {
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel VBA": "Dim oParagraph As TextRange\nSet oParagraph = oTextFrame.TextRange.Paragraphs(1)"
    },
    {
      "OnlyOffice JS": "var oParaPr = oParagraph.GetParaPr();",
      "Excel VBA": "Dim oParaFormat As ParagraphFormat\nSet oParaFormat = oParagraph.ParagraphFormat"
    },
    {
      "OnlyOffice JS": "oParaPr.SetIndFirstLine(1440);",
      "Excel VBA": "oParaFormat.FirstLineIndent = InchesToPoints(1)"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is the first paragraph with the indent of 1 inch set to the first line. \");",
      "Excel VBA": "oParagraph.Text = \"This is the first paragraph with the indent of 1 inch set to the first line. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");",
      "Excel VBA": "oParagraph.Text = oParagraph.Text & \"This indent is set by the paragraph style. No paragraph inline style is applied. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "Excel VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "Excel VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");",
      "Excel VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes.\""
    },
    {
      "OnlyOffice JS": "var nIndFirstLine = oParaPr.GetIndFirstLine();",
      "Excel VBA": "Dim nIndFirstLine As Single\nnIndFirstLine = oParaFormat.FirstLineIndent"
    },
    {
      "OnlyOffice JS": "oParagraph = Api.CreateParagraph();",
      "Excel VBA": "Dim newParagraph As TextRange\nSet newParagraph = oTextFrame.TextRange.Paragraphs.Add"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"First line indent: \" + nIndFirstLine);",
      "Excel VBA": "newParagraph.Text = \"First line indent: \" & nIndFirstLine"
    },
    {
      "OnlyOffice JS": "oDocContent.Push(oParagraph);",
      "Excel VBA": "' In VBA, text is already added to the TextFrame, no need to push."
    }
  ]
}
``````json
{
  "description": "This example shows how to get the paragraph left side indentation.",
  "methods": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "oFillColor = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "With oShape.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel_VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 70, 200, 300)"
    },
    {
      "OnlyOffice_JS": "var oDocContent = oShape.GetContent();",
      "Excel_VBA": "Set oDocContent = oShape.TextFrame2.TextRange"
    },
    {
      "OnlyOffice_JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel_VBA": "Set oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "OnlyOffice_JS": "var oParaPr = oParagraph.GetParaPr();",
      "Excel_VBA": "Set oParaPr = oParagraph.ParagraphFormat"
    },
    {
      "OnlyOffice_JS": "oParaPr.SetIndLeft(2880);",
      "Excel_VBA": "oParaPr.LeftIndent = 2880"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"This is the first paragraph with the indent of 2 inches set to it. \");",
      "Excel_VBA": "oParagraph.Text = oParagraph.Text & \"This is the first paragraph with the indent of 2 inches set to it. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");",
      "Excel_VBA": "oParagraph.Text = oParagraph.Text & \"This indent is set by the paragraph style. No paragraph inline style is applied. \""
    },
    {
      "OnlyOffice_JS": "var nIndLeft = oParaPr.GetIndLeft();",
      "Excel_VBA": "nIndLeft = oParaPr.LeftIndent"
    },
    {
      "OnlyOffice_JS": "oParagraph = Api.CreateParagraph();",
      "Excel_VBA": "Set oParagraph = oDocContent.Paragraphs.Add"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"Left indent: \" + nIndLeft);",
      "Excel_VBA": "oParagraph.Text = \"Left indent: \" & nIndLeft"
    },
    {
      "OnlyOffice_JS": "oDocContent.Push(oParagraph);",
      "Excel_VBA": "oDocContent.Paragraphs.Add oParagraph"
    }
  ]
}
``````json
{
  "description": "Conversion of OnlyOffice JavaScript API methods to their equivalent Excel VBA methods. The code demonstrates how to manipulate worksheet shapes and paragraph properties.",
  "RAG_table": [
    {
      "OnlyOffice_JS": "Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "Api.CreateRGBColor(255, 111, 61);",
      "Excel_VBA": "color = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "Set oFill = oWorksheet.Shapes.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "Set oStroke = oWorksheet.Shapes.Line"
    },
    {
      "OnlyOffice_JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel_VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartProcess, 120, 70, oFill.Width, oFill.Height)"
    },
    {
      "OnlyOffice_JS": "oShape.GetContent();",
      "Excel_VBA": "Set oDocContent = oShape.TextFrame"
    },
    {
      "OnlyOffice_JS": "oDocContent.GetElement(0);",
      "Excel_VBA": "Set oParagraph = oDocContent.Characters(1)"
    },
    {
      "OnlyOffice_JS": "oParagraph.GetParaPr();",
      "Excel_VBA": "Set oParaPr = oParagraph.ParagraphFormat"
    },
    {
      "OnlyOffice_JS": "oParaPr.SetIndRight(2880);",
      "Excel_VBA": "oParaPr.RightIndent = 2880"
    },
    {
      "OnlyOffice_JS": "oParaPr.SetJc(\"right\");",
      "Excel_VBA": "oParaPr.Alignment = xlAlignRight"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"This is the first paragraph with the right offset of 2 inches set to it. \");",
      "Excel_VBA": "oParagraph.Text = \"This is the first paragraph with the right offset of 2 inches set to it. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");",
      "Excel_VBA": "oParagraph.Text = oParagraph.Text & \"This indent is set by the paragraph style. No paragraph inline style is applied. \""
    },
    {
      "OnlyOffice_JS": "var nIndRight = oParaPr.GetIndRight();",
      "Excel_VBA": "nIndRight = oParaPr.RightIndent"
    },
    {
      "OnlyOffice_JS": "oParagraph = Api.CreateParagraph();",
      "Excel_VBA": "Set oParagraph = oDocContent.Paragraphs.Add"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"Right indent: \" + nIndRight);",
      "Excel_VBA": "oParagraph.Text = \"Right indent: \" & nIndRight"
    },
    {
      "OnlyOffice_JS": "oDocContent.Push(oParagraph);",
      "Excel_VBA": "oDocContent.Add oParagraph"
    }
  ]
}
``````json
{
  "description": "This code retrieves the active worksheet, creates a shape with specified fill and stroke properties, sets the paragraph justification to center, adds multiple lines of text to the shape, retrieves the justification setting, creates a new paragraph displaying the justification, and appends it to the shape's content.",
  "OnlyOffice_JS": "// This example shows how to get the paragraph contents justification.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetJc(\"center\");\noParagraph.AddText(\"This is a paragraph with the text in it aligned by the center. \");\noParagraph.AddText(\"The justification is specified in the paragraph style. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\nvar sJc = oParaPr.GetJc();\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"Justification: \" + sJc);\noDocContent.Push(oParagraph);",
  "Excel_VBA": "' This example shows how to get the paragraph contents justification.\nDim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet\n\nDim oFill As Long\noFill = RGB(255, 111, 61)\n\nDim oShape As Shape\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 70, 36000, 36000)\n\nWith oShape.Fill\n    .ForeColor.RGB = oFill\n    .Solid\nEnd With\n\nWith oShape.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With\n\nWith oShape.TextFrame2.TextRange.ParagraphFormat\n    .Alignment = msoAlignCenter\nEnd With\n\nWith oShape.TextFrame2.TextRange\n    .Text = \"This is a paragraph with the text in it aligned by the center. \" & _\n            \"The justification is specified in the paragraph style. \" & _\n            \"These sentences are used to add lines for demonstrative purposes. \" & _\n            \"These sentences are used to add lines for demonstrative purposes. \" & _\n            \"These sentences are used to add lines for demonstrative purposes.\"\nEnd With\n\nDim sJc As String\nsJc = \"Center\"\n\nWith oShape.TextFrame2.TextRange\n    .InsertAfter vbCrLf & \"Justification: \" & sJc\nEnd With"
}
``````json
{
  "description": "Equivalent Excel VBA code for the provided OnlyOffice JavaScript example, demonstrating worksheet manipulation, shape creation, and paragraph formatting.",
  "code": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "VBA": "Dim oFill As Object\nSet oFill = CreateSolidFill(CreateRGBColor(255, 111, 61))"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "VBA": "Dim oStroke As Object\nSet oStroke = CreateStroke(0, CreateNoFill())"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "VBA": "Dim oShape As Shape\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "VBA": "Dim oDocContent As Object\nSet oDocContent = oShape.Content"
    },
    {
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "VBA": "Dim oParagraph As Object\nSet oParagraph = oDocContent.Elements(1)"
    },
    {
      "OnlyOffice JS": "var oParaPr = oParagraph.GetParaPr();",
      "VBA": "Dim oParaPr As Object\nSet oParaPr = oParagraph.ParagraphFormat"
    },
    {
      "OnlyOffice JS": "oParaPr.SetSpacingAfter(1440);",
      "VBA": "oParaPr.SpaceAfter = 1440"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is an example of setting a space after a paragraph. \");",
      "VBA": "oParagraph.Range.Text = \"This is an example of setting a space after a paragraph. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");",
      "VBA": "oParagraph.Range.Text = oParagraph.Range.Text & \"The second paragraph will have an offset of one inch from the top. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "VBA": "oParagraph.Range.Text = oParagraph.Range.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "VBA": "oParagraph.Range.Text = oParagraph.Range.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");",
      "VBA": "oParagraph.Range.Text = oParagraph.Range.Text & \"These sentences are used to add lines for demonstrative purposes.\""
    },
    {
      "OnlyOffice JS": "var nSpacingAfter = oParaPr.GetSpacingAfter();",
      "VBA": "Dim nSpacingAfter As Long\nnSpacingAfter = oParaPr.SpaceAfter"
    },
    {
      "OnlyOffice JS": "oParagraph = Api.CreateParagraph();",
      "VBA": "Set oParagraph = oDocContent.Paragraphs.Add"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"Spacing after : \" + nSpacingAfter);",
      "VBA": "oParagraph.Range.Text = \"Spacing after : \" & nSpacingAfter"
    },
    {
      "OnlyOffice JS": "oDocContent.Push(oParagraph);",
      "VBA": "oDocContent.Paragraphs.Add oParagraph"
    }
  ]
}
``````json
{
  "description": "This code demonstrates how to create a shape with specific fill and stroke, add text paragraphs, set spacing before a paragraph, and retrieve spacing before using OnlyOffice JS and Excel VBA.",
  "data": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = Api.GetActiveSheet()"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "Set oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61))"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "Set oStroke = Api.CreateStroke(0, Api.CreateNoFill())"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Set oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "Excel VBA": "Set oDocContent = oShape.GetContent()"
    },
    {
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel VBA": "Set oParagraph = oDocContent.GetElement(0)"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is an example of setting a space before a paragraph.\");",
      "Excel VBA": "oParagraph.AddText \"This is an example of setting a space before a paragraph.\""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");",
      "Excel VBA": "oParagraph.AddText \"The second paragraph will have an offset of one inch from the top. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is due to the fact that the second paragraph has this offset enabled.\");",
      "Excel VBA": "oParagraph.AddText \"This is due to the fact that the second paragraph has this offset enabled.\""
    },
    {
      "OnlyOffice JS": "var oParagraph2 = Api.CreateParagraph();",
      "Excel VBA": "Set oParagraph2 = Api.CreateParagraph()"
    },
    {
      "OnlyOffice JS": "oParagraph2.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");",
      "Excel VBA": "oParagraph2.AddText \"This is the second paragraph and it is one inch away from the first paragraph.\""
    },
    {
      "OnlyOffice JS": "oDocContent.Push(oParagraph2);",
      "Excel VBA": "oDocContent.Push oParagraph2"
    },
    {
      "OnlyOffice JS": "var oParaPr = oParagraph2.GetParaPr();",
      "Excel VBA": "Set oParaPr = oParagraph2.GetParaPr()"
    },
    {
      "OnlyOffice JS": "oParaPr.SetSpacingBefore(1440);",
      "Excel VBA": "oParaPr.SetSpacingBefore 1440"
    },
    {
      "OnlyOffice JS": "var nSpacingBefore = oParaPr.GetSpacingBefore();",
      "Excel VBA": "nSpacingBefore = oParaPr.GetSpacingBefore()"
    },
    {
      "OnlyOffice JS": "oParagraph = Api.CreateParagraph();",
      "Excel VBA": "Set oParagraph = Api.CreateParagraph()"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"Spacing before: \" + nSpacingBefore);",
      "Excel VBA": "oParagraph.AddText \"Spacing before: \" & nSpacingBefore"
    },
    {
      "OnlyOffice JS": "oDocContent.Push(oParagraph);",
      "Excel VBA": "oDocContent.Push oParagraph"
    }
  ]
}
``````json
{
  "Description": "Equivalent methods for manipulating worksheets and shapes in OnlyOffice JavaScript and Excel VBA.",
  "Table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "Set oFill = oWorksheet.Shapes.AddShape(msoShapeRectangle, Left, Top, Width, Height).Fill\noFill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "With oShape.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel_VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowChartDatabase, 120, 70, 200, 100)\nWith oShape.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With\nWith oShape.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oDocContent = oShape.GetContent();",
      "Excel_VBA": "Set oDocContent = oShape.TextFrame2.TextRange"
    },
    {
      "OnlyOffice_JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel_VBA": "Set oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "OnlyOffice_JS": "var oParaPr = oParagraph.GetParaPr();",
      "Excel_VBA": "Set oParaPr = oParagraph.ParagraphFormat"
    },
    {
      "OnlyOffice_JS": "oParaPr.SetSpacingLine(3 * 240, \"auto\");",
      "Excel_VBA": "With oParaPr\n    .LineSpacing = 3 * 240\n    .SpaceAfter = 0\nEnd With"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\");",
      "Excel_VBA": "oDocContent.Text = \"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddLineBreak();",
      "Excel_VBA": "oDocContent.InsertAfter vbCrLf"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");",
      "Excel_VBA": "oDocContent.InsertAfter \"These sentences are used to add lines for demonstrative purposes.\""
    },
    {
      "OnlyOffice_JS": "var sSpacingLineRule = oParaPr.GetSpacingLineRule();",
      "Excel_VBA": "sSpacingLineRule = oParaPr.LineRule"
    },
    {
      "OnlyOffice_JS": "oParagraph = Api.CreateParagraph();",
      "Excel_VBA": "Set oParagraph = oDocContent.Paragraphs.Add"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"Spacing line rule : \" + sSpacingLineRule);",
      "Excel_VBA": "oParagraph.Text = \"Spacing line rule : \" & sSpacingLineRule"
    },
    {
      "OnlyOffice_JS": "oDocContent.Push(oParagraph);",
      "Excel_VBA": "oDocContent.InsertAfter oParagraph.Text"
    }
  ]
}
``````json
{
  "description": "This code demonstrates how to manipulate paragraph line spacing and content within a shape in OnlyOffice using JavaScript and its equivalent implementation in Excel VBA.",
  "codeMapping": [
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "ExcelVBA": "Set oFill = oWorksheet.Shapes.AddShape(msoShapeRectangle, 120, 70, 200, 100).Fill\noFill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOfficeJS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "ExcelVBA": "Set oStroke = oWorksheet.Shapes(1).Line\noStroke.Visible = msoFalse"
    },
    {
      "OnlyOfficeJS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "ExcelVBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, 120, 70, 200, 100)\noShape.Fill.Solid\noShape.Fill.ForeColor.RGB = RGB(255, 111, 61)\noShape.Line.Visible = msoFalse"
    },
    {
      "OnlyOfficeJS": "var oDocContent = oShape.GetContent();",
      "ExcelVBA": "Set oDocContent = oShape.TextFrame.Characters"
    },
    {
      "OnlyOfficeJS": "var oParagraph = oDocContent.GetElement(0);",
      "ExcelVBA": "Set oParagraph = oShape.TextFrame.TextRange.Paragraphs(1)"
    },
    {
      "OnlyOfficeJS": "var oParaPr = oParagraph.GetParaPr();",
      "ExcelVBA": "Set oParaPr = oParagraph.ParagraphFormat"
    },
    {
      "OnlyOfficeJS": "oParaPr.SetSpacingLine(3 * 240, \"auto\");",
      "ExcelVBA": "oParaPr.LineSpacing = 3 * 12 ' Assuming 12 points per spacing unit"
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\");",
      "ExcelVBA": "oParagraph.Text = \"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\""
    },
    {
      "OnlyOfficeJS": "oParagraph.AddLineBreak();",
      "ExcelVBA": "oParagraph.Text = oParagraph.Text & vbCrLf"
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");",
      "ExcelVBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes.\""
    },
    {
      "OnlyOfficeJS": "var nSpacingLineValue = oParaPr.GetSpacingLineValue();",
      "ExcelVBA": "nSpacingLineValue = oParaPr.LineSpacing"
    },
    {
      "OnlyOfficeJS": "oParagraph = Api.CreateParagraph();",
      "ExcelVBA": "Set oParagraph = oShape.TextFrame.TextRange.Paragraphs.Add"
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"Spacing line value : \" + nSpacingLineValue);",
      "ExcelVBA": "oParagraph.Text = \"Spacing line value : \" & nSpacingLineValue"
    },
    {
      "OnlyOfficeJS": "oDocContent.Push(oParagraph);",
      "ExcelVBA": "oParagraph.InsertAfter \"Spacing line value : \" & nSpacingLineValue"
    }
  ]
}
``````json
{
  "This example sets the bullet or numbering to the current paragraph.": {
    "OnlyOffice JS": "// This example sets the bullet or numbering to the current paragraph.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\nvar oBullet = Api.CreateBullet(\"-\");\noParaPr.SetBullet(oBullet);\noParagraph.AddText(\" This is an example of the bulleted paragraph.\");",
    "Excel VBA": "Sub SetBullet()\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ActiveSheet\n    \n    Dim oShape As Shape\n    Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 35, 200, 100) ' Adjust parameters as needed\n    \n    With oShape.TextFrame2.TextRange.ParagraphFormat\n        .Bullet.Visible = msoTrue\n        .Bullet.Character = 45 ' ASCII for \"-\"\n    End With\n    oShape.TextFrame2.TextRange.Text = \" This is an example of the bulleted paragraph.\"\nEnd Sub"
  }
}
``````json
{
  "description": "This example sets the paragraph first line indentation.",
  "table": {
    "columns": ["OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
      },
      {
        "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
        "Excel VBA": "With oWorksheet.Shapes.AddShape(msoShapeRectangle, 120, 70, 200, 100)\n    .Fill.ForeColor.RGB = RGB(255, 111, 61)\nEnd With"
      },
      {
        "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
        "Excel VBA": "With oWorksheet.Shapes(1).Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
      },
      {
        "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
        "Excel VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, 120, 70, 200, 150)\nWith oShape.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With\nWith oShape.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
      },
      {
        "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
        "Excel VBA": "Set oDocContent = oShape.TextFrame2.TextRange"
      },
      {
        "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
        "Excel VBA": "Set oParagraph = oDocContent.Paragraphs(1)"
      },
      {
        "OnlyOffice JS": "var oParaPr = oParagraph.GetParaPr();",
        "Excel VBA": "With oParagraph.ParagraphFormat"
      },
      {
        "OnlyOffice JS": "oParaPr.SetIndFirstLine(1440);",
        "Excel VBA": ".FirstLineIndent = 1440 ' Points"
      },
      {
        "OnlyOffice JS": "oParagraph.AddText(\"This is the first paragraph with the indent of 1 inch set to the first line. \");",
        "Excel VBA": "oParagraph.Text = \"This is the first paragraph with the indent of 1 inch set to the first line. \""
      },
      {
        "OnlyOffice JS": "oParagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");",
        "Excel VBA": "oParagraph.Text = oParagraph.Text & \"This indent is set by the paragraph style. No paragraph inline style is applied. \""
      },
      {
        "OnlyOffice JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
        "Excel VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes. \""
      },
      {
        "OnlyOffice JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
        "Excel VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes. \""
      },
      {
        "OnlyOffice JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");",
        "Excel VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes.\""
      }
    ]
  }
}
``````json
[
  {
    "Description": "Get the active worksheet.",
    "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
  },
  {
    "Description": "Create a solid fill with RGB color (255, 111, 61).",
    "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
    "Excel VBA": "Dim oFill As Object\nSet oFill = ThisWorkbook.Styles.Add(\"CustomFill\")\noFill.Interior.Color = RGB(255, 111, 61)"
  },
  {
    "Description": "Create a stroke with no fill.",
    "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
    "Excel VBA": "Dim oStroke As Object\n' Excel VBA does not have a direct equivalent for stroke. You can set line properties for shapes instead.\n"
  },
  {
    "Description": "Add a shape to the worksheet with specified parameters.",
    "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
    "Excel VBA": "Dim oShape As Shape\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, 120, 70, 200, 100)\nWith oShape\n    .Fill.ForeColor.RGB = RGB(255, 111, 61)\n    .Line.Visible = msoFalse\nEnd With"
  },
  {
    "Description": "Get the content of the shape.",
    "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
    "Excel VBA": "Dim oDocContent As TextFrame\nSet oDocContent = oShape.TextFrame"
  },
  {
    "Description": "Get the first paragraph from the content.",
    "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
    "Excel VBA": "Dim oParagraph As TextRange\nSet oParagraph = oDocContent.Characters(1, 1)"
  },
  {
    "Description": "Get the paragraph properties.",
    "OnlyOffice JS": "var oParaPr = oParagraph.GetParaPr();",
    "Excel VBA": "With oParagraph.ParagraphFormat"
  },
  {
    "Description": "Set the left indentation of the paragraph to 2880 twips (2 inches).",
    "OnlyOffice JS": "oParaPr.SetIndLeft(2880);",
    "Excel VBA": "    .LeftIndent = InchesToPoints(2)\nEnd With"
  },
  {
    "Description": "Add text to the paragraph.",
    "OnlyOffice JS": "oParagraph.AddText(\"This is the first paragraph with the indent of 2 inches set to it. \");\noParagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
    "Excel VBA": "With oParagraph\n    .Text = \"This is the first paragraph with the indent of 2 inches set to it. \" & _\n            \"This indent is set by the paragraph style. No paragraph inline style is applied. \" & _\n            \"These sentences are used to add lines for demonstrative purposes. \"\nEnd With"
  }
]
``````json
{
  "description": "This example sets the paragraph right side indentation.",
  "RAG_Table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "Set oFill = CreateSolidFill(CreateRGBColor(255, 111, 61))"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "Set oStroke = CreateStroke(0, CreateNoFill())"
    },
    {
      "OnlyOffice_JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel_VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowChartOnlineStorage, 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
    },
    {
      "OnlyOffice_JS": "var oDocContent = oShape.GetContent();",
      "Excel_VBA": "Set oDocContent = oShape.Content"
    },
    {
      "OnlyOffice_JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel_VBA": "Set oParagraph = oDocContent.Elements(1)"
    },
    {
      "OnlyOffice_JS": "var oParaPr = oParagraph.GetParaPr();",
      "Excel_VBA": "Set oParaPr = oParagraph.ParagraphFormat"
    },
    {
      "OnlyOffice_JS": "oParaPr.SetIndRight(2880);",
      "Excel_VBA": "oParaPr.RightIndent = 2880"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"This is the first paragraph with the right offset of 2 inches set to it. \");",
      "Excel_VBA": "oParagraph.Range.Text = \"This is the first paragraph with the right offset of 2 inches set to it. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"This offset is set by the paragraph style. No paragraph inline style is applied. \");",
      "Excel_VBA": "oParagraph.Range.Text = oParagraph.Range.Text & \"This offset is set by the paragraph style. No paragraph inline style is applied. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "Excel_VBA": "oParagraph.Range.Text = oParagraph.Range.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    }
  ]
}
``````json
{
  "description": "This code sets the paragraph contents justification by creating a shape with specific fill and stroke, adding it to the active sheet, and aligning the text to center.",
  "RAG_Table": [
    {
      "OnlyOfficeJS": "Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet",
      "RAG": "Green"
    },
    {
      "OnlyOfficeJS": "Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "VBA": "Set oFill = oWorksheet.Shapes.Fill.ForeColor.RGB = RGB(255, 111, 61)",
      "RAG": "Green"
    },
    {
      "OnlyOfficeJS": "Api.CreateStroke(0, Api.CreateNoFill());",
      "VBA": "Set oStroke = oWorksheet.Shapes.Line.Visible = msoFalse",
      "RAG": "Green"
    },
    {
      "OnlyOfficeJS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartProcess, 120, 70, 200, 150)\nWith oShape\n    .Fill.ForeColor.RGB = RGB(255, 111, 61)\n    .Line.Visible = msoFalse\nEnd With",
      "RAG": "Green"
    },
    {
      "OnlyOfficeJS": "oShape.GetContent();",
      "VBA": "Set oDocContent = oShape.TextFrame",
      "RAG": "Green"
    },
    {
      "OnlyOfficeJS": "oDocContent.GetElement(0);",
      "VBA": "Set oParagraph = oDocContent.TextRange.Paragraphs(1)",
      "RAG": "Green"
    },
    {
      "OnlyOfficeJS": "oParagraph.GetParaPr();",
      "VBA": "Set oParaPr = oParagraph.ParagraphFormat",
      "RAG": "Green"
    },
    {
      "OnlyOfficeJS": "oParaPr.SetJc(\"center\");",
      "VBA": "oParaPr.Alignment = xlCenter",
      "RAG": "Green"
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"This is a paragraph with the text in it aligned by the center. \");",
      "VBA": "oParagraph.Text = \"This is a paragraph with the text in it aligned by the center. \"",
      "RAG": "Green"
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"The justification is specified in the paragraph style. \");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"The justification is specified in the paragraph style. \"",
      "RAG": "Green"
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes. \"",
      "RAG": "Green"
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes.\"",
      "RAG": "Green"
    }
  ]
}
``````json
{
  "Description": "This code adds a 'flowChartOnlineStorage' shape to the active sheet with specified fill and stroke, and adds two paragraphs with specific spacing after the first paragraph.",
  "OnlyOffice_JS": "// This example sets the spacing after the current paragraph.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetSpacingAfter(1440);\noParagraph.AddText(\"This is an example of setting a space after a paragraph. \");\noParagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");\noParagraph.AddText(\"This is due to the fact that the first paragraph has this offset enabled.\");\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");\noDocContent.Push(oParagraph);",
  "Excel_VBA": "Sub AddFlowChartAndParagraphs()\n    Dim oWorksheet As Worksheet\n    Dim oShape As Shape\n    Dim oTextFrame As TextFrame2\n    \n    ' Get the active sheet\n    Set oWorksheet = ActiveSheet\n    \n    ' Add a flowchart shape\n    Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartData, 120, 70, 120, 70)\n    \n    ' Set fill color\n    With oShape.Fill\n        .Visible = msoTrue\n        .ForeColor.RGB = RGB(255, 111, 61)\n        .Solid\n    End With\n    \n    ' Remove line stroke\n    oShape.Line.Visible = msoFalse\n    \n    ' Get the text frame\n    Set oTextFrame = oShape.TextFrame2\n    \n    ' Add first paragraph with spacing after\n    With oTextFrame.TextRange\n        .Text = \"This is an example of setting a space after a paragraph. The second paragraph will have an offset of one inch from the top. This is due to the fact that the first paragraph has this offset enabled.\"\n        .Paragraphs(1).ParagraphFormat.SpaceAfter = 1440 ' Adjust unit as needed\n        \n        ' Add second paragraph\n        .InsertAfter vbCrLf & \"This is the second paragraph and it is one inch away from the first paragraph.\"\n    End With\nEnd Sub"
}
``````json
{
  "Description": "This code sets the spacing before the current paragraph, creates a shape with specific fill and stroke, adds text to paragraphs, and adjusts paragraph spacing.",
  "Table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "Set oFill = Application.CreateSolidFill(RGB(255, 111, 61))"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "Set oStroke = Application.CreateStroke(0, xlNoFill)"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "Excel VBA": "Set oDocContent = oShape.TextFrame2.TextRange"
    },
    {
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel VBA": "Set oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is an example of setting a space before a paragraph. \");",
      "Excel VBA": "oParagraph.Text = oParagraph.Text & \"This is an example of setting a space before a paragraph. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");",
      "Excel VBA": "oParagraph.Text = oParagraph.Text & \"The second paragraph will have an offset of one inch from the top. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is due to the fact that the second paragraph has this offset enabled.\");",
      "Excel VBA": "oParagraph.Text = oParagraph.Text & \"This is due to the fact that the second paragraph has this offset enabled.\""
    },
    {
      "OnlyOffice JS": "oParagraph = Api.CreateParagraph();",
      "Excel VBA": "Set oParagraph = oDocContent.Paragraphs.Add"
    },
    {
      "OnlyOffice JS": "var oParaPr = oParagraph.GetParaPr();",
      "Excel VBA": "Set oParaPr = oParagraph.ParagraphFormat"
    },
    {
      "OnlyOffice JS": "oParaPr.SetSpacingBefore(1440);",
      "Excel VBA": "oParaPr.SpaceBefore = 1440"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");",
      "Excel VBA": "oParagraph.Text = \"This is the second paragraph and it is one inch away from the first paragraph.\""
    },
    {
      "OnlyOffice JS": "oDocContent.Push(oParagraph);",
      "Excel VBA": "oDocContent.Paragraphs.Add oParagraph"
    }
  ]
}
``````json
{
  "Description": "This example sets the paragraph line spacing.",
  "CodeEquivalents": [
    {
      "OnlyOffice JS": "// This example sets the paragraph line spacing.\nvar oWorksheet = Api.GetActiveSheet();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);\nvar oDocContent = oShape.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetSpacingLine(3 * 240, \"auto\");\noParagraph.AddText(\"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\");\noParagraph.AddLineBreak();\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "VBA Code": "' This example sets the paragraph line spacing.\nDim oWorksheet As Object\nSet oWorksheet = Api.GetActiveSheet()\nDim oFill As Object\nSet oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61))\nDim oStroke As Object\nSet oStroke = Api.CreateStroke(0, Api.CreateNoFill())\nDim oShape As Object\nSet oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)\nDim oDocContent As Object\nSet oDocContent = oShape.GetContent()\nDim oParagraph As Object\nSet oParagraph = oDocContent.GetElement(0)\nDim oParaPr As Object\nSet oParaPr = oParagraph.GetParaPr()\noParaPr.SetSpacingLine 3 * 240, \"auto\"\noParagraph.AddText \"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\"\noParagraph.AddLineBreak\noParagraph.AddText \"These sentences are used to add lines for demonstrative purposes. \"\noParagraph.AddText \"These sentences are used to add lines for demonstrative purposes. \""
    }
  ]
}
```**Description:** This code sets a sequence of custom tab stops which will be used for any tab characters in the paragraph.

```json
{
  "methods": [
    {
      "OnlyOffice_JS_Method": "Api.GetActiveSheet()",
      "Excel_VBA_Equivalent": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS_Method": "Api.CreateRGBColor(255, 111, 61)",
      "Excel_VBA_Equivalent": "RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS_Method": "Api.CreateSolidFill(color)",
      "Excel_VBA_Equivalent": "With oWorksheet.Cells.Interior\n    .Color = RGB(255, 111, 61)\nEnd With"
    },
    {
      "OnlyOffice_JS_Method": "Api.CreateNoFill()",
      "Excel_VBA_Equivalent": "xlNone"
    },
    {
      "OnlyOffice_JS_Method": "Api.CreateStroke(0, Api.CreateNoFill())",
      "Excel_VBA_Equivalent": "With oShape.Line\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS_Method": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 150 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)",
      "Excel_VBA_Equivalent": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartProcess, 150, 70, 200, 300)"
    },
    {
      "OnlyOffice_JS_Method": "oShape.GetContent()",
      "Excel_VBA_Equivalent": "Set oDocContent = oShape.TextFrame.Characters"
    },
    {
      "OnlyOffice_JS_Method": "oDocContent.GetElement(0)",
      "Excel_VBA_Equivalent": "Set oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "OnlyOffice_JS_Method": "oParagraph.GetParaPr()",
      "Excel_VBA_Equivalent": "Set oParaPr = oParagraph.ParagraphFormat"
    },
    {
      "OnlyOffice_JS_Method": "oParaPr.SetTabs([1440, 2880, 4320], [\"left\", \"center\", \"right\"])",
      "Excel_VBA_Equivalent": "With oParaPr.TabStops\n    .Add Position:=72, Alignment:=wdAlignTabLeft\n    .Add Position:=144, Alignment:=wdAlignTabCenter\n    .Add Position:=216, Alignment:=wdAlignTabRight\nEnd With"
    },
    {
      "OnlyOffice_JS_Method": "oParagraph.AddTabStop()",
      "Excel_VBA_Equivalent": "oParaPr.TabStops.Add Position:=..." 
    },
    {
      "OnlyOffice_JS_Method": "oParagraph.AddText(\"Custom tab - 1 inch left\")",
      "Excel_VBA_Equivalent": "oDocContent.Text = \"Custom tab - 1 inch left\""
    },
    {
      "OnlyOffice_JS_Method": "oParagraph.AddLineBreak()",
      "Excel_VBA_Equivalent": "oDocContent.Text = oDocContent.Text & vbCrLf"
    },
    {
      "OnlyOffice_JS_Method": "oParagraph.AddTabStop()",
      "Excel_VBA_Equivalent": "oParaPr.TabStops.Add Position:=..."
    },
    {
      "OnlyOffice_JS_Method": "oParagraph.AddTabStop()",
      "Excel_VBA_Equivalent": "oParaPr.TabStops.Add Position:=..."
    },
    {
      "OnlyOffice_JS_Method": "oParagraph.AddText(\"Custom tab - 2 inches center\")",
      "Excel_VBA_Equivalent": "oDocContent.Text = oDocContent.Text & \"Custom tab - 2 inches center\""
    },
    {
      "OnlyOffice_JS_Method": "oParagraph.AddLineBreak()",
      "Excel_VBA_Equivalent": "oDocContent.Text = oDocContent.Text & vbCrLf"
    },
    {
      "OnlyOffice_JS_Method": "oParagraph.AddTabStop()",
      "Excel_VBA_Equivalent": "oParaPr.TabStops.Add Position:=..."
    },
    {
      "OnlyOffice_JS_Method": "oParagraph.AddTabStop()",
      "Excel_VBA_Equivalent": "oParaPr.TabStops.Add Position:=..."
    },
    {
      "OnlyOffice_JS_Method": "oParagraph.AddTabStop()",
      "Excel_VBA_Equivalent": "oParaPr.TabStops.Add Position:=..."
    },
    {
      "OnlyOffice_JS_Method": "oParagraph.AddText(\"Custom tab - 3 inches right\")",
      "Excel_VBA_Equivalent": "oDocContent.Text = oDocContent.Text & \"Custom tab - 3 inches right\""
    }
  ]
}
``````json
{
  "table": {
    "headers": ["Operation", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Operation": "Get the active worksheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ActiveSheet"
      },
      {
        "Operation": "Create a solid fill with RGB color (255, 111, 61)",
        "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
        "Excel VBA": "Set oFill = ActiveSheet.Shapes.AddShape(msoShapeRectangle, 0, 0, 100, 100).Fill\noFill.ForeColor.RGB = RGB(255, 111, 61)"
      },
      {
        "Operation": "Create a stroke with no fill",
        "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
        "Excel VBA": "With ActiveSheet.Shapes.AddShape(msoShapeRectangle, 0, 0, 100, 100).Line\n    .Visible = msoFalse\nEnd With"
      },
      {
        "Operation": "Add a shape to the worksheet",
        "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
        "Excel VBA": "Set oShape = ActiveSheet.Shapes.AddShape(msoShapeFlowchartOfflineStorage, 120, 35, 200, 150)\nWith oShape.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With\nWith oShape.Line\n    .Visible = msoFalse\nEnd With"
      },
      {
        "Operation": "Get the content of the shape's document",
        "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
        "Excel VBA": "' VBA does not have a direct equivalent for getting shape document content. Use TextFrame instead."
      },
      {
        "Operation": "Get the first paragraph element",
        "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
        "Excel VBA": "Set oParagraph = oShape.TextFrame.Characters.Text"
      },
      {
        "Operation": "Get paragraph properties",
        "OnlyOffice JS": "var oParaPr = oParagraph.GetParaPr();",
        "Excel VBA": "With oShape.TextFrame2.TextRange.ParagraphFormat\n    ' Set properties here\nEnd With"
      },
      {
        "Operation": "Create a bullet with '-' as the symbol",
        "OnlyOffice JS": "var oBullet = Api.CreateBullet(\"-\");",
        "Excel VBA": "With oShape.TextFrame2.TextRange.ParagraphFormat.Bullet\n    .Visible = msoTrue\n    .Character = 45 ' ASCII for '-' \nEnd With"
      },
      {
        "Operation": "Set the bullet to the paragraph",
        "OnlyOffice JS": "oParaPr.SetBullet(oBullet);",
        "Excel VBA": "' Bullet already set in the previous step"
      },
      {
        "Operation": "Add text to the paragraph",
        "OnlyOffice JS": "oParagraph.AddText(\" This is an example of the bulleted paragraph.\");",
        "Excel VBA": "oShape.TextFrame2.TextRange.Text = \"This is an example of the bulleted paragraph.\""
      }
    ]
  }
}
``````json
{
  "Table": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Description": "Create a solid fill with RGB(255, 111, 61)",
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "oFillColor = RGB(255, 111, 61)"
    },
    {
      "Description": "Create a stroke with no fill",
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "With oShape.Line\n  .Visible = msoTrue\n  .ForeColor.RGB = RGB(0, 0, 0)\n  .Transparency = 1\nEnd With"
    },
    {
      "Description": "Add a shape to the worksheet with specified parameters",
      "OnlyOffice_JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel_VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 70, 200, 150)\nWith oShape.Fill\n  .ForeColor.RGB = oFillColor\n  .Solid\nEnd With\noShape.Line.Visible = msoFalse"
    },
    {
      "Description": "Get the content of the shape",
      "OnlyOffice_JS": "var oDocContent = oShape.GetContent();",
      "Excel_VBA": "Set oDocContent = oShape.TextFrame2.TextRange"
    },
    {
      "Description": "Get the first paragraph in the shape's text",
      "OnlyOffice_JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel_VBA": "Set oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "Description": "Get paragraph properties",
      "OnlyOffice_JS": "var oParaPr = oParagraph.GetParaPr();",
      "Excel_VBA": "Set oParaPr = oParagraph.ParagraphFormat"
    },
    {
      "Description": "Set first line indentation to 1440 units (1 inch)",
      "OnlyOffice_JS": "oParaPr.SetIndFirstLine(1440);",
      "Excel_VBA": "oParaPr.FirstLineIndent = Application.InchesToPoints(1)"
    },
    {
      "Description": "Add multiple lines of text to the paragraph",
      "OnlyOffice_JS": "oParagraph.AddText(\"This is the first paragraph with the indent of 1 inch set to the first line. \");\n" +
                     "oParagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\n" +
                     "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\n" +
                     "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\n" +
                     "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");",
      "Excel_VBA": "oShape.TextFrame2.TextRange.Text = \"This is the first paragraph with the indent of 1 inch set to the first line. \" & _\n" +
                     "\"This indent is set by the paragraph style. No paragraph inline style is applied. \" & _\n" +
                     "\"These sentences are used to add lines for demonstrative purposes. \" & _\n" +
                     "\"These sentences are used to add lines for demonstrative purposes. \" & _\n" +
                     "\"These sentences are used to add lines for demonstrative purposes.\""
    }
  ]
}
``````json
{
  "table": {
    "headers": ["Description", "OnlyOfficeJS", "ExcelVBA"],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
        "ExcelVBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
      },
      {
        "Description": "Create a solid fill with RGB color (255, 111, 61)",
        "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
        "ExcelVBA": "Set oFill = oWorksheet.Shapes.Fill.ForeColor.RGB = RGB(255, 111, 61)"
      },
      {
        "Description": "Create a stroke with no fill",
        "OnlyOfficeJS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
        "ExcelVBA": "With oWorksheet.Shapes.Line\n    .ForeColor.RGB = RGB(255, 255, 255)\n    .Weight = 0\nEnd With"
      },
      {
        "Description": "Add a shape with specified parameters",
        "OnlyOfficeJS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
        "ExcelVBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 70, 2, 3)\nWith oShape.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With\nWith oShape.Line\n    .ForeColor.RGB = RGB(255, 255, 255)\n    .Weight = 0\nEnd With"
      },
      {
        "Description": "Get the content of the shape",
        "OnlyOfficeJS": "var oDocContent = oShape.GetContent();",
        "ExcelVBA": "Set oDocContent = oShape.TextFrame"
      },
      {
        "Description": "Get the first paragraph",
        "OnlyOfficeJS": "var oParagraph = oDocContent.GetElement(0);",
        "ExcelVBA": "Set oParagraph = oDocContent.Characters(1, oDocContent.Characters.Count).Paragraphs(1)"
      },
      {
        "Description": "Get paragraph properties",
        "OnlyOfficeJS": "var oParaPr = oParagraph.GetParaPr();",
        "ExcelVBA": "Set oParaPr = oParagraph.ParagraphFormat"
      },
      {
        "Description": "Set left indentation to 2 inches (2880 twips)",
        "OnlyOfficeJS": "oParaPr.SetIndLeft(2880);",
        "ExcelVBA": "oParaPr.LeftIndent = InchesToPoints(2)"
      },
      {
        "Description": "Add first line of text to the paragraph",
        "OnlyOfficeJS": "oParagraph.AddText(\"This is the first paragraph with the indent of 2 inches set to it. \");",
        "ExcelVBA": "oDocContent.Text = oDocContent.Text & \"This is the first paragraph with the indent of 2 inches set to it. \""
      },
      {
        "Description": "Add second line of text to the paragraph",
        "OnlyOfficeJS": "oParagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");",
        "ExcelVBA": "oDocContent.Text = oDocContent.Text & \"This indent is set by the paragraph style. No paragraph inline style is applied. \""
      },
      {
        "Description": "Add third line of text to the paragraph",
        "OnlyOfficeJS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
        "ExcelVBA": "oDocContent.Text = oDocContent.Text & \"These sentences are used to add lines for demonstrative purposes. \""
      }
    ]
  }
}
``````json
[
  {
    "Description": "Get the active worksheet.",
    "VBA": "Set oWorksheet = ActiveSheet",
    "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();"
  },
  {
    "Description": "Create a solid fill with RGB color (255, 111, 61).",
    "VBA": "oFill = oWorksheet.Shapes.Fill.ForeColor.RGB = RGB(255, 111, 61)",
    "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));"
  },
  {
    "Description": "Create a stroke with no fill.",
    "VBA": "With oWorksheet.Shapes.Line\n    .Visible = msoFalse\nEnd With",
    "OnlyOfficeJS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());"
  },
  {
    "Description": "Add a shape to the worksheet with specified properties.",
    "VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 70, 2, 3)\nWith oShape.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With\nWith oShape.Line\n    .Visible = msoFalse\nEnd With",
    "OnlyOfficeJS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);"
  },
  {
    "Description": "Get the content of the added shape.",
    "VBA": "Set oDocContent = oShape.TextFrame",
    "OnlyOfficeJS": "var oDocContent = oShape.GetContent();"
  },
  {
    "Description": "Get the first paragraph of the shape's content.",
    "VBA": "Set oParagraph = oDocContent.Paragraphs(1)",
    "OnlyOfficeJS": "var oParagraph = oDocContent.GetElement(0);"
  },
  {
    "Description": "Get paragraph properties.",
    "VBA": "Set oParaPr = oParagraph.ParagraphFormat",
    "OnlyOfficeJS": "var oParaPr = oParagraph.GetParaPr();"
  },
  {
    "Description": "Set right indentation to 2 inches (2880 twips).",
    "VBA": "oParaPr.RightIndent = InchesToPoints(2)",
    "OnlyOfficeJS": "oParaPr.SetIndRight(2880);"
  },
  {
    "Description": "Add text to the paragraph.",
    "VBA": "oParagraph.Range.Text = \"This is the first paragraph with the right offset of 2 inches set to it. \" & _\n\"This offset is set by the paragraph style. No paragraph inline style is applied. \" & _\n\"These sentences are used to add lines for demonstrative purposes.\"",
    "OnlyOfficeJS": "oParagraph.AddText(\"This is the first paragraph with the right offset of 2 inches set to it. \");\n" +
                  "oParagraph.AddText(\"This offset is set by the paragraph style. No paragraph inline style is applied. \");\n" +
                  "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");"
  }
]
``````json
{
  "Description": "This code sets the paragraph's text alignment to center, creates and styles a shape on the active worksheet, and adds multiple lines of text to the shape.",
  "Methods": [
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "VBA": "Set oFill = CreateSolidFill(CreateRGBColor(255, 111, 61))"
    },
    {
      "OnlyOfficeJS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "VBA": "Set oStroke = CreateStroke(0, CreateNoFill())"
    },
    {
      "OnlyOfficeJS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartDocument, 120, 70, oFill, oStroke, 0, 2, 0, 3)"
    },
    {
      "OnlyOfficeJS": "var oDocContent = oShape.GetContent();",
      "VBA": "Set oDocContent = oShape.TextFrame.TextRange"
    },
    {
      "OnlyOfficeJS": "var oParagraph = oDocContent.GetElement(0);",
      "VBA": "Set oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "OnlyOfficeJS": "var oParaPr = oParagraph.GetParaPr();",
      "VBA": "Set oParaPr = oParagraph.ParagraphFormat"
    },
    {
      "OnlyOfficeJS": "oParaPr.SetJc(\"center\");",
      "VBA": "oParaPr.Alignment = xlCenter"
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"This is a paragraph with the text in it aligned by the center. \");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"This is a paragraph with the text in it aligned by the center. \""
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"The justification is specified in the paragraph style. \");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"The justification is specified in the paragraph style. \""
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"These sentences are used to add lines for demonstrative purposes.\""
    }
  ]
}
``````json
{
  "description": "This example sets the spacing after the current paragraph.",
  "code": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = Api.GetActiveSheet()"
    },
    {
      "OnlyOffice JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel VBA": "Set oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61))"
    },
    {
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "Set oStroke = Api.CreateStroke(0, Api.CreateNoFill())"
    },
    {
      "OnlyOffice JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel VBA": "Set oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000)"
    },
    {
      "OnlyOffice JS": "var oDocContent = oShape.GetContent();",
      "Excel VBA": "Set oDocContent = oShape.GetContent()"
    },
    {
      "OnlyOffice JS": "var oParagraph = oDocContent.GetElement(0);",
      "Excel VBA": "Set oParagraph = oDocContent.GetElement(0)"
    },
    {
      "OnlyOffice JS": "var oParaPr = oParagraph.GetParaPr();",
      "Excel VBA": "Set oParaPr = oParagraph.GetParaPr()"
    },
    {
      "OnlyOffice JS": "oParaPr.SetSpacingAfter(1440);",
      "Excel VBA": "oParaPr.SetSpacingAfter 1440"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is an example of setting a space after a paragraph. \");",
      "Excel VBA": "oParagraph.AddText \"This is an example of setting a space after a paragraph. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");",
      "Excel VBA": "oParagraph.AddText \"The second paragraph will have an offset of one inch from the top. \""
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is due to the fact that the first paragraph has this offset enabled.\");",
      "Excel VBA": "oParagraph.AddText \"This is due to the fact that the first paragraph has this offset enabled.\""
    },
    {
      "OnlyOffice JS": "oParagraph = Api.CreateParagraph();",
      "Excel VBA": "Set oParagraph = Api.CreateParagraph()"
    },
    {
      "OnlyOffice JS": "oParagraph.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");",
      "Excel VBA": "oParagraph.AddText \"This is the second paragraph and it is one inch away from the first paragraph.\""
    },
    {
      "OnlyOffice JS": "oDocContent.Push(oParagraph);",
      "Excel VBA": "oDocContent.Push oParagraph"
    }
  ]
}
``````json
{
  "description": "Sets the spacing before the current paragraph and adds a shape to the active worksheet with specified fill and stroke.",
  "methods": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "VBA": "Dim oFill As Fill\nSet oFill = oWorksheet.Shapes.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "VBA": "With oWorksheet.Shapes.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "VBA": "Dim oShape As Shape\nSet oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 120, 70, oFill, oStroke)\n' Adjust position and size as needed"
    },
    {
      "OnlyOffice_JS": "var oDocContent = oShape.GetContent();",
      "VBA": "Dim oDocContent As TextFrame\nSet oDocContent = oShape.TextFrame"
    },
    {
      "OnlyOffice_JS": "var oParagraph = oDocContent.GetElement(0);",
      "VBA": "Dim oParagraph As TextRange\nSet oParagraph = oDocContent.Characters(1, oDocContent.Characters.Count)"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"This is an example of setting a space before a paragraph. \");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"This is an example of setting a space before a paragraph. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"The second paragraph will have an offset of one inch from the top. \""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"This is due to the fact that the second paragraph has this offset enabled.\");",
      "VBA": "oParagraph.Text = oParagraph.Text & \"This is due to the fact that the second paragraph has this offset enabled.\""
    },
    {
      "OnlyOffice_JS": "oParagraph = Api.CreateParagraph();",
      "VBA": "Set oParagraph = oDocContent.Paragraphs.Add"
    },
    {
      "OnlyOffice_JS": "var oParaPr = oParagraph.GetParaPr();",
      "VBA": "With oParagraph.ParagraphFormat"
    },
    {
      "OnlyOffice_JS": "oParaPr.SetSpacingBefore(1440);",
      "VBA": "    .SpaceBefore = 144 ' Points (1 inch)"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");",
      "VBA": "oParagraph.Text = \"This is the second paragraph and it is one inch away from the first paragraph.\""
    },
    {
      "OnlyOffice_JS": "oDocContent.Push(oParagraph);",
      "VBA": "' Already added the paragraph to the TextFrame"
    }
  ]
}
``````json
{
  "description": "This code sets the paragraph line spacing, adds shapes, and adds text with line breaks.",
  "codeComparison": [
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOfficeJS": "var oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "ExcelVBA": "oShape.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOfficeJS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "ExcelVBA": "With oShape.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOfficeJS": "var oShape = oWorksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "ExcelVBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartProcess, 120, 70, 200, 100)\nWith oShape\n    .Fill.ForeColor.RGB = RGB(255, 111, 61)\n    .Line.Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOfficeJS": "var oDocContent = oShape.GetContent();",
      "ExcelVBA": "Set oDocContent = oShape.TextFrame2.TextRange"
    },
    {
      "OnlyOfficeJS": "var oParagraph = oDocContent.GetElement(0);",
      "ExcelVBA": "Set oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "OnlyOfficeJS": "var oParaPr = oParagraph.GetParaPr();",
      "ExcelVBA": "Set oParaPr = oParagraph.ParagraphFormat"
    },
    {
      "OnlyOfficeJS": "oParaPr.SetSpacingLine(3 * 240, \"auto\");",
      "ExcelVBA": "With oParaPr\n    .LineSpacing = 240 * 3\n    .LineSpacingRule = msoLineSpacingExactly\nEnd With"
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\");",
      "ExcelVBA": "oDocContent.Text = oDocContent.Text & \"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\""
    },
    {
      "OnlyOfficeJS": "oParagraph.AddLineBreak();",
      "ExcelVBA": "oDocContent.Text = oDocContent.Text & vbCrLf"
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "ExcelVBA": "oDocContent.Text = oDocContent.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    },
    {
      "OnlyOfficeJS": "oParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");",
      "ExcelVBA": "oDocContent.Text = oDocContent.Text & \"These sentences are used to add lines for demonstrative purposes. \""
    }
  ]
}
``````json
{
  "description": "This script sets a sequence of custom tab stops and adds corresponding text with those tab stops in a shape on the active worksheet.",
  "mappings": [
    {
      "OnlyOffice_JS": "Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "Api.CreateRGBColor(255, 111, 61);",
      "Excel_VBA": "rgbColor = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));",
      "Excel_VBA": "Set oFill = oWorksheet.Shapes.Fill.ForeColor.RGB = RGB(255, 111, 61)"
    },
    {
      "OnlyOffice_JS": "Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "Set oStroke = oWorksheet.Shapes.Line.Visible = msoFalse"
    },
    {
      "OnlyOffice_JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 150 * 36000, 70 * 36000, oFill, oStroke, 0, 2 * 36000, 0, 3 * 36000);",
      "Excel_VBA": "Set oShape = oWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, 150, 70, 200, 100)\nWith oShape.Fill\n    .ForeColor.RGB = RGB(255, 111, 61)\nEnd With\nWith oShape.Line\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice_JS": "oShape.GetContent();",
      "Excel_VBA": "Set oDocContent = oShape.TextFrame.Characters"
    },
    {
      "OnlyOffice_JS": "oDocContent.GetElement(0);",
      "Excel_VBA": "Set oParagraph = oDocContent.Paragraphs(1)"
    },
    {
      "OnlyOffice_JS": "oParagraph.GetParaPr();",
      "Excel_VBA": "With oParagraph.ParagraphFormat"
    },
    {
      "OnlyOffice_JS": "oParaPr.SetTabs([1440, 2880, 4320], [\"left\", \"center\", \"right\"]);",
      "Excel_VBA": "With oParagraph.ParagraphFormat\n    .Tabs.ClearAll\n    .Tabs.Add Position:=72, Alignment:=xlLeft, Leader:=xlLeaderNone\n    .Tabs.Add Position:=144, Alignment:=xlCenter, Leader:=xlLeaderNone\n    .Tabs.Add Position:=216, Alignment:=xlRight, Leader:=xlLeaderNone\nEnd With"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddTabStop();",
      "Excel_VBA": "oParagraph.Range.InsertAfter vbTab"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddText(\"Custom tab - 1 inch left\");",
      "Excel_VBA": "oParagraph.Range.InsertAfter \"Custom tab - 1 inch left\""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddLineBreak();",
      "Excel_VBA": "oParagraph.Range.InsertParagraphAfter"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddTabStop();\noParagraph.AddTabStop();\noParagraph.AddText(\"Custom tab - 2 inches center\");",
      "Excel_VBA": "oParagraph.Range.InsertAfter vbTab & vbTab & \"Custom tab - 2 inches center\""
    },
    {
      "OnlyOffice_JS": "oParagraph.AddLineBreak();",
      "Excel_VBA": "oParagraph.Range.InsertParagraphAfter"
    },
    {
      "OnlyOffice_JS": "oParagraph.AddTabStop();\noParagraph.AddTabStop();\noParagraph.AddTabStop();\noParagraph.AddText(\"Custom tab - 3 inches right\");",
      "Excel_VBA": "oParagraph.Range.InsertAfter vbTab & vbTab & vbTab & \"Custom tab - 3 inches right\""
    }
  ]
}
``````json
[
  {
    "description": "Get the active worksheet",
    "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
    "ExcelVBA": "Set oWorksheet = ActiveSheet"
  },
  {
    "description": "Set the value of cell B1 to 'Region'",
    "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');",
    "ExcelVBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
  },
  {
    "description": "Set the value of cell C1 to 'Style'",
    "OnlyOfficeJS": "oWorksheet.GetRange('C1').SetValue('Style');",
    "ExcelVBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
  },
  {
    "description": "Set the value of cell D1 to 'Price'",
    "OnlyOfficeJS": "oWorksheet.GetRange('D1').SetValue('Price');",
    "ExcelVBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
  },
  {
    "description": "Set the value of cell B2 to 'East'",
    "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');",
    "ExcelVBA": "oWorksheet.Range(\"B2\").Value = \"East\""
  },
  {
    "description": "Set the value of cell B3 to 'West'",
    "OnlyOfficeJS": "oWorksheet.GetRange('B3').SetValue('West');",
    "ExcelVBA": "oWorksheet.Range(\"B3\").Value = \"West\""
  },
  {
    "description": "Set the value of cell B4 to 'East'",
    "OnlyOfficeJS": "oWorksheet.GetRange('B4').SetValue('East');",
    "ExcelVBA": "oWorksheet.Range(\"B4\").Value = \"East\""
  },
  {
    "description": "Set the value of cell B5 to 'West'",
    "OnlyOfficeJS": "oWorksheet.GetRange('B5').SetValue('West');",
    "ExcelVBA": "oWorksheet.Range(\"B5\").Value = \"West\""
  },
  {
    "description": "Set the value of cell C2 to 'Fancy'",
    "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
    "ExcelVBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
  },
  {
    "description": "Set the value of cell C3 to 'Fancy'",
    "OnlyOfficeJS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
    "ExcelVBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
  },
  {
    "description": "Set the value of cell C4 to 'Tee'",
    "OnlyOfficeJS": "oWorksheet.GetRange('C4').SetValue('Tee');",
    "ExcelVBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
  },
  {
    "description": "Set the value of cell C5 to 'Tee'",
    "OnlyOfficeJS": "oWorksheet.GetRange('C5').SetValue('Tee');",
    "ExcelVBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
  },
  {
    "description": "Set the value of cell D2 to 42.5",
    "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);",
    "ExcelVBA": "oWorksheet.Range(\"D2\").Value = 42.5"
  },
  {
    "description": "Set the value of cell D3 to 35.2",
    "OnlyOfficeJS": "oWorksheet.GetRange('D3').SetValue(35.2);",
    "ExcelVBA": "oWorksheet.Range(\"D3\").Value = 35.2"
  },
  {
    "description": "Set the value of cell D4 to 12.3",
    "OnlyOfficeJS": "oWorksheet.GetRange('D4').SetValue(12.3);",
    "ExcelVBA": "oWorksheet.Range(\"D4\").Value = 12.3"
  },
  {
    "description": "Set the value of cell D5 to 24.8",
    "OnlyOfficeJS": "oWorksheet.GetRange('D5').SetValue(24.8);",
    "ExcelVBA": "oWorksheet.Range(\"D5\").Value = 24.8"
  },
  {
    "description": "Get the data range from B1 to D5",
    "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "ExcelVBA": "Set dataRef = oWorksheet.Range(\"B1:D5\")"
  },
  {
    "description": "Insert a new pivot table on a new worksheet using the data range",
    "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "ExcelVBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
  },
  {
    "description": "Add 'Region' and 'Style' as row fields in the pivot table",
    "OnlyOfficeJS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
    "ExcelVBA": "With pivotTable.PivotFields(\"Region\")\n    .Orientation = xlRowField\n    .Position = 1\nEnd With\nWith pivotTable.PivotFields(\"Style\")\n    .Orientation = xlRowField\n    .Position = 2\nEnd With"
  },
  {
    "description": "Add 'Price' as a data field in the pivot table",
    "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
    "ExcelVBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
  },
  {
    "description": "Get the active worksheet where the pivot table is located",
    "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();",
    "ExcelVBA": "Set pivotWorksheet = ActiveSheet"
  },
  {
    "description": "Get the data field caption 'Sum of Price' from the pivot table",
    "OnlyOfficeJS": "var dataField = pivotTable.GetDataFields('Sum of Price');",
    "ExcelVBA": "Dim dataField As PivotField\nSet dataField = pivotTable.PivotFields(\"Sum of Price\")"
  },
  {
    "description": "Set the value of cell A12 to 'The Data field caption'",
    "OnlyOfficeJS": "pivotWorksheet.GetRange('A12').SetValue('The Data field caption');",
    "ExcelVBA": "pivotWorksheet.Range(\"A12\").Value = \"The Data field caption\""
  },
  {
    "description": "Set the value of cell B12 to the caption of the data field",
    "OnlyOfficeJS": "pivotWorksheet.GetRange('B12').SetValue(dataField.GetCaption());",
    "ExcelVBA": "pivotWorksheet.Range(\"B12\").Value = dataField.Caption"
  }
]
``````json
{
  "table": {
    "headers": ["Description", "VBA Code", "OnlyOffice JS Code"],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "VBA Code": "Set oWorksheet = ActiveSheet",
        "OnlyOffice JS Code": "var oWorksheet = Api.GetActiveSheet();"
      },
      {
        "Description": "Set value 'Region' in cell B1",
        "VBA Code": "oWorksheet.Range(\"B1\").Value = \"Region\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('B1').SetValue('Region');"
      },
      {
        "Description": "Set value 'Style' in cell C1",
        "VBA Code": "oWorksheet.Range(\"C1\").Value = \"Style\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('C1').SetValue('Style');"
      },
      {
        "Description": "Set value 'Price' in cell D1",
        "VBA Code": "oWorksheet.Range(\"D1\").Value = \"Price\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('D1').SetValue('Price');"
      },
      {
        "Description": "Set value 'East' in cell B2",
        "VBA Code": "oWorksheet.Range(\"B2\").Value = \"East\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('B2').SetValue('East');"
      },
      {
        "Description": "Set value 'West' in cell B3",
        "VBA Code": "oWorksheet.Range(\"B3\").Value = \"West\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('B3').SetValue('West');"
      },
      {
        "Description": "Set value 'East' in cell B4",
        "VBA Code": "oWorksheet.Range(\"B4\").Value = \"East\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('B4').SetValue('East');"
      },
      {
        "Description": "Set value 'West' in cell B5",
        "VBA Code": "oWorksheet.Range(\"B5\").Value = \"West\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('B5').SetValue('West');"
      },
      {
        "Description": "Set value 'Fancy' in cell C2",
        "VBA Code": "oWorksheet.Range(\"C2\").Value = \"Fancy\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('C2').SetValue('Fancy');"
      },
      {
        "Description": "Set value 'Fancy' in cell C3",
        "VBA Code": "oWorksheet.Range(\"C3\").Value = \"Fancy\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('C3').SetValue('Fancy');"
      },
      {
        "Description": "Set value 'Tee' in cell C4",
        "VBA Code": "oWorksheet.Range(\"C4\").Value = \"Tee\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('C4').SetValue('Tee');"
      },
      {
        "Description": "Set value 'Tee' in cell C5",
        "VBA Code": "oWorksheet.Range(\"C5\").Value = \"Tee\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('C5').SetValue('Tee');"
      },
      {
        "Description": "Set numeric value 42.5 in cell D2",
        "VBA Code": "oWorksheet.Range(\"D2\").Value = 42.5",
        "OnlyOffice JS Code": "oWorksheet.GetRange('D2').SetValue(42.5);"
      },
      {
        "Description": "Set numeric value 35.2 in cell D3",
        "VBA Code": "oWorksheet.Range(\"D3\").Value = 35.2",
        "OnlyOffice JS Code": "oWorksheet.GetRange('D3').SetValue(35.2);"
      },
      {
        "Description": "Set numeric value 12.3 in cell D4",
        "VBA Code": "oWorksheet.Range(\"D4\").Value = 12.3",
        "OnlyOffice JS Code": "oWorksheet.GetRange('D4').SetValue(12.3);"
      },
      {
        "Description": "Set numeric value 24.8 in cell D5",
        "VBA Code": "oWorksheet.Range(\"D5\").Value = 24.8",
        "OnlyOffice JS Code": "oWorksheet.GetRange('D5').SetValue(24.8);"
      },
      {
        "Description": "Define data range from B1 to D5 on Sheet1",
        "VBA Code": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")",
        "OnlyOffice JS Code": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
      },
      {
        "Description": "Insert a new pivot table worksheet based on the data range",
        "VBA Code": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)",
        "OnlyOffice JS Code": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
      },
      {
        "Description": "Add 'Region' and 'Style' as row fields in the pivot table",
        "VBA Code": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With",
        "OnlyOffice JS Code": "pivotTable.AddFields({ rows: ['Region', 'Style'] });"
      },
      {
        "Description": "Add 'Price' as a data field for sum",
        "VBA Code": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum",
        "OnlyOffice JS Code": "var sumDataField = pivotTable.AddDataField('Price');"
      },
      {
        "Description": "Add 'Price' as a data field for count and set function to Count",
        "VBA Code": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Count of Price\", xlCount",
        "OnlyOffice JS Code": "var countDataField = pivotTable.AddDataField('Price');\ncountDataField.SetFunction('Count');"
      },
      {
        "Description": "Get the active worksheet (pivot table worksheet)",
        "VBA Code": "Set pivotWorksheet = ActiveSheet",
        "OnlyOffice JS Code": "var pivotWorksheet = Api.GetActiveSheet();"
      },
      {
        "Description": "Set value 'Functions:' in cell A15",
        "VBA Code": "pivotWorksheet.Range(\"A15\").Value = \"Functions:\"",
        "OnlyOffice JS Code": "pivotWorksheet.GetRange('A15').SetValue('Functions:');"
      },
      {
        "Description": "Set the function of sumDataField in cell B15",
        "VBA Code": "pivotWorksheet.Range(\"B15\").Value = \"Sum\"",
        "OnlyOffice JS Code": "pivotWorksheet.GetRange('B15').SetValue(sumDataField.GetFunction());"
      },
      {
        "Description": "Set the function of countDataField in cell B16",
        "VBA Code": "pivotWorksheet.Range(\"B16\").Value = \"Count\"",
        "OnlyOffice JS Code": "pivotWorksheet.GetRange('B16').SetValue(countDataField.GetFunction());"
      }
    ]
  }
}
``````json
{
  "description": "This script populates worksheet cells with data, creates a pivot table based on a specified range, adds row and data fields to the pivot table, and writes the index of a data field to specific cells.",
  "table": [
    {
      "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "VBA": "oWorksheet.Range(\"B1\").Value = \"Region\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');"
    },
    {
      "VBA": "oWorksheet.Range(\"C1\").Value = \"Style\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('C1').SetValue('Style');"
    },
    {
      "VBA": "oWorksheet.Range(\"D1\").Value = \"Price\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('D1').SetValue('Price');"
    },
    {
      "VBA": "oWorksheet.Range(\"B2\").Value = \"East\"\noWorksheet.Range(\"B3\").Value = \"West\"\noWorksheet.Range(\"B4\").Value = \"East\"\noWorksheet.Range(\"B5\").Value = \"West\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');\noWorksheet.GetRange('B3').SetValue('West');\noWorksheet.GetRange('B4').SetValue('East');\noWorksheet.GetRange('B5').SetValue('West');"
    },
    {
      "VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\"\noWorksheet.Range(\"C3\").Value = \"Fancy\"\noWorksheet.Range(\"C4\").Value = \"Tee\"\noWorksheet.Range(\"C5\").Value = \"Tee\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');\noWorksheet.GetRange('C3').SetValue('Fancy');\noWorksheet.GetRange('C4').SetValue('Tee');\noWorksheet.GetRange('C5').SetValue('Tee');"
    },
    {
      "VBA": "oWorksheet.Range(\"D2\").Value = 42.5\noWorksheet.Range(\"D3\").Value = 35.2\noWorksheet.Range(\"D4\").Value = 12.3\noWorksheet.Range(\"D5\").Value = 24.8",
      "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);\noWorksheet.GetRange('D3').SetValue(35.2);\noWorksheet.GetRange('D4').SetValue(12.3);\noWorksheet.GetRange('D5').SetValue(24.8);"
    },
    {
      "VBA": "Dim dataRef As Range\nSet dataRef = oWorksheet.Range(\"B1:D5\")",
      "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
    },
    {
      "VBA": "Dim pivotTable As PivotTable\nSet pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)",
      "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
    },
    {
      "VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With",
      "OnlyOfficeJS": "pivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});"
    },
    {
      "VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum\npivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Average of Price\", xlAverage",
      "OnlyOfficeJS": "pivotTable.AddDataField('Price');\npivotTable.AddDataField('Price');"
    },
    {
      "VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ActiveSheet\nDim dataField As PivotField\nSet dataField = pivotTable.PivotFields(\"Sum of Price\")",
      "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();\nvar dataField = pivotTable.GetDataFields('Sum of Price');"
    },
    {
      "VBA": "pivotWorksheet.Range(\"A15\").Value = \"Sum of Price index:\"\npivotWorksheet.Range(\"B15\").Value = dataField.Position",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('A15').SetValue('Sum of Price index:');\npivotWorksheet.GetRange('B15').SetValue(dataField.GetIndex());"
    }
  ]
}
``````json
{
  "Description": "This code sets specific cell values in the active worksheet, creates a pivot table based on a data range, adds row and data fields to the pivot table, and retrieves the name of a data field.",
  "Mappings": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Dim dataRef As Range\nSet dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Dim pivotCache As PivotCache\nDim pivotTable As PivotTable\nSet pivotCache = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef)\nSet pivotTable = pivotCache.CreatePivotTable(TableDestination:=Sheets.Add.Name, TableName:=\"PivotTable1\")"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var dataField = pivotTable.GetDataFields('Sum of Price');",
      "Excel_VBA": "Dim dataField As PivotField\nSet dataField = pivotTable.PivotFields(\"Sum of Price\")"
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A12').SetValue('The Data field name');",
      "Excel_VBA": "pivotWorksheet.Range(\"A12\").Value = \"The Data field name\""
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B12').SetValue(dataField.GetName());",
      "Excel_VBA": "pivotWorksheet.Range(\"B12\").Value = dataField.Name"
    }
  ]
}
``````json
{
  "Set Active Worksheet": {
    "VBA": "Set oWorksheet = ActiveSheet",
    "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();"
  },
  "Set Range B1 Value to 'Region'": {
    "VBA": "oWorksheet.Range(\"B1\").Value = \"Region\"",
    "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');"
  },
  "Set Range C1 Value to 'Style'": {
    "VBA": "oWorksheet.Range(\"C1\").Value = \"Style\"",
    "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');"
  },
  "Set Range D1 Value to 'Price'": {
    "VBA": "oWorksheet.Range(\"D1\").Value = \"Price\"",
    "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');"
  },
  "Set Range B2 Value to 'East'": {
    "VBA": "oWorksheet.Range(\"B2\").Value = \"East\"",
    "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');"
  },
  "Set Range B3 Value to 'West'": {
    "VBA": "oWorksheet.Range(\"B3\").Value = \"West\"",
    "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');"
  },
  "Set Range B4 Value to 'East'": {
    "VBA": "oWorksheet.Range(\"B4\").Value = \"East\"",
    "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');"
  },
  "Set Range B5 Value to 'West'": {
    "VBA": "oWorksheet.Range(\"B5\").Value = \"West\"",
    "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');"
  },
  "Set Range C2 Value to 'Fancy'": {
    "VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\"",
    "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');"
  },
  "Set Range C3 Value to 'Fancy'": {
    "VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\"",
    "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');"
  },
  "Set Range C4 Value to 'Tee'": {
    "VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\"",
    "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');"
  },
  "Set Range C5 Value to 'Tee'": {
    "VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\"",
    "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');"
  },
  "Set Range D2 Value to 42.5": {
    "VBA": "oWorksheet.Range(\"D2\").Value = 42.5",
    "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);"
  },
  "Set Range D3 Value to 35.2": {
    "VBA": "oWorksheet.Range(\"D3\").Value = 35.2",
    "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);"
  },
  "Set Range D4 Value to 12.3": {
    "VBA": "oWorksheet.Range(\"D4\").Value = 12.3",
    "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);"
  },
  "Set Range D5 Value to 24.8": {
    "VBA": "oWorksheet.Range(\"D5\").Value = 24.8",
    "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);"
  },
  "Get Data Range $B$1:$D$5": {
    "VBA": "Set dataRef = oWorksheet.Range(\"$B$1:$D$5\")",
    "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
  },
  "Insert Pivot Table in New Worksheet": {
    "VBA": "Set pivotTable = Worksheets.Add.PivotTable(dataRef)",
    "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
  },
  "Add Row Fields 'Region' and 'Style' to Pivot Table": {
    "VBA": "pivotTable.AddFields RowFields:=Array(\"Region\", \"Style\")",
    "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });"
  },
  "Add Data Field 'Price' to Pivot Table": {
    "VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum",
    "OnlyOffice JS": "pivotTable.AddDataField('Price');"
  },
  "Get Active Worksheet After Pivot Table Creation": {
    "VBA": "Set pivotWorksheet = ActiveSheet",
    "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();"
  },
  "Get Data Field 'Sum of Price' from Pivot Table": {
    "VBA": "Set dataField = pivotTable.DataFields(\"Sum of Price\")",
    "OnlyOffice JS": "var dataField = pivotTable.GetDataFields('Sum of Price');"
  },
  "Set Cell A15 Value to 'Number format:'": {
    "VBA": "pivotWorksheet.Range(\"A15\").Value = \"Number format:\"",
    "OnlyOffice JS": "pivotWorksheet.GetRange('A15').SetValue('Number format:');"
  },
  "Set Cell B15 Value to Data Field Number Format": {
    "VBA": "pivotWorksheet.Range(\"B15\").Value = dataField.NumberFormat",
    "OnlyOffice JS": "pivotWorksheet.GetRange('B15').SetValue(dataField.GetNumberFormat());"
  }
}
``````json
{
  "Get the active worksheet": {
    "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
    "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveWorkbook.ActiveSheet"
  },
  "Set value 'Region' in cell B1": {
    "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');",
    "VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
  },
  "Set value 'Style' in cell C1": {
    "OnlyOfficeJS": "oWorksheet.GetRange('C1').SetValue('Style');",
    "VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
  },
  "Set value 'Price' in cell D1": {
    "OnlyOfficeJS": "oWorksheet.GetRange('D1').SetValue('Price');",
    "VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
  },
  "Set value 'East' in cell B2": {
    "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');",
    "VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
  },
  "Set value 'West' in cell B3": {
    "OnlyOfficeJS": "oWorksheet.GetRange('B3').SetValue('West');",
    "VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
  },
  "Set value 'East' in cell B4": {
    "OnlyOfficeJS": "oWorksheet.GetRange('B4').SetValue('East');",
    "VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
  },
  "Set value 'West' in cell B5": {
    "OnlyOfficeJS": "oWorksheet.GetRange('B5').SetValue('West');",
    "VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
  },
  "Set value 'Fancy' in cell C2": {
    "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
    "VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
  },
  "Set value 'Fancy' in cell C3": {
    "OnlyOfficeJS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
    "VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
  },
  "Set value 'Tee' in cell C4": {
    "OnlyOfficeJS": "oWorksheet.GetRange('C4').SetValue('Tee');",
    "VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
  },
  "Set value 'Tee' in cell C5": {
    "OnlyOfficeJS": "oWorksheet.GetRange('C5').SetValue('Tee');",
    "VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
  },
  "Set value 42.5 in cell D2": {
    "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);",
    "VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
  },
  "Set value 35.2 in cell D3": {
    "OnlyOfficeJS": "oWorksheet.GetRange('D3').SetValue(35.2);",
    "VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
  },
  "Set value 12.3 in cell D4": {
    "OnlyOfficeJS": "oWorksheet.GetRange('D4').SetValue(12.3);",
    "VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
  },
  "Set value 24.8 in cell D5": {
    "OnlyOfficeJS": "oWorksheet.GetRange('D5').SetValue(24.8);",
    "VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
  },
  "Get data range B1:D5": {
    "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "VBA": "Dim dataRef As Range\nSet dataRef = oWorksheet.Range(\"B1:D5\")"
  },
  "Insert pivot table into new worksheet": {
    "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "VBA": "Dim pivotTable As PivotTable\nDim pivotCache As PivotCache\nSet pivotCache = ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef)\nSet pivotTable = pivotCache.CreatePivotTable(TableDestination:=ActiveWorkbook.Worksheets.Add.Range(\"A1\"), TableName:=\"PivotTable1\")"
  },
  "Add 'Region' and 'Style' as row fields in pivot table": {
    "OnlyOfficeJS": "pivotTable.AddFields({ rows: ['Region', 'Style'], });",
    "VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
  },
  "Add 'Price' as data field in pivot table": {
    "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
    "VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
  },
  "Add 'Price' as second data field and set its position": {
    "OnlyOfficeJS": "var dataField = pivotTable.AddDataField('Price');\ndataField.SetPosition(1);",
    "VBA": "With pivotTable\n    Dim dataField As PivotField\n    Set dataField = .AddDataField(.PivotFields(\"Price\"), \"Sum of Price\", xlSum)\n    dataField.Position = 1\nEnd With"
  },
  "Get the active worksheet for pivot table": {
    "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();",
    "VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ActiveWorkbook.ActiveSheet"
  },
  "Set text 'Sum of Price2 orientation:' in cell A15": {
    "OnlyOfficeJS": "pivotWorksheet.GetRange('A15').SetValue('Sum of Price2 orientation:');",
    "VBA": "pivotWorksheet.Range(\"A15\").Value = \"Sum of Price2 orientation:\""
  },
  "Set the orientation of data field in cell B15": {
    "OnlyOfficeJS": "pivotWorksheet.GetRange('B15').SetValue(dataField.GetOrientation());",
    "VBA": "pivotWorksheet.Range(\"B15\").Value = dataField.Orientation"
  }
}
``````json
{
  "Description": "This code initializes the active worksheet, sets specific values in cells B1:D5, creates a pivot table based on the range B1:D5 in a new worksheet, adds 'Region' and 'Style' as row fields, adds 'Price' as data fields twice, and retrieves the indices of the 'Sum of Price' data field and its pivot field, setting these indices in cells A15:B16 of the active worksheet.",
  "CodeMappings": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Dim dataRef As Range\nSet dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Dim pivotTable As PivotTable\nSet pivotTable = Worksheets.Add.PivotTableWizard(SourceData:=dataRef)"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
    },
    {
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var dataField = pivotTable.GetDataFields('Sum of Price');",
      "Excel_VBA": "Dim dataField As PivotField\nSet dataField = pivotTable.PivotFields(\"Sum of Price\")"
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A15').SetValue('Sum of Price position:');",
      "Excel_VBA": "pivotWorksheet.Range(\"A15\").Value = \"Sum of Price position:\""
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B15').SetValue(dataField.GetIndex());",
      "Excel_VBA": "pivotWorksheet.Range(\"B15\").Value = dataField.Position"
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A16').SetValue('Price position:');",
      "Excel_VBA": "pivotWorksheet.Range(\"A16\").Value = \"Price position:\""
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B16').SetValue(dataField.GetPivotField().GetIndex());",
      "Excel_VBA": "pivotWorksheet.Range(\"B16\").Value = dataField.PivotField.Position"
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
  },
  {
    "Description": "Set header values in B1, C1, D1",
    "OnlyOffice JS": "\n\toWorksheet.GetRange('B1').SetValue('Region');\n\toWorksheet.GetRange('C1').SetValue('Style');\n\toWorksheet.GetRange('D1').SetValue('Price');",
    "Excel VBA": "\n\toWorksheet.Range(\"B1\").Value = \"Region\"\n\toWorksheet.Range(\"C1\").Value = \"Style\"\n\toWorksheet.Range(\"D1\").Value = \"Price\""
  },
  {
    "Description": "Set data values in column B",
    "OnlyOffice JS": "\n\toWorksheet.GetRange('B2').SetValue('East');\n\toWorksheet.GetRange('B3').SetValue('West');\n\toWorksheet.GetRange('B4').SetValue('East');\n\toWorksheet.GetRange('B5').SetValue('West');",
    "Excel VBA": "\n\toWorksheet.Range(\"B2\").Value = \"East\"\n\toWorksheet.Range(\"B3\").Value = \"West\"\n\toWorksheet.Range(\"B4\").Value = \"East\"\n\toWorksheet.Range(\"B5\").Value = \"West\""
  },
  {
    "Description": "Set data values in column C",
    "OnlyOffice JS": "\n\toWorksheet.GetRange('C2').SetValue('Fancy');\n\toWorksheet.GetRange('C3').SetValue('Fancy');\n\toWorksheet.GetRange('C4').SetValue('Tee');\n\toWorksheet.GetRange('C5').SetValue('Tee');",
    "Excel VBA": "\n\toWorksheet.Range(\"C2\").Value = \"Fancy\"\n\toWorksheet.Range(\"C3\").Value = \"Fancy\"\n\toWorksheet.Range(\"C4\").Value = \"Tee\"\n\toWorksheet.Range(\"C5\").Value = \"Tee\""
  },
  {
    "Description": "Set data values in column D",
    "OnlyOffice JS": "\n\toWorksheet.GetRange('D2').SetValue(42.5);\n\toWorksheet.GetRange('D3').SetValue(35.2);\n\toWorksheet.GetRange('D4').SetValue(12.3);\n\toWorksheet.GetRange('D5').SetValue(24.8);",
    "Excel VBA": "\n\toWorksheet.Range(\"D2\").Value = 42.5\n\toWorksheet.Range(\"D3\").Value = 35.2\n\toWorksheet.Range(\"D4\").Value = 12.3\n\toWorksheet.Range(\"D5\").Value = 24.8"
  },
  {
    "Description": "Get data range for pivot table",
    "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "Excel VBA": "Set dataRef = ThisWorkbook.Worksheets(\"Sheet1\").Range(\"B1:D5\")"
  },
  {
    "Description": "Insert a new pivot table in a new worksheet",
    "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "Excel VBA": "Set pivotTable = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=ThisWorkbook.Worksheets.Add().Range(\"A3\"), TableName:=\"PivotTable1\")"
  },
  {
    "Description": "Add row fields 'Region' and 'Style' to the pivot table",
    "OnlyOffice JS": "\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});",
    "Excel VBA": "\n\nWith pivotTable\n\t.PivotFields(\"Region\").Orientation = xlRowField\n\t.PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
  },
  {
    "Description": "Add 'Price' as a data field twice and get its position",
    "OnlyOffice JS": "\n\npivotTable.AddDataField('Price');\nvar dataField = pivotTable.AddDataField('Price');",
    "Excel VBA": "\n\nWith pivotTable\n\tWith .PivotFields(\"Price\")\n\t\t.Orientation = xlDataField\n\t\t.Function = xlSum\n\tEnd With\n\tDim dataField As PivotField\n\tSet dataField = .PivotFields(\"Sum of Price\")\nEnd With"
  },
  {
    "Description": "Get the active worksheet for pivot table and set values in A15 and B15",
    "OnlyOffice JS": "\n\nvar pivotWorksheet = Api.GetActiveSheet();\n\npivotWorksheet.GetRange('A15').SetValue('Sum of Price2 position:');\npivotWorksheet.GetRange('B15').SetValue(dataField.GetPosition());",
    "Excel VBA": "\n\nSet pivotWorksheet = ThisWorkbook.ActiveSheet\n\npivotWorksheet.Range(\"A15\").Value = \"Sum of Price2 position:\"\npivotWorksheet.Range(\"B15\").Value = dataField.Position"
  }
]
``````json
{
  "table": {
    "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
      },
      {
        "Description": "Set value of cell B1 to 'Region'",
        "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
        "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
      },
      {
        "Description": "Set value of cell C1 to 'Style'",
        "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
        "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
      },
      {
        "Description": "Set value of cell D1 to 'Price'",
        "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
        "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
      },
      {
        "Description": "Set value of cell B2 to 'East'",
        "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
        "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
      },
      {
        "Description": "Set value of cell B3 to 'West'",
        "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
        "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
      },
      {
        "Description": "Set value of cell B4 to 'East'",
        "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
        "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
      },
      {
        "Description": "Set value of cell B5 to 'West'",
        "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
        "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
      },
      {
        "Description": "Set value of cell C2 to 'Fancy'",
        "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
        "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
      },
      {
        "Description": "Set value of cell C3 to 'Fancy'",
        "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
        "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
      },
      {
        "Description": "Set value of cell C4 to 'Tee'",
        "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
        "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
      },
      {
        "Description": "Set value of cell C5 to 'Tee'",
        "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
        "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
      },
      {
        "Description": "Set value of cell D2 to 42.5",
        "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
        "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
      },
      {
        "Description": "Set value of cell D3 to 35.2",
        "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
        "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
      },
      {
        "Description": "Set value of cell D4 to 12.3",
        "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
        "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
      },
      {
        "Description": "Set value of cell D5 to 24.8",
        "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
        "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
      },
      {
        "Description": "Get data range B1:D5 from Sheet1",
        "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
        "Excel VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
      },
      {
        "Description": "Insert a new pivot table with the specified data range",
        "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
        "Excel VBA": "Set pivotTable = ActiveWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
      },
      {
        "Description": "Add 'Region' and 'Style' as row fields to the pivot table",
        "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
        "Excel VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
      },
      {
        "Description": "Add 'Price' as a data field to the pivot table",
        "OnlyOffice JS": "pivotTable.AddDataField('Price');",
        "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
      },
      {
        "Description": "Get the active worksheet (pivot worksheet)",
        "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set pivotWorksheet = ActiveWorkbook.ActiveSheet"
      },
      {
        "Description": "Get the 'Sum of Price' data field from the pivot table",
        "OnlyOffice JS": "var dataField = pivotTable.GetDataFields('Sum of Price');",
        "Excel VBA": "Set dataField = pivotTable.DataFields(\"Sum of Price\")"
      },
      {
        "Description": "Set value of cell A12 to 'The Data field value'",
        "OnlyOffice JS": "pivotWorksheet.GetRange('A12').SetValue('The Data field value');",
        "Excel VBA": "pivotWorksheet.Range(\"A12\").Value = \"The Data field value\""
      },
      {
        "Description": "Set value of cell B12 to the value of the data field",
        "OnlyOffice JS": "pivotWorksheet.GetRange('B12').SetValue(dataField.GetValue());",
        "Excel VBA": "pivotWorksheet.Range(\"B12\").Value = dataField.Value"
      }
    ]
  }
}
```**Description**

This code populates cells with data, creates a pivot table in a new worksheet based on the specified data range, adds row and data fields to the pivot table, and sets captions for the data fields.

```json
{
  "CodeMappings": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"$B$1:$D$5\")"
    },
    {
      "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel VBA": "Set pivotTable = Worksheets.Add.PivotTables.Add(PivotCache:=ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef), TableDestination:=ActiveSheet.Cells(1,1), TableName:=\"PivotTable1\")"
    },
    {
      "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'], });",
      "Excel VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice JS": "pivotTable.AddDataField('Price');",
      "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "var dataField = pivotTable.GetDataFields('Sum of Price');",
      "Excel VBA": "Set dataField = pivotTable.PivotFields(\"Sum of Price\")"
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('A12').SetValue('The Data field caption');",
      "Excel VBA": "pivotWorksheet.Range(\"A12\").Value = \"The Data field caption\""
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('B12').SetValue(dataField.GetCaption());",
      "Excel VBA": "pivotWorksheet.Range(\"B12\").Value = dataField.Caption"
    }
  ]
}
``````json
[
  {
    "Description": "Set headers in cells B1, C1, and D1",
    "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');\noWorksheet.GetRange('C1').SetValue('Style');\noWorksheet.GetRange('D1').SetValue('Price');",
    "Excel_VBA": "With oWorksheet\n    .Range(\"B1\").Value = \"Region\"\n    .Range(\"C1\").Value = \"Style\"\n    .Range(\"D1\").Value = \"Price\"\nEnd With"
  },
  {
    "Description": "Set data in range B2:B5, C2:C5, and D2:D5",
    "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');\noWorksheet.GetRange('B3').SetValue('West');\noWorksheet.GetRange('B4').SetValue('East');\noWorksheet.GetRange('B5').SetValue('West');\noWorksheet.GetRange('C2').SetValue('Fancy');\noWorksheet.GetRange('C3').SetValue('Fancy');\noWorksheet.GetRange('C4').SetValue('Tee');\noWorksheet.GetRange('C5').SetValue('Tee');\noWorksheet.GetRange('D2').SetValue(42.5);\noWorksheet.GetRange('D3').SetValue(35.2);\noWorksheet.GetRange('D4').SetValue(12.3);\noWorksheet.GetRange('D5').SetValue(24.8);",
    "Excel_VBA": "With oWorksheet\n    .Range(\"B2\").Value = \"East\"\n    .Range(\"B3\").Value = \"West\"\n    .Range(\"B4\").Value = \"East\"\n    .Range(\"B5\").Value = \"West\"\n    .Range(\"C2\").Value = \"Fancy\"\n    .Range(\"C3\").Value = \"Fancy\"\n    .Range(\"C4\").Value = \"Tee\"\n    .Range(\"C5\").Value = \"Tee\"\n    .Range(\"D2\").Value = 42.5\n    .Range(\"D3\").Value = 35.2\n    .Range(\"D4\").Value = 12.3\n    .Range(\"D5\").Value = 24.8\nEnd With"
  },
  {
    "Description": "Create a pivot table from range B1:D5 in a new worksheet",
    "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nvar pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "Excel_VBA": "Dim dataRef As Range\nSet dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")\nDim pivotSheet As Worksheet\nSet pivotSheet = Worksheets.Add\nDim pivotCache As PivotCache\nSet pivotCache = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef)\nDim pivotTable As PivotTable\nSet pivotTable = pivotCache.CreatePivotTable(TableDestination:=pivotSheet.Range(\"A1\"), TableName:=\"PivotTable1\")"
  },
  {
    "Description": "Add 'Region' and 'Style' as row fields in the pivot table",
    "OnlyOffice_JS": "pivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});",
    "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
  },
  {
    "Description": "Add 'Price' as data fields with sum and count functions",
    "OnlyOffice_JS": "var sumDataField = pivotTable.AddDataField('Price');\nvar countDataField = pivotTable.AddDataField('Price');\ncountDataField.SetFunction('Count');",
    "Excel_VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\n    .AddDataField .PivotFields(\"Price\"), \"Count of Price\", xlCount\nEnd With"
  },
  {
    "Description": "Display pivot table functions in cells A15:B16",
    "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();\n\npivotWorksheet.GetRange('A15').SetValue('Functions:');\npivotWorksheet.GetRange('B15').SetValue(sumDataField.GetFunction());\npivotWorksheet.GetRange('B16').SetValue(countDataField.GetFunction());",
    "Excel_VBA": "With pivotSheet\n    .Range(\"A15\").Value = \"Functions:\"\n    .Range(\"B15\").Value = pivotTable.DataFields(1).Function\n    .Range(\"B16\").Value = pivotTable.DataFields(2).Function\nEnd With"
  }
]
``````json
{
  "description": "Populates a worksheet with data, creates a pivot table on a new worksheet, and retrieves the index of a specific data field.",
  "code": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');\noWorksheet.GetRange('C1').SetValue('Style');\noWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\"\noWorksheet.Range(\"C1\").Value = \"Style\"\noWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');\noWorksheet.GetRange('B3').SetValue('West');\noWorksheet.GetRange('B4').SetValue('East');\noWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\"\noWorksheet.Range(\"B3\").Value = \"West\"\noWorksheet.Range(\"B4\").Value = \"East\"\noWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');\noWorksheet.GetRange('C3').SetValue('Fancy');\noWorksheet.GetRange('C4').SetValue('Tee');\noWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\"\noWorksheet.Range(\"C3\").Value = \"Fancy\"\noWorksheet.Range(\"C4\").Value = \"Tee\"\noWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);\noWorksheet.GetRange('D3').SetValue(35.2);\noWorksheet.GetRange('D4').SetValue(12.3);\noWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5\noWorksheet.Range(\"D3\").Value = 35.2\noWorksheet.Range(\"D4\").Value = 12.3\noWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Dim dataRef As Range\nSet dataRef = Worksheets(\"Sheet1\").Range(\"$B$1:$D$5\")"
    },
    {
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Dim pivotTable As PivotTable\nDim pivotSheet As Worksheet\nSet pivotSheet = Worksheets.Add\nSet pivotTable = pivotSheet.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');\npivotTable.AddDataField('Price');",
      "Excel_VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
    },
    {
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();\nvar dataField = pivotTable.GetDataFields('Sum of Price');",
      "Excel_VBA": "Dim pivotWorksheet As Worksheet\nDim dataField As PivotField\nSet pivotWorksheet = pivotTable.Parent\nSet dataField = pivotTable.PivotFields(\"Sum of Price\")"
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A15').SetValue('Sum of Price index:');\npivotWorksheet.GetRange('B15').SetValue(dataField.GetIndex());",
      "Excel_VBA": "pivotWorksheet.Range(\"A15\").Value = \"Sum of Price index:\"\npivotWorksheet.Range(\"B15\").Value = dataField.Position"
    }
  ]
}
``````json
{
  "operations": [
    {
      "description": "Get the active worksheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "description": "Set headers in cells B1, C1, and D1",
      "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');\noWorksheet.GetRange('C1').SetValue('Style');\noWorksheet.GetRange('D1').SetValue('Price');",
      "VBA": "Range(\"B1\").Value = \"Region\"\nRange(\"C1\").Value = \"Style\"\nRange(\"D1\").Value = \"Price\""
    },
    {
      "description": "Set values in column B (B2 to B5)",
      "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');\noWorksheet.GetRange('B3').SetValue('West');\noWorksheet.GetRange('B4').SetValue('East');\noWorksheet.GetRange('B5').SetValue('West');",
      "VBA": "Range(\"B2\").Value = \"East\"\nRange(\"B3\").Value = \"West\"\nRange(\"B4\").Value = \"East\"\nRange(\"B5\").Value = \"West\""
    },
    {
      "description": "Set values in column C (C2 to C5)",
      "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');\noWorksheet.GetRange('C3').SetValue('Fancy');\noWorksheet.GetRange('C4').SetValue('Tee');\noWorksheet.GetRange('C5').SetValue('Tee');",
      "VBA": "Range(\"C2\").Value = \"Fancy\"\nRange(\"C3\").Value = \"Fancy\"\nRange(\"C4\").Value = \"Tee\"\nRange(\"C5\").Value = \"Tee\""
    },
    {
      "description": "Set values in column D (D2 to D5)",
      "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);\noWorksheet.GetRange('D3').SetValue(35.2);\noWorksheet.GetRange('D4').SetValue(12.3);\noWorksheet.GetRange('D5').SetValue(24.8);",
      "VBA": "Range(\"D2\").Value = 42.5\nRange(\"D3\").Value = 35.2\nRange(\"D4\").Value = 12.3\nRange(\"D5\").Value = 24.8"
    },
    {
      "description": "Get data range for pivot table",
      "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "VBA": "Dim dataRef As Range\nSet dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "description": "Insert a new pivot table in a new worksheet",
      "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "VBA": "Dim pivotTable As PivotTable\nDim pivotCache As PivotCache\nSet pivotCache = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef)\nSet pivotTable = pivotCache.CreatePivotTable(TableDestination:=Worksheets.Add.Cells(1, 1), TableName:=\"PivotTable\")"
    },
    {
      "description": "Add row fields 'Region' and 'Style' to the pivot table",
      "OnlyOfficeJS": "pivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});",
      "VBA": "With pivotTable\n\t.PivotFields(\"Region\").Orientation = xlRowField\n\t.PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "description": "Add data field 'Price' to the pivot table",
      "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
      "VBA": "With pivotTable\n\t.PivotFields(\"Price\").Orientation = xlDataField\n\t.PivotFields(\"Price\").Function = xlSum\nEnd With"
    },
    {
      "description": "Get the active worksheet after pivot table creation",
      "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ActiveSheet"
    },
    {
      "description": "Get the data field 'Sum of Price' from the pivot table",
      "OnlyOfficeJS": "var dataField = pivotTable.GetDataFields('Sum of Price');",
      "VBA": "Dim dataField As PivotField\nSet dataField = pivotTable.PivotFields(\"Sum of Price\")"
    },
    {
      "description": "Set value 'The Data field name' in cell A12 and the data field name in cell B12",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('A12').SetValue('The Data field name');\npivotWorksheet.GetRange('B12').SetValue(dataField.GetName());",
      "VBA": "pivotWorksheet.Range(\"A12\").Value = \"The Data field name\"\npivotWorksheet.Range(\"B12\").Value = dataField.Name"
    }
  ]
}
``````json
{
  "table": [
    {
      "description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "description": "Set cell B1 to 'Region'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "description": "Set cell C1 to 'Style'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "description": "Set cell D1 to 'Price'",
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "description": "Set cell B2 to 'East'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "description": "Set cell B3 to 'West'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "description": "Set cell B4 to 'East'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "description": "Set cell B5 to 'West'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "description": "Set cell C2 to 'Fancy'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "description": "Set cell C3 to 'Fancy'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "description": "Set cell C4 to 'Tee'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "description": "Set cell C5 to 'Tee'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "description": "Set cell D2 to 42.5",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "description": "Set cell D3 to 35.2",
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "description": "Set cell D4 to 12.3",
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "description": "Set cell D5 to 24.8",
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "description": "Get range B1:D5 from Sheet1",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "description": "Insert a new pivot table worksheet based on dataRef",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(Source:=dataRef)"
    },
    {
      "description": "Add 'Region' and 'Style' as row fields to the pivot table",
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "Excel_VBA": "With pivotTable.PivotFields(\"Region\")\n    .Orientation = xlRowField\n    .Position = 1\nEnd With\nWith pivotTable.PivotFields(\"Style\")\n    .Orientation = xlRowField\n    .Position = 2\nEnd With"
    },
    {
      "description": "Add 'Price' as a data field to the pivot table",
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "description": "Get the active worksheet after inserting pivot table",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "description": "Get the data field 'Sum of Price' from the pivot table",
      "OnlyOffice_JS": "var dataField = pivotTable.GetDataFields('Sum of Price');",
      "Excel_VBA": "Set dataField = pivotTable.DataFields(\"Sum of Price\")"
    },
    {
      "description": "Set cell A15 to 'Number format:' in the pivot worksheet",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A15').SetValue('Number format:');",
      "Excel_VBA": "pivotWorksheet.Range(\"A15\").Value = \"Number format:\""
    },
    {
      "description": "Set cell B15 to the number format of the data field",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B15').SetValue(dataField.GetNumberFormat());",
      "Excel_VBA": "pivotWorksheet.Range(\"B15\").Value = dataField.NumberFormat"
    }
  ]
}
``````json
{
  "description": "This VBA code replicates the functionality of the provided OnlyOffice JavaScript code, which sets up data in the worksheet, creates a pivot table, and modifies its fields.",
  "code": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Dim dataRef As Range\nSet dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Dim pivotTable As PivotTable\nDim pivotSheet As Worksheet\nSet pivotSheet = Worksheets.Add\nSet pivotTable = pivotSheet.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOffice_JS": "var dataField = pivotTable.AddDataField('Price');",
      "Excel_VBA": "Dim dataField As PivotField\nSet dataField = pivotTable.AddDataField(pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum)"
    },
    {
      "OnlyOffice_JS": "dataField.SetPosition(1);",
      "Excel_VBA": "dataField.Position = 1"
    },
    {
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A15').SetValue('Sum of Price2 orientation:');",
      "Excel_VBA": "pivotWorksheet.Range(\"A15\").Value = \"Sum of Price2 orientation:\""
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B15').SetValue(dataField.GetOrientation());",
      "Excel_VBA": "pivotWorksheet.Range(\"B15\").Value = dataField.Orientation"
    }
  ]
}
```**This code populates a worksheet with region, style, and price data, creates a pivot table, and retrieves pivot table field indices.**

```json
{
  "RAG_Table": [
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "ExcelVBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "ExcelVBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "ExcelVBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');",
      "ExcelVBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('B3').SetValue('West');",
      "ExcelVBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('B4').SetValue('East');",
      "ExcelVBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('B5').SetValue('West');",
      "ExcelVBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "ExcelVBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "ExcelVBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "ExcelVBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "ExcelVBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "ExcelVBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "ExcelVBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "ExcelVBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "ExcelVBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "ExcelVBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "ExcelVBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceData:=dataRef)"
    },
    {
      "OnlyOfficeJS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "ExcelVBA": "With pivotTable.PivotFields(\"Region\")\n    .Orientation = xlRowField\nEnd With\nWith pivotTable.PivotFields(\"Style\")\n    .Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
      "ExcelVBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
      "ExcelVBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price 2\", xlSum"
    },
    {
      "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "OnlyOfficeJS": "var dataField = pivotTable.GetDataFields('Sum of Price');",
      "ExcelVBA": "Set dataField = pivotTable.DataFields(\"Sum of Price\")"
    },
    {
      "OnlyOfficeJS": "pivotWorksheet.GetRange('A15').SetValue('Sum of Price position:');",
      "ExcelVBA": "pivotWorksheet.Range(\"A15\").Value = \"Sum of Price position:\""
    },
    {
      "OnlyOfficeJS": "pivotWorksheet.GetRange('B15').SetValue(dataField.GetIndex());",
      "ExcelVBA": "pivotWorksheet.Range(\"B15\").Value = dataField.Position"
    },
    {
      "OnlyOfficeJS": "pivotWorksheet.GetRange('A16').SetValue('Price position:');",
      "ExcelVBA": "pivotWorksheet.Range(\"A16\").Value = \"Price position:\""
    },
    {
      "OnlyOfficeJS": "pivotWorksheet.GetRange('B16').SetValue(dataField.GetPivotField().GetIndex());",
      "ExcelVBA": "pivotWorksheet.Range(\"B16\").Value = dataField.PivotField.Position"
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "VBA": "Set oWorksheet = ActiveSheet",
    "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();"
  },
  {
    "Description": "Set value 'Region' in cell B1",
    "VBA": "oWorksheet.Range(\"B1\").Value = \"Region\"",
    "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');"
  },
  {
    "Description": "Set value 'Style' in cell C1",
    "VBA": "oWorksheet.Range(\"C1\").Value = \"Style\"",
    "OnlyOfficeJS": "oWorksheet.GetRange('C1').SetValue('Style');"
  },
  {
    "Description": "Set value 'Price' in cell D1",
    "VBA": "oWorksheet.Range(\"D1\").Value = \"Price\"",
    "OnlyOfficeJS": "oWorksheet.GetRange('D1').SetValue('Price');"
  },
  {
    "Description": "Set value 'East' in cell B2",
    "VBA": "oWorksheet.Range(\"B2\").Value = \"East\"",
    "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');"
  },
  {
    "Description": "Set value 'West' in cell B3",
    "VBA": "oWorksheet.Range(\"B3\").Value = \"West\"",
    "OnlyOfficeJS": "oWorksheet.GetRange('B3').SetValue('West');"
  },
  {
    "Description": "Set value 'East' in cell B4",
    "VBA": "oWorksheet.Range(\"B4\").Value = \"East\"",
    "OnlyOfficeJS": "oWorksheet.GetRange('B4').SetValue('East');"
  },
  {
    "Description": "Set value 'West' in cell B5",
    "VBA": "oWorksheet.Range(\"B5\").Value = \"West\"",
    "OnlyOfficeJS": "oWorksheet.GetRange('B5').SetValue('West');"
  },
  {
    "Description": "Set value 'Fancy' in cell C2",
    "VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\"",
    "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');"
  },
  {
    "Description": "Set value 'Fancy' in cell C3",
    "VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\"",
    "OnlyOfficeJS": "oWorksheet.GetRange('C3').SetValue('Fancy');"
  },
  {
    "Description": "Set value 'Tee' in cell C4",
    "VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\"",
    "OnlyOfficeJS": "oWorksheet.GetRange('C4').SetValue('Tee');"
  },
  {
    "Description": "Set value 'Tee' in cell C5",
    "VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\"",
    "OnlyOfficeJS": "oWorksheet.GetRange('C5').SetValue('Tee');"
  },
  {
    "Description": "Set value 42.5 in cell D2",
    "VBA": "oWorksheet.Range(\"D2\").Value = 42.5",
    "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);"
  },
  {
    "Description": "Set value 35.2 in cell D3",
    "VBA": "oWorksheet.Range(\"D3\").Value = 35.2",
    "OnlyOfficeJS": "oWorksheet.GetRange('D3').SetValue(35.2);"
  },
  {
    "Description": "Set value 12.3 in cell D4",
    "VBA": "oWorksheet.Range(\"D4\").Value = 12.3",
    "OnlyOfficeJS": "oWorksheet.GetRange('D4').SetValue(12.3);"
  },
  {
    "Description": "Set value 24.8 in cell D5",
    "VBA": "oWorksheet.Range(\"D5\").Value = 24.8",
    "OnlyOfficeJS": "oWorksheet.GetRange('D5').SetValue(24.8);"
  },
  {
    "Description": "Get range B1 to D5 from Sheet1",
    "VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")",
    "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
  },
  {
    "Description": "Insert a new pivot table on a new worksheet using the data range",
    "VBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceData:=dataRef)",
    "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
  },
  {
    "Description": "Add 'Region' and 'Style' as row fields in the pivot table",
    "VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With",
    "OnlyOfficeJS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });"
  },
  {
    "Description": "Add 'Price' as a data field in the pivot table",
    "VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum",
    "OnlyOfficeJS": "pivotTable.AddDataField('Price');"
  },
  {
    "Description": "Add another 'Price' data field and store its position",
    "VBA": "Set dataField = pivotTable.AddDataField(pivotTable.PivotFields(\"Price\"), \"Sum of Price2\", xlSum)",
    "OnlyOfficeJS": "var dataField = pivotTable.AddDataField('Price');"
  },
  {
    "Description": "Get the active worksheet (pivot worksheet)",
    "VBA": "Set pivotWorksheet = ActiveSheet",
    "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();"
  },
  {
    "Description": "Set value 'Sum of Price2 position:' in cell A15 of the pivot worksheet",
    "VBA": "pivotWorksheet.Range(\"A15\").Value = \"Sum of Price2 position:\"",
    "OnlyOfficeJS": "pivotWorksheet.GetRange('A15').SetValue('Sum of Price2 position:');"
  },
  {
    "Description": "Set the position of the data field in cell B15 of the pivot worksheet",
    "VBA": "pivotWorksheet.Range(\"B15\").Value = dataField.Position",
    "OnlyOfficeJS": "pivotWorksheet.GetRange('B15').SetValue(dataField.GetPosition());"
  }
]
``````json
{
  "description": "This code sets specific cell values in a worksheet, defines a data range, creates a pivot table on a new worksheet, adds row and data fields to the pivot table, and writes a data field value to a designated cell.",
  "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();\n\noWorksheet.GetRange('B1').SetValue('Region');\noWorksheet.GetRange('C1').SetValue('Style');\noWorksheet.GetRange('D1').SetValue('Price');\n\noWorksheet.GetRange('B2').SetValue('East');\noWorksheet.GetRange('B3').SetValue('West');\noWorksheet.GetRange('B4').SetValue('East');\noWorksheet.GetRange('B5').SetValue('West');\n\noWorksheet.GetRange('C2').SetValue('Fancy');\noWorksheet.GetRange('C3').SetValue('Fancy');\noWorksheet.GetRange('C4').SetValue('Tee');\noWorksheet.GetRange('C5').SetValue('Tee');\n\noWorksheet.GetRange('D2').SetValue(42.5);\noWorksheet.GetRange('D3').SetValue(35.2);\noWorksheet.GetRange('D4').SetValue(12.3);\noWorksheet.GetRange('D5').SetValue(24.8);\n\nvar dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nvar pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nvar pivotWorksheet = Api.GetActiveSheet();\nvar dataField = pivotTable.GetDataFields('Sum of Price');\n\npivotWorksheet.GetRange('A12').SetValue('The Data field value');\npivotWorksheet.GetRange('B12').SetValue(dataField.GetValue());",
  "Excel_VBA": "Sub CreatePivotTable()\n\tDim oWorksheet As Worksheet\n\tSet oWorksheet = ActiveSheet\n\n\t' Set header values\n\tWith oWorksheet\n\t\t.Range(\"B1\").Value = \"Region\"\n\t\t.Range(\"C1\").Value = \"Style\"\n\t\t.Range(\"D1\").Value = \"Price\"\n\n\t\t' Set data values\n\t\t.Range(\"B2\").Value = \"East\"\n\t\t.Range(\"B3\").Value = \"West\"\n\t\t.Range(\"B4\").Value = \"East\"\n\t\t.Range(\"B5\").Value = \"West\"\n\n\t\t.Range(\"C2\").Value = \"Fancy\"\n\t\t.Range(\"C3\").Value = \"Fancy\"\n\t\t.Range(\"C4\").Value = \"Tee\"\n\t\t.Range(\"C5\").Value = \"Tee\"\n\n\t\t.Range(\"D2\").Value = 42.5\n\t\t.Range(\"D3\").Value = 35.2\n\t\t.Range(\"D4\").Value = 12.3\n\t\t.Range(\"D5\").Value = 24.8\n\tEnd With\n\n\t' Define the data range\n\tDim dataRef As Range\n\tSet dataRef = oWorksheet.Range(\"B1:D5\")\n\n\t' Add a new worksheet for the pivot table\n\tDim pivotWorksheet As Worksheet\n\tSet pivotWorksheet = ThisWorkbook.Worksheets.Add\n\n\t' Create the pivot table\n\tDim pivotTable As PivotTable\n\tSet pivotTable = pivotWorksheet.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)\n\n\t' Add row fields\n\tWith pivotTable\n\t\t.PivotFields(\"Region\").Orientation = xlRowField\n\t\t.PivotFields(\"Style\").Orientation = xlRowField\n\n\t\t' Add data field\n\t\t.PivotFields(\"Price\").Orientation = xlDataField\n\t\t.PivotFields(\"Price\").Function = xlSum\n\t\t.PivotFields(\"Price\").Name = \"Sum of Price\"\n\tEnd With\n\n\t' Retrieve the data field value\n\tDim dataFieldValue As Variant\n\tdataFieldValue = pivotTable.PivotFields(\"Sum of Price\").DataRange.Cells(1, 1).Value\n\n\t' Write the data field value to specific cells\n\tWith pivotWorksheet\n\t\t.Range(\"A12\").Value = \"The Data field value\"\n\t\t.Range(\"B12\").Value = dataFieldValue\n\tEnd With\nEnd Sub"
}
``````json
{
  "table": {
    "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Description": "Get active worksheet",
        "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
      },
      {
        "Description": "Set value to cell B1",
        "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
        "Excel_VBA": "Range(\"B1\").Value = \"Region\""
      },
      {
        "Description": "Set value to cell C1",
        "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
        "Excel_VBA": "Range(\"C1\").Value = \"Style\""
      },
      {
        "Description": "Set value to cell D1",
        "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
        "Excel_VBA": "Range(\"D1\").Value = \"Price\""
      },
      {
        "Description": "Set value to cell B2",
        "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
        "Excel_VBA": "Range(\"B2\").Value = \"East\""
      },
      {
        "Description": "Set value to cell B3",
        "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
        "Excel_VBA": "Range(\"B3\").Value = \"West\""
      },
      {
        "Description": "Set value to cell B4",
        "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
        "Excel_VBA": "Range(\"B4\").Value = \"East\""
      },
      {
        "Description": "Set value to cell B5",
        "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
        "Excel_VBA": "Range(\"B5\").Value = \"West\""
      },
      {
        "Description": "Set value to cell C2",
        "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
        "Excel_VBA": "Range(\"C2\").Value = \"Fancy\""
      },
      {
        "Description": "Set value to cell C3",
        "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
        "Excel_VBA": "Range(\"C3\").Value = \"Fancy\""
      },
      {
        "Description": "Set value to cell C4",
        "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
        "Excel_VBA": "Range(\"C4\").Value = \"Tee\""
      },
      {
        "Description": "Set value to cell C5",
        "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
        "Excel_VBA": "Range(\"C5\").Value = \"Tee\""
      },
      {
        "Description": "Set value to cell D2",
        "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
        "Excel_VBA": "Range(\"D2\").Value = 42.5"
      },
      {
        "Description": "Set value to cell D3",
        "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
        "Excel_VBA": "Range(\"D3\").Value = 35.2"
      },
      {
        "Description": "Set value to cell D4",
        "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
        "Excel_VBA": "Range(\"D4\").Value = 12.3"
      },
      {
        "Description": "Set value to cell D5",
        "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
        "Excel_VBA": "Range(\"D5\").Value = 24.8"
      },
      {
        "Description": "Get data range",
        "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
        "Excel_VBA": "Dim dataRef As Range\nSet dataRef = Sheets(\"Sheet1\").Range(\"B1:D5\")"
      },
      {
        "Description": "Insert pivot table in new worksheet",
        "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
        "Excel_VBA": "Dim pivotTable As PivotTable\nDim pivotCache As PivotCache\nSet pivotCache = ThisWorkbook.PivotCaches.Create( _
        SourceType:=xlDatabase, SourceData:=dataRef)\nSet pivotTable = pivotCache.CreatePivotTable( _
        TableDestination:=Sheets.Add.Name, TableName:=\"PivotTable1\")"
      },
      {
        "Description": "Add row fields to pivot table",
        "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
        "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
      },
      {
        "Description": "Add first data field to pivot table",
        "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
        "Excel_VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
      },
      {
        "Description": "Add second data field to pivot table",
        "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
        "Excel_VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price_2\", xlSum\nEnd With"
      },
      {
        "Description": "Get active pivot worksheet",
        "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
        "Excel_VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ActiveSheet"
      },
      {
        "Description": "Get data field from pivot table",
        "OnlyOffice_JS": "var dataField = pivotTable.GetDataFields('Sum of Price');",
        "Excel_VBA": "Dim dataField As PivotField\nSet dataField = pivotTable.PivotFields(\"Sum of Price\")"
      },
      {
        "Description": "Set value to cell A16",
        "OnlyOffice_JS": "pivotWorksheet.GetRange('A16').SetValue('Sum of Price will be moved soon');",
        "Excel_VBA": "Range(\"A16\").Value = \"Sum of Price will be moved soon\""
      },
      {
        "Description": "Move data field to rows after 5 seconds",
        "OnlyOffice_JS": "setTimeout(function() { dataField.Move(\"Rows\"); }, 5000);",
        "Excel_VBA": "Application.OnTime Now + TimeValue(\"00:00:05\"), \"MoveDataField\" \n\nSub MoveDataField()\n    dataField.Orientation = xlRowField\nEnd Sub"
      }
    ]
  }
}
``````json
[
  {
    "description": "Get the active worksheet",
    "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Set oWorksheet = ActiveSheet"
  },
  {
    "description": "Set value 'Region' in cell B1",
    "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
    "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
  },
  {
    "description": "Set value 'Style' in cell C1",
    "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
    "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
  },
  {
    "description": "Set value 'Price' in cell D1",
    "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
    "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
  },
  {
    "description": "Set value 'East' in cell B2",
    "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
    "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
  },
  {
    "description": "Set value 'West' in cell B3",
    "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
    "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
  },
  {
    "description": "Set value 'East' in cell B4",
    "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
    "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
  },
  {
    "description": "Set value 'West' in cell B5",
    "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
    "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
  },
  {
    "description": "Set value 'Fancy' in cell C2",
    "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
    "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
  },
  {
    "description": "Set value 'Fancy' in cell C3",
    "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
    "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
  },
  {
    "description": "Set value 'Tee' in cell C4",
    "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
    "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
  },
  {
    "description": "Set value 'Tee' in cell C5",
    "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
    "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
  },
  {
    "description": "Set numerical value 42.5 in cell D2",
    "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
    "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
  },
  {
    "description": "Set numerical value 35.2 in cell D3",
    "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
    "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
  },
  {
    "description": "Set numerical value 12.3 in cell D4",
    "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
    "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
  },
  {
    "description": "Set numerical value 24.8 in cell D5",
    "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
    "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
  },
  {
    "description": "Get the range B1:D5 from Sheet1",
    "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "Excel_VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
  },
  {
    "description": "Insert a new pivot table worksheet based on the data range",
    "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "Excel_VBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
  },
  {
    "description": "Add 'Region' and 'Style' as row fields in the pivot table",
    "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'], });",
    "Excel_VBA": "With pivotTable"
  },
  {
    "description": "Add 'Price' as a data field in the pivot table",
    "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
    "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
  },
  {
    "description": "Get the active worksheet after inserting the pivot table",
    "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Set pivotWorksheet = ActiveSheet"
  },
  {
    "description": "Get the data field 'Sum of Price' from the pivot table",
    "OnlyOffice_JS": "var dataField = pivotTable.GetDataFields('Sum of Price');",
    "Excel_VBA": "Set dataField = pivotTable.DataFields(\"Sum of Price\")"
  },
  {
    "description": "Set a message in cell A12 of the pivot worksheet",
    "OnlyOffice_JS": "pivotWorksheet.GetRange('A12').SetValue('Sum of Price will be deleted soon');",
    "Excel_VBA": "pivotWorksheet.Range(\"A12\").Value = \"Sum of Price will be deleted soon\""
  },
  {
    "description": "Remove the data field after 5 seconds",
    "OnlyOffice_JS": "setTimeout(function() { dataField.Remove(); }, 5000);",
    "Excel_VBA": "Application.OnTime Now + TimeValue(\"00:00:05\"), \"RemoveDataField\""
  }
]
``````json
{
  "Description": "This code initializes data in a worksheet, creates a pivot table, adds row and data fields, and modifies data field captions using OnlyOffice JavaScript API and its Excel VBA equivalents.",
  "CodeMappings": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Set dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Set pivotWorksheet = ThisWorkbook.Sheets.Add\nSet pivotTable = pivotWorksheet.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "Excel_VBA": "With pivotTable\n  .PivotFields(\"Region\").Orientation = xlRowField\n  .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set pivotWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var dataField = pivotTable.GetDataFields('Sum of Price');",
      "Excel_VBA": "Set dataField = pivotTable.PivotFields(\"Sum of Price\")"
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A12').SetValue('Data field caption');",
      "Excel_VBA": "pivotWorksheet.Range(\"A12\").Value = \"Data field caption\""
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B12').SetValue(dataField.GetCaption());",
      "Excel_VBA": "pivotWorksheet.Range(\"B12\").Value = dataField.Caption"
    },
    {
      "OnlyOffice_JS": "dataField.SetCaption('My Sum of Price');",
      "Excel_VBA": "dataField.Caption = \"My Sum of Price\""
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A13').SetValue('New Data field caption');",
      "Excel_VBA": "pivotWorksheet.Range(\"A13\").Value = \"New Data field caption\""
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B13').SetValue(dataField.GetCaption());",
      "Excel_VBA": "pivotWorksheet.Range(\"B13\").Value = dataField.Caption"
    }
  ]
}
``````json
{
  "Table": [
    {
      "Description": "Get active sheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set value 'Region' in cell B1",
      "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "ExcelVBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "Description": "Set value 'Style' in cell C1",
      "OnlyOfficeJS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "ExcelVBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "Description": "Set value 'Price' in cell D1",
      "OnlyOfficeJS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "ExcelVBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "Description": "Set value 'East' in cell B2",
      "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');",
      "ExcelVBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "Description": "Set value 'West' in cell B3",
      "OnlyOfficeJS": "oWorksheet.GetRange('B3').SetValue('West');",
      "ExcelVBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "Description": "Set value 'East' in cell B4",
      "OnlyOfficeJS": "oWorksheet.GetRange('B4').SetValue('East');",
      "ExcelVBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "Description": "Set value 'West' in cell B5",
      "OnlyOfficeJS": "oWorksheet.GetRange('B5').SetValue('West');",
      "ExcelVBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "Description": "Set value 'Fancy' in cell C2",
      "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "ExcelVBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "Description": "Set value 'Fancy' in cell C3",
      "OnlyOfficeJS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "ExcelVBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "Description": "Set value 'Tee' in cell C4",
      "OnlyOfficeJS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "ExcelVBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "Description": "Set value 'Tee' in cell C5",
      "OnlyOfficeJS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "ExcelVBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "Description": "Set value 42.5 in cell D2",
      "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "ExcelVBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "Description": "Set value 35.2 in cell D3",
      "OnlyOfficeJS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "ExcelVBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "Description": "Set value 12.3 in cell D4",
      "OnlyOfficeJS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "ExcelVBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "Description": "Set value 24.8 in cell D5",
      "OnlyOfficeJS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "ExcelVBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "Description": "Get range B1:D5",
      "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "ExcelVBA": "Set dataRef = oWorksheet.Range(\"B1:D5\")"
    },
    {
      "Description": "Insert pivot table on new worksheet",
      "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "ExcelVBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "Description": "Add fields 'Region' and 'Style' to rows",
      "OnlyOfficeJS": "pivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});",
      "ExcelVBA": "With pivotTable.PivotFields(\"Region\")\n\t.Orientation = xlRowField\nEnd With\nWith pivotTable.PivotFields(\"Style\")\n\t.Orientation = xlRowField\nEnd With"
    },
    {
      "Description": "Add data field 'Price'",
      "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
      "ExcelVBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "Description": "Add data field 'Price' again",
      "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
      "ExcelVBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Count of Price\", xlCount"
    },
    {
      "Description": "Get active sheet as pivotWorksheet",
      "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "Description": "Get data field 'Sum of Price'",
      "OnlyOfficeJS": "var dataField = pivotTable.GetDataFields('Sum of Price');",
      "ExcelVBA": "Set dataField = pivotTable.PivotFields(\"Sum of Price\")"
    },
    {
      "Description": "Set function of data field to 'Count'",
      "OnlyOfficeJS": "dataField.SetFunction('Count');",
      "ExcelVBA": "dataField.Function = xlCount"
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Set oWorksheet = ActiveSheet"
  },
  {
    "Description": "Set value of cell B1 to 'Region'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
    "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
  },
  {
    "Description": "Set value of cell C1 to 'Style'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
    "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
  },
  {
    "Description": "Set value of cell D1 to 'Price'",
    "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
    "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
  },
  {
    "Description": "Set value of cell B2 to 'East'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
    "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
  },
  {
    "Description": "Set value of cell B3 to 'West'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
    "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
  },
  {
    "Description": "Set value of cell B4 to 'East'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
    "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
  },
  {
    "Description": "Set value of cell B5 to 'West'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
    "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
  },
  {
    "Description": "Set value of cell C2 to 'Fancy'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
    "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
  },
  {
    "Description": "Set value of cell C3 to 'Fancy'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
    "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
  },
  {
    "Description": "Set value of cell C4 to 'Tee'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
    "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
  },
  {
    "Description": "Set value of cell C5 to 'Tee'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
    "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
  },
  {
    "Description": "Set value of cell D2 to 42.5",
    "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
    "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
  },
  {
    "Description": "Set value of cell D3 to 35.2",
    "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
    "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
  },
  {
    "Description": "Set value of cell D4 to 12.3",
    "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
    "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
  },
  {
    "Description": "Set value of cell D5 to 24.8",
    "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
    "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
  },
  {
    "Description": "Get data range B1:D5 from Sheet1",
    "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "Excel_VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
  },
  {
    "Description": "Insert pivot table into new worksheet using data range",
    "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "Excel_VBA": "Set pivotTable = ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=Sheets.Add().Range(\"A1\"), TableName:=\"PivotTable1\")"
  },
  {
    "Description": "Add 'Region' and 'Style' as row fields in pivot table",
    "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
    "Excel_VBA": "With pivotTable.PivotFields(\"Region\")\n    .Orientation = xlRowField\n    .Position = 1\nEnd With\nWith pivotTable.PivotFields(\"Style\")\n    .Orientation = xlRowField\n    .Position = 2\nEnd With"
  },
  {
    "Description": "Add 'Price' as data field in pivot table",
    "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
    "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
  },
  {
    "Description": "Get the active worksheet after pivot table creation",
    "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Set pivotWorksheet = ActiveSheet"
  },
  {
    "Description": "Get data field 'Sum of Price' from pivot table",
    "OnlyOffice_JS": "var dataField = pivotTable.GetDataFields('Sum of Price');",
    "Excel_VBA": "Set dataField = pivotTable.DataFields(\"Sum of Price\")"
  },
  {
    "Description": "Set cell A12 to 'Data field name'",
    "OnlyOffice_JS": "pivotWorksheet.GetRange('A12').SetValue('Data field name');",
    "Excel_VBA": "pivotWorksheet.Range(\"A12\").Value = \"Data field name\""
  },
  {
    "Description": "Set cell B12 to the name of the data field",
    "OnlyOffice_JS": "pivotWorksheet.GetRange('B12').SetValue(dataField.GetName());",
    "Excel_VBA": "pivotWorksheet.Range(\"B12\").Value = dataField.Name"
  },
  {
    "Description": "Set name of data field to 'My Sum of Price'",
    "OnlyOffice_JS": "dataField.SetName('My Sum of Price');",
    "Excel_VBA": "dataField.Name = \"My Sum of Price\""
  },
  {
    "Description": "Set cell A13 to 'New Data field name'",
    "OnlyOffice_JS": "pivotWorksheet.GetRange('A13').SetValue('New Data field name');",
    "Excel_VBA": "pivotWorksheet.Range(\"A13\").Value = \"New Data field name\""
  },
  {
    "Description": "Set cell B13 to the new name of the data field",
    "OnlyOffice_JS": "pivotWorksheet.GetRange('B13').SetValue(dataField.GetName());",
    "Excel_VBA": "pivotWorksheet.Range(\"B13\").Value = dataField.Name"
  }
]
```**Description: This code populates a worksheet with data, creates a pivot table based on the data, and formats the pivot table in both OnlyOffice JS and Excel VBA.**

```json
{
  "RAGTable": [
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "ExcelVBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "ExcelVBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "ExcelVBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');",
      "ExcelVBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('B3').SetValue('West');",
      "ExcelVBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('B4').SetValue('East');",
      "ExcelVBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('B5').SetValue('West');",
      "ExcelVBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "ExcelVBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "ExcelVBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "ExcelVBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "ExcelVBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "ExcelVBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "ExcelVBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "ExcelVBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "ExcelVBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "ExcelVBA": "Set dataRef = oWorksheet.Range(\"B1:D5\")"
    },
    {
      "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "ExcelVBA": "Set pivotTable = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=Sheets.Add().Range(\"A1\"))"
    },
    {
      "OnlyOfficeJS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "ExcelVBA": "With pivotTable.PivotFields(\"Region\")\n    .Orientation = xlRowField\n    .Position = 1\nEnd With\nWith pivotTable.PivotFields(\"Style\")\n    .Orientation = xlRowField\n    .Position = 2\nEnd With"
    },
    {
      "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
      "ExcelVBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set pivotWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOfficeJS": "var dataField = pivotTable.GetDataFields('Sum of Price');",
      "ExcelVBA": "Set dataField = pivotTable.PivotFields(\"Sum of Price\")"
    },
    {
      "OnlyOfficeJS": "dataField.SetNumberFormat('0.00E+00');",
      "ExcelVBA": "dataField.NumberFormat = \"0.00E+00\""
    }
  ]
}
``````json
{
  "headers": ["Description", "OnlyOffice_JS", "Excel_VBA"],
  "rows": [
    {
      "Description": "Get active sheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "Description": "Set 'Region' to B1",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "Description": "Set 'Style' to C1",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "Description": "Set 'Price' to D1",
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "Description": "Set 'East' to B2",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "Description": "Set 'West' to B3",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "Description": "Set 'East' to B4",
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "Description": "Set 'West' to B5",
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "Description": "Set 'Fancy' to C2",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "Description": "Set 'Fancy' to C3",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "Description": "Set 'Tee' to C4",
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "Description": "Set 'Tee' to C5",
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "Description": "Set 42.5 to D2",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "Description": "Set 35.2 to D3",
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "Description": "Set 12.3 to D4",
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "Description": "Set 24.8 to D5",
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "Description": "Get range 'Sheet1'!$B$1:$D$5",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "Description": "Insert pivot table on new worksheet",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Set pivotTable = ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=ActiveWorkbook.Sheets.Add.Range(\"A1\"), TableName:=\"PivotTable1\")"
    },
    {
      "Description": "Add 'Region' and 'Style' as row fields in pivot table",
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "Excel_VBA": "With pivotTable.PivotFields(\"Region\")\n    .Orientation = xlRowField\n    .Position = 1\nEnd With\nWith pivotTable.PivotFields(\"Style\")\n    .Orientation = xlRowField\n    .Position = 2\nEnd With"
    },
    {
      "Description": "Add 'Price' as data field in pivot table",
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "Description": "Add 'Price' as data field and set its position",
      "OnlyOffice_JS": "var dataField = pivotTable.AddDataField('Price');\ndataField.SetPosition(1);",
      "Excel_VBA": "Set dataField = pivotTable.PivotFields(\"Price\")\ndataField.Position = 1"
    },
    {
      "Description": "Get active sheet (pivot worksheet)",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set pivotWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "Description": "Set 'Sum of Price2 position:' to A15",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A15').SetValue('Sum of Price2 position:');",
      "Excel_VBA": "pivotWorksheet.Range(\"A15\").Value = \"Sum of Price2 position:\""
    },
    {
      "Description": "Set dataField position to B15",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B15').SetValue(dataField.GetPosition());",
      "Excel_VBA": "pivotWorksheet.Range(\"B15\").Value = dataField.Position"
    }
  ]
}
``````json
{
  "table": [
    {
      "Description": "Get the active worksheet",
      "Excel VBA": "Set oWorksheet = ActiveSheet",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Set value 'Region' in cell B1",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\"",
      "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');"
    },
    {
      "Description": "Set value 'Style' in cell C1",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\"",
      "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');"
    },
    {
      "Description": "Set value 'Price' in cell D1",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\"",
      "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');"
    },
    {
      "Description": "Set value 'East' in cell B2",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\"",
      "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');"
    },
    {
      "Description": "Set value 'West' in cell B3",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\"",
      "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');"
    },
    {
      "Description": "Set value 'East' in cell B4",
      "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\"",
      "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');"
    },
    {
      "Description": "Set value 'West' in cell B5",
      "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\"",
      "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');"
    },
    {
      "Description": "Set value 'Fancy' in cell C2",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\"",
      "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');"
    },
    {
      "Description": "Set value 'Fancy' in cell C3",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\"",
      "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');"
    },
    {
      "Description": "Set value 'Tee' in cell C4",
      "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\"",
      "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');"
    },
    {
      "Description": "Set value 'Tee' in cell C5",
      "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\"",
      "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');"
    },
    {
      "Description": "Set value 42.5 in cell D2",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5",
      "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);"
    },
    {
      "Description": "Set value 35.2 in cell D3",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2",
      "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);"
    },
    {
      "Description": "Set value 12.3 in cell D4",
      "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3",
      "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);"
    },
    {
      "Description": "Set value 24.8 in cell D5",
      "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8",
      "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);"
    },
    {
      "Description": "Get range B1:D5 from Sheet1",
      "Excel VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")",
      "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
    },
    {
      "Description": "Insert a new pivot table from the data reference",
      "Excel VBA": "Set pivotTable = Worksheets.Add.PivotTable(dataRef, \"PivotTable1\")",
      "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
    },
    {
      "Description": "Add 'Region' and 'Style' as row fields in the pivot table",
      "Excel VBA": "With pivotTable\n  .PivotFields(\"Region\").Orientation = xlRowField\n  .PivotFields(\"Style\").Orientation = xlRowField\nEnd With",
      "OnlyOffice JS": "pivotTable.AddFields({\n  rows: ['Region', 'Style'],\n});"
    },
    {
      "Description": "Add 'Price' as a data field in the pivot table",
      "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum",
      "OnlyOffice JS": "pivotTable.AddDataField('Price');"
    },
    {
      "Description": "Get the active worksheet for the pivot table",
      "Excel VBA": "Set pivotWorksheet = ActiveSheet",
      "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Get the data field 'Sum of Price' from the pivot table",
      "Excel VBA": "Set dataField = pivotTable.PivotFields(\"Sum of Price\")",
      "OnlyOffice JS": "var dataField = pivotTable.GetDataFields('Sum of Price');"
    },
    {
      "Description": "Set value 'Data field value' in cell A12",
      "Excel VBA": "pivotWorksheet.Range(\"A12\").Value = \"Data field value\"",
      "OnlyOffice JS": "pivotWorksheet.GetRange('A12').SetValue('Data field value');"
    },
    {
      "Description": "Set the data field value in cell B12",
      "Excel VBA": "pivotWorksheet.Range(\"B12\").Value = dataField.Value",
      "OnlyOffice JS": "pivotWorksheet.GetRange('B12').SetValue(dataField.GetValue());"
    },
    {
      "Description": "Rename the data field to 'My Sum of Price'",
      "Excel VBA": "dataField.Name = \"My Sum of Price\"",
      "OnlyOffice JS": "dataField.SetValue('My Sum of Price');"
    },
    {
      "Description": "Set value 'New Data field value' in cell A13",
      "Excel VBA": "pivotWorksheet.Range(\"A13\").Value = \"New Data field value\"",
      "OnlyOffice JS": "pivotWorksheet.GetRange('A13').SetValue('New Data field value');"
    },
    {
      "Description": "Set the new data field value in cell B13",
      "Excel VBA": "pivotWorksheet.Range(\"B13\").Value = dataField.Value",
      "OnlyOffice JS": "pivotWorksheet.GetRange('B13').SetValue(dataField.GetValue());"
    }
  ]
}
``````json
{
  "RAG_Table": {
    "headers": ["Description", "OnlyOffice JS", "VBA"],
    "rows": [
      {
        "Description": "Get active sheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
      },
      {
        "Description": "Set cell B1 value to 'Region'",
        "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
        "VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
      },
      {
        "Description": "Set cell C1 value to 'Style'",
        "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
        "VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
      },
      {
        "Description": "Set cell D1 value to 'Price'",
        "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
        "VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
      },
      {
        "Description": "Set cell B2 value to 'East'",
        "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
        "VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
      },
      {
        "Description": "Set cell B3 value to 'West'",
        "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
        "VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
      },
      {
        "Description": "Set cell B4 value to 'East'",
        "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
        "VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
      },
      {
        "Description": "Set cell B5 value to 'West'",
        "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
        "VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
      },
      {
        "Description": "Set cell C2 value to 'Fancy'",
        "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
        "VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
      },
      {
        "Description": "Set cell C3 value to 'Fancy'",
        "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
        "VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
      },
      {
        "Description": "Set cell C4 value to 'Tee'",
        "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
        "VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
      },
      {
        "Description": "Set cell C5 value to 'Tee'",
        "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
        "VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
      },
      {
        "Description": "Set cell D2 value to 42.5",
        "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
        "VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
      },
      {
        "Description": "Set cell D3 value to 35.2",
        "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
        "VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
      },
      {
        "Description": "Set cell D4 value to 12.3",
        "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
        "VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
      },
      {
        "Description": "Set cell D5 value to 24.8",
        "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
        "VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
      },
      {
        "Description": "Get range B1:D5 from 'Sheet1'",
        "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
        "VBA": "Set dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
      },
      {
        "Description": "Insert pivot table in new worksheet using dataRef",
        "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
        "VBA": "Set pivotTable = ThisWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
      },
      {
        "Description": "Add 'Region' and 'Style' as row fields to pivot table",
        "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
        "VBA": "With pivotTable.PivotFields(\"Region\")\n    .Orientation = xlRowField\nEnd With\nWith pivotTable.PivotFields(\"Style\")\n    .Orientation = xlRowField\nEnd With"
      },
      {
        "Description": "Add 'Price' as data field to pivot table",
        "OnlyOffice JS": "pivotTable.AddDataField('Price');",
        "VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
      },
      {
        "Description": "Add 'Price' as another data field to pivot table",
        "OnlyOffice JS": "pivotTable.AddDataField('Price');",
        "VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price 2\", xlSum"
      },
      {
        "Description": "Get active sheet (pivot table sheet)",
        "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
        "VBA": "Set pivotWorksheet = ThisWorkbook.ActiveSheet"
      },
      {
        "Description": "Get data field 'Sum of Price' from pivot table",
        "OnlyOffice JS": "var dataField = pivotTable.GetDataFields('Sum of Price');",
        "VBA": "Set dataField = pivotTable.PivotFields(\"Sum of Price\")"
      },
      {
        "Description": "Set cell A16 value to 'Sum of Price will be moved soon'",
        "OnlyOffice JS": "pivotWorksheet.GetRange('A16').SetValue('Sum of Price will be moved soon');",
        "VBA": "pivotWorksheet.Range(\"A16\").Value = \"Sum of Price will be moved soon\""
      },
      {
        "Description": "Move 'Sum of Price' data field to rows after 5 seconds",
        "OnlyOffice JS": "setTimeout(function() {\n    dataField.Move(\"Rows\");\n}, 5000);",
        "VBA": "Application.OnTime Now + TimeValue(\"00:00:05\"), \"MoveSumOfPriceField\"\n\nSub MoveSumOfPriceField()\n    dataField.Orientation = xlRowField\nEnd Sub"
      }
    ]
  }
}
``````json
{
  "Description": "This script populates data in a worksheet, creates a pivot table from the data, configures the pivot table fields, and removes a data field after a delay.",
  "RAG_Table": [
    {
      "Action": "Get Active Sheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Action": "Set Header 'Region' in B1",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "Action": "Set Header 'Style' in C1",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "Action": "Set Header 'Price' in D1",
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "Action": "Set 'East' in B2",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "Action": "Set 'West' in B3",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "Action": "Set 'East' in B4",
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "Action": "Set 'West' in B5",
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "Action": "Set 'Fancy' in C2",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "Action": "Set 'Fancy' in C3",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "Action": "Set 'Tee' in C4",
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "Action": "Set 'Tee' in C5",
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "Action": "Set 42.5 in D2",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "Action": "Set 35.2 in D3",
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "Action": "Set 12.3 in D4",
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "Action": "Set 24.8 in D5",
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "Action": "Get Data Range B1:D5",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "VBA": "Dim dataRef As Range\nSet dataRef = oWorksheet.Range(\"B1:D5\")"
    },
    {
      "Action": "Insert Pivot Table in New Worksheet",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "VBA": "Dim pivotCache As PivotCache\nDim pivotTable As PivotTable\nSet pivotCache = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef)\nSet pivotTable = pivotCache.CreatePivotTable(TableDestination:=ThisWorkbook.Worksheets.Add.Range(\"A1\"), TableName:=\"PivotTable1\")"
    },
    {
      "Action": "Add Row Fields 'Region' and 'Style'",
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "Action": "Add Data Field 'Price'",
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
    },
    {
      "Action": "Get Active Sheet (Pivot Worksheet)",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Action": "Get Data Field 'Sum of Price'",
      "OnlyOffice_JS": "var dataField = pivotTable.GetDataFields('Sum of Price');",
      "VBA": "Dim dataField As PivotField\nSet dataField = pivotTable.PivotFields(\"Sum of Price\")"
    },
    {
      "Action": "Set Value in A12",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A12').SetValue('Sum of Price will be deleted soon');",
      "VBA": "pivotWorksheet.Range(\"A12\").Value = \"Sum of Price will be deleted soon\""
    },
    {
      "Action": "Remove Data Field after 5 Seconds",
      "OnlyOffice_JS": "setTimeout(function() { dataField.Remove(); }, 5000);",
      "VBA": "Application.OnTime Now + TimeValue(\"00:00:05\"), \"RemoveDataField\"\n\nSub RemoveDataField()\n    pivotTable.PivotFields(\"Sum of Price\").Orientation = xlHidden\nEnd Sub"
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
  },
  {
    "Description": "Set value of cell B1 to 'Region'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
    "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
  },
  {
    "Description": "Set value of cell C1 to 'Style'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
    "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
  },
  {
    "Description": "Set value of cell D1 to 'Price'",
    "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
    "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
  },
  {
    "Description": "Set value of cell B2 to 'East'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
    "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
  },
  {
    "Description": "Set value of cell B3 to 'West'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
    "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
  },
  {
    "Description": "Set value of cell B4 to 'East'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
    "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
  },
  {
    "Description": "Set value of cell B5 to 'West'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
    "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
  },
  {
    "Description": "Set value of cell C2 to 'Fancy'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
    "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
  },
  {
    "Description": "Set value of cell C3 to 'Fancy'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
    "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
  },
  {
    "Description": "Set value of cell C4 to 'Tee'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
    "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
  },
  {
    "Description": "Set value of cell C5 to 'Tee'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
    "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
  },
  {
    "Description": "Set value of cell D2 to 42.5",
    "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
    "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
  },
  {
    "Description": "Set value of cell D3 to 35.2",
    "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
    "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
  },
  {
    "Description": "Set value of cell D4 to 12.3",
    "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
    "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
  },
  {
    "Description": "Set value of cell D5 to 24.8",
    "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
    "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
  },
  {
    "Description": "Get the range B1:D5 from Sheet1",
    "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "Excel_VBA": "Dim dataRef As Range\nSet dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
  },
  {
    "Description": "Insert a new pivot table on a new worksheet using the data range",
    "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "Excel_VBA": "Dim pivotTable As PivotTable\nDim pivotCache As PivotCache\nSet pivotCache = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef)\nSet pivotTable = pivotCache.CreatePivotTable(TableDestination:=Worksheets.Add().Range(\"A1\"), TableName:=\"PivotTable1\")"
  },
  {
    "Description": "Add 'Region' and 'Style' as row fields in the pivot table",
    "OnlyOffice_JS": "pivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});",
    "Excel_VBA": "With pivotTable\n\t.PivotFields(\"Region\").Orientation = xlRowField\n\t.PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
  },
  {
    "Description": "Add 'Price' as a data field in the pivot table",
    "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
    "Excel_VBA": "With pivotTable\n\t.PivotFields(\"Price\").Orientation = xlDataField\n\t.PivotFields(\"Price\").Function = xlSum\nEnd With"
  },
  {
    "Description": "Get the active worksheet containing the pivot table",
    "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ActiveSheet"
  },
  {
    "Description": "Get the data field 'Sum of Price' from the pivot table",
    "OnlyOffice_JS": "var dataField = pivotTable.GetDataFields('Sum of Price');",
    "Excel_VBA": "Dim dataField As PivotField\nSet dataField = pivotTable.PivotFields(\"Sum of Price\")"
  },
  {
    "Description": "Set value of cell A12 to 'Data field caption'",
    "OnlyOffice_JS": "pivotWorksheet.GetRange('A12').SetValue('Data field caption');",
    "Excel_VBA": "pivotWorksheet.Range(\"A12\").Value = \"Data field caption\""
  },
  {
    "Description": "Set value of cell B12 to the caption of the data field",
    "OnlyOffice_JS": "pivotWorksheet.GetRange('B12').SetValue(dataField.GetCaption());",
    "Excel_VBA": "pivotWorksheet.Range(\"B12\").Value = dataField.Caption"
  },
  {
    "Description": "Set the caption of the data field to 'My Sum of Price'",
    "OnlyOffice_JS": "dataField.SetCaption('My Sum of Price');",
    "Excel_VBA": "dataField.Caption = \"My Sum of Price\""
  },
  {
    "Description": "Set value of cell A13 to 'New Data field caption'",
    "OnlyOffice_JS": "pivotWorksheet.GetRange('A13').SetValue('New Data field caption');",
    "Excel_VBA": "pivotWorksheet.Range(\"A13\").Value = \"New Data field caption\""
  },
  {
    "Description": "Set value of cell B13 to the new caption of the data field",
    "OnlyOffice_JS": "pivotWorksheet.GetRange('B13').SetValue(dataField.GetCaption());",
    "Excel_VBA": "pivotWorksheet.Range(\"B13\").Value = dataField.Caption"
  }
]
``````json
{
  "Operations": [
    {
      "Description": "Get the active worksheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set cell B1 to 'Region'",
      "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "ExcelVBA": "Range(\"B1\").Value = \"Region\""
    },
    {
      "Description": "Set cell C1 to 'Style'",
      "OnlyOfficeJS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "ExcelVBA": "Range(\"C1\").Value = \"Style\""
    },
    {
      "Description": "Set cell D1 to 'Price'",
      "OnlyOfficeJS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "ExcelVBA": "Range(\"D1\").Value = \"Price\""
    },
    {
      "Description": "Set cell B2 to 'East'",
      "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');",
      "ExcelVBA": "Range(\"B2\").Value = \"East\""
    },
    {
      "Description": "Set cell B3 to 'West'",
      "OnlyOfficeJS": "oWorksheet.GetRange('B3').SetValue('West');",
      "ExcelVBA": "Range(\"B3\").Value = \"West\""
    },
    {
      "Description": "Set cell B4 to 'East'",
      "OnlyOfficeJS": "oWorksheet.GetRange('B4').SetValue('East');",
      "ExcelVBA": "Range(\"B4\").Value = \"East\""
    },
    {
      "Description": "Set cell B5 to 'West'",
      "OnlyOfficeJS": "oWorksheet.GetRange('B5').SetValue('West');",
      "ExcelVBA": "Range(\"B5\").Value = \"West\""
    },
    {
      "Description": "Set cell C2 to 'Fancy'",
      "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "ExcelVBA": "Range(\"C2\").Value = \"Fancy\""
    },
    {
      "Description": "Set cell C3 to 'Fancy'",
      "OnlyOfficeJS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "ExcelVBA": "Range(\"C3\").Value = \"Fancy\""
    },
    {
      "Description": "Set cell C4 to 'Tee'",
      "OnlyOfficeJS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "ExcelVBA": "Range(\"C4\").Value = \"Tee\""
    },
    {
      "Description": "Set cell C5 to 'Tee'",
      "OnlyOfficeJS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "ExcelVBA": "Range(\"C5\").Value = \"Tee\""
    },
    {
      "Description": "Set cell D2 to 42.5",
      "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "ExcelVBA": "Range(\"D2\").Value = 42.5"
    },
    {
      "Description": "Set cell D3 to 35.2",
      "OnlyOfficeJS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "ExcelVBA": "Range(\"D3\").Value = 35.2"
    },
    {
      "Description": "Set cell D4 to 12.3",
      "OnlyOfficeJS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "ExcelVBA": "Range(\"D4\").Value = 12.3"
    },
    {
      "Description": "Set cell D5 to 24.8",
      "OnlyOfficeJS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "ExcelVBA": "Range(\"D5\").Value = 24.8"
    },
    {
      "Description": "Get data range B1:D5 from Sheet1",
      "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "ExcelVBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "Description": "Insert a new pivot table from the data range",
      "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "ExcelVBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "Description": "Add 'Region' and 'Style' as row fields in the pivot table",
      "OnlyOfficeJS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "ExcelVBA": "With pivotTable.PivotFields(\"Region\")\n    .Orientation = xlRowField\n    .Position = 1\nEnd With\nWith pivotTable.PivotFields(\"Style\")\n    .Orientation = xlRowField\n    .Position = 2\nEnd With"
    },
    {
      "Description": "Add 'Price' as a data field in the pivot table",
      "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
      "ExcelVBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "Description": "Add 'Price' again as another data field in the pivot table",
      "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
      "ExcelVBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Count of Price\", xlCount"
    },
    {
      "Description": "Get the active worksheet containing the pivot table",
      "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "Description": "Set the function of 'Sum of Price' data field to 'Count'",
      "OnlyOfficeJS": "var dataField = pivotTable.GetDataFields('Sum of Price');\ndataField.SetFunction('Count');",
      "ExcelVBA": "With pivotTable.PivotFields(\"Sum of Price\")\n    .Function = xlCount\nEnd With"
    }
  ]
}
``````json
{
  "actions": [
    {
      "description": "Get the active worksheet",
      "VBA": "Set oWorksheet = ActiveSheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "description": "Set cell B1 value to 'Region'",
      "VBA": "Range(\"B1\").Value = \"Region\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');"
    },
    {
      "description": "Set cell C1 value to 'Style'",
      "VBA": "Range(\"C1\").Value = \"Style\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('C1').SetValue('Style');"
    },
    {
      "description": "Set cell D1 value to 'Price'",
      "VBA": "Range(\"D1\").Value = \"Price\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('D1').SetValue('Price');"
    },
    {
      "description": "Set cell B2 value to 'East'",
      "VBA": "Range(\"B2\").Value = \"East\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');"
    },
    {
      "description": "Set cell B3 value to 'West'",
      "VBA": "Range(\"B3\").Value = \"West\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('B3').SetValue('West');"
    },
    {
      "description": "Set cell B4 value to 'East'",
      "VBA": "Range(\"B4\").Value = \"East\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('B4').SetValue('East');"
    },
    {
      "description": "Set cell B5 value to 'West'",
      "VBA": "Range(\"B5\").Value = \"West\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('B5').SetValue('West');"
    },
    {
      "description": "Set cell C2 value to 'Fancy'",
      "VBA": "Range(\"C2\").Value = \"Fancy\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');"
    },
    {
      "description": "Set cell C3 value to 'Fancy'",
      "VBA": "Range(\"C3\").Value = \"Fancy\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('C3').SetValue('Fancy');"
    },
    {
      "description": "Set cell C4 value to 'Tee'",
      "VBA": "Range(\"C4\").Value = \"Tee\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('C4').SetValue('Tee');"
    },
    {
      "description": "Set cell C5 value to 'Tee'",
      "VBA": "Range(\"C5\").Value = \"Tee\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('C5').SetValue('Tee');"
    },
    {
      "description": "Set cell D2 value to 42.5",
      "VBA": "Range(\"D2\").Value = 42.5",
      "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);"
    },
    {
      "description": "Set cell D3 value to 35.2",
      "VBA": "Range(\"D3\").Value = 35.2",
      "OnlyOfficeJS": "oWorksheet.GetRange('D3').SetValue(35.2);"
    },
    {
      "description": "Set cell D4 value to 12.3",
      "VBA": "Range(\"D4\").Value = 12.3",
      "OnlyOfficeJS": "oWorksheet.GetRange('D4').SetValue(12.3);"
    },
    {
      "description": "Set cell D5 value to 24.8",
      "VBA": "Range(\"D5\").Value = 24.8",
      "OnlyOfficeJS": "oWorksheet.GetRange('D5').SetValue(24.8);"
    },
    {
      "description": "Get the range B1:D5 from Sheet1",
      "VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"$B$1:$D$5\")",
      "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
    },
    {
      "description": "Insert a pivot table based on dataRef into a new worksheet",
      "VBA": "Set pivotTable = ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=ActiveWorkbook.Sheets.Add().Range(\"A3\"))",
      "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
    },
    {
      "description": "Add 'Region' and 'Style' as row fields in the pivot table",
      "VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With",
      "OnlyOfficeJS": "pivotTable.AddFields({ rows: ['Region', 'Style'], });"
    },
    {
      "description": "Add 'Price' as a data field in the pivot table",
      "VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With",
      "OnlyOfficeJS": "pivotTable.AddDataField('Price');"
    },
    {
      "description": "Get the active worksheet (pivot table sheet)",
      "VBA": "Set pivotWorksheet = ActiveSheet",
      "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();"
    },
    {
      "description": "Get the data field 'Sum of Price' from the pivot table",
      "VBA": "Set dataField = pivotTable.PivotFields(\"Sum of Price\")",
      "OnlyOfficeJS": "var dataField = pivotTable.GetDataFields('Sum of Price');"
    },
    {
      "description": "Set cell A12 value to 'Data field name'",
      "VBA": "Range(\"A12\").Value = \"Data field name\"",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('A12').SetValue('Data field name');"
    },
    {
      "description": "Set cell B12 value to the data field's name",
      "VBA": "Range(\"B12\").Value = dataField.Name",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('B12').SetValue(dataField.GetName());"
    },
    {
      "description": "Rename data field to 'My Sum of Price'",
      "VBA": "dataField.Name = \"My Sum of Price\"",
      "OnlyOfficeJS": "dataField.SetName('My Sum of Price');"
    },
    {
      "description": "Set cell A13 value to 'New Data field name'",
      "VBA": "Range(\"A13\").Value = \"New Data field name\"",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('A13').SetValue('New Data field name');"
    },
    {
      "description": "Set cell B13 value to the data field's new name",
      "VBA": "Range(\"B13\").Value = dataField.Name",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('B13').SetValue(dataField.GetName());"
    }
  ]
}
``````json
{
  "Description": "Sets header values in specified cells",
  "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');\noWorksheet.GetRange('C1').SetValue('Style');\noWorksheet.GetRange('D1').SetValue('Price');",
  "ExcelVBA": "Range(\"B1\").Value = \"Region\"\nRange(\"C1\").Value = \"Style\"\nRange(\"D1\").Value = \"Price\""
},
{
  "Description": "Sets values for 'Region' column",
  "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');\noWorksheet.GetRange('B3').SetValue('West');\noWorksheet.GetRange('B4').SetValue('East');\noWorksheet.GetRange('B5').SetValue('West');",
  "ExcelVBA": "Range(\"B2\").Value = \"East\"\nRange(\"B3\").Value = \"West\"\nRange(\"B4\").Value = \"East\"\nRange(\"B5\").Value = \"West\""
},
{
  "Description": "Sets values for 'Style' column",
  "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');\noWorksheet.GetRange('C3').SetValue('Fancy');\noWorksheet.GetRange('C4').SetValue('Tee');\noWorksheet.GetRange('C5').SetValue('Tee');",
  "ExcelVBA": "Range(\"C2\").Value = \"Fancy\"\nRange(\"C3\").Value = \"Fancy\"\nRange(\"C4\").Value = \"Tee\"\nRange(\"C5\").Value = \"Tee\""
},
{
  "Description": "Sets values for 'Price' column",
  "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);\noWorksheet.GetRange('D3').SetValue(35.2);\noWorksheet.GetRange('D4').SetValue(12.3);\noWorksheet.GetRange('D5').SetValue(24.8);",
  "ExcelVBA": "Range(\"D2\").Value = 42.5\nRange(\"D3\").Value = 35.2\nRange(\"D4\").Value = 12.3\nRange(\"D5\").Value = 24.8"
},
{
  "Description": "Creates a data range reference",
  "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
  "ExcelVBA": "Set dataRef = Range(\"B1:D5\")"
},
{
  "Description": "Inserts a pivot table in a new worksheet",
  "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
  "ExcelVBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceData:=dataRef)"
},
{
  "Description": "Adds row fields to the pivot table",
  "OnlyOfficeJS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
  "ExcelVBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
},
{
  "Description": "Adds a data field to the pivot table",
  "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
  "ExcelVBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
},
{
  "Description": "Sets the number format for the data field in the pivot table",
  "OnlyOfficeJS": "var dataField = pivotTable.GetDataFields('Sum of Price');\ndataField.SetNumberFormat('0.00E+00');",
  "ExcelVBA": "pivotTable.PivotFields(\"Sum of Price\").NumberFormat = \"0.00E+00\""
}
``````json
{
  "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
  "rows": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set value 'Region' in cell B1",
      "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "Description": "Set value 'Style' in cell C1",
      "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "Description": "Set value 'Price' in cell D1",
      "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "Description": "Set value 'East' in cell B2",
      "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "Description": "Set value 'West' in cell B3",
      "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "Description": "Set value 'East' in cell B4",
      "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "Description": "Set value 'West' in cell B5",
      "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "Description": "Set value 'Fancy' in cell C2",
      "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "Description": "Set value 'Fancy' in cell C3",
      "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "Description": "Set value 'Tee' in cell C4",
      "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "Description": "Set value 'Tee' in cell C5",
      "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "Description": "Set value 42.5 in cell D2",
      "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "Description": "Set value 35.2 in cell D3",
      "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "Description": "Set value 12.3 in cell D4",
      "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "Description": "Set value 24.8 in cell D5",
      "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "Description": "Get data range B1:D5",
      "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel VBA": "Set dataRef = oWorksheet.Range(\"B1:D5\")"
    },
    {
      "Description": "Insert pivot table in a new worksheet with the data range",
      "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel VBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceData:=dataRef)"
    },
    {
      "Description": "Add 'Region' and 'Style' as row fields in the pivot table",
      "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "Excel VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "Description": "Add 'Price' as a data field in the pivot table",
      "OnlyOffice JS": "pivotTable.AddDataField('Price');",
      "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "Description": "Add 'Price' as a data field and set its position to 1",
      "OnlyOffice JS": "var dataField = pivotTable.AddDataField('Price');\ndataField.SetPosition(1);",
      "Excel VBA": "Dim dataField As PivotField\nSet dataField = pivotTable.PivotFields(\"Price\")\nWith dataField\n    .Orientation = xlDataField\n    .Position = 1\nEnd With"
    },
    {
      "Description": "Get the active worksheet (pivot worksheet)",
      "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "Description": "Set value 'Sum of Price2 position:' in cell A15",
      "OnlyOffice JS": "pivotWorksheet.GetRange('A15').SetValue('Sum of Price2 position:');",
      "Excel VBA": "pivotWorksheet.Range(\"A15\").Value = \"Sum of Price2 position:\""
    },
    {
      "Description": "Set the position of the data field in cell B15",
      "OnlyOffice JS": "pivotWorksheet.GetRange('B15').SetValue(dataField.GetPosition());",
      "Excel VBA": "pivotWorksheet.Range(\"B15\").Value = dataField.Position"
    }
  ]
}
``````json
{
  "description": "The following code sets up data in cells, creates a pivot table, adds fields, and manipulates data fields using OnlyOffice JS and its Excel VBA equivalents.",
  "comparisons": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel VBA": "Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel VBA": "Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel VBA": "Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel VBA": "Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel VBA": "Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel VBA": "Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel VBA": "Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel VBA": "Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel VBA": "Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel VBA": "Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel VBA": "Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel VBA": "Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel VBA": "Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel VBA": "Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel VBA": "Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel VBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "Excel VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice JS": "pivotTable.AddDataField('Price');",
      "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "var dataField = pivotTable.GetDataFields('Sum of Price');",
      "Excel VBA": "Set dataField = pivotTable.DataFields(\"Sum of Price\")"
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('A12').SetValue('Data field value');",
      "Excel VBA": "Range(\"A12\").Value = \"Data field value\""
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('B12').SetValue(dataField.GetValue());",
      "Excel VBA": "Range(\"B12\").Value = dataField.Value"
    },
    {
      "OnlyOffice JS": "dataField.SetValue('My Sum of Price');",
      "Excel VBA": "dataField.Name = \"My Sum of Price\""
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('A13').SetValue('New Data field value');",
      "Excel VBA": "Range(\"A13\").Value = \"New Data field value\""
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('B13').SetValue(dataField.GetValue());",
      "Excel VBA": "Range(\"B13\").Value = dataField.Value"
    }
  ]
}
```**Description:**  
This code sets up data in a worksheet, creates a pivot table on a new worksheet, adds specified fields to the pivot table, and clears all filters on the "Region" pivot field.

```json
{
  "RAG_table": [
    {
      "Action": "Get Active Sheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Action": "Set Header 'Region' in B1",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "Action": "Set Header 'Style' in C1",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "Action": "Set Header 'Price' in D1",
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "Action": "Set 'East' in B2",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "Action": "Set 'West' in B3",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "Action": "Set 'East' in B4",
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "Action": "Set 'West' in B5",
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "Action": "Set 'Fancy' in C2",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "Action": "Set 'Fancy' in C3",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "Action": "Set 'Tee' in C4",
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "Action": "Set 'Tee' in C5",
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "Action": "Set 42.5 in D2",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "Action": "Set 35.2 in D3",
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "Action": "Set 12.3 in D4",
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "Action": "Set 24.8 in D5",
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "Action": "Get Data Range B1:D5",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Set dataRef = oWorksheet.Range(\"B1:D5\")"
    },
    {
      "Action": "Insert Pivot Table in New Worksheet",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Set pivotTable = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=ThisWorkbook.Sheets.Add().Range(\"A1\"), TableName:=\"PivotTable1\")"
    },
    {
      "Action": "Add Rows Field 'Region' and Columns Field 'Style'",
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: 'Region', columns: 'Style' });",
      "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlColumnField\nEnd With"
    },
    {
      "Action": "Add Data Field 'Price'",
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
    },
    {
      "Action": "Get Active Sheet (Pivot Worksheet)",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set pivotWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Action": "Get Pivot Field 'Region'",
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "Excel_VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "Action": "Clear All Filters on 'Region'",
      "OnlyOffice_JS": "pivotField.ClearAllFilters();",
      "Excel_VBA": "pivotField.ClearAllFilters"
    }
  ]
}
``````json
{
  "description": "This code sets headers and data in specific cells, creates a pivot table based on the data range, configures the pivot table fields, and clears label filters on the 'Region' pivot field.",
  "RAG_table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Set dataRef = oWorksheet.Range(\"B1:D5\")"
    },
    {
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Set pivotWorksheet = Worksheets.Add\nSet pivotTable = pivotWorksheet.PivotTables.Add(PivotCache:=ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef), TableDestination:=pivotWorksheet.Range(\"A1\"), TableName:=\"PivotTable1\")"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: 'Region', columns: 'Style' });",
      "Excel_VBA": "With pivotTable\n  .PivotFields(\"Region\").Orientation = xlRowField\n  .PivotFields(\"Style\").Orientation = xlColumnField\nEnd With"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set pivotWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "Excel_VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "OnlyOffice_JS": "pivotField.ClearLabelFilters();",
      "Excel_VBA": "pivotField.ClearAllFilters"
    }
  ]
}
``````json
{
  "Table": {
    "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Description": "Get active worksheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ActiveSheet"
      },
      {
        "Description": "Set value 'Region' to cell B1",
        "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
        "Excel VBA": "Range(\"B1\").Value = \"Region\""
      },
      {
        "Description": "Set value 'Style' to cell C1",
        "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
        "Excel VBA": "Range(\"C1\").Value = \"Style\""
      },
      {
        "Description": "Set value 'Price' to cell D1",
        "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
        "Excel VBA": "Range(\"D1\").Value = \"Price\""
      },
      {
        "Description": "Set value 'East' to cell B2",
        "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
        "Excel VBA": "Range(\"B2\").Value = \"East\""
      },
      {
        "Description": "Set value 'West' to cell B3",
        "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
        "Excel VBA": "Range(\"B3\").Value = \"West\""
      },
      {
        "Description": "Set value 'East' to cell B4",
        "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
        "Excel VBA": "Range(\"B4\").Value = \"East\""
      },
      {
        "Description": "Set value 'West' to cell B5",
        "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
        "Excel VBA": "Range(\"B5\").Value = \"West\""
      },
      {
        "Description": "Set value 'Fancy' to cell C2",
        "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
        "Excel VBA": "Range(\"C2\").Value = \"Fancy\""
      },
      {
        "Description": "Set value 'Fancy' to cell C3",
        "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
        "Excel VBA": "Range(\"C3\").Value = \"Fancy\""
      },
      {
        "Description": "Set value 'Tee' to cell C4",
        "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
        "Excel VBA": "Range(\"C4\").Value = \"Tee\""
      },
      {
        "Description": "Set value 'Tee' to cell C5",
        "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
        "Excel VBA": "Range(\"C5\").Value = \"Tee\""
      },
      {
        "Description": "Set value 42.5 to cell D2",
        "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
        "Excel VBA": "Range(\"D2\").Value = 42.5"
      },
      {
        "Description": "Set value 35.2 to cell D3",
        "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
        "Excel VBA": "Range(\"D3\").Value = 35.2"
      },
      {
        "Description": "Set value 12.3 to cell D4",
        "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
        "Excel VBA": "Range(\"D4\").Value = 12.3"
      },
      {
        "Description": "Set value 24.8 to cell D5",
        "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
        "Excel VBA": "Range(\"D5\").Value = 24.8"
      },
      {
        "Description": "Get range 'Sheet1'!$B$1:$D$5",
        "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
        "Excel VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"$B$1:$D$5\")"
      },
      {
        "Description": "Insert pivot table in new worksheet based on dataRef",
        "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
        "Excel VBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceData:=dataRef)"
      },
      {
        "Description": "Add 'Region' as rows and 'Style' as columns to pivot table",
        "OnlyOffice JS": "pivotTable.AddFields({ rows: 'Region', columns: 'Style' });",
        "Excel VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlColumnField\nEnd With"
      },
      {
        "Description": "Add 'Price' as data field to pivot table",
        "OnlyOffice JS": "pivotTable.AddDataField('Price');",
        "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
      },
      {
        "Description": "Get active worksheet for pivot table",
        "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set pivotWorksheet = ActiveSheet"
      },
      {
        "Description": "Get 'Region' pivot field",
        "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Region');",
        "Excel VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
      },
      {
        "Description": "Clear manual filters on 'Region' pivot field",
        "OnlyOffice JS": "pivotField.ClearManualFilters();",
        "Excel VBA": "pivotField.ClearAllFilters"
      }
    ]
  }
}
``````json
{
  "operations": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set value of cell B1 to 'Region'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "VBA": "Range(\"B1\").Value = \"Region\""
    },
    {
      "Description": "Set value of cell C1 to 'Style'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "VBA": "Range(\"C1\").Value = \"Style\""
    },
    {
      "Description": "Set value of cell D1 to 'Price'",
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "VBA": "Range(\"D1\").Value = \"Price\""
    },
    {
      "Description": "Set value of cell B2 to 'East'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "VBA": "Range(\"B2\").Value = \"East\""
    },
    {
      "Description": "Set value of cell B3 to 'West'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "VBA": "Range(\"B3\").Value = \"West\""
    },
    {
      "Description": "Set value of cell B4 to 'East'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "VBA": "Range(\"B4\").Value = \"East\""
    },
    {
      "Description": "Set value of cell B5 to 'West'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "VBA": "Range(\"B5\").Value = \"West\""
    },
    {
      "Description": "Set value of cell C2 to 'Fancy'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "VBA": "Range(\"C2\").Value = \"Fancy\""
    },
    {
      "Description": "Set value of cell C3 to 'Fancy'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "VBA": "Range(\"C3\").Value = \"Fancy\""
    },
    {
      "Description": "Set value of cell C4 to 'Tee'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "VBA": "Range(\"C4\").Value = \"Tee\""
    },
    {
      "Description": "Set value of cell C5 to 'Tee'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "VBA": "Range(\"C5\").Value = \"Tee\""
    },
    {
      "Description": "Set value of cell D2 to 42.5",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "VBA": "Range(\"D2\").Value = 42.5"
    },
    {
      "Description": "Set value of cell D3 to 35.2",
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "VBA": "Range(\"D3\").Value = 35.2"
    },
    {
      "Description": "Set value of cell D4 to 12.3",
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "VBA": "Range(\"D4\").Value = 12.3"
    },
    {
      "Description": "Set value of cell D5 to 24.8",
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "VBA": "Range(\"D5\").Value = 24.8"
    },
    {
      "Description": "Get range B1:D5 from Sheet1",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "Description": "Insert a new pivot table worksheet based on dataRef",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "VBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "Description": "Add 'Region' as row field and 'Style' as column field to the pivot table",
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: 'Region', columns: 'Style' });",
      "VBA": "With pivotTable"
    },
    {
      "Description": "Add 'Price' as data field to the pivot table",
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "VBA": ".AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "Description": "Get the active worksheet (pivot worksheet)",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "VBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "Description": "Get the 'Region' pivot field from the pivot table",
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "Description": "Clear value filters on the 'Region' pivot field",
      "OnlyOffice_JS": "pivotField.ClearValueFilters();",
      "VBA": "pivotField.ClearAllFilters"
    }
  ]
}
```**This code populates data into the active sheet and creates a pivot table based on the provided data.**

```json
{
  "methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel VBA": "Set dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel VBA": "Set pivotTable = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=ThisWorkbook.Sheets.Add().Range(\"A3\"), TableName:=\"PivotTable1\")"
    },
    {
      "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'], });",
      "Excel VBA": "With pivotTable.PivotFields(\"Region\")\n    .Orientation = xlRowField\n    .Position = 1\nEnd With\nWith pivotTable.PivotFields(\"Style\")\n    .Orientation = xlRowField\n    .Position = 2\nEnd With"
    },
    {
      "OnlyOffice JS": "pivotTable.AddDataField('Price');",
      "Excel VBA": "With pivotTable.PivotFields(\"Price\")\n    .Orientation = xlDataField\n    .Function = xlSum\n    .Name = \"Sum of Price\"\nEnd With"
    },
    {
      "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set pivotWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Style');",
      "Excel VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")"
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('A12').SetValue('The Style field caption');",
      "Excel VBA": "pivotWorksheet.Range(\"A12\").Value = \"The Style field caption\""
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetCaption());",
      "Excel VBA": "pivotWorksheet.Range(\"B12\").Value = pivotField.Caption"
    }
  ]
}
``````json
[
  {
    "description": "Get the active worksheet",
    "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
  },
  {
    "description": "Set header 'Region' in cell B1",
    "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
    "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
  },
  {
    "description": "Set header 'Style' in cell C1",
    "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
    "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
  },
  {
    "description": "Set header 'Price' in cell D1",
    "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
    "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
  },
  {
    "description": "Set 'East' in cell B2",
    "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
    "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
  },
  {
    "description": "Set 'West' in cell B3",
    "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
    "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
  },
  {
    "description": "Set 'East' in cell B4",
    "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
    "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
  },
  {
    "description": "Set 'West' in cell B5",
    "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
    "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
  },
  {
    "description": "Set 'Fancy' in cell C2",
    "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
    "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
  },
  {
    "description": "Set 'Fancy' in cell C3",
    "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
    "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
  },
  {
    "description": "Set 'Tee' in cell C4",
    "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
    "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
  },
  {
    "description": "Set 'Tee' in cell C5",
    "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
    "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
  },
  {
    "description": "Set price 42.5 in cell D2",
    "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
    "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
  },
  {
    "description": "Set price 35.2 in cell D3",
    "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
    "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
  },
  {
    "description": "Set price 12.3 in cell D4",
    "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
    "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
  },
  {
    "description": "Set price 24.8 in cell D5",
    "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
    "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
  },
  {
    "description": "Get data range B1:D5",
    "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "Excel VBA": "Set dataRef = ActiveSheet.Range(\"B1:D5\")"
  },
  {
    "description": "Insert pivot table on new worksheet",
    "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "Excel VBA": "Set pivotWorksheet = Worksheets.Add\nSet pivotTable = pivotWorksheet.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
  },
  {
    "description": "Add fields to pivot table with 'Style' as page field and 'Region' as row field",
    "OnlyOffice JS": "pivotTable.AddFields({\n\tpages: ['Style'],\n\trows: 'Region'\n});",
    "Excel VBA": "With pivotTable\n\t.PivotFields(\"Style\").Orientation = xlPageField\n\t.PivotFields(\"Region\").Orientation = xlRowField\nEnd With"
  },
  {
    "description": "Add 'Style' as data field in pivot table",
    "OnlyOffice JS": "pivotTable.AddDataField('Style');",
    "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Style\"), \"Count of Style\", xlCount"
  },
  {
    "description": "Get the active sheet for the pivot table",
    "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
    "Excel VBA": "Set pivotWorksheet = ActiveWorkbook.ActiveSheet"
  },
  {
    "description": "Get pivot field 'Style'",
    "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Style');",
    "Excel VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")"
  },
  {
    "description": "Set 'Current Page' label in cell A13",
    "OnlyOffice JS": "pivotWorksheet.GetRange('A13').SetValue('Current Page');",
    "Excel VBA": "pivotWorksheet.Range(\"A13\").Value = \"Current Page\""
  },
  {
    "description": "Set current page value in cell B13",
    "OnlyOffice JS": "pivotWorksheet.GetRange('B13').SetValue(pivotField.GetCurrentPage());",
    "Excel VBA": "pivotWorksheet.Range(\"B13\").Value = pivotField.CurrentPage"
  }
]
``````json
{
  "RAG_Table": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Description": "Set header values in cells B1, C1, D1",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');\n" +
                      "oWorksheet.GetRange('C1').SetValue('Style');\n" +
                      "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\"\n" +
                  "oWorksheet.Range(\"C1\").Value = \"Style\"\n" +
                  "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "Description": "Set Region data in cells B2 to B5",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');\n" +
                      "oWorksheet.GetRange('B3').SetValue('West');\n" +
                      "oWorksheet.GetRange('B4').SetValue('East');\n" +
                      "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\"\n" +
                  "oWorksheet.Range(\"B3\").Value = \"West\"\n" +
                  "oWorksheet.Range(\"B4\").Value = \"East\"\n" +
                  "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "Description": "Set Style data in cells C2 to C5",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');\n" +
                      "oWorksheet.GetRange('C3').SetValue('Fancy');\n" +
                      "oWorksheet.GetRange('C4').SetValue('Tee');\n" +
                      "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\"\n" +
                  "oWorksheet.Range(\"C3\").Value = \"Fancy\"\n" +
                  "oWorksheet.Range(\"C4\").Value = \"Tee\"\n" +
                  "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "Description": "Set Price data in cells D2 to D5",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);\n" +
                      "oWorksheet.GetRange('D3').SetValue(35.2);\n" +
                      "oWorksheet.GetRange('D4').SetValue(12.3);\n" +
                      "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5\n" +
                  "oWorksheet.Range(\"D3\").Value = 35.2\n" +
                  "oWorksheet.Range(\"D4\").Value = 12.3\n" +
                  "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "Description": "Get data range for pivot table",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Set dataRef = oWorksheet.Range(\"B1:D5\")"
    },
    {
      "Description": "Insert a new pivot table on a new worksheet",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Set pivotTable = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=Sheets.Add.Range(\"A1\"))"
    },
    {
      "Description": "Add fields to pivot table (columns and rows)",
      "OnlyOffice_JS": "pivotTable.AddFields({\n" +
                      "  columns: ['Style'],\n" +
                      "  rows: 'Region',\n" +
                      "});",
      "Excel_VBA": "With pivotTable\n" +
                  "  .PivotFields(\"Style\").Orientation = xlColumnField\n" +
                  "  .PivotFields(\"Region\").Orientation = xlRowField\n" +
                  "End With"
    },
    {
      "Description": "Add Price as data field in pivot table",
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "Description": "Get the active worksheet (pivot table sheet)",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set pivotWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Description": "Get the 'Region' pivot field",
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "Excel_VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "Description": "Set value in A13 and B13 with pivot field properties",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A13').SetValue('Drag to column');\n" +
                      "pivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToColumn());",
      "Excel_VBA": "pivotWorksheet.Range(\"A13\").Value = \"Drag to column\"\n" +
                  "pivotWorksheet.Range(\"B13\").Value = pivotField.Orientation = xlColumnField"
    }
  ]
}
```**This code populates data into an Excel sheet, creates a pivot table based on the data, configures the pivot table fields, and sets specific cell values.**

```json
{
  "RAG_Table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\"",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\"",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\"",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\"",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\"",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\"",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\"",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\"",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\"",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\"",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\"",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Set dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Set pivotTable = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=ThisWorkbook.Sheets.Add().Range(\"A3\"), TableName:=\"PivotTable1\")",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Style'], columns: 'Region' });",
      "Excel_VBA": "With pivotTable.PivotFields(\"Style\")\n    .Orientation = xlRowField\n    .Position = 1\nEnd With\nWith pivotTable.PivotFields(\"Region\")\n    .Orientation = xlColumnField\n    .Position = 1\nEnd With",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set pivotWorksheet = ThisWorkbook.ActiveSheet",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "Excel_VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A13').SetValue('Drag to data');",
      "Excel_VBA": "pivotWorksheet.Range(\"A13\").Value = \"Drag to data\"",
      "Status": "Green"
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToData());",
      "Excel_VBA": "pivotWorksheet.Range(\"B13\").Value = pivotField.Orientation",
      "Status": "Amber"
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
  },
  {
    "Description": "Set value 'Region' to cell B1",
    "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
    "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
  },
  {
    "Description": "Set value 'Style' to cell C1",
    "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
    "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
  },
  {
    "Description": "Set value 'Price' to cell D1",
    "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
    "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
  },
  {
    "Description": "Set value 'East' to cell B2",
    "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
    "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
  },
  {
    "Description": "Set value 'West' to cell B3",
    "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
    "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
  },
  {
    "Description": "Set value 'East' to cell B4",
    "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
    "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
  },
  {
    "Description": "Set value 'West' to cell B5",
    "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
    "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
  },
  {
    "Description": "Set value 'Fancy' to cell C2",
    "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
    "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
  },
  {
    "Description": "Set value 'Fancy' to cell C3",
    "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
    "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
  },
  {
    "Description": "Set value 'Tee' to cell C4",
    "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
    "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
  },
  {
    "Description": "Set value 'Tee' to cell C5",
    "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
    "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
  },
  {
    "Description": "Set value 42.5 to cell D2",
    "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
    "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
  },
  {
    "Description": "Set value 35.2 to cell D3",
    "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
    "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
  },
  {
    "Description": "Set value 12.3 to cell D4",
    "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
    "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
  },
  {
    "Description": "Set value 24.8 to cell D5",
    "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
    "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
  },
  {
    "Description": "Get data range from Sheet1",
    "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "Excel_VBA": "Dim dataRef As Range\nSet dataRef = Sheets(\"Sheet1\").Range(\"B1:D5\")"
  },
  {
    "Description": "Insert a new pivot table worksheet based on data range",
    "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "Excel_VBA": "Dim pivotTable As PivotTable\nDim pivotCache As PivotCache\nSet pivotCache = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef)\nSet pivotTable = pivotCache.CreatePivotTable(TableDestination:=Sheets.Add().Range(\"A3\"), TableName:=\"PivotTable1\")"
  },
  {
    "Description": "Add 'Style' as row field and 'Region' as column field to pivot table",
    "OnlyOffice_JS": "pivotTable.AddFields({\n\trows: ['Style'],\n\tcolumns: 'Region',\n});",
    "Excel_VBA": "With pivotTable\n\t.PivotFields(\"Style\").Orientation = xlRowField\n\t.PivotFields(\"Region\").Orientation = xlColumnField\nEnd With"
  },
  {
    "Description": "Add 'Price' as data field to pivot table",
    "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
    "Excel_VBA": "With pivotTable\n\t.PivotFields(\"Price\").Orientation = xlDataField\n\t.PivotFields(\"Price\").Function = xlSum\nEnd With"
  },
  {
    "Description": "Get the active worksheet after inserting pivot table",
    "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ActiveSheet"
  },
  {
    "Description": "Get the 'Region' pivot field from pivot table",
    "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
    "Excel_VBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Region\")"
  },
  {
    "Description": "Set value 'Drag to page' to cell A13 in pivot worksheet",
    "OnlyOffice_JS": "pivotWorksheet.GetRange('A13').SetValue('Drag to page');",
    "Excel_VBA": "pivotWorksheet.Range(\"A13\").Value = \"Drag to page\""
  },
  {
    "Description": "Set value of 'Drag to page' from pivot field to cell B13",
    "OnlyOffice_JS": "pivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToPage());",
    "Excel_VBA": "pivotWorksheet.Range(\"B13\").Value = pivotField.DragToPage"
  }
]
``````json
{
  "description": "This table maps the OnlyOffice JavaScript API methods used in the provided code to their equivalent Excel VBA methods.",
  "table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "VBA": "Set dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "VBA": "Set pivotTable = ThisWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef, TableDestination:=Sheets.Add())"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Style'], columns: 'Region' });",
      "VBA": "With pivotTable\n    .PivotFields(\"Style\").Orientation = xlRowField\n    .PivotFields(\"Region\").Orientation = xlColumnField\nEnd With"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "VBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A13').SetValue('Drag to row');",
      "VBA": "pivotWorksheet.Range(\"A13\").Value = \"Drag to row\""
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToRow());",
      "VBA": "pivotWorksheet.Range(\"B13\").Value = pivotField.Orientation = xlRowField"
    }
  ]
}
``````json
{
  "RAG_Table": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "Description": "Set header value 'Region' in cell B1",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "Description": "Set header value 'Style' in cell C1",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "Description": "Set header value 'Price' in cell D1",
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "Description": "Set value 'East' in cell B2",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "Description": "Set value 'West' in cell B3",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "Description": "Set value 'East' in cell B4",
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "Description": "Set value 'West' in cell B5",
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "Description": "Set value 'Fancy' in cell C2",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "Description": "Set value 'Fancy' in cell C3",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "Description": "Set value 'Tee' in cell C4",
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "Description": "Set value 'Tee' in cell C5",
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "Description": "Set value 42.5 in cell D2",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "Description": "Set value 35.2 in cell D3",
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "Description": "Set value 12.3 in cell D4",
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "Description": "Set value 24.8 in cell D5",
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "Description": "Get the data range B1:D5 from Sheet1",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Set dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "Description": "Insert a new pivot table on a new worksheet using the data range",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Set pivotTable = ThisWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef, TableDestination:= Worksheets.Add.Range(\"A1\"))"
    },
    {
      "Description": "Add 'Region' and 'Style' as row fields in the pivot table",
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'], });",
      "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "Description": "Add 'Price' as a data field in the pivot table",
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "Description": "Get the active pivot worksheet",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set pivotWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "Description": "Get the 'Style' pivot field",
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Style');",
      "Excel_VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")"
    },
    {
      "Description": "Set the text 'The Style field index' in cell A12",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A12').SetValue('The Style field index');",
      "Excel_VBA": "pivotWorksheet.Range(\"A12\").Value = \"The Style field index\""
    },
    {
      "Description": "Set the index of the 'Style' pivot field in cell B12",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetIndex());",
      "Excel_VBA": "pivotWorksheet.Range(\"B12\").Value = pivotField.Position"
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet.",
    "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
    "ExcelVBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveWorkbook.ActiveSheet"
  },
  {
    "Description": "Set header value for cell B1.",
    "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');",
    "ExcelVBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
  },
  {
    "Description": "Set header value for cell C1.",
    "OnlyOfficeJS": "oWorksheet.GetRange('C1').SetValue('Style');",
    "ExcelVBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
  },
  {
    "Description": "Set header value for cell D1.",
    "OnlyOfficeJS": "oWorksheet.GetRange('D1').SetValue('Price');",
    "ExcelVBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
  },
  {
    "Description": "Set value 'East' in cell B2.",
    "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');",
    "ExcelVBA": "oWorksheet.Range(\"B2\").Value = \"East\""
  },
  {
    "Description": "Set value 'West' in cell B3.",
    "OnlyOfficeJS": "oWorksheet.GetRange('B3').SetValue('West');",
    "ExcelVBA": "oWorksheet.Range(\"B3\").Value = \"West\""
  },
  {
    "Description": "Set value 'East' in cell B4.",
    "OnlyOfficeJS": "oWorksheet.GetRange('B4').SetValue('East');",
    "ExcelVBA": "oWorksheet.Range(\"B4\").Value = \"East\""
  },
  {
    "Description": "Set value 'West' in cell B5.",
    "OnlyOfficeJS": "oWorksheet.GetRange('B5').SetValue('West');",
    "ExcelVBA": "oWorksheet.Range(\"B5\").Value = \"West\""
  },
  {
    "Description": "Set value 'Fancy' in cell C2.",
    "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
    "ExcelVBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
  },
  {
    "Description": "Set value 'Fancy' in cell C3.",
    "OnlyOfficeJS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
    "ExcelVBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
  },
  {
    "Description": "Set value 'Tee' in cell C4.",
    "OnlyOfficeJS": "oWorksheet.GetRange('C4').SetValue('Tee');",
    "ExcelVBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
  },
  {
    "Description": "Set value 'Tee' in cell C5.",
    "OnlyOfficeJS": "oWorksheet.GetRange('C5').SetValue('Tee');",
    "ExcelVBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
  },
  {
    "Description": "Set value 42.5 in cell D2.",
    "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);",
    "ExcelVBA": "oWorksheet.Range(\"D2\").Value = 42.5"
  },
  {
    "Description": "Set value 35.2 in cell D3.",
    "OnlyOfficeJS": "oWorksheet.GetRange('D3').SetValue(35.2);",
    "ExcelVBA": "oWorksheet.Range(\"D3\").Value = 35.2"
  },
  {
    "Description": "Set value 12.3 in cell D4.",
    "OnlyOfficeJS": "oWorksheet.GetRange('D4').SetValue(12.3);",
    "ExcelVBA": "oWorksheet.Range(\"D4\").Value = 12.3"
  },
  {
    "Description": "Set value 24.8 in cell D5.",
    "OnlyOfficeJS": "oWorksheet.GetRange('D5').SetValue(24.8);",
    "ExcelVBA": "oWorksheet.Range(\"D5\").Value = 24.8"
  },
  {
    "Description": "Get range B1:D5 from Sheet1.",
    "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "ExcelVBA": "Dim dataRef As Range\nSet dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
  },
  {
    "Description": "Insert a new pivot table worksheet using the specified range.",
    "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "ExcelVBA": "Dim pivotTable As PivotTable\nDim pivotSheet As Worksheet\nSet pivotSheet = ThisWorkbook.Worksheets.Add\nSet pivotTable = pivotSheet.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
  },
  {
    "Description": "Add 'Region' and 'Style' as row fields in the pivot table.",
    "OnlyOfficeJS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
    "ExcelVBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
  },
  {
    "Description": "Add 'Price' as a data field in the pivot table.",
    "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
    "ExcelVBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
  },
  {
    "Description": "Set the row axis layout to Tabular.",
    "OnlyOfficeJS": "pivotTable.SetRowAxisLayout('Tabular');",
    "ExcelVBA": "pivotTable.RowAxisLayout xlTabularRow"
  },
  {
    "Description": "Get the active pivot worksheet.",
    "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();",
    "ExcelVBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ActiveWorkbook.ActiveSheet"
  },
  {
    "Description": "Get the 'Region' pivot field.",
    "OnlyOfficeJS": "var pivotField = pivotTable.GetPivotFields('Region');",
    "ExcelVBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Region\")"
  },
  {
    "Description": "Set value 'Region blank line' in cell A14.",
    "OnlyOfficeJS": "pivotWorksheet.GetRange('A14').SetValue('Region blank line');",
    "ExcelVBA": "pivotWorksheet.Range(\"A14\").Value = \"Region blank line\""
  },
  {
    "Description": "Set the layout blank line value in cell B14.",
    "OnlyOfficeJS": "pivotWorksheet.GetRange('B14').SetValue(pivotField.GetLayoutBlankLine());",
    "ExcelVBA": "pivotWorksheet.Range(\"B14\").Value = pivotField.LayoutBlankLine"
  }
]
``````json
{
  "actions": [
    {
      "description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "description": "Set cell B1 value to 'Region'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "description": "Set cell C1 value to 'Style'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "description": "Set cell D1 value to 'Price'",
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "description": "Set cell B2 value to 'East'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "description": "Set cell B3 value to 'West'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "description": "Set cell B4 value to 'East'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "description": "Set cell B5 value to 'West'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "description": "Set cell C2 value to 'Fancy'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "description": "Set cell C3 value to 'Fancy'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "description": "Set cell C4 value to 'Tee'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "description": "Set cell C5 value to 'Tee'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "description": "Set cell D2 value to 42.5",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "description": "Set cell D3 value to 35.2",
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "description": "Set cell D4 value to 12.3",
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "description": "Set cell D5 value to 24.8",
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "description": "Get the range B1:D5 from Sheet1",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Set dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "description": "Insert a pivot table in a new worksheet based on the range B1:D5",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Set pivotWorksheet = ThisWorkbook.Worksheets.Add\nSet pivotTable = pivotWorksheet.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "description": "Add 'Region' and 'Style' as row fields in the pivot table",
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "description": "Add 'Price' as a data field in the pivot table",
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
    },
    {
      "description": "Get the pivot table worksheet",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set pivotWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "description": "Get the 'Region' pivot field",
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "Excel_VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "description": "Set cell A12 value to 'Region layout compact'",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A12').SetValue('Region layout compact');",
      "Excel_VBA": "pivotWorksheet.Range(\"A12\").Value = \"Region layout compact\""
    },
    {
      "description": "Set cell B12 value to the compact row layout of 'Region'",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetLayoutCompactRow());",
      "Excel_VBA": "pivotWorksheet.Range(\"B12\").Value = pivotField.LayoutCompactRow"
    }
  ]
}
```**Description:**
This code initializes a worksheet with specific data, creates a pivot table based on that data, and retrieves layout information from the pivot table's fields.

```json
{
  "RAG_Mapping": [
    {
      "Status": "Green",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "VBA": "Range(\"B1\").Value = \"Region\""
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "VBA": "Range(\"C1\").Value = \"Style\""
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "VBA": "Range(\"D1\").Value = \"Price\""
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "VBA": "Range(\"B2\").Value = \"East\""
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "VBA": "Range(\"B3\").Value = \"West\""
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "VBA": "Range(\"B4\").Value = \"East\""
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "VBA": "Range(\"B5\").Value = \"West\""
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "VBA": "Range(\"C2\").Value = \"Fancy\""
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "VBA": "Range(\"C3\").Value = \"Fancy\""
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "VBA": "Range(\"C4\").Value = \"Tee\""
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "VBA": "Range(\"C5\").Value = \"Tee\""
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "VBA": "Range(\"D2\").Value = 42.5"
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "VBA": "Range(\"D3\").Value = 35.2"
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "VBA": "Range(\"D4\").Value = 12.3"
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "VBA": "Range(\"D5\").Value = 24.8"
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "VBA": "Dim dataRef As Range\nSet dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "VBA": "Dim pivotTable As PivotTable\nSet pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "VBA": "With pivotTable\n\t.With .PivotFields(\"Region\")\n\t\t.Orientation = xlRowField\n\t.End With\n\t.With .PivotFields(\"Style\")\n\t\t.Orientation = xlRowField\n\t.End With\nEnd With"
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ActiveSheet"
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "VBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A12').SetValue('Region layout form');",
      "VBA": "Range(\"A12\").Value = \"Region layout form\""
    },
    {
      "Status": "Green",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetLayoutForm());",
      "VBA": "Range(\"B12\").Value = pivotField.LayoutForm"
    }
  ]
}
``````json
{
  "Description": "This code sets values in specific cells, creates a pivot table from a data range, adds row and data fields to the pivot table, retrieves a pivot field, and sets a page break value based on the pivot field layout.",
  "Mappings": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel VBA": "Dim dataRef As Range\nSet dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel VBA": "Dim pivotTable As PivotTable\nSet pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "Excel VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice JS": "pivotTable.AddDataField('Price');",
      "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "Excel VBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('A15').SetValue('Page break:');",
      "Excel VBA": "pivotWorksheet.Range(\"A15\").Value = \"Page break:\""
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('B15').SetValue(pivotField.GetLayoutPageBreak());",
      "Excel VBA": "pivotWorksheet.Range(\"B15\").Value = pivotField.LayoutPageBreak"
    }
  ]
}
``````json
{
  "Description": "This code creates and populates a worksheet, sets values in specific cells, creates a pivot table, adds row and data fields to the pivot table, and retrieves the layout subtotal location of a pivot field.",
  "CodeExamples": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Dim dataRef As Range\nSet dataRef = Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Dim pivotTable As PivotTable\nSet pivotTable = ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=Sheets.Add.Range(\"A3\"), TableName:=\"PivotTable1\")"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "Excel_VBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A14').SetValue('Region layout subtotal location');",
      "Excel_VBA": "Range(\"A14\").Value = \"Region layout subtotal location\""
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B14').SetValue(pivotField.GetLayoutSubtotalLocation());",
      "Excel_VBA": "Range(\"B14\").Value = pivotField.Subtotals(1)" // Note: Excel VBA does not have a direct equivalent method; this is a representation.
    }
  ]
}
``````json
{
  "RAG_Table": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Description": "Set value 'Region' in cell B1",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "Description": "Set value 'Style' in cell C1",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "Description": "Set value 'Price' in cell D1",
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "Description": "Set value 'East' in cell B2",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "Description": "Set value 'West' in cell B3",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "Description": "Set value 'East' in cell B4",
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "Description": "Set value 'West' in cell B5",
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "Description": "Set value 'Fancy' in cell C2",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "Description": "Set value 'Fancy' in cell C3",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "Description": "Set value 'Tee' in cell C4",
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "Description": "Set value 'Tee' in cell C5",
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "Description": "Set value 42.5 in cell D2",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "Description": "Set value 35.2 in cell D3",
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "Description": "Set value 12.3 in cell D4",
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "Description": "Set value 24.8 in cell D5",
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "Description": "Get data range B1:D5",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Dim dataRef As Range\nSet dataRef = oWorksheet.Range(\"B1:D5\")"
    },
    {
      "Description": "Insert pivot table in new worksheet",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Dim pivotCache As PivotCache\nDim pivotTable As PivotTable\nSet pivotCache = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef)\nSet pivotTable = pivotCache.CreatePivotTable(TableDestination:=Sheets.Add.Range(\"A3\"), TableName:=\"PivotTable1\")"
    },
    {
      "Description": "Add 'Region' and 'Style' as row fields to pivot table",
      "OnlyOffice_JS": "pivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});",
      "Excel_VBA": "With pivotTable\n\t.PivotFields(\"Region\").Orientation = xlRowField\n\t.PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "Description": "Add 'Price' as data field to pivot table",
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "With pivotTable\n\t.PivotFields(\"Price\").Orientation = xlDataField\n\t.PivotFields(\"Price\").Function = xlSum\nEnd With"
    },
    {
      "Description": "Get the active worksheet for pivot table",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ActiveSheet"
    },
    {
      "Description": "Get 'Region' pivot field",
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "Excel_VBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "Description": "Set value 'Region layout subtotals' in cell A14",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A14').SetValue('Region layout subtotals');",
      "Excel_VBA": "pivotWorksheet.Range(\"A14\").Value = \"Region layout subtotals\""
    },
    {
      "Description": "Set subtotal layout for 'Region' field in cell B14",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B14').SetValue(pivotField.GetLayoutSubtotals());",
      "Excel_VBA": "pivotWorksheet.Range(\"B14\").Value = pivotField.Subtotals(1)" 
    }
  ]
}
``````json
{
  "Description": "This script initializes a worksheet by setting headers and data, creates a pivot table, adds fields to the pivot table, and retrieves the name of a pivot field.",
  "CodeEquivalents": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Set dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Set pivotTable = ThisWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "Excel_VBA": "With pivotTable\n  .PivotFields(\"Region\").Orientation = xlRowField\n  .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Style');",
      "Excel_VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")"
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A12').SetValue('The Style field name');",
      "Excel_VBA": "Range(\"A12\").Value = \"The Style field name\""
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetName());",
      "Excel_VBA": "Range(\"B12\").Value = pivotField.Name"
    }
  ]
}
``````json
{
  "Description": "This script sets up headers, populates data in specified ranges, creates a pivot table from the data, adds rows, columns, and data fields to the pivot table, and then writes the orientation of a pivot field to specific cells in the pivot worksheet.",
  "Code": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel VBA": "Dim dataRef As Range\nSet dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel VBA": "Dim pivotTable As PivotTable\nDim pivotSheet As Worksheet\nSet pivotSheet = ThisWorkbook.Sheets.Add\nSet pivotTable = pivotSheet.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "OnlyOffice JS": "pivotTable.AddFields({ rows: 'Region', columns: 'Style' });",
      "Excel VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlColumnField\nEnd With"
    },
    {
      "OnlyOffice JS": "pivotTable.AddDataField('Price');",
      "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Style');",
      "Excel VBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Style\")"
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('A12').SetValue('The Style field orientation');",
      "Excel VBA": "pivotWorksheet.Range(\"A12\").Value = \"The Style field orientation\""
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetOrientation());",
      "Excel VBA": "pivotWorksheet.Range(\"B12\").Value = pivotField.Orientation"
    }
  ]
}
``````json
{
  "description": "This script populates specific cells with data in an active worksheet, creates a pivot table from the defined data range on a new worksheet, and configures the pivot table by adding row fields and data fields.",
  "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();\n\noWorksheet.GetRange('B1').SetValue('Region');\noWorksheet.GetRange('C1').SetValue('Style');\noWorksheet.GetRange('D1').SetValue('Price');\n\noWorksheet.GetRange('B2').SetValue('East');\noWorksheet.GetRange('B3').SetValue('West');\noWorksheet.GetRange('B4').SetValue('East');\noWorksheet.GetRange('B5').SetValue('West');\n\noWorksheet.GetRange('C2').SetValue('Fancy');\noWorksheet.GetRange('C3').SetValue('Fancy');\noWorksheet.GetRange('C4').SetValue('Tee');\noWorksheet.GetRange('C5').SetValue('Tee');\n\noWorksheet.GetRange('D2').SetValue(42.5);\noWorksheet.GetRange('D3').SetValue(35.2);\noWorksheet.GetRange('D4').SetValue(12.3);\noWorksheet.GetRange('D5').SetValue(24.8);\n\nvar dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nvar pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nvar pivotWorksheet = Api.GetActiveSheet();\nvar pivotField = pivotTable.GetPivotFields('Style');\n\npivotField.GetParent().AddDataField('Region');",
  "Excel_VBA": "Sub CreatePivotTable()\n\tDim ws As Worksheet\n\tDim pivotWs As Worksheet\n\tDim dataRange As Range\n\tDim pivotCache As PivotCache\n\tDim pivotTable As PivotTable\n\n\tSet ws = ThisWorkbook.ActiveSheet\n\n\t' Set headers\n\tws.Range(\"B1\").Value = \"Region\"\n\tws.Range(\"C1\").Value = \"Style\"\n\tws.Range(\"D1\").Value = \"Price\"\n\n\t' Populate Region data\n\tws.Range(\"B2\").Value = \"East\"\n\tws.Range(\"B3\").Value = \"West\"\n\tws.Range(\"B4\").Value = \"East\"\n\tws.Range(\"B5\").Value = \"West\"\n\n\t' Populate Style data\n\tws.Range(\"C2\").Value = \"Fancy\"\n\tws.Range(\"C3\").Value = \"Fancy\"\n\tws.Range(\"C4\").Value = \"Tee\"\n\tws.Range(\"C5\").Value = \"Tee\"\n\n\t' Populate Price data\n\tws.Range(\"D2\").Value = 42.5\n\tws.Range(\"D3\").Value = 35.2\n\tws.Range(\"D4\").Value = 12.3\n\tws.Range(\"D5\").Value = 24.8\n\n\t' Define data range\n\tSet dataRange = ws.Range(\"B1:D5\")\n\n\t' Add a new worksheet for the Pivot Table\n\tSet pivotWs = ThisWorkbook.Worksheets.Add\n\tpivotWs.Name = \"PivotTableSheet\"\n\n\t' Create Pivot Cache\n\tSet pivotCache = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRange)\n\n\t' Create Pivot Table\n\tSet pivotTable = pivotCache.CreatePivotTable(TableDestination:=pivotWs.Range(\"A3\"), TableName:=\"PivotTable1\")\n\n\t' Add Row Fields\n\tWith pivotTable\n\t\t.PivotFields(\"Region\").Orientation = xlRowField\n\t\t.PivotFields(\"Style\").Orientation = xlRowField\n\t\t.PivotFields(\"Price\").Orientation = xlDataField\n\tEnd With\n\n\t' Add additional Data Field\n\tpivotTable.PivotFields(\"Region\").Orientation = xlDataField\n\tpivotTable.PivotFields(\"Region\").Function = xlCount\nEnd Sub"
}
``````json
{
  "table": [
    {
      "description": "Get the active worksheet",
      "onlyoffice_js": "var oWorksheet = Api.GetActiveSheet();",
      "vba": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "description": "Set header 'Region' in cell B1",
      "onlyoffice_js": "oWorksheet.GetRange('B1').SetValue('Region');",
      "vba": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "description": "Set header 'Style' in cell C1",
      "onlyoffice_js": "oWorksheet.GetRange('C1').SetValue('Style');",
      "vba": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "description": "Set header 'Price' in cell D1",
      "onlyoffice_js": "oWorksheet.GetRange('D1').SetValue('Price');",
      "vba": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "description": "Set value 'East' in cell B2",
      "onlyoffice_js": "oWorksheet.GetRange('B2').SetValue('East');",
      "vba": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "description": "Set value 'West' in cell B3",
      "onlyoffice_js": "oWorksheet.GetRange('B3').SetValue('West');",
      "vba": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "description": "Set value 'East' in cell B4",
      "onlyoffice_js": "oWorksheet.GetRange('B4').SetValue('East');",
      "vba": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "description": "Set value 'West' in cell B5",
      "onlyoffice_js": "oWorksheet.GetRange('B5').SetValue('West');",
      "vba": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "description": "Set value 'Fancy' in cell C2",
      "onlyoffice_js": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "vba": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "description": "Set value 'Fancy' in cell C3",
      "onlyoffice_js": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "vba": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "description": "Set value 'Tee' in cell C4",
      "onlyoffice_js": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "vba": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "description": "Set value 'Tee' in cell C5",
      "onlyoffice_js": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "vba": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "description": "Set value 42.5 in cell D2",
      "onlyoffice_js": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "vba": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "description": "Set value 35.2 in cell D3",
      "onlyoffice_js": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "vba": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "description": "Set value 12.3 in cell D4",
      "onlyoffice_js": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "vba": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "description": "Set value 24.8 in cell D5",
      "onlyoffice_js": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "vba": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "description": "Define the data range for the pivot table",
      "onlyoffice_js": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "vba": "Dim dataRef As Range\nSet dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "description": "Insert a new pivot table in a new worksheet",
      "onlyoffice_js": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "vba": "Dim pivotCache As PivotCache\nDim pivotTable As PivotTable\nSet pivotCache = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef)\nSet pivotTable = pivotCache.CreatePivotTable(TableDestination:=ThisWorkbook.Sheets.Add, TableName:=\"PivotTable1\")"
    },
    {
      "description": "Add 'Region' as row field and 'Style' as column field in the pivot table",
      "onlyoffice_js": "pivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});",
      "vba": "With pivotTable\n\t.AddFields RowFields:=Array(\"Region\"), ColumnFields:=Array(\"Style\")\nEnd With"
    },
    {
      "description": "Add 'Price' as data field in the pivot table",
      "onlyoffice_js": "pivotTable.AddDataField('Price');",
      "vba": "With pivotTable.PivotFields(\"Price\")\n\t.Orientation = xlDataField\n\t.Function = xlSum\n\t.Name = \"Sum of Price\"\nEnd With"
    },
    {
      "description": "Get the pivot field 'Region'",
      "onlyoffice_js": "var pivotField = pivotTable.GetPivotFields('Region');",
      "vba": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "description": "Retrieve pivot items from the 'Region' field",
      "onlyoffice_js": "var pivotItems = pivotField.GetPivotItems();",
      "vba": "Dim pivotItem As PivotItem\nDim pivotItems As Collection\nSet pivotItems = New Collection\nFor Each pivotItem In pivotField.PivotItems\n\tpivotItems.Add pivotItem\nNext pivotItem"
    },
    {
      "description": "Set header 'Region pivot items' in cell A10 of the pivot worksheet",
      "onlyoffice_js": "pivotWorksheet.GetRange('A10').SetValue('Region pivot items');",
      "vba": "pivotTable.Parent.Range(\"A10\").Value = \"Region pivot items\""
    },
    {
      "description": "List all pivot item names under 'Region pivot items' starting from A11",
      "onlyoffice_js": "for (var i = 0; i < pivotItems.length; i += 1) {\n\tpivotWorksheet.GetRangeByNumber(9 + i, 1).SetValue(pivotItems[i].GetName());\n}",
      "vba": "Dim i As Integer\nFor i = 1 To pivotItems.Count\n\tpivotTable.Parent.Cells(10 + i, 1).Value = pivotItems(i).Name\nNext i"
    }
  ]
}
``````json
{
  "RAG": [
    {
      "description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "description": "Set value 'Region' in cell B1",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "description": "Set value 'Style' in cell C1",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "description": "Set value 'Price' in cell D1",
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "description": "Set value 'East' in cell B2",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "description": "Set value 'West' in cell B3",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "description": "Set value 'East' in cell B4",
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "description": "Set value 'West' in cell B5",
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "description": "Set value 'Fancy' in cell C2",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "description": "Set value 'Fancy' in cell C3",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "description": "Set value 'Tee' in cell C4",
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "description": "Set value 'Tee' in cell C5",
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "description": "Set value 42.5 in cell D2",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "description": "Set value 35.2 in cell D3",
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "description": "Set value 12.3 in cell D4",
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "description": "Set value 24.8 in cell D5",
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "description": "Get data range B1:D5 from Sheet1",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Set dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "description": "Insert a new pivot table on a new worksheet using the data range",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Set pivotTable = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=Sheets.Add().Range(\"A1\"), TableName:=\"PivotTable1\")"
    },
    {
      "description": "Add 'Region' and 'Style' as row fields in the pivot table",
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'], });",
      "Excel_VBA": "With pivotTable.PivotFields(\"Region\")\n    .Orientation = xlRowField\n    .Position = 1\nEnd With\nWith pivotTable.PivotFields(\"Style\")\n    .Orientation = xlRowField\n    .Position = 2\nEnd With"
    },
    {
      "description": "Get the active sheet containing the pivot table",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "description": "Add 'Price' as a data field in the pivot table",
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "description": "Get the 'Style' pivot field",
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Style');",
      "Excel_VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")"
    },
    {
      "description": "Set value 'Style field position' in cell A12",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A12').SetValue('Style field position');",
      "Excel_VBA": "pivotWorksheet.Range(\"A12\").Value = \"Style field position\""
    },
    {
      "description": "Set the position of the 'Style' field in cell B12",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetPosition());",
      "Excel_VBA": "pivotWorksheet.Range(\"B12\").Value = pivotField.Position"
    }
  ]
}
``````json
{
  "Description": "This code sets up worksheet data, creates a pivot table, and modifies pivot field properties.",
  "CodeMappings": [
    {
      "VBA": "Set oWorksheet = ActiveSheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "VBA": "oWorksheet.Range(\"B1\").Value = \"Region\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');"
    },
    {
      "VBA": "oWorksheet.Range(\"C1\").Value = \"Style\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');"
    },
    {
      "VBA": "oWorksheet.Range(\"D1\").Value = \"Price\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');"
    },
    {
      "VBA": "oWorksheet.Range(\"B2\").Value = \"East\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');"
    },
    {
      "VBA": "oWorksheet.Range(\"B3\").Value = \"West\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');"
    },
    {
      "VBA": "oWorksheet.Range(\"B4\").Value = \"East\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');"
    },
    {
      "VBA": "oWorksheet.Range(\"B5\").Value = \"West\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');"
    },
    {
      "VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');"
    },
    {
      "VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');"
    },
    {
      "VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');"
    },
    {
      "VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');"
    },
    {
      "VBA": "oWorksheet.Range(\"D2\").Value = 42.5",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);"
    },
    {
      "VBA": "oWorksheet.Range(\"D3\").Value = 35.2",
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);"
    },
    {
      "VBA": "oWorksheet.Range(\"D4\").Value = 12.3",
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);"
    },
    {
      "VBA": "oWorksheet.Range(\"D5\").Value = 24.8",
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);"
    },
    {
      "VBA": "Set dataRef = oWorksheet.Range(\"B1:D5\")",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
    },
    {
      "VBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceData:=dataRef)",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
    },
    {
      "VBA": "With pivotTable",
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });"
    },
    {
      "VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\")",
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');"
    },
    {
      "VBA": "pivotTable.RowAxisLayout xlTabularRow",
      "OnlyOffice_JS": "pivotTable.SetRowAxisLayout('Tabular');"
    },
    {
      "VBA": "Set pivotWorksheet = pivotTable.Parent",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();"
    },
    {
      "VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")",
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');"
    },
    {
      "VBA": "pivotWorksheet.Range(\"A12\").Value = \"Region repeat labels\"",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A12').SetValue('Region repeat labels');"
    },
    {
      "VBA": "pivotWorksheet.Range(\"B12\").Value = pivotField.RepeatLabels",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetRepeatLabels());"
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "VBA": "Set oWorksheet = ActiveSheet",
    "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();"
  },
  {
    "Description": "Set value 'Region' in cell B1",
    "VBA": "oWorksheet.Range(\"B1\").Value = \"Region\"",
    "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');"
  },
  {
    "Description": "Set value 'Style' in cell C1",
    "VBA": "oWorksheet.Range(\"C1\").Value = \"Style\"",
    "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');"
  },
  {
    "Description": "Set value 'Price' in cell D1",
    "VBA": "oWorksheet.Range(\"D1\").Value = \"Price\"",
    "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');"
  },
  {
    "Description": "Set value 'East' in cell B2",
    "VBA": "oWorksheet.Range(\"B2\").Value = \"East\"",
    "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');"
  },
  {
    "Description": "Set value 'West' in cell B3",
    "VBA": "oWorksheet.Range(\"B3\").Value = \"West\"",
    "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');"
  },
  {
    "Description": "Set value 'East' in cell B4",
    "VBA": "oWorksheet.Range(\"B4\").Value = \"East\"",
    "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');"
  },
  {
    "Description": "Set value 'West' in cell B5",
    "VBA": "oWorksheet.Range(\"B5\").Value = \"West\"",
    "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');"
  },
  {
    "Description": "Set value 'Fancy' in cell C2",
    "VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\"",
    "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');"
  },
  {
    "Description": "Set value 'Tee' in cell C3",
    "VBA": "oWorksheet.Range(\"C3\").Value = \"Tee\"",
    "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Tee');"
  },
  {
    "Description": "Set value 'Tee' in cell C4",
    "VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\"",
    "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');"
  },
  {
    "Description": "Set value 'Tee' in cell C5",
    "VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\"",
    "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');"
  },
  {
    "Description": "Set value 42.5 in cell D2",
    "VBA": "oWorksheet.Range(\"D2\").Value = 42.5",
    "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);"
  },
  {
    "Description": "Set value 35.2 in cell D3",
    "VBA": "oWorksheet.Range(\"D3\").Value = 35.2",
    "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);"
  },
  {
    "Description": "Set value 12.3 in cell D4",
    "VBA": "oWorksheet.Range(\"D4\").Value = 12.3",
    "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);"
  },
  {
    "Description": "Set value 24.8 in cell D5",
    "VBA": "oWorksheet.Range(\"D5\").Value = 24.8",
    "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);"
  },
  {
    "Description": "Get range B1:D5 from Sheet1",
    "VBA": "Set dataRef = Sheets(\"Sheet1\").Range(\"B1:D5\")",
    "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
  },
  {
    "Description": "Insert a new pivot table worksheet based on dataRef",
    "VBA": "Set pivotTable = Worksheets.Add.PivotTable(TableDestination:=Range(\"A1\"), TableName:=\"PivotTable1\", SourceData:=dataRef)",
    "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
  },
  {
    "Description": "Add 'Region' and 'Style' as row fields in the pivot table",
    "VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With",
    "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });"
  },
  {
    "Description": "Add 'Price' as a data field in the pivot table",
    "VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum",
    "OnlyOffice JS": "pivotTable.AddDataField('Price');"
  },
  {
    "Description": "Get the active worksheet after inserting pivot table",
    "VBA": "Set pivotWorksheet = ActiveSheet",
    "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();"
  },
  {
    "Description": "Get the 'Style' pivot field",
    "VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")",
    "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Style');"
  },
  {
    "Description": "Set value 'Style get show all items' in cell A12",
    "VBA": "pivotWorksheet.Range(\"A12\").Value = \"Style get show all items\"",
    "OnlyOffice JS": "pivotWorksheet.GetRange('A12').SetValue('Style get show all items');"
  },
  {
    "Description": "Set the value of whether all items are shown for 'Style' in cell B12",
    "VBA": "pivotWorksheet.Range(\"B12\").Value = pivotField.ShowAllItems",
    "OnlyOffice JS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetShowAllItems());"
  }
]
``````json
{
  "Description": "Equivalent Excel VBA methods for the provided OnlyOffice JS API methods.",
  "Methods": [
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "VBA": "Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "VBA": "Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "VBA": "Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');",
      "VBA": "Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('B3').SetValue('West');",
      "VBA": "Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('B4').SetValue('East');",
      "VBA": "Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('B5').SetValue('West');",
      "VBA": "Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "VBA": "Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "VBA": "Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "VBA": "Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "VBA": "Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "VBA": "Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "VBA": "Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "VBA": "Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "VBA": "Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "VBA": "Set dataRef = Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "VBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "OnlyOfficeJS": "pivotTable.AddFields({ rows: ['Region'], });",
      "VBA": "With pivotTable.PivotFields(\"Region\")\n  .Orientation = xlRowField\n  .Position = 1\nEnd With"
    },
    {
      "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
      "VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();",
      "VBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "OnlyOfficeJS": "pivotWorksheet.GetRange('A12').SetValue('Region showing in axis');",
      "VBA": "Range(\"A12\").Value = \"Region showing in axis\""
    },
    {
      "OnlyOfficeJS": "pivotWorksheet.GetRange('B12').SetValue(pivotTable.GetPivotFields('Region').GetShowingInAxis());",
      "VBA": "Range(\"B12\").Value = pivotTable.PivotFields(\"Region\").Orientation = xlRowField"
    },
    {
      "OnlyOfficeJS": "pivotWorksheet.GetRange('A13').SetValue('Style showing in axis');",
      "VBA": "Range(\"A13\").Value = \"Style showing in axis\""
    },
    {
      "OnlyOfficeJS": "pivotWorksheet.GetRange('B13').SetValue(pivotTable.GetPivotFields('Style').GetShowingInAxis());",
      "VBA": "Range(\"B13\").Value = pivotTable.PivotFields(\"Style\").Orientation = xlRowField"
    }
  ]
}
```**Description:**  
This code manipulates the active worksheet, sets cell values, creates a pivot table, and modifies pivot fields.

```json
{
  "table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Set dataRef = ActiveWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Set pivotTable = ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=ActiveWorkbook.Sheets.Add().Range(\"A1\"))"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "Excel_VBA": "With pivotTable.PivotFields(\"Region\")\n    .Orientation = xlRowField\nEnd With\nWith pivotTable.PivotFields(\"Style\")\n    .Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice_JS": "pivotTable.SetRowAxisLayout(\"Tabular\", false);",
      "Excel_VBA": "pivotTable.RowAxisLayout xlTabularRow"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set pivotWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Style');",
      "Excel_VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")"
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A12').SetValue('Style field value');",
      "Excel_VBA": "pivotWorksheet.Range(\"A12\").Value = \"Style field value\""
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetName());",
      "Excel_VBA": "pivotWorksheet.Range(\"B12\").Value = pivotField.Name"
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A14').SetValue('New Style field name');",
      "Excel_VBA": "pivotWorksheet.Range(\"A14\").Value = \"New Style field name\""
    },
    {
      "OnlyOffice_JS": "pivotField.SetName('My name');",
      "Excel_VBA": "pivotField.Name = \"My name\""
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B14').SetValue(pivotField.GetName());",
      "Excel_VBA": "pivotWorksheet.Range(\"B14\").Value = pivotField.Name"
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A15').SetValue('Source Style field name');",
      "Excel_VBA": "pivotWorksheet.Range(\"A15\").Value = \"Source Style field name\""
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B15').SetValue(pivotField.GetSourceName());",
      "Excel_VBA": "pivotWorksheet.Range(\"B15\").Value = pivotField.SourceName"
    }
  ]
}
``````json
{
  "RAG_table": [
    {
      "Description": "Get active sheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set value 'Region' in cell B1",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "Range(\"B1\").Value = \"Region\""
    },
    {
      "Description": "Set value 'Style' in cell C1",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "Range(\"C1\").Value = \"Style\""
    },
    {
      "Description": "Set value 'Price' in cell D1",
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "Range(\"D1\").Value = \"Price\""
    },
    {
      "Description": "Set value 'East' in cell B2",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "Range(\"B2\").Value = \"East\""
    },
    {
      "Description": "Set value 'West' in cell B3",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "Range(\"B3\").Value = \"West\""
    },
    {
      "Description": "Set value 'East' in cell B4",
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "Range(\"B4\").Value = \"East\""
    },
    {
      "Description": "Set value 'West' in cell B5",
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "Range(\"B5\").Value = \"West\""
    },
    {
      "Description": "Set value 'Fancy' in cell C2",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "Range(\"C2\").Value = \"Fancy\""
    },
    {
      "Description": "Set value 'Fancy' in cell C3",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "Range(\"C3\").Value = \"Fancy\""
    },
    {
      "Description": "Set value 'Tee' in cell C4",
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "Range(\"C4\").Value = \"Tee\""
    },
    {
      "Description": "Set value 'Tee' in cell C5",
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "Range(\"C5\").Value = \"Tee\""
    },
    {
      "Description": "Set value 42.5 in cell D2",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "Range(\"D2\").Value = 42.5"
    },
    {
      "Description": "Set value 35.2 in cell D3",
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "Range(\"D3\").Value = 35.2"
    },
    {
      "Description": "Set value 12.3 in cell D4",
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "Range(\"D4\").Value = 12.3"
    },
    {
      "Description": "Set value 24.8 in cell D5",
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "Range(\"D5\").Value = 24.8"
    },
    {
      "Description": "Get range B1:D5 from Sheet1",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "Description": "Insert pivot table on a new worksheet using dataRef",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Set pivotTable = ActiveWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef, TableDestination:=Sheets.Add)"
    },
    {
      "Description": "Add 'Region' and 'Style' as column fields in pivot table",
      "OnlyOffice_JS": "pivotTable.AddFields({ columns: ['Region', 'Style'] });",
      "Excel_VBA": "With pivotTable.PivotFields(\"Region\")\n    .Orientation = xlColumnField\nEnd With\nWith pivotTable.PivotFields(\"Style\")\n    .Orientation = xlColumnField\nEnd With"
    },
    {
      "Description": "Add 'Price' as data field in pivot table",
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "With pivotTable.PivotFields(\"Price\")\n    .Orientation = xlDataField\n    .Function = xlSum\nEnd With"
    },
    {
      "Description": "Get active sheet for pivot table",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "Description": "Get 'Region' pivot field",
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "Excel_VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "Description": "Set subtotal name for 'Region' pivot field",
      "OnlyOffice_JS": "pivotField.SetSubtotalName('My name');",
      "Excel_VBA": "pivotField.Subtotals(1) = \"My name\""
    },
    {
      "Description": "Set value 'Region subtotal name' in cell A14",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A14').SetValue('Region subtotal name');",
      "Excel_VBA": "Range(\"A14\").Value = \"Region subtotal name\""
    },
    {
      "Description": "Set subtotal name in cell B14",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B14').SetValue(pivotField.GetSubtotalName());",
      "Excel_VBA": "Range(\"B14\").Value = pivotField.Subtotals(1)"
    }
  ]
}
``````json
{
  "Table": [
    {
      "Description": "Get the active worksheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "Description": "Set value of cell B1 to 'Region'",
      "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "ExcelVBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "Description": "Set value of cell C1 to 'Style'",
      "OnlyOfficeJS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "ExcelVBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "Description": "Set value of cell D1 to 'Price'",
      "OnlyOfficeJS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "ExcelVBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "Description": "Set value of cell B2 to 'East'",
      "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');",
      "ExcelVBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "Description": "Set value of cell B3 to 'West'",
      "OnlyOfficeJS": "oWorksheet.GetRange('B3').SetValue('West');",
      "ExcelVBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "Description": "Set value of cell B4 to 'East'",
      "OnlyOfficeJS": "oWorksheet.GetRange('B4').SetValue('East');",
      "ExcelVBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "Description": "Set value of cell B5 to 'West'",
      "OnlyOfficeJS": "oWorksheet.GetRange('B5').SetValue('West');",
      "ExcelVBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "Description": "Set value of cell C2 to 'Fancy'",
      "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "ExcelVBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "Description": "Set value of cell C3 to 'Fancy'",
      "OnlyOfficeJS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "ExcelVBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "Description": "Set value of cell C4 to 'Tee'",
      "OnlyOfficeJS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "ExcelVBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "Description": "Set value of cell C5 to 'Tee'",
      "OnlyOfficeJS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "ExcelVBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "Description": "Set value of cell D2 to 42.5",
      "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "ExcelVBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "Description": "Set value of cell D3 to 35.2",
      "OnlyOfficeJS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "ExcelVBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "Description": "Set value of cell D4 to 12.3",
      "OnlyOfficeJS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "ExcelVBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "Description": "Set value of cell D5 to 24.8",
      "OnlyOfficeJS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "ExcelVBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "Description": "Get range B1:D5 from Sheet1",
      "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "ExcelVBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "Description": "Insert a new pivot table worksheet using dataRef",
      "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "ExcelVBA": "Set pivotTable = ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=Sheets.Add().Range(\"A3\"), TableName:=\"PivotTable1\")"
    },
    {
      "Description": "Add 'Style' as column field and 'Region' as row field to the pivot table",
      "OnlyOfficeJS": "pivotTable.AddFields({ columns: ['Style'], rows: 'Region' });",
      "ExcelVBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlColumnField\nEnd With"
    },
    {
      "Description": "Add 'Price' as data field to the pivot table",
      "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
      "ExcelVBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "Description": "Get the active worksheet for the pivot table",
      "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "Description": "Get the 'Region' pivot field",
      "OnlyOfficeJS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "ExcelVBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "Description": "Get subtotals of the 'Region' pivot field",
      "OnlyOfficeJS": "var subtotals = pivotField.GetSubtotals();",
      "ExcelVBA": "subtotals = pivotField.Subtotals"
    },
    {
      "Description": "Set value of cell A11 to 'Region subtotals'",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('A11').SetValue('Region subtotals');",
      "ExcelVBA": "pivotWorksheet.Range(\"A11\").Value = \"Region subtotals\""
    },
    {
      "Description": "Loop through subtotals and set values starting from row 12",
      "OnlyOfficeJS": "let k = 12;\nfor (var i in subtotals) {\n    pivotWorksheet.GetRangeByNumber(k, 0).SetValue(i);\n    pivotWorksheet.GetRangeByNumber(k++, 1).SetValue(subtotals[i]);\n}",
      "ExcelVBA": "Dim k As Integer\nk = 12\nFor Each key In subtotals.Keys\n    pivotWorksheet.Cells(k, 1).Value = key\n    pivotWorksheet.Cells(k, 2).Value = subtotals(key)\n    k = k + 1\nNext key"
    }
  ]
}
``````json
{
  "description": "This code sets specific values in cells B1:D5 on the active worksheet and creates a pivot table based on that data, organizing it by 'Region' and 'Style' with 'Price' as the data field.",
  "methodMappings": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Dim dataRef As Range\nSet dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Dim pivotTable As PivotTable\nSet pivotTable = ThisWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef, TableDestination:=ActiveWorkbook.Sheets.Add.Name)"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Style');",
      "Excel_VBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Style\")"
    },
    {
      "OnlyOffice_JS": "pivotField.GetTable().AddDataField('Region');",
      "Excel_VBA": "pivotField.PivotTable.AddDataField pivotField.PivotTable.PivotFields(\"Region\"), \"Sum of Region\", xlSum"
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel VBA": "Set oWorksheet = ActiveSheet"
  },
  {
    "Description": "Set value 'Region' in cell B1",
    "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
    "Excel VBA": "Range(\"B1\").Value = \"Region\""
  },
  {
    "Description": "Set value 'Style' in cell C1",
    "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
    "Excel VBA": "Range(\"C1\").Value = \"Style\""
  },
  {
    "Description": "Set value 'Price' in cell D1",
    "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
    "Excel VBA": "Range(\"D1\").Value = \"Price\""
  },
  {
    "Description": "Set value 'East' in cell B2",
    "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
    "Excel VBA": "Range(\"B2\").Value = \"East\""
  },
  {
    "Description": "Set value 'West' in cell B3",
    "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
    "Excel VBA": "Range(\"B3\").Value = \"West\""
  },
  {
    "Description": "Set value 'East' in cell B4",
    "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
    "Excel VBA": "Range(\"B4\").Value = \"East\""
  },
  {
    "Description": "Set value 'West' in cell B5",
    "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
    "Excel VBA": "Range(\"B5\").Value = \"West\""
  },
  {
    "Description": "Set value 'Fancy' in cell C2",
    "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
    "Excel VBA": "Range(\"C2\").Value = \"Fancy\""
  },
  {
    "Description": "Set value 'Fancy' in cell C3",
    "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
    "Excel VBA": "Range(\"C3\").Value = \"Fancy\""
  },
  {
    "Description": "Set value 'Tee' in cell C4",
    "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
    "Excel VBA": "Range(\"C4\").Value = \"Tee\""
  },
  {
    "Description": "Set value 'Tee' in cell C5",
    "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
    "Excel VBA": "Range(\"C5\").Value = \"Tee\""
  },
  {
    "Description": "Set value 42.5 in cell D2",
    "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
    "Excel VBA": "Range(\"D2\").Value = 42.5"
  },
  {
    "Description": "Set value 35.2 in cell D3",
    "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
    "Excel VBA": "Range(\"D3\").Value = 35.2"
  },
  {
    "Description": "Set value 12.3 in cell D4",
    "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
    "Excel VBA": "Range(\"D4\").Value = 12.3"
  },
  {
    "Description": "Set value 24.8 in cell D5",
    "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
    "Excel VBA": "Range(\"D5\").Value = 24.8"
  },
  {
    "Description": "Get the data range B1:D5 from Sheet1",
    "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "Excel VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
  },
  {
    "Description": "Insert a new pivot table worksheet based on the data range",
    "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "Excel VBA": "Set pivotTable = Worksheets.Add(PivotTable:=dataRef)"
  },
  {
    "Description": "Add 'Region' and 'Style' as row fields in the pivot table",
    "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
    "Excel VBA": "With pivotTable.PivotFields(\"Region\")\n    .Orientation = xlRowField\nEnd With\nWith pivotTable.PivotFields(\"Style\")\n    .Orientation = xlRowField\nEnd With"
  },
  {
    "Description": "Add 'Price' as a data field in the pivot table",
    "OnlyOffice JS": "pivotTable.AddDataField('Price');",
    "Excel VBA": "With pivotTable.PivotFields(\"Price\")\n    .Orientation = xlDataField\n    .Function = xlSum\nEnd With"
  },
  {
    "Description": "Get the active worksheet (pivot table sheet)",
    "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
    "Excel VBA": "Set pivotWorksheet = ActiveSheet"
  },
  {
    "Description": "Get the pivot field 'Style'",
    "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Style');",
    "Excel VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")"
  },
  {
    "Description": "Set value 'The Style field value' in cell A12",
    "OnlyOffice JS": "pivotWorksheet.GetRange('A12').SetValue('The Style field value');",
    "Excel VBA": "Range(\"A12\").Value = \"The Style field value\""
  },
  {
    "Description": "Set the value of the 'Style' pivot field in cell B12",
    "OnlyOffice JS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetValue());",
    "Excel VBA": "Range(\"B12\").Value = pivotField.CurrentPage"
  }
]
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
  },
  {
    "Description": "Set header value for cell B1 to 'Region'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
    "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
  },
  {
    "Description": "Set header value for cell C1 to 'Style'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
    "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
  },
  {
    "Description": "Set header value for cell D1 to 'Price'",
    "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
    "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
  },
  {
    "Description": "Set value 'East' in cell B2",
    "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
    "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
  },
  {
    "Description": "Set value 'West' in cell B3",
    "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
    "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
  },
  {
    "Description": "Set value 'East' in cell B4",
    "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
    "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
  },
  {
    "Description": "Set value 'West' in cell B5",
    "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
    "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
  },
  {
    "Description": "Set value 'Fancy' in cell C2",
    "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
    "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
  },
  {
    "Description": "Set value 'Fancy' in cell C3",
    "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
    "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
  },
  {
    "Description": "Set value 'Tee' in cell C4",
    "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
    "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
  },
  {
    "Description": "Set value 'Tee' in cell C5",
    "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
    "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
  },
  {
    "Description": "Set value 42.5 in cell D2",
    "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
    "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
  },
  {
    "Description": "Set value 35.2 in cell D3",
    "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
    "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
  },
  {
    "Description": "Set value 12.3 in cell D4",
    "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
    "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
  },
  {
    "Description": "Set value 24.8 in cell D5",
    "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
    "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
  },
  {
    "Description": "Get the data range from B1 to D5 on Sheet1",
    "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "Excel_VBA": "Dim dataRef As Range\nSet dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
  },
  {
    "Description": "Insert a new pivot table worksheet based on the data range",
    "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "Excel_VBA": "Dim pivotTable As PivotTable\nDim pivotSheet As Worksheet\nSet pivotSheet = ThisWorkbook.Sheets.Add\nSet pivotTable = pivotSheet.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
  },
  {
    "Description": "Add 'Region' as row field and 'Style' as column field to the pivot table",
    "OnlyOffice_JS": "pivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});",
    "Excel_VBA": "With pivotTable\n\t.PivotFields(\"Region\").Orientation = xlRowField\n\t.PivotFields(\"Style\").Orientation = xlColumnField\nEnd With"
  },
  {
    "Description": "Add 'Price' as a data field to the pivot table",
    "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
    "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
  },
  {
    "Description": "Get the pivot worksheet",
    "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ThisWorkbook.ActiveSheet"
  },
  {
    "Description": "Clear all filters on the 'Region' pivot field",
    "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');\npivotField.ClearAllFilters();",
    "Excel_VBA": "With pivotTable.PivotFields(\"Region\")\n\t.ClearAllFilters\nEnd With"
  }
]
``````json
[
  {
    "Get Active Sheet": {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    }
  },
  {
    "Set Value in Cell B1": {
      "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    }
  },
  {
    "Set Value in Cell C1": {
      "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    }
  },
  {
    "Set Value in Cell D1": {
      "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    }
  },
  {
    "Set Value in Cell B2": {
      "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    }
  },
  {
    "Set Value in Cell B3": {
      "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    }
  },
  {
    "Set Value in Cell B4": {
      "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    }
  },
  {
    "Set Value in Cell B5": {
      "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    }
  },
  {
    "Set Value in Cell C2": {
      "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    }
  },
  {
    "Set Value in Cell C3": {
      "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    }
  },
  {
    "Set Value in Cell C4": {
      "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    }
  },
  {
    "Set Value in Cell C5": {
      "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    }
  },
  {
    "Set Value in Cell D2": {
      "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    }
  },
  {
    "Set Value in Cell D3": {
      "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    }
  },
  {
    "Set Value in Cell D4": {
      "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    }
  },
  {
    "Set Value in Cell D5": {
      "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    }
  },
  {
    "Get Data Range": {
      "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "VBA": "Dim dataRef As Range\nSet dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
    }
  },
  {
    "Insert Pivot Table": {
      "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "VBA": "Dim pivotCache As PivotCache\nDim pivotTable As PivotTable\nDim pivotSheet As Worksheet\nSet pivotCache = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef)\nSet pivotSheet = ThisWorkbook.Worksheets.Add\nSet pivotTable = pivotCache.CreatePivotTable(TableDestination:=pivotSheet.Range(\"A1\"), TableName:=\"PivotTable1\")"
    }
  },
  {
    "Add Fields to Pivot Table": {
      "OnlyOffice JS": "pivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});",
      "VBA": "With pivotTable\n\t.PivotFields(\"Region\").Orientation = xlRowField\n\t.PivotFields(\"Style\").Orientation = xlColumnField\nEnd With"
    }
  },
  {
    "Add Data Field to Pivot Table": {
      "OnlyOffice JS": "pivotTable.AddDataField('Price');",
      "VBA": "With pivotTable\n\t.PivotFields(\"Price\").Orientation = xlDataField\n\t.PivotFields(\"Price\").Function = xlSum\nEnd With"
    }
  },
  {
    "Get Active Sheet (Pivot Worksheet)": {
      "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ThisWorkbook.ActiveSheet"
    }
  },
  {
    "Clear Label Filters on Pivot Field 'Region'": {
      "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Region');\npivotField.ClearLabelFilters();",
      "VBA": "pivotTable.PivotFields(\"Region\").ClearAllFilters"
    }
  }
]
``````json
{
  "Description": "Mapping OnlyOffice API methods to their Excel VBA equivalents for setting cell values, creating a pivot table, adding fields, and modifying pivot fields.",
  "Mappings": [
    {
      "Action": "Get Active Sheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Action": "Set value in cell B1",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "Action": "Set value in cell C1",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "Action": "Set value in cell D1",
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "Action": "Set value in cell B2",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "Action": "Set value in cell B3",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "Action": "Set value in cell B4",
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "Action": "Set value in cell B5",
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "Action": "Set value in cell C2",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "Action": "Set value in cell C3",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "Action": "Set value in cell C4",
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "Action": "Set value in cell C5",
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "Action": "Set value in cell D2",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "Action": "Set value in cell D3",
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "Action": "Set value in cell D4",
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "Action": "Set value in cell D5",
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "Action": "Get data range",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Set dataRef = oWorksheet.Range(\"$B$1:$D$5\")"
    },
    {
      "Action": "Insert pivot table in new worksheet",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Set pivotWorksheet = ThisWorkbook.Worksheets.Add\nSet pivotTable = pivotWorksheet.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "Action": "Add row and column fields to pivot table",
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: 'Region', columns: 'Style', });",
      "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlColumnField\nEnd With"
    },
    {
      "Action": "Add data field to pivot table",
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "Action": "Get active sheet after pivot creation",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set pivotWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Action": "Get pivot field 'Region'",
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "Excel_VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "Action": "Clear manual filters on 'Region' pivot field",
      "OnlyOffice_JS": "pivotField.ClearManualFilters();",
      "Excel_VBA": "pivotField.ClearAllFilters"
    }
  ]
}
``````json
{
  "RAGTable": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set value of cell B1 to 'Region'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "Description": "Set value of cell C1 to 'Style'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "Description": "Set value of cell D1 to 'Price'",
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "Description": "Set value of cell B2 to 'East'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "Description": "Set value of cell B3 to 'West'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "Description": "Set value of cell B4 to 'East'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "Description": "Set value of cell B5 to 'West'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "Description": "Set value of cell C2 to 'Fancy'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "Description": "Set value of cell C3 to 'Fancy'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "Description": "Set value of cell C4 to 'Tee'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "Description": "Set value of cell C5 to 'Tee'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "Description": "Set value of cell D2 to 42.5",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "Description": "Set value of cell D3 to 35.2",
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "Description": "Set value of cell D4 to 12.3",
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "Description": "Set value of cell D5 to 24.8",
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "Description": "Get data range B1:D5 from Sheet1",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "Description": "Insert pivot table in a new worksheet using the data range",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Set pivotTable = ActiveWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "Description": "Add 'Region' as rows and 'Style' as columns in the pivot table",
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: 'Region', columns: 'Style', });",
      "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlColumnField\nEnd With"
    },
    {
      "Description": "Add 'Price' as the data field in the pivot table",
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
    },
    {
      "Description": "Get the active worksheet after inserting the pivot table",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "Description": "Get the 'Region' pivot field from the pivot table",
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "Excel_VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "Description": "Clear value filters on the 'Region' pivot field",
      "OnlyOffice_JS": "pivotField.ClearValueFilters();",
      "Excel_VBA": "pivotField.ClearAllFilters"
    }
  ]
}
``````json
{
  "RAG_Table": [
    {
      "Description": "Get the active worksheet.",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set the value of cell B1 to 'Region'.",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "Range(\"B1\").Value = \"Region\""
    },
    {
      "Description": "Set the value of cell C1 to 'Style'.",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "Range(\"C1\").Value = \"Style\""
    },
    {
      "Description": "Set the value of cell D1 to 'Price'.",
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "Range(\"D1\").Value = \"Price\""
    },
    {
      "Description": "Set the value of cell B2 to 'East'.",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "Range(\"B2\").Value = \"East\""
    },
    {
      "Description": "Set the value of cell B3 to 'West'.",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "Range(\"B3\").Value = \"West\""
    },
    {
      "Description": "Set the value of cell B4 to 'East'.",
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "Range(\"B4\").Value = \"East\""
    },
    {
      "Description": "Set the value of cell B5 to 'West'.",
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "Range(\"B5\").Value = \"West\""
    },
    {
      "Description": "Set the value of cell C2 to 'Fancy'.",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "Range(\"C2\").Value = \"Fancy\""
    },
    {
      "Description": "Set the value of cell C3 to 'Fancy'.",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "Range(\"C3\").Value = \"Fancy\""
    },
    {
      "Description": "Set the value of cell C4 to 'Tee'.",
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "Range(\"C4\").Value = \"Tee\""
    },
    {
      "Description": "Set the value of cell C5 to 'Tee'.",
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "Range(\"C5\").Value = \"Tee\""
    },
    {
      "Description": "Set the value of cell D2 to 42.5.",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "Range(\"D2\").Value = 42.5"
    },
    {
      "Description": "Set the value of cell D3 to 35.2.",
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "Range(\"D3\").Value = 35.2"
    },
    {
      "Description": "Set the value of cell D4 to 12.3.",
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "Range(\"D4\").Value = 12.3"
    },
    {
      "Description": "Set the value of cell D5 to 24.8.",
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "Range(\"D5\").Value = 24.8"
    },
    {
      "Description": "Get the range B1 to D5 from Sheet1.",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "Description": "Insert a new pivot table on a new worksheet using the specified range.",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Set pivotTable = Worksheets.Add.PivotTables.Add(SourceData:=dataRef, TableDestination:=ActiveSheet.Range(\"A1\"), TableName:=\"PivotTable1\")"
    },
    {
      "Description": "Add 'Region' and 'Style' as row fields in the pivot table.",
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "Description": "Add 'Price' as a data field in the pivot table.",
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "Description": "Get the active worksheet (pivot worksheet).",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "Description": "Get the 'Style' pivot field from the pivot table.",
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Style');",
      "Excel_VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")"
    },
    {
      "Description": "Set the value of cell A12 to 'The Style field caption'.",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A12').SetValue('The Style field caption');",
      "Excel_VBA": "Range(\"A12\").Value = \"The Style field caption\""
    },
    {
      "Description": "Set the value of cell B12 to the caption of the 'Style' pivot field.",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetCaption());",
      "Excel_VBA": "Range(\"B12\").Value = pivotField.Caption"
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
    "ExcelVBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
  },
  {
    "Description": "Set header values in B1, C1, D1",
    "OnlyOfficeJS": "\n oWorksheet.GetRange('B1').SetValue('Region');\n oWorksheet.GetRange('C1').SetValue('Style');\n oWorksheet.GetRange('D1').SetValue('Price');",
    "ExcelVBA": "With oWorksheet\n    .Range(\"B1\").Value = \"Region\"\n    .Range(\"C1\").Value = \"Style\"\n    .Range(\"D1\").Value = \"Price\"\nEnd With"
  },
  {
    "Description": "Set data values in column B (B2:B5)",
    "OnlyOfficeJS": "\n oWorksheet.GetRange('B2').SetValue('East');\n oWorksheet.GetRange('B3').SetValue('West');\n oWorksheet.GetRange('B4').SetValue('East');\n oWorksheet.GetRange('B5').SetValue('West');",
    "ExcelVBA": "With oWorksheet\n    .Range(\"B2\").Value = \"East\"\n    .Range(\"B3\").Value = \"West\"\n    .Range(\"B4\").Value = \"East\"\n    .Range(\"B5\").Value = \"West\"\nEnd With"
  },
  {
    "Description": "Set data values in column C (C2:C5)",
    "OnlyOfficeJS": "\n oWorksheet.GetRange('C2').SetValue('Fancy');\n oWorksheet.GetRange('C3').SetValue('Fancy');\n oWorksheet.GetRange('C4').SetValue('Tee');\n oWorksheet.GetRange('C5').SetValue('Tee');",
    "ExcelVBA": "With oWorksheet\n    .Range(\"C2\").Value = \"Fancy\"\n    .Range(\"C3\").Value = \"Fancy\"\n    .Range(\"C4\").Value = \"Tee\"\n    .Range(\"C5\").Value = \"Tee\"\nEnd With"
  },
  {
    "Description": "Set data values in column D (D2:D5)",
    "OnlyOfficeJS": "\n oWorksheet.GetRange('D2').SetValue(42.5);\n oWorksheet.GetRange('D3').SetValue(35.2);\n oWorksheet.GetRange('D4').SetValue(12.3);\n oWorksheet.GetRange('D5').SetValue(24.8);",
    "ExcelVBA": "With oWorksheet\n    .Range(\"D2\").Value = 42.5\n    .Range(\"D3\").Value = 35.2\n    .Range(\"D4\").Value = 12.3\n    .Range(\"D5\").Value = 24.8\nEnd With"
  },
  {
    "Description": "Get the data range B1:D5",
    "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "ExcelVBA": "Dim dataRef As Range\nSet dataRef = oWorksheet.Range(\"B1:D5\")"
  },
  {
    "Description": "Insert a new pivot table in a new worksheet",
    "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "ExcelVBA": "Dim pivotTable As PivotTable\nDim pivotSheet As Worksheet\nSet pivotSheet = Worksheets.Add\nSet pivotTable = pivotSheet.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
  },
  {
    "Description": "Add fields to the pivot table (Pages: Style, Rows: Region)",
    "OnlyOfficeJS": "\n pivotTable.AddFields({\n\tpages: ['Style'],\n\trows: 'Region',\n});",
    "ExcelVBA": "With pivotTable\n    .PivotFields(\"Style\").Orientation = xlPageField\n    .PivotFields(\"Region\").Orientation = xlRowField\nEnd With"
  },
  {
    "Description": "Add data field 'Style' to the pivot table",
    "OnlyOfficeJS": "pivotTable.AddDataField('Style');",
    "ExcelVBA": "With pivotTable\n    .AddDataField .PivotFields(\"Style\"), \"Sum of Style\", xlSum\nEnd With"
  },
  {
    "Description": "Get the active pivot worksheet and the 'Style' pivot field",
    "OnlyOfficeJS": "\n var pivotWorksheet = Api.GetActiveSheet();\n var pivotField = pivotTable.GetPivotFields('Style');",
    "ExcelVBA": "Set pivotSheet = ActiveSheet\nDim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Style\")"
  },
  {
    "Description": "Set 'Current Page' and its value in cells A13 and B13",
    "OnlyOfficeJS": "\n pivotWorksheet.GetRange('A13').SetValue('Current Page');\n pivotWorksheet.GetRange('B13').SetValue(pivotField.GetCurrentPage());",
    "ExcelVBA": "With pivotSheet\n    .Range(\"A13\").Value = \"Current Page\"\n    .Range(\"B13\").Value = pivotField.CurrentPage\nEnd With"
  }
]
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel VBA": "Set oWorksheet = ActiveSheet"
  },
  {
    "Description": "Set value of cell B1 to 'Region'",
    "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
    "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
  },
  {
    "Description": "Set value of cell C1 to 'Style'",
    "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
    "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
  },
  {
    "Description": "Set value of cell D1 to 'Price'",
    "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
    "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
  },
  {
    "Description": "Set value of cell B2 to 'East'",
    "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
    "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
  },
  {
    "Description": "Set value of cell B3 to 'West'",
    "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
    "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
  },
  {
    "Description": "Set value of cell B4 to 'East'",
    "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
    "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
  },
  {
    "Description": "Set value of cell B5 to 'West'",
    "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
    "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
  },
  {
    "Description": "Set value of cell C2 to 'Fancy'",
    "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
    "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
  },
  {
    "Description": "Set value of cell C3 to 'Fancy'",
    "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
    "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
  },
  {
    "Description": "Set value of cell C4 to 'Tee'",
    "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
    "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
  },
  {
    "Description": "Set value of cell C5 to 'Tee'",
    "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
    "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
  },
  {
    "Description": "Set value of cell D2 to 42.5",
    "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
    "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
  },
  {
    "Description": "Set value of cell D3 to 35.2",
    "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
    "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
  },
  {
    "Description": "Set value of cell D4 to 12.3",
    "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
    "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
  },
  {
    "Description": "Set value of cell D5 to 24.8",
    "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
    "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
  },
  {
    "Description": "Get range B1:D5 from Sheet1",
    "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "Excel VBA": "Set dataRef = Sheets(\"Sheet1\").Range(\"B1:D5\")"
  },
  {
    "Description": "Insert a new pivot table worksheet based on dataRef",
    "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "Excel VBA": "Set pivotTable = Sheets.Add().PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
  },
  {
    "Description": "Add 'Style' to columns and 'Region' to rows in pivot table",
    "OnlyOffice JS": "pivotTable.AddFields({\n    columns: ['Style'],\n    rows: 'Region',\n});",
    "Excel VBA": "With pivotTable\n    .PivotFields(\"Style\").Orientation = xlColumnField\n    .PivotFields(\"Region\").Orientation = xlRowField\nEnd With"
  },
  {
    "Description": "Add 'Price' as data field in pivot table",
    "OnlyOffice JS": "pivotTable.AddDataField('Price');",
    "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
  },
  {
    "Description": "Get the active worksheet after pivot table insertion",
    "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
    "Excel VBA": "Set pivotWorksheet = ActiveSheet"
  },
  {
    "Description": "Get the 'Region' pivot field",
    "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Region');",
    "Excel VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
  },
  {
    "Description": "Set value of cell A13 to 'Drag to column'",
    "OnlyOffice JS": "pivotWorksheet.GetRange('A13').SetValue('Drag to column');",
    "Excel VBA": "pivotWorksheet.Range(\"A13\").Value = \"Drag to column\""
  },
  {
    "Description": "Set value of cell B13 to the 'DragToColumn' property of the 'Region' pivot field",
    "OnlyOffice JS": "pivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToColumn());",
    "Excel VBA": "pivotWorksheet.Range(\"B13\").Value = pivotField.Orientation = xlColumnField"
  }
]
``````json
{
  "description": "This script initializes the active worksheet, sets values to specific ranges, creates a pivot table from the data, adds row and column fields, adds data fields to the pivot table, and sets values in the pivot worksheet.",
  "code_mappings": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Set dataRef = ActiveWorkbook.Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Set pivotTable = ActiveWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Style'], columns: 'Region', });",
      "Excel_VBA": "With pivotTable\n    .PivotFields(\"Style\").Orientation = xlRowField\n    .PivotFields(\"Region\").Orientation = xlColumnField\nEnd With"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
    },
    {
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set pivotWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "Excel_VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A13').SetValue('Drag to data');",
      "Excel_VBA": "pivotWorksheet.Range(\"A13\").Value = \"Drag to data\""
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToData());",
      "Excel_VBA": "pivotWorksheet.Range(\"B13\").Value = pivotField.DataRange.Value"
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
    "VBA": "Set oWorksheet = ActiveSheet"
  },
  {
    "Description": "Set cell B1 to 'Region'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
    "VBA": "Range(\"B1\").Value = \"Region\""
  },
  {
    "Description": "Set cell C1 to 'Style'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
    "VBA": "Range(\"C1\").Value = \"Style\""
  },
  {
    "Description": "Set cell D1 to 'Price'",
    "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
    "VBA": "Range(\"D1\").Value = \"Price\""
  },
  {
    "Description": "Set cell B2 to 'East'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
    "VBA": "Range(\"B2\").Value = \"East\""
  },
  {
    "Description": "Set cell B3 to 'West'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
    "VBA": "Range(\"B3\").Value = \"West\""
  },
  {
    "Description": "Set cell B4 to 'East'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
    "VBA": "Range(\"B4\").Value = \"East\""
  },
  {
    "Description": "Set cell B5 to 'West'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
    "VBA": "Range(\"B5\").Value = \"West\""
  },
  {
    "Description": "Set cell C2 to 'Fancy'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
    "VBA": "Range(\"C2\").Value = \"Fancy\""
  },
  {
    "Description": "Set cell C3 to 'Fancy'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
    "VBA": "Range(\"C3\").Value = \"Fancy\""
  },
  {
    "Description": "Set cell C4 to 'Tee'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
    "VBA": "Range(\"C4\").Value = \"Tee\""
  },
  {
    "Description": "Set cell C5 to 'Tee'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
    "VBA": "Range(\"C5\").Value = \"Tee\""
  },
  {
    "Description": "Set cell D2 to 42.5",
    "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
    "VBA": "Range(\"D2\").Value = 42.5"
  },
  {
    "Description": "Set cell D3 to 35.2",
    "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
    "VBA": "Range(\"D3\").Value = 35.2"
  },
  {
    "Description": "Set cell D4 to 12.3",
    "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
    "VBA": "Range(\"D4\").Value = 12.3"
  },
  {
    "Description": "Set cell D5 to 24.8",
    "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
    "VBA": "Range(\"D5\").Value = 24.8"
  },
  {
    "Description": "Get the range B1:D5 from Sheet1",
    "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
  },
  {
    "Description": "Insert a new pivot table on a new worksheet using the data range",
    "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "VBA": "Set pivotTable = ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=Sheets.Add().Range(\"A1\"))"
  },
  {
    "Description": "Add 'Style' as row field and 'Region' as column field in the pivot table",
    "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Style'], columns: 'Region' });",
    "VBA": "With pivotTable.PivotFields(\"Style\")\n    .Orientation = xlRowField\nEnd With\nWith pivotTable.PivotFields(\"Region\")\n    .Orientation = xlColumnField\nEnd With"
  },
  {
    "Description": "Add 'Price' as data field in the pivot table",
    "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
    "VBA": "With pivotTable.PivotFields(\"Price\")\n    .Orientation = xlDataField\n    .Function = xlSum\nEnd With"
  },
  {
    "Description": "Get the active worksheet (pivot table worksheet)",
    "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
    "VBA": "Set pivotWorksheet = ActiveSheet"
  },
  {
    "Description": "Get the 'Region' pivot field",
    "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
    "VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
  },
  {
    "Description": "Set cell A13 to 'Drag to page'",
    "OnlyOffice_JS": "pivotWorksheet.GetRange('A13').SetValue('Drag to page');",
    "VBA": "Range(\"A13\").Value = \"Drag to page\""
  },
  {
    "Description": "Set cell B13 to the 'DragToPage' property of the 'Region' pivot field",
    "OnlyOffice_JS": "pivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToPage());",
    "VBA": "Range(\"B13\").Value = pivotField.EnableItemSelection"
  }
]
``````json
{
  "description": "Equivalent VBA code for the OnlyOffice JS script that populates a worksheet and creates a pivot table.",
  "RAG_Table": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set header 'Region' in cell B1",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "Description": "Set header 'Style' in cell C1",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "Description": "Set header 'Price' in cell D1",
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "Description": "Set value 'East' in cell B2",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "Description": "Set value 'West' in cell B3",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "Description": "Set value 'East' in cell B4",
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "Description": "Set value 'West' in cell B5",
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "Description": "Set value 'Fancy' in cell C2",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "Description": "Set value 'Fancy' in cell C3",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "Description": "Set value 'Tee' in cell C4",
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "Description": "Set value 'Tee' in cell C5",
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "Description": "Set value 42.5 in cell D2",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "Description": "Set value 35.2 in cell D3",
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "Description": "Set value 12.3 in cell D4",
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "Description": "Set value 24.8 in cell D5",
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "Description": "Get data range B1:D5",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "VBA": "Set dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "Description": "Insert pivot table on a new worksheet",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "VBA": "Set pivotTable = ThisWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef, TableDestination:=Sheets.Add)"
    },
    {
      "Description": "Add 'Style' to row fields and 'Region' to column fields in pivot table",
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Style'], columns: 'Region' });",
      "VBA": "With pivotTable\n    .PivotFields(\"Style\").Orientation = xlRowField\n    .PivotFields(\"Region\").Orientation = xlColumnField\nEnd With"
    },
    {
      "Description": "Add 'Price' as data field in pivot table",
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "Description": "Get the active pivot worksheet",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "VBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "Description": "Get pivot field 'Region'",
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "Description": "Set cell A13 to 'Drag to row'",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A13').SetValue('Drag to row');",
      "VBA": "pivotWorksheet.Range(\"A13\").Value = \"Drag to row\""
    },
    {
      "Description": "Set cell B13 to the 'DragToRow' property of 'Region' field",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToRow());",
      "VBA": "pivotWorksheet.Range(\"B13\").Value = pivotField.DragToRow"
    }
  ]
}
``````json
{
  "description": "Excel VBA Equivalent for OnlyOffice API Methods",
  "table": {
    "headers": ["Action Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Action Description": "Get the active worksheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
      },
      {
        "Action Description": "Set value 'Region' in cell B1",
        "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
        "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
      },
      {
        "Action Description": "Set value 'Style' in cell C1",
        "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
        "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
      },
      {
        "Action Description": "Set value 'Price' in cell D1",
        "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
        "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
      },
      {
        "Action Description": "Set value 'East' in cell B2",
        "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
        "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
      },
      {
        "Action Description": "Set value 'West' in cell B3",
        "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
        "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
      },
      {
        "Action Description": "Set value 'East' in cell B4",
        "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
        "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
      },
      {
        "Action Description": "Set value 'West' in cell B5",
        "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
        "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
      },
      {
        "Action Description": "Set value 'Fancy' in cell C2",
        "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
        "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
      },
      {
        "Action Description": "Set value 'Fancy' in cell C3",
        "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
        "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
      },
      {
        "Action Description": "Set value 'Tee' in cell C4",
        "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
        "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
      },
      {
        "Action Description": "Set value 'Tee' in cell C5",
        "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
        "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
      },
      {
        "Action Description": "Set value 42.5 in cell D2",
        "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
        "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
      },
      {
        "Action Description": "Set value 35.2 in cell D3",
        "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
        "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
      },
      {
        "Action Description": "Set value 12.3 in cell D4",
        "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
        "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
      },
      {
        "Action Description": "Set value 24.8 in cell D5",
        "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
        "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
      },
      {
        "Action Description": "Get data range for pivot table",
        "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
        "Excel VBA": "Set dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
      },
      {
        "Action Description": "Insert pivot table on a new worksheet",
        "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
        "Excel VBA": "Set pivotTable = ThisWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef, TableDestination:=Sheets.Add().Range(\"A1\"))"
      },
      {
        "Action Description": "Add row fields 'Region' and 'Style' to pivot table",
        "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
        "Excel VBA": "With pivotTable.PivotFields(\"Region\")\n    .Orientation = xlRowField\nEnd With\nWith pivotTable.PivotFields(\"Style\")\n    .Orientation = xlRowField\nEnd With"
      },
      {
        "Action Description": "Add data field 'Price' to pivot table",
        "OnlyOffice JS": "pivotTable.AddDataField('Price');",
        "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
      },
      {
        "Action Description": "Get pivot field 'Style' index",
        "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Style');",
        "Excel VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")"
      },
      {
        "Action Description": "Set 'The Style field index' in cell A12",
        "OnlyOffice JS": "pivotWorksheet.GetRange('A12').SetValue('The Style field index');",
        "Excel VBA": "pivotWorksheet.Range(\"A12\").Value = \"The Style field index\""
      },
      {
        "Action Description": "Set pivot field index in cell B12",
        "OnlyOffice JS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetIndex());",
        "Excel VBA": "pivotWorksheet.Range(\"B12\").Value = pivotField.Position"
      }
    ]
  }
}
``````json
{
  "RAGTable": [
    {
      "Description": "Get the active worksheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Description": "Set value 'Region' in cell B1",
      "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "ExcelVBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "Description": "Set value 'Style' in cell C1",
      "OnlyOfficeJS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "ExcelVBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "Description": "Set value 'Price' in cell D1",
      "OnlyOfficeJS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "ExcelVBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "Description": "Set value 'East' in cell B2",
      "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');",
      "ExcelVBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "Description": "Set value 'West' in cell B3",
      "OnlyOfficeJS": "oWorksheet.GetRange('B3').SetValue('West');",
      "ExcelVBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "Description": "Set value 'East' in cell B4",
      "OnlyOfficeJS": "oWorksheet.GetRange('B4').SetValue('East');",
      "ExcelVBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "Description": "Set value 'West' in cell B5",
      "OnlyOfficeJS": "oWorksheet.GetRange('B5').SetValue('West');",
      "ExcelVBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "Description": "Set value 'Fancy' in cell C2",
      "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "ExcelVBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "Description": "Set value 'Fancy' in cell C3",
      "OnlyOfficeJS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "ExcelVBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "Description": "Set value 'Tee' in cell C4",
      "OnlyOfficeJS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "ExcelVBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "Description": "Set value 'Tee' in cell C5",
      "OnlyOfficeJS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "ExcelVBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "Description": "Set value 42.5 in cell D2",
      "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "ExcelVBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "Description": "Set value 35.2 in cell D3",
      "OnlyOfficeJS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "ExcelVBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "Description": "Set value 12.3 in cell D4",
      "OnlyOfficeJS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "ExcelVBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "Description": "Set value 24.8 in cell D5",
      "OnlyOfficeJS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "ExcelVBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "Description": "Get range 'Sheet1'!$B$1:$D$5",
      "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "ExcelVBA": "Dim dataRef As Range\nSet dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"$B$1:$D$5\")"
    },
    {
      "Description": "Insert a new pivot table in a new worksheet using dataRef",
      "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "ExcelVBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ThisWorkbook.Worksheets.Add\nDim pivotCache As PivotCache\nSet pivotCache = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef)\nDim pivotTable As PivotTable\nSet pivotTable = pivotCache.CreatePivotTable(TableDestination:=pivotWorksheet.Range(\"A1\"), TableName:=\"PivotTable1\")"
    },
    {
      "Description": "Add 'Region' and 'Style' as row fields in the pivot table",
      "OnlyOfficeJS": "pivotTable.AddFields({ rows: ['Region', 'Style'], });",
      "ExcelVBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "Description": "Add 'Price' as data field in the pivot table",
      "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
      "ExcelVBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "Description": "Set row axis layout to tabular in the pivot table",
      "OnlyOfficeJS": "pivotTable.SetRowAxisLayout('Tabular');",
      "ExcelVBA": "pivotTable.RowAxisLayout xlTabularRow"
    },
    {
      "Description": "Get the active pivot worksheet",
      "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Description": "Get the 'Region' field from the pivot table",
      "OnlyOfficeJS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "ExcelVBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "Description": "Set value 'Region blank line' in cell A14 of pivot worksheet",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('A14').SetValue('Region blank line');",
      "ExcelVBA": "pivotWorksheet.Range(\"A14\").Value = \"Region blank line\""
    },
    {
      "Description": "Set the layout blank line of 'Region' field in cell B14 of pivot worksheet",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('B14').SetValue(pivotField.GetLayoutBlankLine());",
      "ExcelVBA": "pivotWorksheet.Range(\"B14\").Value = pivotField.LayoutBlankLine"
    }
  ]
}
``````json
{
  "table": {
    "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ActiveSheet"
      },
      {
        "Description": "Set cell B1 value to 'Region'",
        "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
        "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
      },
      {
        "Description": "Set cell C1 value to 'Style'",
        "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
        "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
      },
      {
        "Description": "Set cell D1 value to 'Price'",
        "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
        "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
      },
      {
        "Description": "Set cell B2 value to 'East'",
        "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
        "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
      },
      {
        "Description": "Set cell B3 value to 'West'",
        "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
        "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
      },
      {
        "Description": "Set cell B4 value to 'East'",
        "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
        "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
      },
      {
        "Description": "Set cell B5 value to 'West'",
        "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
        "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
      },
      {
        "Description": "Set cell C2 value to 'Fancy'",
        "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
        "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
      },
      {
        "Description": "Set cell C3 value to 'Fancy'",
        "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
        "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
      },
      {
        "Description": "Set cell C4 value to 'Tee'",
        "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
        "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
      },
      {
        "Description": "Set cell C5 value to 'Tee'",
        "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
        "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
      },
      {
        "Description": "Set cell D2 value to 42.5",
        "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
        "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
      },
      {
        "Description": "Set cell D3 value to 35.2",
        "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
        "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
      },
      {
        "Description": "Set cell D4 value to 12.3",
        "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
        "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
      },
      {
        "Description": "Set cell D5 value to 24.8",
        "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
        "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
      },
      {
        "Description": "Get the data range from Sheet1 B1:D5",
        "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
        "Excel VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
      },
      {
        "Description": "Insert a new pivot table worksheet based on dataRef",
        "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
        "Excel VBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
      },
      {
        "Description": "Add 'Region' and 'Style' as row fields in pivot table",
        "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
        "Excel VBA": "With pivotTable.PivotFields(\"Region\")\n    .Orientation = xlRowField\nEnd With\nWith pivotTable.PivotFields(\"Style\")\n    .Orientation = xlRowField\nEnd With"
      },
      {
        "Description": "Add 'Price' as data field in pivot table",
        "OnlyOffice JS": "pivotTable.AddDataField('Price');",
        "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
      },
      {
        "Description": "Get the active worksheet (pivot worksheet)",
        "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set pivotWorksheet = ActiveSheet"
      },
      {
        "Description": "Get the 'Region' pivot field",
        "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Region');",
        "Excel VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
      },
      {
        "Description": "Set cell A12 value to 'Region layout compact'",
        "OnlyOffice JS": "pivotWorksheet.GetRange('A12').SetValue('Region layout compact');",
        "Excel VBA": "pivotWorksheet.Range(\"A12\").Value = \"Region layout compact\""
      },
      {
        "Description": "Set cell B12 to the compact row layout of the 'Region' pivot field",
        "OnlyOffice JS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetLayoutCompactRow());",
        "Excel VBA": "pivotWorksheet.Range(\"B12\").Value = pivotField.LayoutCompactRow"
      }
    ]
  }
}
``````json
{
  "table": {
    "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ActiveSheet"
      },
      {
        "Description": "Set value in cell B1",
        "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
        "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
      },
      {
        "Description": "Set value in cell C1",
        "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
        "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
      },
      {
        "Description": "Set value in cell D1",
        "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
        "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
      },
      {
        "Description": "Set value in cell B2",
        "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
        "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
      },
      {
        "Description": "Set value in cell B3",
        "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
        "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
      },
      {
        "Description": "Set value in cell B4",
        "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
        "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
      },
      {
        "Description": "Set value in cell B5",
        "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
        "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
      },
      {
        "Description": "Set value in cell C2",
        "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
        "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
      },
      {
        "Description": "Set value in cell C3",
        "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
        "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
      },
      {
        "Description": "Set value in cell C4",
        "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
        "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
      },
      {
        "Description": "Set value in cell C5",
        "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
        "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
      },
      {
        "Description": "Set value in cell D2",
        "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
        "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
      },
      {
        "Description": "Set value in cell D3",
        "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
        "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
      },
      {
        "Description": "Set value in cell D4",
        "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
        "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
      },
      {
        "Description": "Set value in cell D5",
        "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
        "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
      },
      {
        "Description": "Get range for data reference",
        "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
        "Excel VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
      },
      {
        "Description": "Insert pivot table on new worksheet",
        "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
        "Excel VBA": "Set pivotTable = Worksheets.Add.PivotTable(\"PivotTable1\", dataRef)"
      },
      {
        "Description": "Add row fields to pivot table",
        "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
        "Excel VBA": "With pivotTable.PivotFields(\"Region\")\n    .Orientation = xlRowField\nEnd With\nWith pivotTable.PivotFields(\"Style\")\n    .Orientation = xlRowField\nEnd With"
      },
      {
        "Description": "Add data field to pivot table",
        "OnlyOffice JS": "pivotTable.AddDataField('Price');",
        "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\")"
      },
      {
        "Description": "Get active sheet for pivot table",
        "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set pivotWorksheet = ActiveSheet"
      },
      {
        "Description": "Get pivot field 'Region'",
        "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Region');",
        "Excel VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
      },
      {
        "Description": "Set value in cell A12",
        "OnlyOffice JS": "pivotWorksheet.GetRange('A12').SetValue('Region layout form');",
        "Excel VBA": "pivotWorksheet.Range(\"A12\").Value = \"Region layout form\""
      },
      {
        "Description": "Set value in cell B12",
        "OnlyOffice JS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetLayoutForm());",
        "Excel VBA": "pivotWorksheet.Range(\"B12\").Value = pivotField.LayoutForm"
      }
    ]
  }
}
``````json
{
  "table": {
    "headers": ["Description", "VBA Code", "OnlyOffice JS Code"],
    "rows": [
      {
        "Description": "Get the active sheet",
        "VBA Code": "Set oWorksheet = ActiveSheet",
        "OnlyOffice JS Code": "var oWorksheet = Api.GetActiveSheet();"
      },
      {
        "Description": "Set value 'Region' in cell B1",
        "VBA Code": "oWorksheet.Range(\"B1\").Value = \"Region\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('B1').SetValue('Region');"
      },
      {
        "Description": "Set value 'Style' in cell C1",
        "VBA Code": "oWorksheet.Range(\"C1\").Value = \"Style\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('C1').SetValue('Style');"
      },
      {
        "Description": "Set value 'Price' in cell D1",
        "VBA Code": "oWorksheet.Range(\"D1\").Value = \"Price\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('D1').SetValue('Price');"
      },
      {
        "Description": "Set value 'East' in cell B2",
        "VBA Code": "oWorksheet.Range(\"B2\").Value = \"East\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('B2').SetValue('East');"
      },
      {
        "Description": "Set value 'West' in cell B3",
        "VBA Code": "oWorksheet.Range(\"B3\").Value = \"West\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('B3').SetValue('West');"
      },
      {
        "Description": "Set value 'East' in cell B4",
        "VBA Code": "oWorksheet.Range(\"B4\").Value = \"East\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('B4').SetValue('East');"
      },
      {
        "Description": "Set value 'West' in cell B5",
        "VBA Code": "oWorksheet.Range(\"B5\").Value = \"West\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('B5').SetValue('West');"
      },
      {
        "Description": "Set value 'Fancy' in cell C2",
        "VBA Code": "oWorksheet.Range(\"C2\").Value = \"Fancy\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('C2').SetValue('Fancy');"
      },
      {
        "Description": "Set value 'Fancy' in cell C3",
        "VBA Code": "oWorksheet.Range(\"C3\").Value = \"Fancy\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('C3').SetValue('Fancy');"
      },
      {
        "Description": "Set value 'Tee' in cell C4",
        "VBA Code": "oWorksheet.Range(\"C4\").Value = \"Tee\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('C4').SetValue('Tee');"
      },
      {
        "Description": "Set value 'Tee' in cell C5",
        "VBA Code": "oWorksheet.Range(\"C5\").Value = \"Tee\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('C5').SetValue('Tee');"
      },
      {
        "Description": "Set value 42.5 in cell D2",
        "VBA Code": "oWorksheet.Range(\"D2\").Value = 42.5",
        "OnlyOffice JS Code": "oWorksheet.GetRange('D2').SetValue(42.5);"
      },
      {
        "Description": "Set value 35.2 in cell D3",
        "VBA Code": "oWorksheet.Range(\"D3\").Value = 35.2",
        "OnlyOffice JS Code": "oWorksheet.GetRange('D3').SetValue(35.2);"
      },
      {
        "Description": "Set value 12.3 in cell D4",
        "VBA Code": "oWorksheet.Range(\"D4\").Value = 12.3",
        "OnlyOffice JS Code": "oWorksheet.GetRange('D4').SetValue(12.3);"
      },
      {
        "Description": "Set value 24.8 in cell D5",
        "VBA Code": "oWorksheet.Range(\"D5\").Value = 24.8",
        "OnlyOffice JS Code": "oWorksheet.GetRange('D5').SetValue(24.8);"
      },
      {
        "Description": "Get data range B1:D5 from Sheet1",
        "VBA Code": "Set dataRef = Worksheets(\"Sheet1\").Range(\"$B$1:$D$5\")",
        "OnlyOffice JS Code": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
      },
      {
        "Description": "Insert pivot table in new worksheet based on data range",
        "VBA Code": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)",
        "OnlyOffice JS Code": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
      },
      {
        "Description": "Add fields to pivot table: rows = ['Region', 'Style']",
        "VBA Code": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With",
        "OnlyOffice JS Code": "pivotTable.AddFields({\n rows: ['Region', 'Style'],\n});"
      },
      {
        "Description": "Add data field 'Price'",
        "VBA Code": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\")",
        "OnlyOffice JS Code": "pivotTable.AddDataField('Price');"
      },
      {
        "Description": "Get the active sheet (pivot worksheet)",
        "VBA Code": "Set pivotWorksheet = ActiveSheet",
        "OnlyOffice JS Code": "var pivotWorksheet = Api.GetActiveSheet();"
      },
      {
        "Description": "Get pivot field 'Region'",
        "VBA Code": "Set pivotField = pivotTable.PivotFields(\"Region\")",
        "OnlyOffice JS Code": "var pivotField = pivotTable.GetPivotFields('Region');"
      },
      {
        "Description": "Set value 'Page break:' in cell A15 of pivot worksheet",
        "VBA Code": "pivotWorksheet.Range(\"A15\").Value = \"Page break:\"",
        "OnlyOffice JS Code": "pivotWorksheet.GetRange('A15').SetValue('Page break:');"
      },
      {
        "Description": "Set value of cell B15 with pivot field's layout page break",
        "VBA Code": "pivotWorksheet.Range(\"B15\").Value = pivotField.LayoutPageBreak",
        "OnlyOffice JS Code": "pivotWorksheet.GetRange('B15').SetValue(pivotField.GetLayoutPageBreak());"
      }
    ]
  }
}
``````json
{
  "RAG_Table": [
    {
      "Description": "Get the active worksheet",
      "VBA": "Set oWorksheet = ActiveSheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Set cell B1 to 'Region'",
      "VBA": "Range(\"B1\").Value = \"Region\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');"
    },
    {
      "Description": "Set cell C1 to 'Style'",
      "VBA": "Range(\"C1\").Value = \"Style\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');"
    },
    {
      "Description": "Set cell D1 to 'Price'",
      "VBA": "Range(\"D1\").Value = \"Price\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');"
    },
    {
      "Description": "Set cell B2 to 'East'",
      "VBA": "Range(\"B2\").Value = \"East\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');"
    },
    {
      "Description": "Set cell B3 to 'West'",
      "VBA": "Range(\"B3\").Value = \"West\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');"
    },
    {
      "Description": "Set cell B4 to 'East'",
      "VBA": "Range(\"B4\").Value = \"East\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');"
    },
    {
      "Description": "Set cell B5 to 'West'",
      "VBA": "Range(\"B5\").Value = \"West\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');"
    },
    {
      "Description": "Set cell C2 to 'Fancy'",
      "VBA": "Range(\"C2\").Value = \"Fancy\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');"
    },
    {
      "Description": "Set cell C3 to 'Fancy'",
      "VBA": "Range(\"C3\").Value = \"Fancy\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');"
    },
    {
      "Description": "Set cell C4 to 'Tee'",
      "VBA": "Range(\"C4\").Value = \"Tee\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');"
    },
    {
      "Description": "Set cell C5 to 'Tee'",
      "VBA": "Range(\"C5\").Value = \"Tee\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');"
    },
    {
      "Description": "Set cell D2 to 42.5",
      "VBA": "Range(\"D2\").Value = 42.5",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);"
    },
    {
      "Description": "Set cell D3 to 35.2",
      "VBA": "Range(\"D3\").Value = 35.2",
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);"
    },
    {
      "Description": "Set cell D4 to 12.3",
      "VBA": "Range(\"D4\").Value = 12.3",
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);"
    },
    {
      "Description": "Set cell D5 to 24.8",
      "VBA": "Range(\"D5\").Value = 24.8",
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);"
    },
    {
      "Description": "Get the range B1:D5 from Sheet1",
      "VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
    },
    {
      "Description": "Insert a new pivot table based on the data reference",
      "VBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
    },
    {
      "Description": "Add 'Region' and 'Style' as row fields to the pivot table",
      "VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With",
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });"
    },
    {
      "Description": "Add 'Price' as a data field to the pivot table",
      "VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum",
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');"
    },
    {
      "Description": "Get the active worksheet (pivot worksheet)",
      "VBA": "Set pivotWorksheet = ActiveSheet",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Get the 'Region' pivot field",
      "VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")",
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');"
    },
    {
      "Description": "Set cell A14 to 'Region layout subtotal location'",
      "VBA": "Range(\"A14\").Value = \"Region layout subtotal location\"",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A14').SetValue('Region layout subtotal location');"
    },
    {
      "Description": "Set cell B14 to the layout subtotal location of the 'Region' pivot field",
      "VBA": "Range(\"B14\").Value = pivotField.SubtotalLocation",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B14').SetValue(pivotField.GetLayoutSubtotalLocation());"
    }
  ]
}
``````json
{
  "RAGTable": {
    "Headers": ["Description", "OnlyOfficeJS", "ExcelVBA"],
    "Rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
        "ExcelVBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
      },
      {
        "Description": "Set value of cell B1 to 'Region'",
        "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');",
        "ExcelVBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
      },
      {
        "Description": "Set value of cell C1 to 'Style'",
        "OnlyOfficeJS": "oWorksheet.GetRange('C1').SetValue('Style');",
        "ExcelVBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
      },
      {
        "Description": "Set value of cell D1 to 'Price'",
        "OnlyOfficeJS": "oWorksheet.GetRange('D1').SetValue('Price');",
        "ExcelVBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
      },
      {
        "Description": "Set value of cell B2 to 'East'",
        "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');",
        "ExcelVBA": "oWorksheet.Range(\"B2\").Value = \"East\""
      },
      {
        "Description": "Set value of cell B3 to 'West'",
        "OnlyOfficeJS": "oWorksheet.GetRange('B3').SetValue('West');",
        "ExcelVBA": "oWorksheet.Range(\"B3\").Value = \"West\""
      },
      {
        "Description": "Set value of cell B4 to 'East'",
        "OnlyOfficeJS": "oWorksheet.GetRange('B4').SetValue('East');",
        "ExcelVBA": "oWorksheet.Range(\"B4\").Value = \"East\""
      },
      {
        "Description": "Set value of cell B5 to 'West'",
        "OnlyOfficeJS": "oWorksheet.GetRange('B5').SetValue('West');",
        "ExcelVBA": "oWorksheet.Range(\"B5\").Value = \"West\""
      },
      {
        "Description": "Set value of cell C2 to 'Fancy'",
        "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
        "ExcelVBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
      },
      {
        "Description": "Set value of cell C3 to 'Fancy'",
        "OnlyOfficeJS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
        "ExcelVBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
      },
      {
        "Description": "Set value of cell C4 to 'Tee'",
        "OnlyOfficeJS": "oWorksheet.GetRange('C4').SetValue('Tee');",
        "ExcelVBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
      },
      {
        "Description": "Set value of cell C5 to 'Tee'",
        "OnlyOfficeJS": "oWorksheet.GetRange('C5').SetValue('Tee');",
        "ExcelVBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
      },
      {
        "Description": "Set value of cell D2 to 42.5",
        "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);",
        "ExcelVBA": "oWorksheet.Range(\"D2\").Value = 42.5"
      },
      {
        "Description": "Set value of cell D3 to 35.2",
        "OnlyOfficeJS": "oWorksheet.GetRange('D3').SetValue(35.2);",
        "ExcelVBA": "oWorksheet.Range(\"D3\").Value = 35.2"
      },
      {
        "Description": "Set value of cell D4 to 12.3",
        "OnlyOfficeJS": "oWorksheet.GetRange('D4').SetValue(12.3);",
        "ExcelVBA": "oWorksheet.Range(\"D4\").Value = 12.3"
      },
      {
        "Description": "Set value of cell D5 to 24.8",
        "OnlyOfficeJS": "oWorksheet.GetRange('D5').SetValue(24.8);",
        "ExcelVBA": "oWorksheet.Range(\"D5\").Value = 24.8"
      },
      {
        "Description": "Get range 'Sheet1'!$B$1:$D$5",
        "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
        "ExcelVBA": "Dim dataRef As Range\nSet dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
      },
      {
        "Description": "Insert pivot table in a new worksheet",
        "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
        "ExcelVBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = Worksheets.Add\nDim pivotTable As PivotTable\nSet pivotTable = pivotWorksheet.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
      },
      {
        "Description": "Add 'Region' and 'Style' as row fields in pivot table",
        "OnlyOfficeJS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
        "ExcelVBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
      },
      {
        "Description": "Add 'Price' as data field in pivot table",
        "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
        "ExcelVBA": "With pivotTable.PivotFields(\"Price\")\n    .Orientation = xlDataField\n    .Function = xlSum\nEnd With"
      },
      {
        "Description": "Get the active worksheet after pivot table insertion",
        "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();",
        "ExcelVBA": "Set pivotWorksheet = ThisWorkbook.ActiveSheet"
      },
      {
        "Description": "Get 'Region' pivot field from pivot table",
        "OnlyOfficeJS": "var pivotField = pivotTable.GetPivotFields('Region');",
        "ExcelVBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Region\")"
      },
      {
        "Description": "Set value of cell A14 to 'Region layout subtotals'",
        "OnlyOfficeJS": "pivotWorksheet.GetRange('A14').SetValue('Region layout subtotals');",
        "ExcelVBA": "pivotWorksheet.Range(\"A14\").Value = \"Region layout subtotals\""
      },
      {
        "Description": "Set value of cell B14 to the layout subtotals of 'Region' pivot field",
        "OnlyOfficeJS": "pivotWorksheet.GetRange('B14').SetValue(pivotField.GetLayoutSubtotals());",
        "ExcelVBA": "pivotWorksheet.Range(\"B14\").Value = Join(pivotField.Subtotals, \", \")"
      }
    ]
  }
}
``````json
{
  "Description": "This script populates an Excel worksheet with data, creates a pivot table based on the data, and updates specific cells with pivot field information.",
  "CodeComparison": [
    {
      "Action": "Get Active Sheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Action": "Set Header Values",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');\noWorksheet.GetRange('C1').SetValue('Style');\noWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "With oWorksheet\n  .Range(\"B1\").Value = \"Region\"\n  .Range(\"C1\").Value = \"Style\"\n  .Range(\"D1\").Value = \"Price\"\nEnd With"
    },
    {
      "Action": "Set Region Values",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');\noWorksheet.GetRange('B3').SetValue('West');\noWorksheet.GetRange('B4').SetValue('East');\noWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "With oWorksheet\n  .Range(\"B2\").Value = \"East\"\n  .Range(\"B3\").Value = \"West\"\n  .Range(\"B4\").Value = \"East\"\n  .Range(\"B5\").Value = \"West\"\nEnd With"
    },
    {
      "Action": "Set Style Values",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');\noWorksheet.GetRange('C3').SetValue('Fancy');\noWorksheet.GetRange('C4').SetValue('Tee');\noWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "With oWorksheet\n  .Range(\"C2\").Value = \"Fancy\"\n  .Range(\"C3\").Value = \"Fancy\"\n  .Range(\"C4\").Value = \"Tee\"\n  .Range(\"C5\").Value = \"Tee\"\nEnd With"
    },
    {
      "Action": "Set Price Values",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);\noWorksheet.GetRange('D3').SetValue(35.2);\noWorksheet.GetRange('D4').SetValue(12.3);\noWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "With oWorksheet\n  .Range(\"D2\").Value = 42.5\n  .Range(\"D3\").Value = 35.2\n  .Range(\"D4\").Value = 12.3\n  .Range(\"D5\").Value = 24.8\nEnd With"
    },
    {
      "Action": "Create Pivot Table",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nvar pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Dim dataRef As Range\nSet dataRef = oWorksheet.Range(\"B1:D5\")\nDim pivotCache As PivotCache\nSet pivotCache = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef)\nDim pivotSheet As Worksheet\nSet pivotSheet = ThisWorkbook.Worksheets.Add\nDim pivotTable As PivotTable\nSet pivotTable = pivotCache.CreatePivotTable(TableDestination:=pivotSheet.Range(\"A1\"), TableName:=\"PivotTable1\")"
    },
    {
      "Action": "Add Fields to Pivot Table",
      "OnlyOffice_JS": "pivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\npivotTable.AddDataField('Price');",
      "Excel_VBA": "With pivotTable\n  .PivotFields(\"Region\").Orientation = xlRowField\n  .PivotFields(\"Style\").Orientation = xlRowField\n  .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
    },
    {
      "Action": "Set Pivot Field Name in Cells",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();\nvar pivotField = pivotTable.GetPivotFields('Style');\npivotWorksheet.GetRange('A12').SetValue('The Style field name');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetName());",
      "Excel_VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = pivotTable.Parent\nDim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Style\")\nWith pivotWorksheet\n  .Range(\"A12\").Value = \"The Style field name\"\n  .Range(\"B12\").Value = pivotField.Name\nEnd With"
    }
  ]
}
``````json
{
  "CodeConversion": [
    {
      "Description": "Get the active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set cell B1 value to 'Region'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "Description": "Set cell C1 value to 'Style'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "Description": "Set cell D1 value to 'Price'",
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "Description": "Set cell B2 value to 'East'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "Description": "Set cell B3 value to 'West'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "Description": "Set cell B4 value to 'East'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "Description": "Set cell B5 value to 'West'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "Description": "Set cell C2 value to 'Fancy'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "Description": "Set cell C3 value to 'Fancy'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "Description": "Set cell C4 value to 'Tee'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "Description": "Set cell C5 value to 'Tee'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "Description": "Set cell D2 value to 42.5",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "Description": "Set cell D3 value to 35.2",
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "Description": "Set cell D4 value to 12.3",
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "Description": "Set cell D5 value to 24.8",
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "Description": "Get data range B1:D5",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Dim dataRef As Range\nSet dataRef = oWorksheet.Range(\"B1:D5\")"
    },
    {
      "Description": "Insert a new pivot table on a new worksheet using the data range",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Dim pivotTable As PivotTable\nDim pivotSheet As Worksheet\nSet pivotSheet = Worksheets.Add\nSet pivotTable = pivotSheet.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "Description": "Add 'Region' as row field and 'Style' as column field in the pivot table",
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: 'Region', columns: 'Style' });",
      "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlColumnField\nEnd With"
    },
    {
      "Description": "Add 'Price' as data field in the pivot table",
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
    },
    {
      "Description": "Get the active pivot worksheet",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set pivotWorksheet = pivotTable.Parent"
    },
    {
      "Description": "Get the orientation of the 'Style' pivot field",
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Style');",
      "Excel_VBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Style\")"
    },
    {
      "Description": "Set cell A12 with description and B12 with the orientation of 'Style' field",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A12').SetValue('The Style field orientation');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetOrientation());",
      "Excel_VBA": "pivotWorksheet.Range(\"A12\").Value = \"The Style field orientation\"\npivotWorksheet.Range(\"B12\").Value = pivotField.Orientation"
    }
  ]
}
```**This code initializes a worksheet, sets cell values, creates a pivot table, and configures its fields.**

```json
{
  "Description": "This code initializes a worksheet, sets cell values, creates a pivot table, and configures its fields.",
  "Mappings": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel VBA": "Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel VBA": "Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel VBA": "Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel VBA": "Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel VBA": "Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel VBA": "Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel VBA": "Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel VBA": "Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel VBA": "Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel VBA": "Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel VBA": "Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel VBA": "Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel VBA": "Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel VBA": "Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel VBA": "Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel VBA": "Set pivotTable = ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=Sheets.Add().Range(\"A1\"), TableName:=\"PivotTable1\")"
    },
    {
      "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'], });",
      "Excel VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice JS": "pivotTable.AddDataField('Price');",
      "Excel VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
    },
    {
      "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Style');",
      "Excel VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")"
    },
    {
      "OnlyOffice JS": "pivotField.GetParent().AddDataField('Region');",
      "Excel VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Region\"), \"Count of Region\", xlCount\nEnd With"
    }
  ]
}
``````json
[
  {
    "description": "Get the active worksheet",
    "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
  },
  {
    "description": "Set header 'Region' in cell B1",
    "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
    "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
  },
  {
    "description": "Set header 'Style' in cell C1",
    "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
    "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
  },
  {
    "description": "Set header 'Price' in cell D1",
    "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
    "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
  },
  {
    "description": "Set value 'East' in cell B2",
    "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
    "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
  },
  {
    "description": "Set value 'West' in cell B3",
    "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
    "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
  },
  {
    "description": "Set value 'East' in cell B4",
    "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
    "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
  },
  {
    "description": "Set value 'West' in cell B5",
    "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
    "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
  },
  {
    "description": "Set value 'Fancy' in cell C2",
    "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
    "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
  },
  {
    "description": "Set value 'Fancy' in cell C3",
    "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
    "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
  },
  {
    "description": "Set value 'Tee' in cell C4",
    "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
    "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
  },
  {
    "description": "Set value 'Tee' in cell C5",
    "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
    "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
  },
  {
    "description": "Set value 42.5 in cell D2",
    "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
    "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
  },
  {
    "description": "Set value 35.2 in cell D3",
    "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
    "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
  },
  {
    "description": "Set value 12.3 in cell D4",
    "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
    "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
  },
  {
    "description": "Set value 24.8 in cell D5",
    "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
    "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
  },
  {
    "description": "Get data range B1:D5 from Sheet1",
    "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "Excel_VBA": "Set dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"$B$1:$D$5\")"
  },
  {
    "description": "Insert a new pivot table on a new worksheet using dataRef",
    "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "Excel_VBA": "Set pivotTable = ThisWorkbook.PivotTableWizard(TableDestination:=Sheets.Add.Range(\"A1\"), TableName:=\"PivotTable1\", SourceData:=dataRef)"
  },
  {
    "description": "Add 'Region' as rows and 'Style' as columns to the pivot table",
    "OnlyOffice_JS": "pivotTable.AddFields({\n    rows: 'Region',\n    columns: 'Style',\n});",
    "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlColumnField\nEnd With"
  },
  {
    "description": "Get the active worksheet (pivot table worksheet)",
    "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Set pivotWorksheet = ThisWorkbook.ActiveSheet"
  },
  {
    "description": "Add 'Price' as a data field to the pivot table",
    "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
    "Excel_VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\")\nEnd With"
  },
  {
    "description": "Get the pivot field 'Region' and its items",
    "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');\nvar pivotItems = pivotField.GetPivotItems();",
    "Excel_VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")\nSet pivotItems = pivotField.PivotItems"
  },
  {
    "description": "Set cell A10 to 'Region pivot items'",
    "OnlyOffice_JS": "pivotWorksheet.GetRange('A10').SetValue('Region pivot items');",
    "Excel_VBA": "pivotWorksheet.Range(\"A10\").Value = \"Region pivot items\""
  },
  {
    "description": "Loop through pivot items and set their names in cells below A10",
    "OnlyOffice_JS": "for (var i = 0; i < pivotItems.length; i += 1) {\n    pivotWorksheet.GetRangeByNumber(9 + i, 1).SetValue(pivotItems[i].GetName());\n}",
    "Excel_VBA": "Dim i As Integer\nFor i = 0 To pivotItems.Count - 1\n    pivotWorksheet.Cells(10 + i, 1).Value = pivotItems(i).Name\nNext i"
  }
]
``````json
{
  "RAGTable": [
    {
      "Description": "Get the active worksheet",
      "VBA": "Set oWorksheet = ActiveSheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Set value 'Region' to cell B1",
      "VBA": "oWorksheet.Range(\"B1\").Value = \"Region\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');"
    },
    {
      "Description": "Set value 'Style' to cell C1",
      "VBA": "oWorksheet.Range(\"C1\").Value = \"Style\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');"
    },
    {
      "Description": "Set value 'Price' to cell D1",
      "VBA": "oWorksheet.Range(\"D1\").Value = \"Price\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');"
    },
    {
      "Description": "Set value 'East' to cell B2",
      "VBA": "oWorksheet.Range(\"B2\").Value = \"East\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');"
    },
    {
      "Description": "Set value 'West' to cell B3",
      "VBA": "oWorksheet.Range(\"B3\").Value = \"West\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');"
    },
    {
      "Description": "Set value 'East' to cell B4",
      "VBA": "oWorksheet.Range(\"B4\").Value = \"East\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');"
    },
    {
      "Description": "Set value 'West' to cell B5",
      "VBA": "oWorksheet.Range(\"B5\").Value = \"West\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');"
    },
    {
      "Description": "Set value 'Fancy' to cell C2",
      "VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');"
    },
    {
      "Description": "Set value 'Fancy' to cell C3",
      "VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');"
    },
    {
      "Description": "Set value 'Tee' to cell C4",
      "VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');"
    },
    {
      "Description": "Set value 'Tee' to cell C5",
      "VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');"
    },
    {
      "Description": "Set value 42.5 to cell D2",
      "VBA": "oWorksheet.Range(\"D2\").Value = 42.5",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);"
    },
    {
      "Description": "Set value 35.2 to cell D3",
      "VBA": "oWorksheet.Range(\"D3\").Value = 35.2",
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);"
    },
    {
      "Description": "Set value 12.3 to cell D4",
      "VBA": "oWorksheet.Range(\"D4\").Value = 12.3",
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);"
    },
    {
      "Description": "Set value 24.8 to cell D5",
      "VBA": "oWorksheet.Range(\"D5\").Value = 24.8",
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);"
    },
    {
      "Description": "Get range 'Sheet1'!$B$1:$D$5",
      "VBA": "Set dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
    },
    {
      "Description": "Insert pivot table on a new worksheet based on dataRef",
      "VBA": "Set pivotTable = ThisWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef, TableDestination:=Sheets.Add().Range(\"A1\"))",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
    },
    {
      "Description": "Add row fields 'Region' and 'Style' to pivot table",
      "VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With",
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });"
    },
    {
      "Description": "Get the active worksheet for pivot table",
      "VBA": "Set pivotWorksheet = ActiveSheet",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Add data field 'Price' to pivot table",
      "VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With",
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');"
    },
    {
      "Description": "Get pivot field 'Style'",
      "VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")",
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Style');"
    },
    {
      "Description": "Set 'Style field position' text to cell A12",
      "VBA": "pivotWorksheet.Range(\"A12\").Value = \"Style field position\"",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A12').SetValue('Style field position');"
    },
    {
      "Description": "Set the position of 'Style' pivot field to cell B12",
      "VBA": "pivotWorksheet.Range(\"B12\").Value = pivotField.Position",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetPosition());"
    }
  ]
}
``````json
{
  "table": {
    "headers": ["Description", "OnlyOffice_JS", "Excel_VBA"],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
      },
      {
        "Description": "Set value 'Region' in cell B1",
        "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
        "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
      },
      {
        "Description": "Set value 'Style' in cell C1",
        "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
        "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
      },
      {
        "Description": "Set value 'Price' in cell D1",
        "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
        "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
      },
      {
        "Description": "Set value 'East' in cell B2",
        "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
        "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
      },
      {
        "Description": "Set value 'West' in cell B3",
        "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
        "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
      },
      {
        "Description": "Set value 'East' in cell B4",
        "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
        "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
      },
      {
        "Description": "Set value 'West' in cell B5",
        "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
        "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
      },
      {
        "Description": "Set value 'Fancy' in cell C2",
        "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
        "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
      },
      {
        "Description": "Set value 'Fancy' in cell C3",
        "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
        "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
      },
      {
        "Description": "Set value 'Tee' in cell C4",
        "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
        "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
      },
      {
        "Description": "Set value 'Tee' in cell C5",
        "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
        "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
      },
      {
        "Description": "Set value 42.5 in cell D2",
        "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
        "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
      },
      {
        "Description": "Set value 35.2 in cell D3",
        "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
        "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
      },
      {
        "Description": "Set value 12.3 in cell D4",
        "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
        "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
      },
      {
        "Description": "Set value 24.8 in cell D5",
        "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
        "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
      },
      {
        "Description": "Get range B1:D5 from Sheet1",
        "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
        "Excel_VBA": "Dim dataRef As Range\nSet dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
      },
      {
        "Description": "Insert a new pivot table worksheet based on dataRef",
        "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
        "Excel_VBA": "Dim pivotTable As PivotTable\nSet pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
      },
      {
        "Description": "Add 'Region' and 'Style' as row fields in the pivot table",
        "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
        "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
      },
      {
        "Description": "Add 'Price' as a data field in the pivot table",
        "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
        "Excel_VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
      },
      {
        "Description": "Set row axis layout to Tabular in the pivot table",
        "OnlyOffice_JS": "pivotTable.SetRowAxisLayout('Tabular');",
        "Excel_VBA": "pivotTable.RowAxisLayout xlTabularRow"
      },
      {
        "Description": "Get the active worksheet (pivot table worksheet)",
        "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
        "Excel_VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ActiveSheet"
      },
      {
        "Description": "Get the 'Region' pivot field",
        "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
        "Excel_VBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Region\")"
      },
      {
        "Description": "Set value 'Region repeat labels' in cell A12 of pivot worksheet",
        "OnlyOffice_JS": "pivotWorksheet.GetRange('A12').SetValue('Region repeat labels');",
        "Excel_VBA": "pivotWorksheet.Range(\"A12\").Value = \"Region repeat labels\""
      },
      {
        "Description": "Set the repeat labels value of 'Region' pivot field in cell B12",
        "OnlyOffice_JS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetRepeatLabels());",
        "Excel_VBA": "pivotWorksheet.Range(\"B12\").Value = pivotField.RepeatLabels"
      }
    ]
  }
}
``````json
{
  "Description": "This script populates specific cells with data, creates a pivot table based on the data range, adds row and data fields to the pivot table, and sets values in the pivot table sheet.",
  "Code": {
    "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();\n\noWorksheet.GetRange('B1').SetValue('Region');\noWorksheet.GetRange('C1').SetValue('Style');\noWorksheet.GetRange('D1').SetValue('Price');\n\noWorksheet.GetRange('B2').SetValue('East');\noWorksheet.GetRange('B3').SetValue('West');\noWorksheet.GetRange('B4').SetValue('East');\noWorksheet.GetRange('B5').SetValue('West');\n\noWorksheet.GetRange('C2').SetValue('Fancy');\noWorksheet.GetRange('C3').SetValue('Tee');\noWorksheet.GetRange('C4').SetValue('Tee');\noWorksheet.GetRange('C5').SetValue('Tee');\n\noWorksheet.GetRange('D2').SetValue(42.5);\noWorksheet.GetRange('D3').SetValue(35.2);\noWorksheet.GetRange('D4').SetValue(12.3);\noWorksheet.GetRange('D5').SetValue(24.8);\n\nvar dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nvar pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nvar pivotWorksheet = Api.GetActiveSheet();\nvar pivotField = pivotTable.GetPivotFields('Style');\n\npivotWorksheet.GetRange('A12').SetValue('Style get show all items');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetShowAllItems());",
    "Excel_VBA": "Sub CreatePivotTable()\n    Dim ws As Worksheet\n    Set ws = ThisWorkbook.ActiveSheet\n    \n    ws.Range(\"B1\").Value = \"Region\"\n    ws.Range(\"C1\").Value = \"Style\"\n    ws.Range(\"D1\").Value = \"Price\"\n    \n    ws.Range(\"B2\").Value = \"East\"\n    ws.Range(\"B3\").Value = \"West\"\n    ws.Range(\"B4\").Value = \"East\"\n    ws.Range(\"B5\").Value = \"West\"\n    \n    ws.Range(\"C2\").Value = \"Fancy\"\n    ws.Range(\"C3\").Value = \"Tee\"\n    ws.Range(\"C4\").Value = \"Tee\"\n    ws.Range(\"C5\").Value = \"Tee\"\n    \n    ws.Range(\"D2\").Value = 42.5\n    ws.Range(\"D3\").Value = 35.2\n    ws.Range(\"D4\").Value = 12.3\n    ws.Range(\"D5\").Value = 24.8\n    \n    ' Define data range\n    Dim dataRange As Range\n    Set dataRange = ws.Range(\"B1:D5\")\n    \n    ' Add a new worksheet for pivot\n    Dim pvtSheet As Worksheet\n    Set pvtSheet = ThisWorkbook.Worksheets.Add\n    pvtSheet.Name = \"PivotTable\"\n    \n    ' Create Pivot Cache\n    Dim pvtCache As PivotCache\n    Set pvtCache = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRange)\n    \n    ' Create Pivot Table\n    Dim pvtTable As PivotTable\n    Set pvtTable = pvtCache.CreatePivotTable(TableDestination:=pvtSheet.Range(\"A3\"), TableName:=\"PivotTable1\")\n    \n    ' Add fields\n    With pvtTable\n        .PivotFields(\"Region\").Orientation = xlRowField\n        .PivotFields(\"Style\").Orientation = xlRowField\n        .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\n    End With\n    \n    ' Set values in pivot sheet\n    pvtSheet.Range(\"A12\").Value = \"Style get show all items\"\n    \n    Dim pf As PivotField\n    Set pf = pvtTable.PivotFields(\"Style\")\n    pvtSheet.Range(\"B12\").Value = pf.ShowAllItems\nEnd Sub"
  }
}
``````json
{
  "CodeEquivalents": [
    {
      "Description": "Get the active worksheet",
      "VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Set value 'Region' to cell B1",
      "VBA": "oWorksheet.Range(\"B1\").Value = \"Region\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');"
    },
    {
      "Description": "Set value 'Style' to cell C1",
      "VBA": "oWorksheet.Range(\"C1\").Value = \"Style\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('C1').SetValue('Style');"
    },
    {
      "Description": "Set value 'Price' to cell D1",
      "VBA": "oWorksheet.Range(\"D1\").Value = \"Price\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('D1').SetValue('Price');"
    },
    {
      "Description": "Set value 'East' to cell B2",
      "VBA": "oWorksheet.Range(\"B2\").Value = \"East\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');"
    },
    {
      "Description": "Set value 'West' to cell B3",
      "VBA": "oWorksheet.Range(\"B3\").Value = \"West\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('B3').SetValue('West');"
    },
    {
      "Description": "Set value 'East' to cell B4",
      "VBA": "oWorksheet.Range(\"B4\").Value = \"East\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('B4').SetValue('East');"
    },
    {
      "Description": "Set value 'West' to cell B5",
      "VBA": "oWorksheet.Range(\"B5\").Value = \"West\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('B5').SetValue('West');"
    },
    {
      "Description": "Set value 'Fancy' to cell C2",
      "VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');"
    },
    {
      "Description": "Set value 'Fancy' to cell C3",
      "VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('C3').SetValue('Fancy');"
    },
    {
      "Description": "Set value 'Tee' to cell C4",
      "VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('C4').SetValue('Tee');"
    },
    {
      "Description": "Set value 'Tee' to cell C5",
      "VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('C5').SetValue('Tee');"
    },
    {
      "Description": "Set value 42.5 to cell D2",
      "VBA": "oWorksheet.Range(\"D2\").Value = 42.5",
      "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);"
    },
    {
      "Description": "Set value 35.2 to cell D3",
      "VBA": "oWorksheet.Range(\"D3\").Value = 35.2",
      "OnlyOfficeJS": "oWorksheet.GetRange('D3').SetValue(35.2);"
    },
    {
      "Description": "Set value 12.3 to cell D4",
      "VBA": "oWorksheet.Range(\"D4\").Value = 12.3",
      "OnlyOfficeJS": "oWorksheet.GetRange('D4').SetValue(12.3);"
    },
    {
      "Description": "Set value 24.8 to cell D5",
      "VBA": "oWorksheet.Range(\"D5\").Value = 24.8",
      "OnlyOfficeJS": "oWorksheet.GetRange('D5').SetValue(24.8);"
    },
    {
      "Description": "Get range B1:D5 from Sheet1",
      "VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")",
      "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
    },
    {
      "Description": "Insert a new pivot table worksheet based on the data range",
      "VBA": "Set pivotTable = ActiveWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)",
      "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
    },
    {
      "Description": "Add 'Region' as a row field in the pivot table",
      "VBA": "With pivotTable.PivotFields(\"Region\")\n    .Orientation = xlRowField\n    .Position = 1\nEnd With",
      "OnlyOfficeJS": "pivotTable.AddFields({ rows: ['Region'] });"
    },
    {
      "Description": "Add 'Price' as a data field in the pivot table",
      "VBA": "With pivotTable.PivotFields(\"Price\")\n    .Orientation = xlDataField\n    .Function = xlSum\nEnd With",
      "OnlyOfficeJS": "pivotTable.AddDataField('Price');"
    },
    {
      "Description": "Get the active worksheet for the pivot table",
      "VBA": "Set pivotWorksheet = ActiveWorkbook.ActiveSheet",
      "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Set description 'Region showing in axis' to cell A12",
      "VBA": "pivotWorksheet.Range(\"A12\").Value = \"Region showing in axis\"",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('A12').SetValue('Region showing in axis');"
    },
    {
      "Description": "Set the value of 'Region' showing in axis to cell B12",
      "VBA": "pivotWorksheet.Range(\"B12\").Value = pivotTable.PivotFields(\"Region\").Orientation = xlRowField",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('B12').SetValue(pivotTable.GetPivotFields('Region').GetShowingInAxis());"
    },
    {
      "Description": "Set description 'Style showing in axis' to cell A13",
      "VBA": "pivotWorksheet.Range(\"A13\").Value = \"Style showing in axis\"",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('A13').SetValue('Style showing in axis');"
    },
    {
      "Description": "Set the value of 'Style' showing in axis to cell B13",
      "VBA": "pivotWorksheet.Range(\"B13\").Value = pivotTable.PivotFields(\"Style\").Orientation = xlRowField",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('B13').SetValue(pivotTable.GetPivotFields('Style').GetShowingInAxis());"
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Set oWorksheet = ActiveSheet"
  },
  {
    "Description": "Set cell B1 value to 'Region'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
    "Excel_VBA": "Range(\"B1\").Value = \"Region\""
  },
  {
    "Description": "Set cell C1 value to 'Style'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
    "Excel_VBA": "Range(\"C1\").Value = \"Style\""
  },
  {
    "Description": "Set cell D1 value to 'Price'",
    "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
    "Excel_VBA": "Range(\"D1\").Value = \"Price\""
  },
  {
    "Description": "Set cell B2 value to 'East'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
    "Excel_VBA": "Range(\"B2\").Value = \"East\""
  },
  {
    "Description": "Set cell B3 value to 'West'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
    "Excel_VBA": "Range(\"B3\").Value = \"West\""
  },
  {
    "Description": "Set cell B4 value to 'East'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
    "Excel_VBA": "Range(\"B4\").Value = \"East\""
  },
  {
    "Description": "Set cell B5 value to 'West'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
    "Excel_VBA": "Range(\"B5\").Value = \"West\""
  },
  {
    "Description": "Set cell C2 value to 'Fancy'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
    "Excel_VBA": "Range(\"C2\").Value = \"Fancy\""
  },
  {
    "Description": "Set cell C3 value to 'Fancy'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
    "Excel_VBA": "Range(\"C3\").Value = \"Fancy\""
  },
  {
    "Description": "Set cell C4 value to 'Tee'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
    "Excel_VBA": "Range(\"C4\").Value = \"Tee\""
  },
  {
    "Description": "Set cell C5 value to 'Tee'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
    "Excel_VBA": "Range(\"C5\").Value = \"Tee\""
  },
  {
    "Description": "Set cell D2 value to 42.5",
    "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
    "Excel_VBA": "Range(\"D2\").Value = 42.5"
  },
  {
    "Description": "Set cell D3 value to 35.2",
    "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
    "Excel_VBA": "Range(\"D3\").Value = 35.2"
  },
  {
    "Description": "Set cell D4 value to 12.3",
    "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
    "Excel_VBA": "Range(\"D4\").Value = 12.3"
  },
  {
    "Description": "Set cell D5 value to 24.8",
    "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
    "Excel_VBA": "Range(\"D5\").Value = 24.8"
  },
  {
    "Description": "Get range B1:D5 from Sheet1",
    "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "Excel_VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"$B$1:$D$5\")"
  },
  {
    "Description": "Insert a pivot table from dataRef into a new worksheet",
    "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "Excel_VBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
  },
  {
    "Description": "Add 'Region' and 'Style' as row fields in the pivot table",
    "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
    "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
  },
  {
    "Description": "Set the pivot table row axis layout to Tabular",
    "OnlyOffice_JS": "pivotTable.SetRowAxisLayout(\"Tabular\", false);",
    "Excel_VBA": "pivotTable.RowAxisLayout xlTabularRow"
  },
  {
    "Description": "Add 'Price' as a data field in the pivot table",
    "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
    "Excel_VBA": "pivotTable.AddDataField \"Price\", \"Sum of Price\", xlSum"
  },
  {
    "Description": "Get the active worksheet for the pivot table",
    "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Set pivotWorksheet = ActiveSheet"
  },
  {
    "Description": "Get the 'Style' field from the pivot table",
    "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Style');",
    "Excel_VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")"
  },
  {
    "Description": "Set cell A12 to 'Style field value'",
    "OnlyOffice_JS": "pivotWorksheet.GetRange('A12').SetValue('Style field value');",
    "Excel_VBA": "Range(\"A12\").Value = \"Style field value\""
  },
  {
    "Description": "Set cell B12 to the name of the pivot field",
    "OnlyOffice_JS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetName());",
    "Excel_VBA": "Range(\"B12\").Value = pivotField.Name"
  },
  {
    "Description": "Set cell A14 to 'New Style field name'",
    "OnlyOffice_JS": "pivotWorksheet.GetRange('A14').SetValue('New Style field name');",
    "Excel_VBA": "Range(\"A14\").Value = \"New Style field name\""
  },
  {
    "Description": "Rename the pivot field to 'My name'",
    "OnlyOffice_JS": "pivotField.SetName('My name');",
    "Excel_VBA": "pivotField.Name = \"My name\""
  },
  {
    "Description": "Set cell B14 to the new name of the pivot field",
    "OnlyOffice_JS": "pivotWorksheet.GetRange('B14').SetValue(pivotField.GetName());",
    "Excel_VBA": "Range(\"B14\").Value = pivotField.Name"
  },
  {
    "Description": "Set cell A15 to 'Source Style field name'",
    "OnlyOffice_JS": "pivotWorksheet.GetRange('A15').SetValue('Source Style field name');",
    "Excel_VBA": "Range(\"A15\").Value = \"Source Style field name\""
  },
  {
    "Description": "Set cell B15 to the source name of the pivot field",
    "OnlyOffice_JS": "pivotWorksheet.GetRange('B15').SetValue(pivotField.GetSourceName());",
    "Excel_VBA": "Range(\"B15\").Value = pivotField.SourceName"
  }
]
``````json
{
  "Table": [
    {
      "Get Active Sheet": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Set Header 'Region' in B1": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "Set Header 'Style' in C1": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "Set Header 'Price' in D1": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "Set 'East' in B2": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "Set 'West' in B3": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "Set 'East' in B4": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "Set 'West' in B5": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "Set 'Fancy' in C2": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "Set 'Fancy' in C3": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "Set 'Tee' in C4": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "Set 'Tee' in C5": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "Set 42.5 in D2": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "Set 35.2 in D3": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "Set 12.3 in D4": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "Set 24.8 in D5": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "Get Data Range": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel VBA": "Dim dataRef As Range\nSet dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "Insert Pivot Table in New Worksheet": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel VBA": "Dim pivotTable As PivotTable\nSet pivotTable = ThisWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "Add Fields to Pivot Table - Columns 'Region' and 'Style'": "pivotTable.AddFields({\n\tcolumns: ['Region', 'Style'],\n});",
      "Excel VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlColumnField\n    .PivotFields(\"Style\").Orientation = xlColumnField\nEnd With"
    },
    {
      "Add Data Field 'Price' to Pivot Table": "pivotTable.AddDataField('Price');",
      "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "Get Pivot Fields 'Region'": "var pivotField = pivotTable.GetPivotFields('Region');",
      "Excel VBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "Set Subtotal Name for 'Region' Pivot Field": "pivotField.SetSubtotalName('My name');",
      "Excel VBA": "pivotField.Caption = \"My name\""
    },
    {
      "Set 'Region subtotal name' in A14": "pivotWorksheet.GetRange('A14').SetValue('Region subtotal name');",
      "Excel VBA": "pivotWorksheet.Range(\"A14\").Value = \"Region subtotal name\""
    },
    {
      "Set Subtotal Name value in B14": "pivotWorksheet.GetRange('B14').SetValue(pivotField.GetSubtotalName());",
      "Excel VBA": "pivotWorksheet.Range(\"B14\").Value = pivotField.Caption"
    }
  ]
}
``````json
{
  "actions": [
    {
      "description": "Get the active worksheet",
      "VBA": "Set oWorksheet = ActiveSheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "description": "Set header values in cells B1, C1, and D1",
      "VBA": "oWorksheet.Range(\"B1\").Value = \"Region\"\n" +
              "oWorksheet.Range(\"C1\").Value = \"Style\"\n" +
              "oWorksheet.Range(\"D1\").Value = \"Price\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');\n" +
                     "oWorksheet.GetRange('C1').SetValue('Style');\n" +
                     "oWorksheet.GetRange('D1').SetValue('Price');"
    },
    {
      "description": "Set region values in cells B2 to B5",
      "VBA": "oWorksheet.Range(\"B2\").Value = \"East\"\n" +
              "oWorksheet.Range(\"B3\").Value = \"West\"\n" +
              "oWorksheet.Range(\"B4\").Value = \"East\"\n" +
              "oWorksheet.Range(\"B5\").Value = \"West\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');\n" +
                     "oWorksheet.GetRange('B3').SetValue('West');\n" +
                     "oWorksheet.GetRange('B4').SetValue('East');\n" +
                     "oWorksheet.GetRange('B5').SetValue('West');"
    },
    {
      "description": "Set style values in cells C2 to C5",
      "VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\"\n" +
              "oWorksheet.Range(\"C3\").Value = \"Fancy\"\n" +
              "oWorksheet.Range(\"C4\").Value = \"Tee\"\n" +
              "oWorksheet.Range(\"C5\").Value = \"Tee\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');\n" +
                     "oWorksheet.GetRange('C3').SetValue('Fancy');\n" +
                     "oWorksheet.GetRange('C4').SetValue('Tee');\n" +
                     "oWorksheet.GetRange('C5').SetValue('Tee');"
    },
    {
      "description": "Set price values in cells D2 to D5",
      "VBA": "oWorksheet.Range(\"D2\").Value = 42.5\n" +
              "oWorksheet.Range(\"D3\").Value = 35.2\n" +
              "oWorksheet.Range(\"D4\").Value = 12.3\n" +
              "oWorksheet.Range(\"D5\").Value = 24.8",
      "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);\n" +
                     "oWorksheet.GetRange('D3').SetValue(35.2);\n" +
                     "oWorksheet.GetRange('D4').SetValue(12.3);\n" +
                     "oWorksheet.GetRange('D5').SetValue(24.8);"
    },
    {
      "description": "Get the data range for pivot table",
      "VBA": "Set dataRef = oWorksheet.Range(\"B1:D5\")",
      "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
    },
    {
      "description": "Insert a new pivot table in a new worksheet",
      "VBA": "Set pivotCache = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef)\n" +
              "Set pivotTable = pivotCache.CreatePivotTable(TableDestination:=\"Sheet2!A3\", TableName:=\"PivotTable1\")",
      "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
    },
    {
      "description": "Add fields to the pivot table: Style as columns and Region as rows",
      "VBA": "With pivotTable\n" +
              "    .PivotFields(\"Style\").Orientation = xlColumnField\n" +
              "    .PivotFields(\"Region\").Orientation = xlRowField\n" +
              "End With",
      "OnlyOfficeJS": "pivotTable.AddFields({\n" +
                     "    columns: ['Style'],\n" +
                     "    rows: 'Region'\n" +
                     "});"
    },
    {
      "description": "Add Price as a data field in the pivot table",
      "VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum",
      "OnlyOfficeJS": "pivotTable.AddDataField('Price');"
    },
    {
      "description": "Get the pivot worksheet and the Region pivot field",
      "VBA": "Set pivotWorksheet = pivotTable.Parent\n" +
              "Set pivotField = pivotTable.PivotFields(\"Region\")",
      "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();\n" +
                     "var pivotField = pivotTable.GetPivotFields('Region');"
    },
    {
      "description": "Retrieve subtotals for the Region field",
      "VBA": "subtotals = pivotField.Subtotals",
      "OnlyOfficeJS": "var subtotals = pivotField.GetSubtotals();"
    },
    {
      "description": "Write 'Region subtotals' label in cell A11",
      "VBA": "pivotWorksheet.Range(\"A11\").Value = \"Region subtotals\"",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('A11').SetValue('Region subtotals');"
    },
    {
      "description": "Loop through subtotals and write them starting from row 12",
      "VBA": "Dim k As Integer\n" +
              "k = 12\n" +
              "Dim key As Variant\n" +
              "For Each key In subtotals.Keys\n" +
              "    pivotWorksheet.Cells(k, 1).Value = key\n" +
              "    pivotWorksheet.Cells(k, 2).Value = subtotals(key)\n" +
              "    k = k + 1\n" +
              "Next key",
      "OnlyOfficeJS": "let k = 12;\n" +
                     "for (var i in subtotals) {\n" +
                     "    pivotWorksheet.GetRangeByNumber(k, 0).SetValue(i);\n" +
                     "    pivotWorksheet.GetRangeByNumber(k++, 1).SetValue(subtotals[i]);\n" +
                     "}"
    }
  ]
}
``````json
{
  "table": {
    "headers": [
      "Description",
      "OnlyOffice JS",
      "Excel VBA"
    ],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ActiveSheet"
      },
      {
        "Description": "Set value in cell B1",
        "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
        "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
      },
      {
        "Description": "Set value in cell C1",
        "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
        "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
      },
      {
        "Description": "Set value in cell D1",
        "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
        "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
      },
      {
        "Description": "Set value in cell B2",
        "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
        "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
      },
      {
        "Description": "Set value in cell B3",
        "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
        "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
      },
      {
        "Description": "Set value in cell B4",
        "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
        "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
      },
      {
        "Description": "Set value in cell B5",
        "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
        "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
      },
      {
        "Description": "Set value in cell C2",
        "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
        "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
      },
      {
        "Description": "Set value in cell C3",
        "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
        "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
      },
      {
        "Description": "Set value in cell C4",
        "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
        "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
      },
      {
        "Description": "Set value in cell C5",
        "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
        "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
      },
      {
        "Description": "Set value in cell D2",
        "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
        "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
      },
      {
        "Description": "Set value in cell D3",
        "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
        "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
      },
      {
        "Description": "Set value in cell D4",
        "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
        "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
      },
      {
        "Description": "Set value in cell D5",
        "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
        "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
      },
      {
        "Description": "Get data range from B1 to D5",
        "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
        "Excel VBA": "Set dataRef = oWorksheet.Range(\"B1:D5\")"
      },
      {
        "Description": "Insert pivot table in new worksheet",
        "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
        "Excel VBA": "Set pivotTable = ActiveWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef, TableDestination:=\"NewSheet\")"
      },
      {
        "Description": "Add row fields 'Region' and 'Style' to pivot table",
        "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
        "Excel VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
      },
      {
        "Description": "Add data field 'Price' to pivot table",
        "OnlyOffice JS": "pivotTable.AddDataField('Price');",
        "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\")"
      },
      {
        "Description": "Get the active sheet for the pivot table",
        "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set pivotWorksheet = ActiveSheet"
      },
      {
        "Description": "Get pivot field 'Style'",
        "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Style');",
        "Excel VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")"
      },
      {
        "Description": "Add data field 'Region' to the pivot field table",
        "OnlyOffice JS": "pivotField.GetTable().AddDataField('Region');",
        "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Region\")"
      }
    ]
  }
}
``````json
{
  "Description": "This code initializes the active worksheet, sets values in specific cells, creates a pivot table from a data range, adds fields to the pivot table, and retrieves a pivot field value.",
  "Conversions": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Set dataRef = ThisWorkbook.Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Set pivotTable = ThisWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set pivotWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Style');",
      "Excel_VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")"
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A12').SetValue('The Style field value');",
      "Excel_VBA": "pivotWorksheet.Range(\"A12\").Value = \"The Style field value\""
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetValue());",
      "Excel_VBA": "pivotWorksheet.Range(\"B12\").Value = pivotField.Value"
    }
  ]
}
``````json
[
  {
    "Description": "Get Active Sheet",
    "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
  },
  {
    "Description": "Set value in cell B1 to 'Region'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
    "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
  },
  {
    "Description": "Set value in cell C1 to 'Style'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
    "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
  },
  {
    "Description": "Set value in cell D1 to 'Price'",
    "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
    "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
  },
  {
    "Description": "Set value in cell B2 to 'East'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
    "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
  },
  {
    "Description": "Set value in cell B3 to 'West'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
    "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
  },
  {
    "Description": "Set value in cell B4 to 'East'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
    "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
  },
  {
    "Description": "Set value in cell B5 to 'West'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
    "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
  },
  {
    "Description": "Set value in cell C2 to 'Fancy'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
    "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
  },
  {
    "Description": "Set value in cell C3 to 'Fancy'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
    "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
  },
  {
    "Description": "Set value in cell C4 to 'Tee'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
    "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
  },
  {
    "Description": "Set value in cell C5 to 'Tee'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
    "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
  },
  {
    "Description": "Set value in cell D2 to 42.5",
    "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
    "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
  },
  {
    "Description": "Set value in cell D3 to 35.2",
    "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
    "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
  },
  {
    "Description": "Set value in cell D4 to 12.3",
    "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
    "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
  },
  {
    "Description": "Set value in cell D5 to 24.8",
    "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
    "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
  },
  {
    "Description": "Get data range 'Sheet1'!$B$1:$D$5",
    "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "Excel_VBA": "Dim dataRef As Range\nSet dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
  },
  {
    "Description": "Insert Pivot Table in a new worksheet using dataRef",
    "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "Excel_VBA": "Dim pivotCache As PivotCache\nDim pivotTable As PivotTable\nSet pivotCache = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef)\nSet pivotTable = pivotCache.CreatePivotTable(TableDestination:=Sheets.Add, TableName:=\"PivotTable1\")"
  },
  {
    "Description": "Add 'Region' as row field and 'Style' as column field in Pivot Table",
    "OnlyOffice_JS": "pivotTable.AddFields({ rows: 'Region', columns: 'Style' });",
    "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlColumnField\nEnd With"
  },
  {
    "Description": "Add 'Price' as data field in Pivot Table",
    "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
    "Excel_VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
  },
  {
    "Description": "Move 'Region' field to Columns after 5 seconds",
    "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');\npivotWorksheet.GetRange('A10').SetValue('The Region field will be moved soon');\n\nsetTimeout(function () {\n    pivotField.Move('Columns');\n}, 5000);",
    "Excel_VBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Region\")\nWorksheets(pivotTable.Parent.Name).Range(\"A10\").Value = \"The Region field will be moved soon\"\n\nApplication.OnTime Now + TimeValue(\"00:00:05\"), \"MoveRegionField\"\n\n' Add this subroutine elsewhere in the module\nSub MoveRegionField()\n    pivotTable.PivotFields(\"Region\").Orientation = xlColumnField\nEnd Sub"
  }
]
``````json
{
  "RAGTable": [
    {
      "Description": "Get the active worksheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set cell B1 to 'Region'",
      "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "ExcelVBA": "Range(\"B1\").Value = \"Region\""
    },
    {
      "Description": "Set cell C1 to 'Style'",
      "OnlyOfficeJS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "ExcelVBA": "Range(\"C1\").Value = \"Style\""
    },
    {
      "Description": "Set cell D1 to 'Price'",
      "OnlyOfficeJS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "ExcelVBA": "Range(\"D1\").Value = \"Price\""
    },
    {
      "Description": "Set cell B2 to 'East'",
      "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');",
      "ExcelVBA": "Range(\"B2\").Value = \"East\""
    },
    {
      "Description": "Set cell B3 to 'West'",
      "OnlyOfficeJS": "oWorksheet.GetRange('B3').SetValue('West');",
      "ExcelVBA": "Range(\"B3\").Value = \"West\""
    },
    {
      "Description": "Set cell B4 to 'East'",
      "OnlyOfficeJS": "oWorksheet.GetRange('B4').SetValue('East');",
      "ExcelVBA": "Range(\"B4\").Value = \"East\""
    },
    {
      "Description": "Set cell B5 to 'West'",
      "OnlyOfficeJS": "oWorksheet.GetRange('B5').SetValue('West');",
      "ExcelVBA": "Range(\"B5\").Value = \"West\""
    },
    {
      "Description": "Set cell C2 to 'Fancy'",
      "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "ExcelVBA": "Range(\"C2\").Value = \"Fancy\""
    },
    {
      "Description": "Set cell C3 to 'Fancy'",
      "OnlyOfficeJS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "ExcelVBA": "Range(\"C3\").Value = \"Fancy\""
    },
    {
      "Description": "Set cell C4 to 'Tee'",
      "OnlyOfficeJS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "ExcelVBA": "Range(\"C4\").Value = \"Tee\""
    },
    {
      "Description": "Set cell C5 to 'Tee'",
      "OnlyOfficeJS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "ExcelVBA": "Range(\"C5\").Value = \"Tee\""
    },
    {
      "Description": "Set cell D2 to 42.5",
      "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "ExcelVBA": "Range(\"D2\").Value = 42.5"
    },
    {
      "Description": "Set cell D3 to 35.2",
      "OnlyOfficeJS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "ExcelVBA": "Range(\"D3\").Value = 35.2"
    },
    {
      "Description": "Set cell D4 to 12.3",
      "OnlyOfficeJS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "ExcelVBA": "Range(\"D4\").Value = 12.3"
    },
    {
      "Description": "Set cell D5 to 24.8",
      "OnlyOfficeJS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "ExcelVBA": "Range(\"D5\").Value = 24.8"
    },
    {
      "Description": "Get the data range B1:D5",
      "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "ExcelVBA": "Set dataRef = Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "Description": "Insert a new pivot table on a new worksheet",
      "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "ExcelVBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "Description": "Add 'Region' to rows and 'Style' to columns in the pivot table",
      "OnlyOfficeJS": "pivotTable.AddFields({ rows: 'Region', columns: 'Style' });",
      "ExcelVBA": "With pivotTable.PivotFields(\"Region\")\n    .Orientation = xlRowField\nEnd With\nWith pivotTable.PivotFields(\"Style\")\n    .Orientation = xlColumnField\nEnd With"
    },
    {
      "Description": "Add 'Price' as a data field in the pivot table",
      "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
      "ExcelVBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "Description": "Get the 'Region' pivot field",
      "OnlyOfficeJS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "ExcelVBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "Description": "Set cell A10 with a message",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('A10').SetValue('The Region field will be removed soon');",
      "ExcelVBA": "Range(\"A10\").Value = \"The Region field will be removed soon\""
    },
    {
      "Description": "Remove the 'Region' pivot field after 5 seconds",
      "OnlyOfficeJS": "setTimeout(function () { pivotField.Remove(); }, 5000);",
      "ExcelVBA": "Application.OnTime Now + TimeValue(\"00:00:05\"), \"RemovePivotField\"\n\nSub RemovePivotField()\n    pivotField.Orientation = xlHidden\nEnd Sub"
    }
  ]
}
```**Description:** This code initializes data in a worksheet, creates a pivot table based on that data, and modifies pivot field captions.

```json
{
  "RAG_table": [
    {
      "Action": "Get active sheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Action": "Set header 'Region' in cell B1",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "Action": "Set header 'Style' in cell C1",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "Action": "Set header 'Price' in cell D1",
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "Action": "Set value 'East' in cell B2",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "Action": "Set value 'West' in cell B3",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "Action": "Set value 'East' in cell B4",
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "Action": "Set value 'West' in cell B5",
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "Action": "Set value 'Fancy' in cell C2",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "Action": "Set value 'Fancy' in cell C3",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "Action": "Set value 'Tee' in cell C4",
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "Action": "Set value 'Tee' in cell C5",
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "Action": "Set value 42.5 in cell D2",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "Action": "Set value 35.2 in cell D3",
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "Action": "Set value 12.3 in cell D4",
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "Action": "Set value 24.8 in cell D5",
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "Action": "Get data range B1:D5 from Sheet1",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Set dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "Action": "Insert pivot table in new worksheet based on data range",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Set pivotTable = ThisWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef, TableDestination:=Sheets.Add)"
    },
    {
      "Action": "Add 'Region' and 'Style' as row fields in pivot table",
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "Action": "Set row axis layout to Tabular",
      "OnlyOffice_JS": "pivotTable.SetRowAxisLayout(\"Tabular\", false);",
      "Excel_VBA": "pivotTable.RowAxisLayout xlTabularRow"
    },
    {
      "Action": "Add 'Price' as data field in pivot table",
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "Action": "Get active sheet (pivot worksheet)",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set pivotWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Action": "Get 'Style' pivot field",
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Style');",
      "Excel_VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")"
    },
    {
      "Action": "Set value 'Style field caption' in cell A12",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A12').SetValue('Style field caption');",
      "Excel_VBA": "pivotWorksheet.Range(\"A12\").Value = \"Style field caption\""
    },
    {
      "Action": "Set pivot field caption in cell B12",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetCaption());",
      "Excel_VBA": "pivotWorksheet.Range(\"B12\").Value = pivotField.Caption"
    },
    {
      "Action": "Set value 'New Style field caption' in cell A14",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A14').SetValue('New Style field caption');",
      "Excel_VBA": "pivotWorksheet.Range(\"A14\").Value = \"New Style field caption\""
    },
    {
      "Action": "Change pivot field caption to 'My caption'",
      "OnlyOffice_JS": "pivotField.SetCaption('My caption');",
      "Excel_VBA": "pivotField.Caption = \"My caption\""
    },
    {
      "Action": "Set updated pivot field caption in cell B14",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B14').SetValue(pivotField.GetCaption());",
      "Excel_VBA": "pivotWorksheet.Range(\"B14\").Value = pivotField.Caption"
    }
  ]
}
``````json
{
  "RAG_Table": {
    "Headers": ["Description", "OnlyOffice JS", "Excel VBA", "Status"],
    "Rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ActiveSheet",
        "Status": "Green"
      },
      {
        "Description": "Set value 'Region' in cell B1",
        "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
        "Excel VBA": "Range(\"B1\").Value = \"Region\"",
        "Status": "Green"
      },
      {
        "Description": "Set value 'Style' in cell C1",
        "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
        "Excel VBA": "Range(\"C1\").Value = \"Style\"",
        "Status": "Green"
      },
      {
        "Description": "Set value 'Price' in cell D1",
        "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
        "Excel VBA": "Range(\"D1\").Value = \"Price\"",
        "Status": "Green"
      },
      {
        "Description": "Set value 'East' in cell B2",
        "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
        "Excel VBA": "Range(\"B2\").Value = \"East\"",
        "Status": "Green"
      },
      {
        "Description": "Set value 'West' in cell B3",
        "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
        "Excel VBA": "Range(\"B3\").Value = \"West\"",
        "Status": "Green"
      },
      {
        "Description": "Set value 'East' in cell B4",
        "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
        "Excel VBA": "Range(\"B4\").Value = \"East\"",
        "Status": "Green"
      },
      {
        "Description": "Set value 'West' in cell B5",
        "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
        "Excel VBA": "Range(\"B5\").Value = \"West\"",
        "Status": "Green"
      },
      {
        "Description": "Set value 'Fancy' in cell C2",
        "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
        "Excel VBA": "Range(\"C2\").Value = \"Fancy\"",
        "Status": "Green"
      },
      {
        "Description": "Set value 'Fancy' in cell C3",
        "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
        "Excel VBA": "Range(\"C3\").Value = \"Fancy\"",
        "Status": "Green"
      },
      {
        "Description": "Set value 'Tee' in cell C4",
        "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
        "Excel VBA": "Range(\"C4\").Value = \"Tee\"",
        "Status": "Green"
      },
      {
        "Description": "Set value 'Tee' in cell C5",
        "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
        "Excel VBA": "Range(\"C5\").Value = \"Tee\"",
        "Status": "Green"
      },
      {
        "Description": "Set value 42.5 in cell D2",
        "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
        "Excel VBA": "Range(\"D2\").Value = 42.5",
        "Status": "Green"
      },
      {
        "Description": "Set value 35.2 in cell D3",
        "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
        "Excel VBA": "Range(\"D3\").Value = 35.2",
        "Status": "Green"
      },
      {
        "Description": "Set value 12.3 in cell D4",
        "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
        "Excel VBA": "Range(\"D4\").Value = 12.3",
        "Status": "Green"
      },
      {
        "Description": "Set value 24.8 in cell D5",
        "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
        "Excel VBA": "Range(\"D5\").Value = 24.8",
        "Status": "Green"
      },
      {
        "Description": "Get data range B1:D5",
        "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
        "Excel VBA": "Set dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")",
        "Status": "Green"
      },
      {
        "Description": "Insert pivot table in new worksheet",
        "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
        "Excel VBA": "Set pivotTable = ThisWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef, TableDestination:=Sheets.Add())",
        "Status": "Green"
      },
      {
        "Description": "Add fields 'Style' as columns and 'Region' as rows to pivot table",
        "OnlyOffice JS": "pivotTable.AddFields({ columns: ['Style'], rows: 'Region' });",
        "Excel VBA": "With pivotTable\n    .PivotFields(\"Style\").Orientation = xlColumnField\n    .PivotFields(\"Region\").Orientation = xlRowField\nEnd With",
        "Status": "Green"
      },
      {
        "Description": "Add 'Price' as data field to pivot table",
        "OnlyOffice JS": "pivotTable.AddDataField('Price');",
        "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum",
        "Status": "Green"
      },
      {
        "Description": "Get the active worksheet (pivot worksheet)",
        "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set pivotWorksheet = ActiveSheet",
        "Status": "Green"
      },
      {
        "Description": "Get pivot field 'Region'",
        "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Region');",
        "Excel VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")",
        "Status": "Green"
      },
      {
        "Description": "Set 'DragToColumn' property to false for 'Region' pivot field",
        "OnlyOffice JS": "pivotField.SetDragToColumn(false);",
        "Excel VBA": "' No direct equivalent; controlling field placement is handled via Orientation\n' Orientation is already set to xlRowField above",
        "Status": "Amber"
      },
      {
        "Description": "Set value 'Drag to column' in cell A13",
        "OnlyOffice JS": "pivotWorksheet.GetRange('A13').SetValue('Drag to column');",
        "Excel VBA": "Range(\"A13\").Value = \"Drag to column\"",
        "Status": "Green"
      },
      {
        "Description": "Set value of 'DragToColumn' property in cell B13",
        "OnlyOffice JS": "pivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToColumn());",
        "Excel VBA": "Range(\"B13\").Value = pivotField.Orientation = xlColumnField",
        "Status": "Green"
      },
      {
        "Description": "Set instruction text in cell A14",
        "OnlyOffice JS": "pivotWorksheet.GetRange('A14').SetValue('Try drag Region to columns!');",
        "Excel VBA": "Range(\"A14\").Value = \"Try drag Region to columns!\"",
        "Status": "Green"
      }
    ]
  }
}
``````json
{
  "Description": "Equivalent Excel VBA code for OnlyOffice JS methods",
  "Table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Set dataRef = ThisWorkbook.Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Set pivotTable = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=Sheets.Add().Range(\"A1\"))"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddFields({\n\trows: ['Style'],\n\tcolumns: 'Region',\n});",
      "Excel_VBA": "With pivotTable.PivotFields(\"Style\")\n    .Orientation = xlRowField\nEnd With\nWith pivotTable.PivotFields(\"Region\")\n    .Orientation = xlColumnField\nEnd With"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "Excel_VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "OnlyOffice_JS": "pivotField.SetDragToData(false);",
      "Excel_VBA": "' Excel VBA does not have a direct equivalent to SetDragToData. You can set the Orientation as needed.\n' Example:\n'pivotField.Orientation = xlColumnField"
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A13').SetValue('Drag to data');",
      "Excel_VBA": "pivotWorksheet.Range(\"A13\").Value = \"Drag to data\""
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToData());",
      "Excel_VBA": "pivotWorksheet.Range(\"B13\").Value = (pivotField.Orientation = xlDataField)"
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A14').SetValue('Try drag Region to data!');",
      "Excel_VBA": "pivotWorksheet.Range(\"A14\").Value = \"Try drag Region to data!\""
    }
  ]
}
``````json
{
  "RAG": [
    {
      "Description": "Get the active worksheet",
      "VBA": "Set oWorksheet = ActiveSheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Set B1 value to 'Region'",
      "VBA": "Range(\"B1\").Value = \"Region\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');"
    },
    {
      "Description": "Set C1 value to 'Style'",
      "VBA": "Range(\"C1\").Value = \"Style\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');"
    },
    {
      "Description": "Set D1 value to 'Price'",
      "VBA": "Range(\"D1\").Value = \"Price\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');"
    },
    {
      "Description": "Set B2 value to 'East'",
      "VBA": "Range(\"B2\").Value = \"East\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');"
    },
    {
      "Description": "Set B3 value to 'West'",
      "VBA": "Range(\"B3\").Value = \"West\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');"
    },
    {
      "Description": "Set B4 value to 'East'",
      "VBA": "Range(\"B4\").Value = \"East\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');"
    },
    {
      "Description": "Set B5 value to 'West'",
      "VBA": "Range(\"B5\").Value = \"West\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');"
    },
    {
      "Description": "Set C2 value to 'Fancy'",
      "VBA": "Range(\"C2\").Value = \"Fancy\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');"
    },
    {
      "Description": "Set C3 value to 'Fancy'",
      "VBA": "Range(\"C3\").Value = \"Fancy\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');"
    },
    {
      "Description": "Set C4 value to 'Tee'",
      "VBA": "Range(\"C4\").Value = \"Tee\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');"
    },
    {
      "Description": "Set C5 value to 'Tee'",
      "VBA": "Range(\"C5\").Value = \"Tee\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');"
    },
    {
      "Description": "Set D2 value to 42.5",
      "VBA": "Range(\"D2\").Value = 42.5",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);"
    },
    {
      "Description": "Set D3 value to 35.2",
      "VBA": "Range(\"D3\").Value = 35.2",
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);"
    },
    {
      "Description": "Set D4 value to 12.3",
      "VBA": "Range(\"D4\").Value = 12.3",
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);"
    },
    {
      "Description": "Set D5 value to 24.8",
      "VBA": "Range(\"D5\").Value = 24.8",
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);"
    },
    {
      "Description": "Get range B1:D5",
      "VBA": "Set dataRef = Range(\"B1:D5\")",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
    },
    {
      "Description": "Insert a new pivot table worksheet",
      "VBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
    },
    {
      "Description": "Add 'Style' as row field and 'Region' as column field to pivot table",
      "VBA": "With pivotTable\n    .PivotFields(\"Style\").Orientation = xlRowField\n    .PivotFields(\"Region\").Orientation = xlColumnField\nEnd With",
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Style'], columns: 'Region' });"
    },
    {
      "Description": "Add 'Price' as data field to pivot table",
      "VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\")",
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');"
    },
    {
      "Description": "Get the active pivot worksheet",
      "VBA": "Set pivotWorksheet = ActiveSheet",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Get the 'Region' pivot field",
      "VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")",
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');"
    },
    {
      "Description": "Set 'Region' pivot field to not be draggable to page",
      "VBA": "pivotField.EnableItemSelection = False",
      "OnlyOffice_JS": "pivotField.SetDragToPage(false);"
    },
    {
      "Description": "Set A13 value to 'Drag to page'",
      "VBA": "Range(\"A13\").Value = \"Drag to page\"",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A13').SetValue('Drag to page');"
    },
    {
      "Description": "Set B13 value to the 'Drag to page' status of 'Region' field",
      "VBA": "Range(\"B13\").Value = pivotField.EnableItemSelection",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToPage());"
    },
    {
      "Description": "Set A14 value to prompt dragging 'Region' to pages",
      "VBA": "Range(\"A14\").Value = \"Try drag Region to pages!\"",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A14').SetValue('Try drag Region to pages!');"
    }
  ]
}
``````json
[
  {
    "Description": "Initialize the active worksheet",
    "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
    "ExcelVBA": "Set oWorksheet = ActiveSheet"
  },
  {
    "Description": "Set 'Region' in cell B1",
    "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');",
    "ExcelVBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
  },
  {
    "Description": "Set 'Style' in cell C1",
    "OnlyOfficeJS": "oWorksheet.GetRange('C1').SetValue('Style');",
    "ExcelVBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
  },
  {
    "Description": "Set 'Price' in cell D1",
    "OnlyOfficeJS": "oWorksheet.GetRange('D1').SetValue('Price');",
    "ExcelVBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
  },
  {
    "Description": "Set 'East' in cell B2",
    "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');",
    "ExcelVBA": "oWorksheet.Range(\"B2\").Value = \"East\""
  },
  {
    "Description": "Set 'West' in cell B3",
    "OnlyOfficeJS": "oWorksheet.GetRange('B3').SetValue('West');",
    "ExcelVBA": "oWorksheet.Range(\"B3\").Value = \"West\""
  },
  {
    "Description": "Set 'East' in cell B4",
    "OnlyOfficeJS": "oWorksheet.GetRange('B4').SetValue('East');",
    "ExcelVBA": "oWorksheet.Range(\"B4\").Value = \"East\""
  },
  {
    "Description": "Set 'West' in cell B5",
    "OnlyOfficeJS": "oWorksheet.GetRange('B5').SetValue('West');",
    "ExcelVBA": "oWorksheet.Range(\"B5\").Value = \"West\""
  },
  {
    "Description": "Set 'Fancy' in cell C2",
    "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
    "ExcelVBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
  },
  {
    "Description": "Set 'Fancy' in cell C3",
    "OnlyOfficeJS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
    "ExcelVBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
  },
  {
    "Description": "Set 'Tee' in cell C4",
    "OnlyOfficeJS": "oWorksheet.GetRange('C4').SetValue('Tee');",
    "ExcelVBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
  },
  {
    "Description": "Set 'Tee' in cell C5",
    "OnlyOfficeJS": "oWorksheet.GetRange('C5').SetValue('Tee');",
    "ExcelVBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
  },
  {
    "Description": "Set 42.5 in cell D2",
    "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);",
    "ExcelVBA": "oWorksheet.Range(\"D2\").Value = 42.5"
  },
  {
    "Description": "Set 35.2 in cell D3",
    "OnlyOfficeJS": "oWorksheet.GetRange('D3').SetValue(35.2);",
    "ExcelVBA": "oWorksheet.Range(\"D3\").Value = 35.2"
  },
  {
    "Description": "Set 12.3 in cell D4",
    "OnlyOfficeJS": "oWorksheet.GetRange('D4').SetValue(12.3);",
    "ExcelVBA": "oWorksheet.Range(\"D4\").Value = 12.3"
  },
  {
    "Description": "Set 24.8 in cell D5",
    "OnlyOfficeJS": "oWorksheet.GetRange('D5').SetValue(24.8);",
    "ExcelVBA": "oWorksheet.Range(\"D5\").Value = 24.8"
  },
  {
    "Description": "Get data range from Sheet1",
    "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "ExcelVBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
  },
  {
    "Description": "Insert a new pivot table worksheet based on the data range",
    "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "ExcelVBA": "Set pivotTable = ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=Sheets.Add().Range(\"A1\"), TableName:=\"PivotTable1\")"
  },
  {
    "Description": "Add 'Style' to rows and 'Region' to columns in the pivot table",
    "OnlyOfficeJS": "pivotTable.AddFields({ rows: ['Style'], columns: 'Region' });",
    "ExcelVBA": "With pivotTable\n    .PivotFields(\"Style\").Orientation = xlRowField\n    .PivotFields(\"Region\").Orientation = xlColumnField\nEnd With"
  },
  {
    "Description": "Add 'Price' as a data field in the pivot table",
    "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
    "ExcelVBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
  },
  {
    "Description": "Get the active pivot worksheet",
    "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();",
    "ExcelVBA": "Set pivotWorksheet = ActiveSheet"
  },
  {
    "Description": "Get the 'Region' pivot field",
    "OnlyOfficeJS": "var pivotField = pivotTable.GetPivotFields('Region');",
    "ExcelVBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
  },
  {
    "Description": "Set 'Region' field to not be dragged to rows",
    "OnlyOfficeJS": "pivotField.SetDragToRow(false);",
    "ExcelVBA": "pivotField.Orientation = xlColumnField"
  },
  {
    "Description": "Set 'Drag to row' label in cell A13",
    "OnlyOfficeJS": "pivotWorksheet.GetRange('A13').SetValue('Drag to row');",
    "ExcelVBA": "pivotWorksheet.Range(\"A13\").Value = \"Drag to row\""
  },
  {
    "Description": "Set the value of 'Drag to row' status in cell B13",
    "OnlyOfficeJS": "pivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToRow());",
    "ExcelVBA": "pivotWorksheet.Range(\"B13\").Value = (pivotField.Orientation = xlRowField)"
  },
  {
    "Description": "Set instruction message in cell A14",
    "OnlyOfficeJS": "pivotWorksheet.GetRange('A14').SetValue('Try drag Region to rows!');",
    "ExcelVBA": "pivotWorksheet.Range(\"A14\").Value = \"Try drag Region to rows!\""
  }
]
``````json
{
  "table": {
    "header": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
      },
      {
        "Description": "Set value 'Region' in cell B1",
        "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
        "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
      },
      {
        "Description": "Set value 'Style' in cell C1",
        "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
        "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
      },
      {
        "Description": "Set value 'Price' in cell D1",
        "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
        "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
      },
      {
        "Description": "Set value 'East' in cell B2",
        "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
        "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
      },
      {
        "Description": "Set value 'West' in cell B3",
        "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
        "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
      },
      {
        "Description": "Set value 'East' in cell B4",
        "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
        "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
      },
      {
        "Description": "Set value 'West' in cell B5",
        "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
        "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
      },
      {
        "Description": "Set value 'Fancy' in cell C2",
        "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
        "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
      },
      {
        "Description": "Set value 'Fancy' in cell C3",
        "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
        "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
      },
      {
        "Description": "Set value 'Tee' in cell C4",
        "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
        "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
      },
      {
        "Description": "Set value 'Tee' in cell C5",
        "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
        "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
      },
      {
        "Description": "Set value 42.5 in cell D2",
        "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
        "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
      },
      {
        "Description": "Set value 35.2 in cell D3",
        "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
        "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
      },
      {
        "Description": "Set value 12.3 in cell D4",
        "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
        "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
      },
      {
        "Description": "Set value 24.8 in cell D5",
        "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
        "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
      },
      {
        "Description": "Define data range B1:D5 on Sheet1",
        "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
        "Excel VBA": "Set dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
      },
      {
        "Description": "Insert a new PivotTable on a new worksheet using the data range",
        "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
        "Excel VBA": "Dim pivotCache As PivotCache\nSet pivotCache = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef)\nDim pivotSheet As Worksheet\nSet pivotSheet = ThisWorkbook.Sheets.Add\nDim pivotTable As PivotTable\nSet pivotTable = pivotCache.CreatePivotTable(TableDestination:=pivotSheet.Range(\"A3\"), TableName:=\"PivotTable1\")"
      },
      {
        "Description": "Add 'Region' and 'Style' as row fields in the PivotTable",
        "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
        "Excel VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
      },
      {
        "Description": "Add 'Price' as a data field in the PivotTable",
        "OnlyOffice JS": "pivotTable.AddDataField('Price');",
        "Excel VBA": "With pivotTable\n    .PivotFields(\"Price\").Orientation = xlDataField\n    .PivotFields(\"Price\").Function = xlSum\nEnd With"
      },
      {
        "Description": "Set the row axis layout to Tabular in the PivotTable",
        "OnlyOffice JS": "pivotTable.SetRowAxisLayout('Tabular');",
        "Excel VBA": "pivotTable.RowAxisLayout xlTabularRow"
      },
      {
        "Description": "Get the active sheet containing the PivotTable",
        "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set pivotWorksheet = pivotTable.Parent"
      },
      {
        "Description": "Get the 'Region' pivot field from the PivotTable",
        "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Region');",
        "Excel VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
      },
      {
        "Description": "Enable blank line layout for the 'Region' pivot field",
        "OnlyOffice JS": "pivotField.SetLayoutBlankLine(true);",
        "Excel VBA": "pivotField.ShowBlankLines = True"
      },
      {
        "Description": "Set the value 'Region blank line' in cell A14 of the Pivot worksheet",
        "OnlyOffice JS": "pivotWorksheet.GetRange('A14').SetValue('Region blank line');",
        "Excel VBA": "pivotWorksheet.Range(\"A14\").Value = \"Region blank line\""
      },
      {
        "Description": "Set the value of cell B14 to the 'ShowBlankLines' property of the 'Region' pivot field",
        "OnlyOffice JS": "pivotWorksheet.GetRange('B14').SetValue(pivotField.GetLayoutBlankLine());",
        "Excel VBA": "pivotWorksheet.Range(\"B14\").Value = pivotField.ShowBlankLines"
      }
    ]
  }
}
``````json
{
  "description": "Excel VBA equivalents for OnlyOffice JS methods used in the script.",
  "table": {
    "headers": ["OnlyOffice JS", "Excel VBA"],
    "rows": [
      [
        "var oWorksheet = Api.GetActiveSheet();",
        "Set oWorksheet = ActiveSheet"
      ],
      [
        "oWorksheet.GetRange('B1').SetValue('Region');",
        "Range(\"B1\").Value = \"Region\""
      ],
      [
        "oWorksheet.GetRange('C1').SetValue('Style');",
        "Range(\"C1\").Value = \"Style\""
      ],
      [
        "oWorksheet.GetRange('D1').SetValue('Price');",
        "Range(\"D1\").Value = \"Price\""
      ],
      [
        "oWorksheet.GetRange('B2').SetValue('East');",
        "Range(\"B2\").Value = \"East\""
      ],
      [
        "oWorksheet.GetRange('B3').SetValue('West');",
        "Range(\"B3\").Value = \"West\""
      ],
      [
        "oWorksheet.GetRange('B4').SetValue('East');",
        "Range(\"B4\").Value = \"East\""
      ],
      [
        "oWorksheet.GetRange('B5').SetValue('West');",
        "Range(\"B5\").Value = \"West\""
      ],
      [
        "oWorksheet.GetRange('C2').SetValue('Fancy');",
        "Range(\"C2\").Value = \"Fancy\""
      ],
      [
        "oWorksheet.GetRange('C3').SetValue('Fancy');",
        "Range(\"C3\").Value = \"Fancy\""
      ],
      [
        "oWorksheet.GetRange('C4').SetValue('Tee');",
        "Range(\"C4\").Value = \"Tee\""
      ],
      [
        "oWorksheet.GetRange('C5').SetValue('Tee');",
        "Range(\"C5\").Value = \"Tee\""
      ],
      [
        "oWorksheet.GetRange('D2').SetValue(42.5);",
        "Range(\"D2\").Value = 42.5"
      ],
      [
        "oWorksheet.GetRange('D3').SetValue(35.2);",
        "Range(\"D3\").Value = 35.2"
      ],
      [
        "oWorksheet.GetRange('D4').SetValue(12.3);",
        "Range(\"D4\").Value = 12.3"
      ],
      [
        "oWorksheet.GetRange('D5').SetValue(24.8);",
        "Range(\"D5\").Value = 24.8"
      ],
      [
        "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
        "Set dataRef = Range(\"B1:D5\")"
      ],
      [
        "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
        "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
      ],
      [
        "pivotTable.AddFields({ rows: ['Region', 'Style'], });",
        "With pivotTable.PivotFields(\"Region\")\n    .Orientation = xlRowField\nEnd With\nWith pivotTable.PivotFields(\"Style\")\n    .Orientation = xlRowField\nEnd With"
      ],
      [
        "pivotTable.AddDataField('Price');",
        "pivotTable.AddDataField pivotTable.PivotFields(\"Price\")"
      ],
      [
        "var pivotWorksheet = Api.GetActiveSheet();",
        "Set pivotWorksheet = ActiveSheet"
      ],
      [
        "var pivotField = pivotTable.GetPivotFields('Region');",
        "Set pivotField = pivotTable.PivotFields(\"Region\")"
      ],
      [
        "pivotField.SetLayoutCompactRow(false);",
        "pivotField.LayoutCompactRow = False"
      ],
      [
        "pivotWorksheet.GetRange('A12').SetValue('Region layout compact');",
        "Range(\"A12\").Value = \"Region layout compact\""
      ],
      [
        "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetLayoutCompactRow());",
        "Range(\"B12\").Value = pivotField.LayoutCompactRow"
      ]
    ]
  }
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
    "ExcelVBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
  },
  {
    "Description": "Set headers in B1, C1, D1",
    "OnlyOfficeJS": "\n oWorksheet.GetRange('B1').SetValue('Region');\n oWorksheet.GetRange('C1').SetValue('Style');\n oWorksheet.GetRange('D1').SetValue('Price');",
    "ExcelVBA": "\n oWorksheet.Range(\"B1\").Value = \"Region\"\n oWorksheet.Range(\"C1\").Value = \"Style\"\n oWorksheet.Range(\"D1\").Value = \"Price\""
  },
  {
    "Description": "Set values in B2 to B5",
    "OnlyOfficeJS": "\n oWorksheet.GetRange('B2').SetValue('East');\n oWorksheet.GetRange('B3').SetValue('West');\n oWorksheet.GetRange('B4').SetValue('East');\n oWorksheet.GetRange('B5').SetValue('West');",
    "ExcelVBA": "\n oWorksheet.Range(\"B2\").Value = \"East\"\n oWorksheet.Range(\"B3\").Value = \"West\"\n oWorksheet.Range(\"B4\").Value = \"East\"\n oWorksheet.Range(\"B5\").Value = \"West\""
  },
  {
    "Description": "Set values in C2 to C5",
    "OnlyOfficeJS": "\n oWorksheet.GetRange('C2').SetValue('Fancy');\n oWorksheet.GetRange('C3').SetValue('Fancy');\n oWorksheet.GetRange('C4').SetValue('Tee');\n oWorksheet.GetRange('C5').SetValue('Tee');",
    "ExcelVBA": "\n oWorksheet.Range(\"C2\").Value = \"Fancy\"\n oWorksheet.Range(\"C3\").Value = \"Fancy\"\n oWorksheet.Range(\"C4\").Value = \"Tee\"\n oWorksheet.Range(\"C5\").Value = \"Tee\""
  },
  {
    "Description": "Set values in D2 to D5",
    "OnlyOfficeJS": "\n oWorksheet.GetRange('D2').SetValue(42.5);\n oWorksheet.GetRange('D3').SetValue(35.2);\n oWorksheet.GetRange('D4').SetValue(12.3);\n oWorksheet.GetRange('D5').SetValue(24.8);",
    "ExcelVBA": "\n oWorksheet.Range(\"D2\").Value = 42.5\n oWorksheet.Range(\"D3\").Value = 35.2\n oWorksheet.Range(\"D4\").Value = 12.3\n oWorksheet.Range(\"D5\").Value = 24.8"
  },
  {
    "Description": "Get the data range for the pivot table",
    "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "ExcelVBA": "Dim dataRef As Range\nSet dataRef = oWorksheet.Range(\"B1:D5\")"
  },
  {
    "Description": "Insert a new pivot table worksheet",
    "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "ExcelVBA": "Dim pivotTable As PivotTable\nDim pivotSheet As Worksheet\nSet pivotSheet = Worksheets.Add\nSet pivotTable = pivotSheet.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
  },
  {
    "Description": "Add row fields 'Region' and 'Style' to the pivot table",
    "OnlyOfficeJS": "\n pivotTable.AddFields({\n \trows: ['Region', 'Style'],\n });",
    "ExcelVBA": "\n With pivotTable\n \t.PivotFields(\"Region\").Orientation = xlRowField\n \t.PivotFields(\"Style\").Orientation = xlRowField\n End With"
  },
  {
    "Description": "Add 'Price' as a data field in the pivot table",
    "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
    "ExcelVBA": "With pivotTable\n \t.PivotFields(\"Price\").Orientation = xlDataField\n \t.PivotFields(\"Price\").Function = xlSum\n End With"
  },
  {
    "Description": "Get the active sheet containing the pivot table",
    "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();",
    "ExcelVBA": "Set pivotWorksheet = ActiveSheet"
  },
  {
    "Description": "Get the 'Region' pivot field",
    "OnlyOfficeJS": "var pivotField = pivotTable.GetPivotFields('Region');",
    "ExcelVBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Region\")"
  },
  {
    "Description": "Set the layout form of 'Region' field to 'Tabular'",
    "OnlyOfficeJS": "pivotField.SetLayoutForm(\"Tabular\");",
    "ExcelVBA": "pivotField.LayoutForm = xlTabular"
  },
  {
    "Description": "Set values in A12 and B12 in the pivot worksheet",
    "OnlyOfficeJS": "\n pivotWorksheet.GetRange('A12').SetValue('Region layout form');\n pivotWorksheet.GetRange('B12').SetValue(pivotField.GetLayoutForm());",
    "ExcelVBA": "\n pivotWorksheet.Range(\"A12\").Value = \"Region layout form\"\n pivotWorksheet.Range(\"B12\").Value = pivotField.LayoutForm"
  }
]
``````json
{
  "description": "Equivalent OnlyOffice JS methods and their corresponding Excel VBA code for initializing worksheets, setting cell values, creating pivot tables, adding fields, and setting page breaks.",
  "equivalents": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Set pivotTable = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=Sheets.Add().Range(\"A1\"), TableName:= \"PivotTable1\")"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "Excel_VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "OnlyOffice_JS": "pivotField.SetLayoutPageBreak(true);",
      "Excel_VBA": "pivotField.EnableItemSelection = True"
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A15').SetValue('Page break:');",
      "Excel_VBA": "pivotWorksheet.Range(\"A15\").Value = \"Page break:\""
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B15').SetValue(pivotField.GetLayoutPageBreak());",
      "Excel_VBA": "pivotWorksheet.Range(\"B15\").Value = pivotField.LayoutPageBreak"
    }
  ]
}
``````json
{
  "description": "Equivalent Excel VBA code for the provided OnlyOffice API methods.",
  "methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "VBA": "Dim dataRef As Range\nSet dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "VBA": "Dim pivotTable As PivotTable\nSet pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'], });",
      "VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice JS": "pivotTable.AddDataField('Price');",
      "VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "VBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "OnlyOffice JS": "pivotField.SetLayoutSubtotalLocation('Bottom');",
      "VBA": "pivotField.Subtotals(1) = True\npivotField.LayoutSubtotalLocation = xlAtBottom"
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('A14').SetValue('Region layout subtotal location');",
      "VBA": "pivotWorksheet.Range(\"A14\").Value = \"Region layout subtotal location\""
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('B14').SetValue(pivotField.GetLayoutSubtotalLocation());",
      "VBA": "pivotWorksheet.Range(\"B14\").Value = pivotField.LayoutSubtotalLocation"
    }
  ]
}
``````json
{
  "table": {
    "header": ["Description", "Excel VBA", "OnlyOffice JS"],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "Excel VBA": "Set oWorksheet = ActiveSheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();"
      },
      {
        "Description": "Set cell B1 to 'Region'",
        "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\"",
        "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');"
      },
      {
        "Description": "Set cell C1 to 'Style'",
        "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\"",
        "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');"
      },
      {
        "Description": "Set cell D1 to 'Price'",
        "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\"",
        "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');"
      },
      {
        "Description": "Set cell B2 to 'East'",
        "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\"",
        "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');"
      },
      {
        "Description": "Set cell B3 to 'West'",
        "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\"",
        "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');"
      },
      {
        "Description": "Set cell B4 to 'East'",
        "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\"",
        "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');"
      },
      {
        "Description": "Set cell B5 to 'West'",
        "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\"",
        "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');"
      },
      {
        "Description": "Set cell C2 to 'Fancy'",
        "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\"",
        "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');"
      },
      {
        "Description": "Set cell C3 to 'Fancy'",
        "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\"",
        "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');"
      },
      {
        "Description": "Set cell C4 to 'Tee'",
        "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\"",
        "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');"
      },
      {
        "Description": "Set cell C5 to 'Tee'",
        "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\"",
        "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');"
      },
      {
        "Description": "Set cell D2 to 42.5",
        "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5",
        "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);"
      },
      {
        "Description": "Set cell D3 to 35.2",
        "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2",
        "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);"
      },
      {
        "Description": "Set cell D4 to 12.3",
        "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3",
        "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);"
      },
      {
        "Description": "Set cell D5 to 24.8",
        "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8",
        "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);"
      },
      {
        "Description": "Get range B1:D5",
        "Excel VBA": "Set dataRef = oWorksheet.Range(\"B1:D5\")",
        "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
      },
      {
        "Description": "Insert pivot table on a new worksheet",
        "Excel VBA": "Set pivotTable = Worksheets.Add.PivotTable(\"PivotTable1\", dataRef)",
        "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
      },
      {
        "Description": "Add 'Region' and 'Style' as row fields to the pivot table",
        "Excel VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With",
        "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });"
      },
      {
        "Description": "Add 'Price' as a data field to the pivot table",
        "Excel VBA": "With pivotTable\n    .AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With",
        "OnlyOffice JS": "pivotTable.AddDataField('Price');"
      },
      {
        "Description": "Get the active worksheet (pivot worksheet)",
        "Excel VBA": "Set pivotWorksheet = ActiveSheet",
        "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();"
      },
      {
        "Description": "Get the 'Region' pivot field",
        "Excel VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")",
        "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Region');"
      },
      {
        "Description": "Disable layout subtotals for 'Region' field",
        "Excel VBA": "pivotField.Subtotals = Array(False, False, False, False, False, False, False, False, False, False, False, False)",
        "OnlyOffice JS": "pivotField.SetLayoutSubtotals(false);"
      },
      {
        "Description": "Set cell A14 to display 'Region layout subtotals'",
        "Excel VBA": "pivotWorksheet.Range(\"A14\").Value = \"Region layout subtotals\"",
        "OnlyOffice JS": "pivotWorksheet.GetRange('A14').SetValue('Region layout subtotals');"
      },
      {
        "Description": "Set cell B14 to display the layout subtotals status of 'Region' field",
        "Excel VBA": "pivotWorksheet.Range(\"B14\").Value = pivotField.Subtotals(1)",
        "OnlyOffice JS": "pivotWorksheet.GetRange('B14').SetValue(pivotField.GetLayoutSubtotals());"
      }
    ]
  }
}
```**Equivalent Excel VBA Code for the Provided OnlyOffice JavaScript Code Performing Data Population and Pivot Table Creation**

```json
{
  "RAG_Table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel VBA": "Dim dataRef As Range\nSet dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel VBA": "Dim pivotCache As PivotCache\nDim pivotTable As PivotTable\nDim pivotSheet As Worksheet\n\nSet pivotCache = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef)\nSet pivotSheet = ThisWorkbook.Worksheets.Add\nSet pivotTable = pivotCache.CreatePivotTable(TableDestination:=pivotSheet.Range(\"A3\"), TableName:=\"PivotTable1\")"
    },
    {
      "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'], });",
      "Excel VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice JS": "pivotTable.SetRowAxisLayout(\"Tabular\", false);",
      "Excel VBA": "With pivotTable\n    .RowAxisLayout xlTabularRow\nEnd With"
    },
    {
      "OnlyOffice JS": "pivotTable.AddDataField('Price');",
      "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Style');",
      "Excel VBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Style\")"
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('A12').SetValue('Style field name');",
      "Excel VBA": "pivotWorksheet.Range(\"A12\").Value = \"Style field name\""
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetName());",
      "Excel VBA": "pivotWorksheet.Range(\"B12\").Value = pivotField.Name"
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('A14').SetValue('New Style field name');",
      "Excel VBA": "pivotWorksheet.Range(\"A14\").Value = \"New Style field name\""
    },
    {
      "OnlyOffice JS": "pivotField.SetName('My name');",
      "Excel VBA": "pivotField.Name = \"My name\""
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('B14').SetValue(pivotField.GetName());",
      "Excel VBA": "pivotWorksheet.Range(\"B14\").Value = pivotField.Name"
    }
  ]
}
``````json
{
  "description": "This script initializes the active worksheet, sets values in specific cells, creates a pivot table from a defined range, adds row and data fields to the pivot table, modifies a cell in the pivot worksheet, and changes the orientation of a pivot field after a delay.",
  "mapping": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel VBA": "Set dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel VBA": "Set pivotTable = ThisWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "Excel VBA": "With pivotTable \n    .PivotFields(\"Region\").Orientation = xlRowField \n    .PivotFields(\"Style\").Orientation = xlRowField \nEnd With"
    },
    {
      "OnlyOffice JS": "pivotTable.AddDataField('Price');",
      "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('A12').SetValue('The Style field orientation will change soon');",
      "Excel VBA": "pivotWorksheet.Range(\"A12\").Value = \"The Style field orientation will change soon\""
    },
    {
      "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Style');",
      "Excel VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")"
    },
    {
      "OnlyOffice JS": "setTimeout(function () { pivotField.SetOrientation(\"Columns\"); }, 5000);",
      "Excel VBA": "Application.OnTime Now + TimeValue(\"00:00:05\"), \"SetPivotFieldOrientation\"\n\nSub SetPivotFieldOrientation()\n    pivotField.Orientation = xlColumnField\nEnd Sub"
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
  },
  {
    "Description": "Set header B1 to 'Region'",
    "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
    "Excel VBA": "Range(\"B1\").Value = \"Region\""
  },
  {
    "Description": "Set header C1 to 'Style'",
    "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
    "Excel VBA": "Range(\"C1\").Value = \"Style\""
  },
  {
    "Description": "Set header D1 to 'Price'",
    "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
    "Excel VBA": "Range(\"D1\").Value = \"Price\""
  },
  {
    "Description": "Set value B2 to 'East'",
    "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
    "Excel VBA": "Range(\"B2\").Value = \"East\""
  },
  {
    "Description": "Set value B3 to 'West'",
    "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
    "Excel VBA": "Range(\"B3\").Value = \"West\""
  },
  {
    "Description": "Set value B4 to 'East'",
    "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
    "Excel VBA": "Range(\"B4\").Value = \"East\""
  },
  {
    "Description": "Set value B5 to 'West'",
    "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
    "Excel VBA": "Range(\"B5\").Value = \"West\""
  },
  {
    "Description": "Set value C2 to 'Fancy'",
    "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
    "Excel VBA": "Range(\"C2\").Value = \"Fancy\""
  },
  {
    "Description": "Set value C3 to 'Fancy'",
    "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
    "Excel VBA": "Range(\"C3\").Value = \"Fancy\""
  },
  {
    "Description": "Set value C4 to 'Tee'",
    "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
    "Excel VBA": "Range(\"C4\").Value = \"Tee\""
  },
  {
    "Description": "Set value C5 to 'Tee'",
    "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
    "Excel VBA": "Range(\"C5\").Value = \"Tee\""
  },
  {
    "Description": "Set value D2 to 42.5",
    "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
    "Excel VBA": "Range(\"D2\").Value = 42.5"
  },
  {
    "Description": "Set value D3 to 35.2",
    "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
    "Excel VBA": "Range(\"D3\").Value = 35.2"
  },
  {
    "Description": "Set value D4 to 12.3",
    "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
    "Excel VBA": "Range(\"D4\").Value = 12.3"
  },
  {
    "Description": "Set value D5 to 24.8",
    "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
    "Excel VBA": "Range(\"D5\").Value = 24.8"
  },
  {
    "Description": "Get data range B1:D5",
    "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "Excel VBA": "Set dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
  },
  {
    "Description": "Insert a new pivot table worksheet based on data range",
    "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "Excel VBA": "Set pivotTable = ThisWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
  },
  {
    "Description": "Add 'Region' and 'Style' as row fields to the pivot table",
    "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
    "Excel VBA": "With pivotTable.PivotFields(\"Region\")\n    .Orientation = xlRowField\nEnd With\nWith pivotTable.PivotFields(\"Style\")\n    .Orientation = xlRowField\nEnd With"
  },
  {
    "Description": "Add 'Price' as a data field to the pivot table",
    "OnlyOffice JS": "pivotTable.AddDataField('Price');",
    "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
  },
  {
    "Description": "Set cell A12 with a message in the pivot worksheet",
    "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A12').SetValue('The Style field position will change soon');",
    "Excel VBA": "ThisWorkbook.ActiveSheet.Range(\"A12\").Value = \"The Style field position will change soon\""
  },
  {
    "Description": "Get the 'Style' pivot field",
    "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Style');",
    "Excel VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")"
  },
  {
    "Description": "Set the position of 'Style' pivot field after 5 seconds",
    "OnlyOffice JS": "setTimeout(function () {\n    pivotField.SetPosition(1);\n}, 5000);",
    "Excel VBA": "Application.OnTime Now + TimeValue(\"00:00:05\"), \"SetPivotFieldPosition\"\n\nSub SetPivotFieldPosition()\n    pivotField.Position = 1\nEnd Sub"
  }
]
``````json
{
  "Description": "Sets up worksheet data, creates a pivot table, configures its fields, and adjusts pivot table settings.",
  "CodeComparison": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel VBA": "Set pivotTable = ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=Sheets.Add().Range(\"A3\"), TableName:=\"PivotTable1\")"
    },
    {
      "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "Excel VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice JS": "pivotTable.AddDataField('Price');",
      "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOffice JS": "pivotTable.SetRowAxisLayout('Tabular');",
      "Excel VBA": "pivotTable.RowAxisLayout xlTabularRow"
    },
    {
      "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "Excel VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "OnlyOffice JS": "pivotField.SetRepeatLabels(true);",
      "Excel VBA": "pivotField.RepeatLabels = True"
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('A12').SetValue('Region repeat labels');",
      "Excel VBA": "pivotWorksheet.Range(\"A12\").Value = \"Region repeat labels\""
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetRepeatLabels());",
      "Excel VBA": "pivotWorksheet.Range(\"B12\").Value = pivotField.RepeatLabels"
    }
  ]
}
``````json
{
  "RAG_Table": [
    {
      "Description": "Get the active worksheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set header values in cells B1, C1, and D1",
      "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');\noWorksheet.GetRange('C1').SetValue('Style');\noWorksheet.GetRange('D1').SetValue('Price');",
      "ExcelVBA": "oWorksheet.Range(\"B1\").Value = \"Region\"\noWorksheet.Range(\"C1\").Value = \"Style\"\noWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "Description": "Set values in column B (B2 to B5)",
      "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');\noWorksheet.GetRange('B3').SetValue('West');\noWorksheet.GetRange('B4').SetValue('East');\noWorksheet.GetRange('B5').SetValue('West');",
      "ExcelVBA": "oWorksheet.Range(\"B2\").Value = \"East\"\noWorksheet.Range(\"B3\").Value = \"West\"\noWorksheet.Range(\"B4\").Value = \"East\"\noWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "Description": "Set values in column C (C2 to C5)",
      "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');\noWorksheet.GetRange('C3').SetValue('Tee');\noWorksheet.GetRange('C4').SetValue('Tee');\noWorksheet.GetRange('C5').SetValue('Tee');",
      "ExcelVBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\"\noWorksheet.Range(\"C3\").Value = \"Tee\"\noWorksheet.Range(\"C4\").Value = \"Tee\"\noWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "Description": "Set values in column D (D2 to D5)",
      "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);\noWorksheet.GetRange('D3').SetValue(35.2);\noWorksheet.GetRange('D4').SetValue(12.3);\noWorksheet.GetRange('D5').SetValue(24.8);",
      "ExcelVBA": "oWorksheet.Range(\"D2\").Value = 42.5\noWorksheet.Range(\"D3\").Value = 35.2\noWorksheet.Range(\"D4\").Value = 12.3\noWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "Description": "Get the data range B1:D5",
      "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "ExcelVBA": "Dim dataRef As Range\nSet dataRef = oWorksheet.Range(\"B1:D5\")"
    },
    {
      "Description": "Insert a new pivot table in a new worksheet based on dataRef",
      "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "ExcelVBA": "Dim pivotTable As PivotTable\nDim pivotCache As PivotCache\nSet pivotCache = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef)\nSet pivotTable = pivotCache.CreatePivotTable(TableDestination:=Sheets.Add().Range(\"A3\"), TableName:=\"PivotTable1\")"
    },
    {
      "Description": "Add rows fields 'Region' and 'Style' to the pivot table",
      "OnlyOfficeJS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "ExcelVBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "Description": "Add 'Price' as a data field to the pivot table",
      "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
      "ExcelVBA": "With pivotTable.PivotFields(\"Price\")\n    .Orientation = xlDataField\n    .Function = xlSum\n    .Name = \"Sum of Price\"\nEnd With"
    },
    {
      "Description": "Get the pivot worksheet",
      "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ActiveSheet"
    },
    {
      "Description": "Get the 'Style' pivot field",
      "OnlyOfficeJS": "var pivotField = pivotTable.GetPivotFields('Style');",
      "ExcelVBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Style\")"
    },
    {
      "Description": "Set 'ShowAllItems' to true for the 'Style' pivot field",
      "OnlyOfficeJS": "pivotField.SetShowAllItems(true);",
      "ExcelVBA": "pivotField.ShowAllItems = True"
    },
    {
      "Description": "Set value 'Style get show all items' in cell A12",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('A12').SetValue('Style get show all items');",
      "ExcelVBA": "pivotWorksheet.Range(\"A12\").Value = \"Style get show all items\""
    },
    {
      "Description": "Set the value of 'ShowAllItems' status in cell B12",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetShowAllItems());",
      "ExcelVBA": "pivotWorksheet.Range(\"B12\").Value = pivotField.ShowAllItems"
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
  },
  {
    "Description": "Set value in cell B1 to 'Region'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
    "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
  },
  {
    "Description": "Set value in cell C1 to 'Style'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
    "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
  },
  {
    "Description": "Set value in cell D1 to 'Price'",
    "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
    "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
  },
  {
    "Description": "Set value in cell B2 to 'East'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
    "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
  },
  {
    "Description": "Set value in cell B3 to 'West'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
    "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
  },
  {
    "Description": "Set value in cell B4 to 'East'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
    "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
  },
  {
    "Description": "Set value in cell B5 to 'West'",
    "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
    "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
  },
  {
    "Description": "Set value in cell C2 to 'Fancy'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
    "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
  },
  {
    "Description": "Set value in cell C3 to 'Fancy'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
    "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
  },
  {
    "Description": "Set value in cell C4 to 'Tee'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
    "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
  },
  {
    "Description": "Set value in cell C5 to 'Tee'",
    "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
    "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
  },
  {
    "Description": "Set value in cell D2 to 42.5",
    "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
    "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
  },
  {
    "Description": "Set value in cell D3 to 35.2",
    "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
    "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
  },
  {
    "Description": "Set value in cell D4 to 12.3",
    "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
    "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
  },
  {
    "Description": "Set value in cell D5 to 24.8",
    "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
    "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
  },
  {
    "Description": "Get data range from B1 to D5 on Sheet1",
    "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "Excel_VBA": "Dim dataRef As Range\nSet dataRef = Sheets(\"Sheet1\").Range(\"B1:D5\")"
  },
  {
    "Description": "Insert a new pivot table on a new worksheet using the data range",
    "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "Excel_VBA": "Dim pivotTable As PivotTable\nDim pivotCache As PivotCache\nSet pivotCache = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef)\nSet pivotTable = pivotCache.CreatePivotTable(TableDestination:=Sheets.Add().Range(\"A3\"), TableName:=\"PivotTable1\")"
  },
  {
    "Description": "Add 'Region' and 'Style' as row fields in the pivot table",
    "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'], });",
    "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
  },
  {
    "Description": "Add 'Price' as a data field in the pivot table",
    "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
    "Excel_VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
  },
  {
    "Description": "Get the active worksheet (pivot table sheet)",
    "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ActiveSheet"
  },
  {
    "Description": "Get the 'Region' pivot field from the pivot table",
    "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
    "Excel_VBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Region\")"
  },
  {
    "Description": "Set the subtotal location for 'Region' to bottom",
    "OnlyOffice_JS": "pivotField.SetLayoutSubtotalLocation('Bottom');",
    "Excel_VBA": "pivotField.Subtotals(1) = True\npivotField.LayoutSubtotalLocation = xlAtBottom"
  },
  {
    "Description": "Set the subtotal name for 'Region' to 'My name'",
    "OnlyOffice_JS": "pivotField.SetSubtotalName('My name');",
    "Excel_VBA": "pivotField.SubtotalName = \"My name\""
  },
  {
    "Description": "Set value in cell A14 to 'Region subtotal name'",
    "OnlyOffice_JS": "pivotWorksheet.GetRange('A14').SetValue('Region subtotal name');",
    "Excel_VBA": "pivotWorksheet.Range(\"A14\").Value = \"Region subtotal name\""
  },
  {
    "Description": "Set value in cell B14 to the subtotal name of 'Region'",
    "OnlyOffice_JS": "pivotWorksheet.GetRange('B14').SetValue(pivotField.GetSubtotalName());",
    "Excel_VBA": "pivotWorksheet.Range(\"B14\").Value = pivotField.SubtotalName"
  }
]
``````json
{
  "Table": {
    "headers": ["Description", "VBA Code", "OnlyOffice JS Code"],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "VBA Code": "Set oWorksheet = ActiveSheet",
        "OnlyOffice JS Code": "var oWorksheet = Api.GetActiveSheet();"
      },
      {
        "Description": "Set header values in cells B1, C1, D1",
        "VBA Code": "oWorksheet.Range(\"B1\").Value = \"Region\"\noWorksheet.Range(\"C1\").Value = \"Style\"\noWorksheet.Range(\"D1\").Value = \"Price\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('B1').SetValue('Region');\noWorksheet.GetRange('C1').SetValue('Style');\noWorksheet.GetRange('D1').SetValue('Price');"
      },
      {
        "Description": "Set values in column B (B2:B5)",
        "VBA Code": "oWorksheet.Range(\"B2\").Value = \"East\"\noWorksheet.Range(\"B3\").Value = \"West\"\noWorksheet.Range(\"B4\").Value = \"East\"\noWorksheet.Range(\"B5\").Value = \"West\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('B2').SetValue('East');\noWorksheet.GetRange('B3').SetValue('West');\noWorksheet.GetRange('B4').SetValue('East');\noWorksheet.GetRange('B5').SetValue('West');"
      },
      {
        "Description": "Set values in column C (C2:C5)",
        "VBA Code": "oWorksheet.Range(\"C2\").Value = \"Fancy\"\noWorksheet.Range(\"C3\").Value = \"Fancy\"\noWorksheet.Range(\"C4\").Value = \"Tee\"\noWorksheet.Range(\"C5\").Value = \"Tee\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('C2').SetValue('Fancy');\noWorksheet.GetRange('C3').SetValue('Fancy');\noWorksheet.GetRange('C4').SetValue('Tee');\noWorksheet.GetRange('C5').SetValue('Tee');"
      },
      {
        "Description": "Set values in column D (D2:D5)",
        "VBA Code": "oWorksheet.Range(\"D2\").Value = 42.5\noWorksheet.Range(\"D3\").Value = 35.2\noWorksheet.Range(\"D4\").Value = 12.3\noWorksheet.Range(\"D5\").Value = 24.8",
        "OnlyOffice JS Code": "oWorksheet.GetRange('D2').SetValue(42.5);\noWorksheet.GetRange('D3').SetValue(35.2);\noWorksheet.GetRange('D4').SetValue(12.3);\noWorksheet.GetRange('D5').SetValue(24.8);"
      },
      {
        "Description": "Get the data range B1:D5 from Sheet1",
        "VBA Code": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")",
        "OnlyOffice JS Code": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
      },
      {
        "Description": "Insert a new pivot table in a new worksheet using the data range",
        "VBA Code": "Set pivotTable = Worksheets.Add.PivotTables.Add(SourceData:=dataRef, TableDestination:=Worksheets(Worksheets.Count).Range(\"A1\"))",
        "OnlyOffice JS Code": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
      },
      {
        "Description": "Add 'Style' as columns and 'Region' as rows in the pivot table",
        "VBA Code": "With pivotTable\n    .PivotFields(\"Style\").Orientation = xlColumnField\n    .PivotFields(\"Region\").Orientation = xlRowField\nEnd With",
        "OnlyOffice JS Code": "pivotTable.AddFields({\n\tcolumns: ['Style'],\n\trows: 'Region',\n});"
      },
      {
        "Description": "Add 'Price' as a data field in the pivot table",
        "VBA Code": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With",
        "OnlyOffice JS Code": "pivotTable.AddDataField('Price');"
      },
      {
        "Description": "Get the active worksheet where the pivot table is inserted",
        "VBA Code": "Set pivotWorksheet = ActiveSheet",
        "OnlyOffice JS Code": "var pivotWorksheet = Api.GetActiveSheet();"
      },
      {
        "Description": "Get the pivot field 'Region' from the pivot table",
        "VBA Code": "Set pivotField = pivotTable.PivotFields(\"Region\")",
        "OnlyOffice JS Code": "var pivotField = pivotTable.GetPivotFields('Region');"
      },
      {
        "Description": "Set subtotals to count for the 'Region' pivot field",
        "VBA Code": "With pivotField\n    .Subtotals(1) = True ' xlCount\nEnd With",
        "OnlyOffice JS Code": "pivotField.SetSubtotals({\n\tCount: true,\n});"
      },
      {
        "Description": "Retrieve the subtotals for the 'Region' pivot field",
        "VBA Code": "Dim subtotals As Variant\nsubtotals = pivotField.Subtotals",
        "OnlyOffice JS Code": "var subtotals = pivotField.GetSubtotals();"
      },
      {
        "Description": "Set the value 'Region subtotals' in cell A11 of the pivot worksheet",
        "VBA Code": "pivotWorksheet.Range(\"A11\").Value = \"Region subtotals\"",
        "OnlyOffice JS Code": "pivotWorksheet.GetRange('A11').SetValue('Region subtotals');"
      },
      {
        "Description": "Initialize counter k to 12",
        "VBA Code": "Dim k As Integer\nk = 12",
        "OnlyOffice JS Code": "let k = 12;"
      },
      {
        "Description": "Loop through each subtotal and set values in the pivot worksheet starting from row 12",
        "VBA Code": "Dim key As Variant\nFor Each key In subtotals\n    pivotWorksheet.Cells(k, 1).Value = key\n    pivotWorksheet.Cells(k, 2).Value = subtotals(key)\n    k = k + 1\nNext key",
        "OnlyOffice JS Code": "for (var i in subtotals) {\n\tpivotWorksheet.GetRangeByNumber(k, 0).SetValue(i);\n\tpivotWorksheet.GetRangeByNumber(k++, 1).SetValue(subtotals[i]);\n}"
      }
    ]
  }
}
``````json
{
  "description": "Equivalent VBA code for OnlyOffice JS methods to create data, insert a pivot table, and manipulate pivot fields.",
  "table": [
    {
      "Action": "Get Active Sheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Action": "Set value to B1",
      "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "VBA": "Range(\"B1\").Value = \"Region\""
    },
    {
      "Action": "Set value to C1",
      "OnlyOfficeJS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "VBA": "Range(\"C1\").Value = \"Style\""
    },
    {
      "Action": "Set value to D1",
      "OnlyOfficeJS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "VBA": "Range(\"D1\").Value = \"Price\""
    },
    {
      "Action": "Set value to B2",
      "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');",
      "VBA": "Range(\"B2\").Value = \"East\""
    },
    {
      "Action": "Set value to B3",
      "OnlyOfficeJS": "oWorksheet.GetRange('B3').SetValue('West');",
      "VBA": "Range(\"B3\").Value = \"West\""
    },
    {
      "Action": "Set value to B4",
      "OnlyOfficeJS": "oWorksheet.GetRange('B4').SetValue('East');",
      "VBA": "Range(\"B4\").Value = \"East\""
    },
    {
      "Action": "Set value to B5",
      "OnlyOfficeJS": "oWorksheet.GetRange('B5').SetValue('West');",
      "VBA": "Range(\"B5\").Value = \"West\""
    },
    {
      "Action": "Set value to C2",
      "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "VBA": "Range(\"C2\").Value = \"Fancy\""
    },
    {
      "Action": "Set value to C3",
      "OnlyOfficeJS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "VBA": "Range(\"C3\").Value = \"Fancy\""
    },
    {
      "Action": "Set value to C4",
      "OnlyOfficeJS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "VBA": "Range(\"C4\").Value = \"Tee\""
    },
    {
      "Action": "Set value to C5",
      "OnlyOfficeJS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "VBA": "Range(\"C5\").Value = \"Tee\""
    },
    {
      "Action": "Set value to D2",
      "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "VBA": "Range(\"D2\").Value = 42.5"
    },
    {
      "Action": "Set value to D3",
      "OnlyOfficeJS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "VBA": "Range(\"D3\").Value = 35.2"
    },
    {
      "Action": "Set value to D4",
      "OnlyOfficeJS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "VBA": "Range(\"D4\").Value = 12.3"
    },
    {
      "Action": "Set value to D5",
      "OnlyOfficeJS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "VBA": "Range(\"D5\").Value = 24.8"
    },
    {
      "Action": "Get Data Range",
      "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "VBA": "Set dataRef = Sheets(\"Sheet1\").Range(\"$B$1:$D$5\")"
    },
    {
      "Action": "Insert Pivot Table into New Worksheet",
      "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "VBA": "Set pivotWorksheet = Worksheets.Add\nSet pivotTable = pivotWorksheet.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "Action": "Add Row Fields 'Region' and 'Style'",
      "OnlyOfficeJS": "pivotTable.AddFields({ rows: ['Region', 'Style'], });",
      "VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "Action": "Set Row Axis Layout to Tabular",
      "OnlyOfficeJS": "pivotTable.SetRowAxisLayout(\"Tabular\", false);",
      "VBA": "pivotTable.RowAxisLayout xlTabularRow, False"
    },
    {
      "Action": "Add Data Field 'Price'",
      "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
      "VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "Action": "Get Pivot Worksheet",
      "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();",
      "VBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "Action": "Get Pivot Field 'Style'",
      "OnlyOfficeJS": "var pivotField = pivotTable.GetPivotFields('Style');",
      "VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")"
    },
    {
      "Action": "Set 'Style field value' in A12",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('A12').SetValue('Style field value');",
      "VBA": "Range(\"A12\").Value = \"Style field value\""
    },
    {
      "Action": "Set Pivot Field Value in B12",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetValue());",
      "VBA": "Range(\"B12\").Value = pivotField.CurrentPage"
    },
    {
      "Action": "Set 'New Style field value' in A14",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('A14').SetValue('New Style field value');",
      "VBA": "Range(\"A14\").Value = \"New Style field value\""
    },
    {
      "Action": "Set Pivot Field to 'My value'",
      "OnlyOfficeJS": "pivotField.SetValue('My value');",
      "VBA": "pivotField.CurrentPage = \"My value\""
    },
    {
      "Action": "Set Pivot Field Value in B14",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('B14').SetValue(pivotField.GetValue());",
      "VBA": "Range(\"B14\").Value = pivotField.CurrentPage"
    }
  ]
}
``````json
{
  "Description": "Equivalent VBA and OnlyOffice JS methods for the provided OnlyOffice API code",
  "Methods": [
    {
      "Action": "Get the active worksheet",
      "VBA": "Set oWorksheet = ActiveSheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Action": "Set value of cell B1 to 'Region'",
      "VBA": "oWorksheet.Range(\"B1\").Value = \"Region\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');"
    },
    {
      "Action": "Set value of cell C1 to 'Style'",
      "VBA": "oWorksheet.Range(\"C1\").Value = \"Style\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');"
    },
    {
      "Action": "Set value of cell D1 to 'Price'",
      "VBA": "oWorksheet.Range(\"D1\").Value = \"Price\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');"
    },
    {
      "Action": "Set value of cell B2 to 'East'",
      "VBA": "oWorksheet.Range(\"B2\").Value = \"East\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');"
    },
    {
      "Action": "Set value of cell B3 to 'West'",
      "VBA": "oWorksheet.Range(\"B3\").Value = \"West\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');"
    },
    {
      "Action": "Set value of cell B4 to 'East'",
      "VBA": "oWorksheet.Range(\"B4\").Value = \"East\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');"
    },
    {
      "Action": "Set value of cell B5 to 'West'",
      "VBA": "oWorksheet.Range(\"B5\").Value = \"West\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');"
    },
    {
      "Action": "Set value of cell C2 to 'Fancy'",
      "VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');"
    },
    {
      "Action": "Set value of cell C3 to 'Fancy'",
      "VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');"
    },
    {
      "Action": "Set value of cell C4 to 'Tee'",
      "VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');"
    },
    {
      "Action": "Set value of cell C5 to 'Tee'",
      "VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\"",
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');"
    },
    {
      "Action": "Set value of cell D2 to 42.5",
      "VBA": "oWorksheet.Range(\"D2\").Value = 42.5",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);"
    },
    {
      "Action": "Set value of cell D3 to 35.2",
      "VBA": "oWorksheet.Range(\"D3\").Value = 35.2",
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);"
    },
    {
      "Action": "Set value of cell D4 to 12.3",
      "VBA": "oWorksheet.Range(\"D4\").Value = 12.3",
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);"
    },
    {
      "Action": "Set value of cell D5 to 24.8",
      "VBA": "oWorksheet.Range(\"D5\").Value = 24.8",
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);"
    },
    {
      "Action": "Get range B1:D5 from Sheet1",
      "VBA": "Set dataRef = ThisWorkbook.Worksheets(\"Sheet1\").Range(\"B1:D5\")",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
    },
    {
      "Action": "Insert a new pivot table worksheet based on dataRef",
      "VBA": "Set pivotTable = ThisWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
    },
    {
      "Action": "Add 'Region' as row field and 'Style' as column field to the pivot table",
      "VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlColumnField\nEnd With",
      "OnlyOffice_JS": "pivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});"
    },
    {
      "Action": "Get the active sheet after inserting pivot table",
      "VBA": "Set pivotWorksheet = ActiveSheet",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();"
    },
    {
      "Action": "Add 'Price' as data field to the pivot table",
      "VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum",
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');"
    },
    {
      "Action": "Get the 'Region' pivot field",
      "VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")",
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');"
    },
    {
      "Action": "Set value of cell A10 to a specific message in pivot worksheet",
      "VBA": "pivotWorksheet.Range(\"A10\").Value = \"The Region field will be moved soon\"",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A10').SetValue('The Region field will be moved soon');"
    },
    {
      "Action": "Move 'Region' field to columns after 5 seconds",
      "VBA": "Application.OnTime Now + TimeValue(\"00:00:05\"), \"MoveRegionToColumns\"",
      "OnlyOffice_JS": "setTimeout(function () {\n\tpivotField.Move('Columns');\n}, 5000);"
    }
  ]
}
```**Description:** This code sets values in specific ranges, inserts a pivot table, adds fields, and removes a pivot field after a delay.

```json
{
  "RAG_Table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Set dataRef = Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Set pivotTable = Sheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: 'Region', columns: 'Style' });",
      "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlColumnField\nEnd With"
    },
    {
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\")"
    },
    {
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "Excel_VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A10').SetValue('The Region field will be removed soon');",
      "Excel_VBA": "Range(\"A10\").Value = \"The Region field will be removed soon\""
    },
    {
      "OnlyOffice_JS": "setTimeout(function () { pivotField.Remove(); }, 5000);",
      "Excel_VBA": "Application.OnTime Now + TimeValue(\"00:00:05\"), \"RemovePivotField\" \n\nSub RemovePivotField()\n    pivotField.Orientation = xlHidden\nEnd Sub"
    }
  ]
}
``````json
[
  {
    "description": "Get the active worksheet",
    "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
    "ExcelVBA": "Set oWorksheet = ActiveSheet"
  },
  {
    "description": "Set header values in cells B1, C1, D1",
    "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');\noWorksheet.GetRange('C1').SetValue('Style');\noWorksheet.GetRange('D1').SetValue('Price');",
    "ExcelVBA": "Range(\"B1\").Value = \"Region\"\nRange(\"C1\").Value = \"Style\"\nRange(\"D1\").Value = \"Price\""
  },
  {
    "description": "Populate data in cells B2:B5",
    "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');\noWorksheet.GetRange('B3').SetValue('West');\noWorksheet.GetRange('B4').SetValue('East');\noWorksheet.GetRange('B5').SetValue('West');",
    "ExcelVBA": "Range(\"B2\").Value = \"East\"\nRange(\"B3\").Value = \"West\"\nRange(\"B4\").Value = \"East\"\nRange(\"B5\").Value = \"West\""
  },
  {
    "description": "Populate data in cells C2:C5",
    "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');\noWorksheet.GetRange('C3').SetValue('Fancy');\noWorksheet.GetRange('C4').SetValue('Tee');\noWorksheet.GetRange('C5').SetValue('Tee');",
    "ExcelVBA": "Range(\"C2\").Value = \"Fancy\"\nRange(\"C3\").Value = \"Fancy\"\nRange(\"C4\").Value = \"Tee\"\nRange(\"C5\").Value = \"Tee\""
  },
  {
    "description": "Populate data in cells D2:D5",
    "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);\noWorksheet.GetRange('D3').SetValue(35.2);\noWorksheet.GetRange('D4').SetValue(12.3);\noWorksheet.GetRange('D5').SetValue(24.8);",
    "ExcelVBA": "Range(\"D2\").Value = 42.5\nRange(\"D3\").Value = 35.2\nRange(\"D4\").Value = 12.3\nRange(\"D5\").Value = 24.8"
  },
  {
    "description": "Define data range for pivot table",
    "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "ExcelVBA": "Set dataRef = Range(\"B1:D5\")"
  },
  {
    "description": "Insert a new pivot table on a new worksheet",
    "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "ExcelVBA": "Set pivotTable = ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=Sheets.Add().Range(\"A1\"))"
  },
  {
    "description": "Add Row fields to the pivot table",
    "OnlyOfficeJS": "pivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});",
    "ExcelVBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
  },
  {
    "description": "Set the row axis layout to Tabular",
    "OnlyOfficeJS": "pivotTable.SetRowAxisLayout(\"Tabular\", false);",
    "ExcelVBA": "pivotTable.RowAxisLayout xlTabularRow"
  },
  {
    "description": "Add Price as data field",
    "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
    "ExcelVBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
  },
  {
    "description": "Get the active worksheet for the pivot table",
    "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();",
    "ExcelVBA": "Set pivotWorksheet = ActiveSheet"
  },
  {
    "description": "Get the Style pivot field",
    "OnlyOfficeJS": "var pivotField = pivotTable.GetPivotFields('Style');",
    "ExcelVBA": "Set pivotField = pivotTable.PivotFields(\"Style\")"
  },
  {
    "description": "Set and get caption for Style field",
    "OnlyOfficeJS": "pivotWorksheet.GetRange('A12').SetValue('Style field caption');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetCaption());\npivotWorksheet.GetRange('A14').SetValue('New Style field caption');\npivotField.SetCaption('My caption');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetCaption());",
    "ExcelVBA": "pivotWorksheet.Range(\"A12\").Value = \"Style field caption\"\npivotWorksheet.Range(\"B12\").Value = pivotField.Caption\npivotWorksheet.Range(\"A14\").Value = \"New Style field caption\"\npivotField.Caption = \"My caption\"\npivotWorksheet.Range(\"B14\").Value = pivotField.Caption"
  }
]
``````json
{
  "table": [
    {
      "Description": "Get the active worksheet",
      "VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Set cell B1 to 'Region'",
      "VBA": "oWorksheet.Range(\"B1\").Value = \"Region\"",
      "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');"
    },
    {
      "Description": "Set cell C1 to 'Style'",
      "VBA": "oWorksheet.Range(\"C1\").Value = \"Style\"",
      "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');"
    },
    {
      "Description": "Set cell D1 to 'Price'",
      "VBA": "oWorksheet.Range(\"D1\").Value = \"Price\"",
      "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');"
    },
    {
      "Description": "Set cell B2 to 'East'",
      "VBA": "oWorksheet.Range(\"B2\").Value = \"East\"",
      "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');"
    },
    {
      "Description": "Set cell B3 to 'West'",
      "VBA": "oWorksheet.Range(\"B3\").Value = \"West\"",
      "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');"
    },
    {
      "Description": "Set cell B4 to 'East'",
      "VBA": "oWorksheet.Range(\"B4\").Value = \"East\"",
      "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');"
    },
    {
      "Description": "Set cell B5 to 'West'",
      "VBA": "oWorksheet.Range(\"B5\").Value = \"West\"",
      "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');"
    },
    {
      "Description": "Set cell C2 to 'Fancy'",
      "VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\"",
      "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');"
    },
    {
      "Description": "Set cell C3 to 'Fancy'",
      "VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\"",
      "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');"
    },
    {
      "Description": "Set cell C4 to 'Tee'",
      "VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\"",
      "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');"
    },
    {
      "Description": "Set cell C5 to 'Tee'",
      "VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\"",
      "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');"
    },
    {
      "Description": "Set cell D2 to 42.5",
      "VBA": "oWorksheet.Range(\"D2\").Value = 42.5",
      "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);"
    },
    {
      "Description": "Set cell D3 to 35.2",
      "VBA": "oWorksheet.Range(\"D3\").Value = 35.2",
      "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);"
    },
    {
      "Description": "Set cell D4 to 12.3",
      "VBA": "oWorksheet.Range(\"D4\").Value = 12.3",
      "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);"
    },
    {
      "Description": "Set cell D5 to 24.8",
      "VBA": "oWorksheet.Range(\"D5\").Value = 24.8",
      "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);"
    },
    {
      "Description": "Get data range B1:D5 from Sheet1",
      "VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"$B$1:$D$5\")",
      "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
    },
    {
      "Description": "Insert a new pivot table worksheet",
      "VBA": "Set pivotSheet = Worksheets.Add\ndim pivotTable as PivotTable\nSet pivotTable = pivotSheet.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)",
      "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
    },
    {
      "Description": "Add 'Style' as column field and 'Region' as row field in pivot table",
      "VBA": "With pivotTable\n    .PivotFields(\"Style\").Orientation = xlColumnField\n    .PivotFields(\"Region\").Orientation = xlRowField\nEnd With",
      "OnlyOffice JS": "pivotTable.AddFields({\n\tcolumns: ['Style'],\n\trows: 'Region',\n});"
    },
    {
      "Description": "Add 'Price' as data field in pivot table",
      "VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum",
      "OnlyOffice JS": "pivotTable.AddDataField('Price');"
    },
    {
      "Description": "Get the active pivot worksheet",
      "VBA": "Set pivotWorksheet = ActiveWorkbook.ActiveSheet",
      "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Get the 'Region' pivot field",
      "VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")",
      "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Region');"
    },
    {
      "Description": "Set 'Region' field not draggable to columns",
      "VBA": "pivotField.Orientation = xlRowField",
      "OnlyOffice JS": "pivotField.SetDragToColumn(false);"
    },
    {
      "Description": "Set A13 cell to 'Drag to column'",
      "VBA": "pivotWorksheet.Range(\"A13\").Value = \"Drag to column\"",
      "OnlyOffice JS": "pivotWorksheet.GetRange('A13').SetValue('Drag to column');"
    },
    {
      "Description": "Set B13 cell to the draggable state of 'Region' field",
      "VBA": "pivotWorksheet.Range(\"B13\").Value = pivotField.DragToColumn",
      "OnlyOffice JS": "pivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToColumn());"
    },
    {
      "Description": "Set A14 cell to prompt dragging 'Region' to columns",
      "VBA": "pivotWorksheet.Range(\"A14\").Value = \"Try drag Region to columns!\"",
      "OnlyOffice JS": "pivotWorksheet.GetRange('A14').SetValue('Try drag Region to columns!');"
    }
  ]
}
``````json
{
  "Table": {
    "Headers": ["Description", "OnlyOffice JS Code", "Excel VBA Code"],
    "Rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOffice JS Code": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA Code": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
      },
      {
        "Description": "Set value 'Region' to cell B1",
        "OnlyOffice JS Code": "oWorksheet.GetRange('B1').SetValue('Region');",
        "Excel VBA Code": "oWorksheet.Range(\"B1\").Value = \"Region\""
      },
      {
        "Description": "Set value 'Style' to cell C1",
        "OnlyOffice JS Code": "oWorksheet.GetRange('C1').SetValue('Style');",
        "Excel VBA Code": "oWorksheet.Range(\"C1\").Value = \"Style\""
      },
      {
        "Description": "Set value 'Price' to cell D1",
        "OnlyOffice JS Code": "oWorksheet.GetRange('D1').SetValue('Price');",
        "Excel VBA Code": "oWorksheet.Range(\"D1\").Value = \"Price\""
      },
      {
        "Description": "Set value 'East' to cell B2",
        "OnlyOffice JS Code": "oWorksheet.GetRange('B2').SetValue('East');",
        "Excel VBA Code": "oWorksheet.Range(\"B2\").Value = \"East\""
      },
      {
        "Description": "Set value 'West' to cell B3",
        "OnlyOffice JS Code": "oWorksheet.GetRange('B3').SetValue('West');",
        "Excel VBA Code": "oWorksheet.Range(\"B3\").Value = \"West\""
      },
      {
        "Description": "Set value 'East' to cell B4",
        "OnlyOffice JS Code": "oWorksheet.GetRange('B4').SetValue('East');",
        "Excel VBA Code": "oWorksheet.Range(\"B4\").Value = \"East\""
      },
      {
        "Description": "Set value 'West' to cell B5",
        "OnlyOffice JS Code": "oWorksheet.GetRange('B5').SetValue('West');",
        "Excel VBA Code": "oWorksheet.Range(\"B5\").Value = \"West\""
      },
      {
        "Description": "Set value 'Fancy' to cell C2",
        "OnlyOffice JS Code": "oWorksheet.GetRange('C2').SetValue('Fancy');",
        "Excel VBA Code": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
      },
      {
        "Description": "Set value 'Fancy' to cell C3",
        "OnlyOffice JS Code": "oWorksheet.GetRange('C3').SetValue('Fancy');",
        "Excel VBA Code": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
      },
      {
        "Description": "Set value 'Tee' to cell C4",
        "OnlyOffice JS Code": "oWorksheet.GetRange('C4').SetValue('Tee');",
        "Excel VBA Code": "oWorksheet.Range(\"C4\").Value = \"Tee\""
      },
      {
        "Description": "Set value 'Tee' to cell C5",
        "OnlyOffice JS Code": "oWorksheet.GetRange('C5').SetValue('Tee');",
        "Excel VBA Code": "oWorksheet.Range(\"C5\").Value = \"Tee\""
      },
      {
        "Description": "Set value 42.5 to cell D2",
        "OnlyOffice JS Code": "oWorksheet.GetRange('D2').SetValue(42.5);",
        "Excel VBA Code": "oWorksheet.Range(\"D2\").Value = 42.5"
      },
      {
        "Description": "Set value 35.2 to cell D3",
        "OnlyOffice JS Code": "oWorksheet.GetRange('D3').SetValue(35.2);",
        "Excel VBA Code": "oWorksheet.Range(\"D3\").Value = 35.2"
      },
      {
        "Description": "Set value 12.3 to cell D4",
        "OnlyOffice JS Code": "oWorksheet.GetRange('D4').SetValue(12.3);",
        "Excel VBA Code": "oWorksheet.Range(\"D4\").Value = 12.3"
      },
      {
        "Description": "Set value 24.8 to cell D5",
        "OnlyOffice JS Code": "oWorksheet.GetRange('D5').SetValue(24.8);",
        "Excel VBA Code": "oWorksheet.Range(\"D5\").Value = 24.8"
      },
      {
        "Description": "Get range B1:D5 from Sheet1",
        "OnlyOffice JS Code": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
        "Excel VBA Code": "Dim dataRef As Range\nSet dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
      },
      {
        "Description": "Insert a new pivot table worksheet based on dataRef",
        "OnlyOffice JS Code": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
        "Excel VBA Code": "Dim pivotCache As PivotCache\nDim pivotSheet As Worksheet\nDim pivotTable As PivotTable\n\nSet pivotCache = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef)\nSet pivotSheet = ThisWorkbook.Worksheets.Add\nSet pivotTable = pivotCache.CreatePivotTable(TableDestination:=pivotSheet.Range(\"A1\"), TableName:=\"PivotTable1\")"
      },
      {
        "Description": "Add 'Style' to row fields and 'Region' to column fields in pivot table",
        "OnlyOffice JS Code": "pivotTable.AddFields({ rows: ['Style'], columns: 'Region' });",
        "Excel VBA Code": "With pivotTable\n    .PivotFields(\"Style\").Orientation = xlRowField\n    .PivotFields(\"Region\").Orientation = xlColumnField\nEnd With"
      },
      {
        "Description": "Add 'Price' as data field in pivot table",
        "OnlyOffice JS Code": "pivotTable.AddDataField('Price');",
        "Excel VBA Code": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
      },
      {
        "Description": "Get the active worksheet (pivot worksheet)",
        "OnlyOffice JS Code": "var pivotWorksheet = Api.GetActiveSheet();",
        "Excel VBA Code": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ActiveSheet"
      },
      {
        "Description": "Get 'Region' pivot field",
        "OnlyOffice JS Code": "var pivotField = pivotTable.GetPivotFields('Region');",
        "Excel VBA Code": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Region\")"
      },
      {
        "Description": "Set 'Region' pivot field to not allow dragging to data",
        "OnlyOffice JS Code": "pivotField.SetDragToData(false);",
        "Excel VBA Code": "' Excel VBA does not have a direct equivalent; this behavior is typically controlled by field orientation.\n' Ensure 'Region' is not in the Data area."
      },
      {
        "Description": "Set value 'Drag to data' to cell A13",
        "OnlyOffice JS Code": "pivotWorksheet.GetRange('A13').SetValue('Drag to data');",
        "Excel VBA Code": "pivotWorksheet.Range(\"A13\").Value = \"Drag to data\""
      },
      {
        "Description": "Set 'Region' drag to data status to cell B13",
        "OnlyOffice JS Code": "pivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToData());",
        "Excel VBA Code": "pivotWorksheet.Range(\"B13\").Value = pivotField.Orientation = xlDataField"
      },
      {
        "Description": "Set value 'Try drag Region to data!' to cell A14",
        "OnlyOffice JS Code": "pivotWorksheet.GetRange('A14').SetValue('Try drag Region to data!');",
        "Excel VBA Code": "pivotWorksheet.Range(\"A14\").Value = \"Try drag Region to data!\""
      }
    ]
  }
}
``````json
{
  "Description": "Conversion of OnlyOffice API methods to Excel VBA equivalents for manipulating worksheets and creating pivot tables.",
  "Methods": [
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "ExcelVBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "ExcelVBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "ExcelVBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');",
      "ExcelVBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('B3').SetValue('West');",
      "ExcelVBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('B4').SetValue('East');",
      "ExcelVBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('B5').SetValue('West');",
      "ExcelVBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "ExcelVBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "ExcelVBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "ExcelVBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "ExcelVBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "ExcelVBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "ExcelVBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "ExcelVBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "ExcelVBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "ExcelVBA": "Dim dataRef As Range\nSet dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"$B$1:$D$5\")"
    },
    {
      "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "ExcelVBA": "Dim pivotTable As PivotTable\nSet pivotTable = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=Sheets.Add().Range(\"A3\"), TableName:=\"PivotTable1\")"
    },
    {
      "OnlyOfficeJS": "pivotTable.AddFields({ rows: ['Style'], columns: 'Region' });",
      "ExcelVBA": "With pivotTable\n    .PivotFields(\"Style\").Orientation = xlRowField\n    .PivotFields(\"Region\").Orientation = xlColumnField\nEnd With"
    },
    {
      "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
      "ExcelVBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ActiveSheet"
    },
    {
      "OnlyOfficeJS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "ExcelVBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "OnlyOfficeJS": "pivotField.SetDragToPage(false);",
      "ExcelVBA": "pivotField.Orientation = xlColumnField ' To remove from page fields"
    },
    {
      "OnlyOfficeJS": "pivotWorksheet.GetRange('A13').SetValue('Drag to page');",
      "ExcelVBA": "pivotWorksheet.Range(\"A13\").Value = \"Drag to page\""
    },
    {
      "OnlyOfficeJS": "pivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToPage());",
      "ExcelVBA": "pivotWorksheet.Range(\"B13\").Value = pivotField.Orientation = xlPageField"
    },
    {
      "OnlyOfficeJS": "pivotWorksheet.GetRange('A14').SetValue('Try drag Region to pages!');",
      "ExcelVBA": "pivotWorksheet.Range(\"A14\").Value = \"Try dragging Region to pages!\""
    }
  ]
}
```**This code sets values in specific cells, creates a pivot table, configures its fields, and manipulates pivot table properties.**

```json
[
  {
    "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveWorkbook.ActiveSheet"
  },
  {
    "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
    "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
  },
  {
    "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
    "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
  },
  {
    "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
    "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
  },
  {
    "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
    "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
  },
  {
    "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
    "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
  },
  {
    "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
    "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
  },
  {
    "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
    "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
  },
  {
    "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
    "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
  },
  {
    "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
    "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
  },
  {
    "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
    "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
  },
  {
    "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
    "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
  },
  {
    "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
    "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
  },
  {
    "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
    "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
  },
  {
    "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
    "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
  },
  {
    "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
    "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
  },
  {
    "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "Excel VBA": "Dim dataRef As Range\nSet dataRef = oWorksheet.Range(\"B1:D5\")"
  },
  {
    "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "Excel VBA": "Dim pivotTable As PivotTable\nSet pivotTable = ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=Sheets.Add.Name, TableName:=\"PivotTable1\")"
  },
  {
    "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Style'], columns: 'Region' });",
    "Excel VBA": "With pivotTable\n    .PivotFields(\"Style\").Orientation = xlRowField\n    .PivotFields(\"Region\").Orientation = xlColumnField\nEnd With"
  },
  {
    "OnlyOffice JS": "pivotTable.AddDataField('Price');",
    "Excel VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
  },
  {
    "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
    "Excel VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ActiveWorkbook.ActiveSheet"
  },
  {
    "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Region');",
    "Excel VBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Region\")"
  },
  {
    "OnlyOffice JS": "pivotField.SetDragToRow(false);",
    "Excel VBA": "pivotField.Orientation = xlColumnField"
  },
  {
    "OnlyOffice JS": "pivotWorksheet.GetRange('A13').SetValue('Drag to row');",
    "Excel VBA": "pivotWorksheet.Range(\"A13\").Value = \"Drag to row\""
  },
  {
    "OnlyOffice JS": "pivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToRow());",
    "Excel VBA": "pivotWorksheet.Range(\"B13\").Value = (pivotField.Orientation = xlRowField)"
  },
  {
    "OnlyOffice JS": "pivotWorksheet.GetRange('A14').SetValue('Try drag Region to rows!');",
    "Excel VBA": "pivotWorksheet.Range(\"A14\").Value = \"Try drag Region to rows!\""
  }
]
``````json
{
  "Description": "This script initializes data in an active worksheet, populates specific cells with region, style, and price information, creates a pivot table based on the data, configures the pivot table fields and layout, and inserts values related to the pivot table's layout settings.",
  "Code": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Dim dataRef As Range\nSet dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Dim pivotTable As PivotTable\nDim pivotCache As PivotCache\nSet pivotCache = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef)\nSet pivotTable = pivotCache.CreatePivotTable(TableDestination:=Sheets.Add().Range(\"A3\"), TableName:=\"PivotTable1\")"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
    },
    {
      "OnlyOffice_JS": "pivotTable.SetRowAxisLayout('Tabular');",
      "Excel_VBA": "pivotTable.RowAxisLayout xlTabularRow"
    },
    {
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "Excel_VBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "OnlyOffice_JS": "pivotField.SetLayoutBlankLine(true);",
      "Excel_VBA": "pivotField.ShowBlankLine = True"
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A14').SetValue('Region blank line');",
      "Excel_VBA": "pivotWorksheet.Range(\"A14\").Value = \"Region blank line\""
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B14').SetValue(pivotField.GetLayoutBlankLine());",
      "Excel_VBA": "pivotWorksheet.Range(\"B14\").Value = pivotField.ShowBlankLine"
    }
  ]
}
``````json
{
  "RAG_Table": [
    {
      "Description": "Get the active worksheet",
      "VBA Code": "Set oWorksheet = ActiveSheet",
      "OnlyOffice JS Code": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Set value 'Region' in cell B1",
      "VBA Code": "oWorksheet.Range(\"B1\").Value = \"Region\"",
      "OnlyOffice JS Code": "oWorksheet.GetRange('B1').SetValue('Region');"
    },
    {
      "Description": "Set value 'Style' in cell C1",
      "VBA Code": "oWorksheet.Range(\"C1\").Value = \"Style\"",
      "OnlyOffice JS Code": "oWorksheet.GetRange('C1').SetValue('Style');"
    },
    {
      "Description": "Set value 'Price' in cell D1",
      "VBA Code": "oWorksheet.Range(\"D1\").Value = \"Price\"",
      "OnlyOffice JS Code": "oWorksheet.GetRange('D1').SetValue('Price');"
    },
    {
      "Description": "Set value 'East' in cell B2",
      "VBA Code": "oWorksheet.Range(\"B2\").Value = \"East\"",
      "OnlyOffice JS Code": "oWorksheet.GetRange('B2').SetValue('East');"
    },
    {
      "Description": "Set value 'West' in cell B3",
      "VBA Code": "oWorksheet.Range(\"B3\").Value = \"West\"",
      "OnlyOffice JS Code": "oWorksheet.GetRange('B3').SetValue('West');"
    },
    {
      "Description": "Set value 'East' in cell B4",
      "VBA Code": "oWorksheet.Range(\"B4\").Value = \"East\"",
      "OnlyOffice JS Code": "oWorksheet.GetRange('B4').SetValue('East');"
    },
    {
      "Description": "Set value 'West' in cell B5",
      "VBA Code": "oWorksheet.Range(\"B5\").Value = \"West\"",
      "OnlyOffice JS Code": "oWorksheet.GetRange('B5').SetValue('West');"
    },
    {
      "Description": "Set value 'Fancy' in cell C2",
      "VBA Code": "oWorksheet.Range(\"C2\").Value = \"Fancy\"",
      "OnlyOffice JS Code": "oWorksheet.GetRange('C2').SetValue('Fancy');"
    },
    {
      "Description": "Set value 'Fancy' in cell C3",
      "VBA Code": "oWorksheet.Range(\"C3\").Value = \"Fancy\"",
      "OnlyOffice JS Code": "oWorksheet.GetRange('C3').SetValue('Fancy');"
    },
    {
      "Description": "Set value 'Tee' in cell C4",
      "VBA Code": "oWorksheet.Range(\"C4\").Value = \"Tee\"",
      "OnlyOffice JS Code": "oWorksheet.GetRange('C4').SetValue('Tee');"
    },
    {
      "Description": "Set value 'Tee' in cell C5",
      "VBA Code": "oWorksheet.Range(\"C5\").Value = \"Tee\"",
      "OnlyOffice JS Code": "oWorksheet.GetRange('C5').SetValue('Tee');"
    },
    {
      "Description": "Set value 42.5 in cell D2",
      "VBA Code": "oWorksheet.Range(\"D2\").Value = 42.5",
      "OnlyOffice JS Code": "oWorksheet.GetRange('D2').SetValue(42.5);"
    },
    {
      "Description": "Set value 35.2 in cell D3",
      "VBA Code": "oWorksheet.Range(\"D3\").Value = 35.2",
      "OnlyOffice JS Code": "oWorksheet.GetRange('D3').SetValue(35.2);"
    },
    {
      "Description": "Set value 12.3 in cell D4",
      "VBA Code": "oWorksheet.Range(\"D4\").Value = 12.3",
      "OnlyOffice JS Code": "oWorksheet.GetRange('D4').SetValue(12.3);"
    },
    {
      "Description": "Set value 24.8 in cell D5",
      "VBA Code": "oWorksheet.Range(\"D5\").Value = 24.8",
      "OnlyOffice JS Code": "oWorksheet.GetRange('D5').SetValue(24.8);"
    },
    {
      "Description": "Get range 'Sheet1'!$B$1:$D$5",
      "VBA Code": "Set dataRef = Worksheets(\"Sheet1\").Range(\"$B$1:$D$5\")",
      "OnlyOffice JS Code": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
    },
    {
      "Description": "Insert a new pivot table on a new worksheet based on dataRef",
      "VBA Code": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)",
      "OnlyOffice JS Code": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
    },
    {
      "Description": "Add 'Region' and 'Style' as row fields in the pivot table",
      "VBA Code": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With",
      "OnlyOffice JS Code": "pivotTable.AddFields({ rows: ['Region', 'Style'] });"
    },
    {
      "Description": "Add 'Price' as data field in the pivot table",
      "VBA Code": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\")",
      "OnlyOffice JS Code": "pivotTable.AddDataField('Price');"
    },
    {
      "Description": "Get the active worksheet (pivot table sheet)",
      "VBA Code": "Set pivotWorksheet = ActiveSheet",
      "OnlyOffice JS Code": "var pivotWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Get the 'Region' pivot field from the pivot table",
      "VBA Code": "Set pivotField = pivotTable.PivotFields(\"Region\")",
      "OnlyOffice JS Code": "var pivotField = pivotTable.GetPivotFields('Region');"
    },
    {
      "Description": "Set 'Region' pivot field layout to non-compact (tabular)",
      "VBA Code": "pivotField.LayoutForm = xlTabular",
      "OnlyOffice JS Code": "pivotField.SetLayoutCompactRow(false);"
    },
    {
      "Description": "Set value 'Region layout compact' in cell A12 of pivot worksheet",
      "VBA Code": "pivotWorksheet.Range(\"A12\").Value = \"Region layout compact\"",
      "OnlyOffice JS Code": "pivotWorksheet.GetRange('A12').SetValue('Region layout compact');"
    },
    {
      "Description": "Set the compact layout status of 'Region' in cell B12 of pivot worksheet",
      "VBA Code": "pivotWorksheet.Range(\"B12\").Value = pivotField.LayoutForm = xlTabular",
      "OnlyOffice JS Code": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetLayoutCompactRow());"
    }
  ]
}
``````json
{
  "Table": [
    {
      "Description": "Get the active worksheet",
      "ExcelVBA": "Set oWorksheet = ActiveSheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Set cell B1 to 'Region'",
      "ExcelVBA": "Range(\"B1\").Value = \"Region\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');"
    },
    {
      "Description": "Set cell C1 to 'Style'",
      "ExcelVBA": "Range(\"C1\").Value = \"Style\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('C1').SetValue('Style');"
    },
    {
      "Description": "Set cell D1 to 'Price'",
      "ExcelVBA": "Range(\"D1\").Value = \"Price\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('D1').SetValue('Price');"
    },
    {
      "Description": "Set cell B2 to 'East'",
      "ExcelVBA": "Range(\"B2\").Value = \"East\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');"
    },
    {
      "Description": "Set cell B3 to 'West'",
      "ExcelVBA": "Range(\"B3\").Value = \"West\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('B3').SetValue('West');"
    },
    {
      "Description": "Set cell B4 to 'East'",
      "ExcelVBA": "Range(\"B4\").Value = \"East\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('B4').SetValue('East');"
    },
    {
      "Description": "Set cell B5 to 'West'",
      "ExcelVBA": "Range(\"B5\").Value = \"West\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('B5').SetValue('West');"
    },
    {
      "Description": "Set cell C2 to 'Fancy'",
      "ExcelVBA": "Range(\"C2\").Value = \"Fancy\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');"
    },
    {
      "Description": "Set cell C3 to 'Fancy'",
      "ExcelVBA": "Range(\"C3\").Value = \"Fancy\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('C3').SetValue('Fancy');"
    },
    {
      "Description": "Set cell C4 to 'Tee'",
      "ExcelVBA": "Range(\"C4\").Value = \"Tee\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('C4').SetValue('Tee');"
    },
    {
      "Description": "Set cell C5 to 'Tee'",
      "ExcelVBA": "Range(\"C5\").Value = \"Tee\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('C5').SetValue('Tee');"
    },
    {
      "Description": "Set cell D2 to 42.5",
      "ExcelVBA": "Range(\"D2\").Value = 42.5",
      "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);"
    },
    {
      "Description": "Set cell D3 to 35.2",
      "ExcelVBA": "Range(\"D3\").Value = 35.2",
      "OnlyOfficeJS": "oWorksheet.GetRange('D3').SetValue(35.2);"
    },
    {
      "Description": "Set cell D4 to 12.3",
      "ExcelVBA": "Range(\"D4\").Value = 12.3",
      "OnlyOfficeJS": "oWorksheet.GetRange('D4').SetValue(12.3);"
    },
    {
      "Description": "Set cell D5 to 24.8",
      "ExcelVBA": "Range(\"D5\").Value = 24.8",
      "OnlyOfficeJS": "oWorksheet.GetRange('D5').SetValue(24.8);"
    },
    {
      "Description": "Get range B1:D5 from Sheet1",
      "ExcelVBA": "Set dataRef = Sheets(\"Sheet1\").Range(\"B1:D5\")",
      "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
    },
    {
      "Description": "Insert a new pivot table worksheet based on dataRef",
      "ExcelVBA": "Set pivotTable = Sheets.Add.PivotTable(\"PivotTable\", dataRef)",
      "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
    },
    {
      "Description": "Add 'Region' and 'Style' as row fields to the pivot table",
      "ExcelVBA": "With pivotTable.PivotFields(\"Region\")\n    .Orientation = xlRowField\nEnd With\nWith pivotTable.PivotFields(\"Style\")\n    .Orientation = xlRowField\nEnd With",
      "OnlyOfficeJS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });"
    },
    {
      "Description": "Add 'Price' as a data field to the pivot table",
      "ExcelVBA": "With pivotTable.PivotFields(\"Price\")\n    .Orientation = xlDataField\nEnd With",
      "OnlyOfficeJS": "pivotTable.AddDataField('Price');"
    },
    {
      "Description": "Get the active worksheet (pivot table worksheet)",
      "ExcelVBA": "Set pivotWorksheet = ActiveSheet",
      "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Get the 'Region' pivot field",
      "ExcelVBA": "Set pivotField = pivotTable.PivotFields(\"Region\")",
      "OnlyOfficeJS": "var pivotField = pivotTable.GetPivotFields('Region');"
    },
    {
      "Description": "Set the layout form of 'Region' to Tabular",
      "ExcelVBA": "pivotField.LayoutForm = xlTabular",
      "OnlyOfficeJS": "pivotField.SetLayoutForm(\"Tabular\");"
    },
    {
      "Description": "Set cell A12 to 'Region layout form'",
      "ExcelVBA": "Range(\"A12\").Value = \"Region layout form\"",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('A12').SetValue('Region layout form');"
    },
    {
      "Description": "Set cell B12 to the layout form of 'Region'",
      "ExcelVBA": "Range(\"B12\").Value = pivotField.LayoutForm",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetLayoutForm());"
    }
  ]
}
``````json
{
  "Description": "This code sets values in specific cells, creates a pivot table based on a data range, adds fields to the pivot table, and sets layout options such as page breaks.",
  "Table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel VBA": "Set dataRef = oWorksheet.Range(\"B1:D5\")"
    },
    {
      "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel VBA": "Set pivotWorksheet = ActiveWorkbook.Worksheets.Add\nSet pivotTable = pivotWorksheet.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'], });",
      "Excel VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice JS": "pivotTable.AddDataField('Price');",
      "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set pivotWorksheet = ActiveWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "Excel VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "OnlyOffice JS": "pivotField.SetLayoutPageBreak(true);",
      "Excel VBA": "pivotField.LayoutPageBreak = True"
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('A15').SetValue('Page break:');",
      "Excel VBA": "pivotWorksheet.Range(\"A15\").Value = \"Page break:\""
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('B15').SetValue(pivotField.GetLayoutPageBreak());",
      "Excel VBA": "pivotWorksheet.Range(\"B15\").Value = pivotField.LayoutPageBreak"
    }
  ]
}
``````json
[
  {
    "Description": "Retrieve the active worksheet.",
    "ExcelVBA": "Set oWorksheet = ThisWorkbook.ActiveSheet",
    "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();"
  },
  {
    "Description": "Set headers for Region, Style, and Price.",
    "ExcelVBA": "oWorksheet.Range(\"B1\").Value = \"Region\"\n" +
               "oWorksheet.Range(\"C1\").Value = \"Style\"\n" +
               "oWorksheet.Range(\"D1\").Value = \"Price\"",
    "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');\n" +
                   "oWorksheet.GetRange('C1').SetValue('Style');\n" +
                   "oWorksheet.GetRange('D1').SetValue('Price');"
  },
  {
    "Description": "Populate Region data.",
    "ExcelVBA": "oWorksheet.Range(\"B2\").Value = \"East\"\n" +
               "oWorksheet.Range(\"B3\").Value = \"West\"\n" +
               "oWorksheet.Range(\"B4\").Value = \"East\"\n" +
               "oWorksheet.Range(\"B5\").Value = \"West\"",
    "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');\n" +
                   "oWorksheet.GetRange('B3').SetValue('West');\n" +
                   "oWorksheet.GetRange('B4').SetValue('East');\n" +
                   "oWorksheet.GetRange('B5').SetValue('West');"
  },
  {
    "Description": "Populate Style data.",
    "ExcelVBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\"\n" +
               "oWorksheet.Range(\"C3\").Value = \"Fancy\"\n" +
               "oWorksheet.Range(\"C4\").Value = \"Tee\"\n" +
               "oWorksheet.Range(\"C5\").Value = \"Tee\"",
    "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');\n" +
                   "oWorksheet.GetRange('C3').SetValue('Fancy');\n" +
                   "oWorksheet.GetRange('C4').SetValue('Tee');\n" +
                   "oWorksheet.GetRange('C5').SetValue('Tee');"
  },
  {
    "Description": "Populate Price data.",
    "ExcelVBA": "oWorksheet.Range(\"D2\").Value = 42.5\n" +
               "oWorksheet.Range(\"D3\").Value = 35.2\n" +
               "oWorksheet.Range(\"D4\").Value = 12.3\n" +
               "oWorksheet.Range(\"D5\").Value = 24.8",
    "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);\n" +
                   "oWorksheet.GetRange('D3').SetValue(35.2);\n" +
                   "oWorksheet.GetRange('D4').SetValue(12.3);\n" +
                   "oWorksheet.GetRange('D5').SetValue(24.8);"
  },
  {
    "Description": "Define the data range for the pivot table.",
    "ExcelVBA": "Set dataRef = oWorksheet.Range(\"B1:D5\")",
    "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
  },
  {
    "Description": "Insert a new worksheet with a pivot table based on the data range.",
    "ExcelVBA": "Set pivotTable = ThisWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)",
    "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
  },
  {
    "Description": "Add Region and Style as row fields in the pivot table.",
    "ExcelVBA": "With pivotTable\n" +
               "    .PivotFields(\"Region\").Orientation = xlRowField\n" +
               "    .PivotFields(\"Style\").Orientation = xlRowField\n" +
               "End With",
    "OnlyOfficeJS": "pivotTable.AddFields({\n" +
                   " rows: ['Region', 'Style'],\n" +
                   "});"
  },
  {
    "Description": "Add Price as a data field in the pivot table.",
    "ExcelVBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\")",
    "OnlyOfficeJS": "pivotTable.AddDataField('Price');"
  },
  {
    "Description": "Retrieve the active worksheet containing the pivot table.",
    "ExcelVBA": "Set pivotWorksheet = ThisWorkbook.ActiveSheet",
    "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();"
  },
  {
    "Description": "Access the Region pivot field.",
    "ExcelVBA": "Set pivotField = pivotTable.PivotFields(\"Region\")",
    "OnlyOfficeJS": "var pivotField = pivotTable.GetPivotFields('Region');"
  },
  {
    "Description": "Set the layout subtotal location for the Region field to Bottom.",
    "ExcelVBA": "pivotField.Subtotals(1) = xlAtBottom",
    "OnlyOfficeJS": "pivotField.SetLayoutSubtotalLocation('Bottom');"
  },
  {
    "Description": "Display the subtotal location setting in cells A14 and B14.",
    "ExcelVBA": "pivotWorksheet.Range(\"A14\").Value = \"Region layout subtotal location\"\n" +
               "pivotWorksheet.Range(\"B14\").Value = pivotField.Subtotals(1)",
    "OnlyOfficeJS": "pivotWorksheet.GetRange('A14').SetValue('Region layout subtotal location');\n" +
                   "pivotWorksheet.GetRange('B14').SetValue(pivotField.GetLayoutSubtotalLocation());"
  }
]
``````json
[
  {
    "Description": "Retrieve the active sheet",
    "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel VBA": "Set oWorksheet = ActiveSheet"
  },
  {
    "Description": "Set header values",
    "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');\noWorksheet.GetRange('C1').SetValue('Style');\noWorksheet.GetRange('D1').SetValue('Price');",
    "Excel VBA": "With oWorksheet\n    .Range(\"B1\").Value = \"Region\"\n    .Range(\"C1\").Value = \"Style\"\n    .Range(\"D1\").Value = \"Price\"\nEnd With"
  },
  {
    "Description": "Set region data",
    "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');\noWorksheet.GetRange('B3').SetValue('West');\noWorksheet.GetRange('B4').SetValue('East');\noWorksheet.GetRange('B5').SetValue('West');",
    "Excel VBA": "With oWorksheet\n    .Range(\"B2\").Value = \"East\"\n    .Range(\"B3\").Value = \"West\"\n    .Range(\"B4\").Value = \"East\"\n    .Range(\"B5\").Value = \"West\"\nEnd With"
  },
  {
    "Description": "Set style data",
    "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');\noWorksheet.GetRange('C3').SetValue('Fancy');\noWorksheet.GetRange('C4').SetValue('Tee');\noWorksheet.GetRange('C5').SetValue('Tee');",
    "Excel VBA": "With oWorksheet\n    .Range(\"C2\").Value = \"Fancy\"\n    .Range(\"C3\").Value = \"Fancy\"\n    .Range(\"C4\").Value = \"Tee\"\n    .Range(\"C5\").Value = \"Tee\"\nEnd With"
  },
  {
    "Description": "Set price data",
    "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);\noWorksheet.GetRange('D3').SetValue(35.2);\noWorksheet.GetRange('D4').SetValue(12.3);\noWorksheet.GetRange('D5').SetValue(24.8);",
    "Excel VBA": "With oWorksheet\n    .Range(\"D2\").Value = 42.5\n    .Range(\"D3\").Value = 35.2\n    .Range(\"D4\").Value = 12.3\n    .Range(\"D5\").Value = 24.8\nEnd With"
  },
  {
    "Description": "Get data range",
    "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "Excel VBA": "Set dataRef = oWorksheet.Range(\"$B$1:$D$5\")"
  },
  {
    "Description": "Insert pivot table in a new worksheet",
    "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "Excel VBA": "Set pivotWorksheet = Worksheets.Add\nSet pivotTable = pivotWorksheet.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
  },
  {
    "Description": "Add row fields to pivot table",
    "OnlyOffice JS": "pivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});",
    "Excel VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
  },
  {
    "Description": "Add data field to pivot table",
    "OnlyOffice JS": "pivotTable.AddDataField('Price');",
    "Excel VBA": "With pivotTable\n    .PivotFields(\"Price\").Orientation = xlDataField\n    .PivotFields(\"Price\").Function = xlSum\nEnd With"
  },
  {
    "Description": "Retrieve the active sheet for pivot table",
    "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
    "Excel VBA": "Set pivotWorksheet = ActiveSheet"
  },
  {
    "Description": "Get 'Region' pivot field",
    "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Region');",
    "Excel VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
  },
  {
    "Description": "Disable layout subtotals for 'Region' pivot field",
    "OnlyOffice JS": "pivotField.SetLayoutSubtotals(false);",
    "Excel VBA": "pivotField.Subtotals(1) = False"
  },
  {
    "Description": "Set description in cell A14",
    "OnlyOffice JS": "pivotWorksheet.GetRange('A14').SetValue('Region layout subtotals');",
    "Excel VBA": "pivotWorksheet.Range(\"A14\").Value = \"Region layout subtotals\""
  },
  {
    "Description": "Set subtotal status in cell B14",
    "OnlyOffice JS": "pivotWorksheet.GetRange('B14').SetValue(pivotField.GetLayoutSubtotals());",
    "Excel VBA": "pivotWorksheet.Range(\"B14\").Value = pivotField.Subtotals(1)"
  }
]
``````json
{
  "Table": [
    {
      "Description": "Get the active worksheet",
      "VBA Code": "Set oWorksheet = ActiveSheet",
      "OnlyOffice JS Code": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Set value 'Region' to cell B1",
      "VBA Code": "Range(\"B1\").Value = \"Region\"",
      "OnlyOffice JS Code": "oWorksheet.GetRange('B1').SetValue('Region');"
    },
    {
      "Description": "Set value 'Style' to cell C1",
      "VBA Code": "Range(\"C1\").Value = \"Style\"",
      "OnlyOffice JS Code": "oWorksheet.GetRange('C1').SetValue('Style');"
    },
    {
      "Description": "Set value 'Price' to cell D1",
      "VBA Code": "Range(\"D1\").Value = \"Price\"",
      "OnlyOffice JS Code": "oWorksheet.GetRange('D1').SetValue('Price');"
    },
    {
      "Description": "Set value 'East' to cell B2",
      "VBA Code": "Range(\"B2\").Value = \"East\"",
      "OnlyOffice JS Code": "oWorksheet.GetRange('B2').SetValue('East');"
    },
    {
      "Description": "Set value 'West' to cell B3",
      "VBA Code": "Range(\"B3\").Value = \"West\"",
      "OnlyOffice JS Code": "oWorksheet.GetRange('B3').SetValue('West');"
    },
    {
      "Description": "Set value 'East' to cell B4",
      "VBA Code": "Range(\"B4\").Value = \"East\"",
      "OnlyOffice JS Code": "oWorksheet.GetRange('B4').SetValue('East');"
    },
    {
      "Description": "Set value 'West' to cell B5",
      "VBA Code": "Range(\"B5\").Value = \"West\"",
      "OnlyOffice JS Code": "oWorksheet.GetRange('B5').SetValue('West');"
    },
    {
      "Description": "Set value 'Fancy' to cell C2",
      "VBA Code": "Range(\"C2\").Value = \"Fancy\"",
      "OnlyOffice JS Code": "oWorksheet.GetRange('C2').SetValue('Fancy');"
    },
    {
      "Description": "Set value 'Fancy' to cell C3",
      "VBA Code": "Range(\"C3\").Value = \"Fancy\"",
      "OnlyOffice JS Code": "oWorksheet.GetRange('C3').SetValue('Fancy');"
    },
    {
      "Description": "Set value 'Tee' to cell C4",
      "VBA Code": "Range(\"C4\").Value = \"Tee\"",
      "OnlyOffice JS Code": "oWorksheet.GetRange('C4').SetValue('Tee');"
    },
    {
      "Description": "Set value 'Tee' to cell C5",
      "VBA Code": "Range(\"C5\").Value = \"Tee\"",
      "OnlyOffice JS Code": "oWorksheet.GetRange('C5').SetValue('Tee');"
    },
    {
      "Description": "Set value 42.5 to cell D2",
      "VBA Code": "Range(\"D2\").Value = 42.5",
      "OnlyOffice JS Code": "oWorksheet.GetRange('D2').SetValue(42.5);"
    },
    {
      "Description": "Set value 35.2 to cell D3",
      "VBA Code": "Range(\"D3\").Value = 35.2",
      "OnlyOffice JS Code": "oWorksheet.GetRange('D3').SetValue(35.2);"
    },
    {
      "Description": "Set value 12.3 to cell D4",
      "VBA Code": "Range(\"D4\").Value = 12.3",
      "OnlyOffice JS Code": "oWorksheet.GetRange('D4').SetValue(12.3);"
    },
    {
      "Description": "Set value 24.8 to cell D5",
      "VBA Code": "Range(\"D5\").Value = 24.8",
      "OnlyOffice JS Code": "oWorksheet.GetRange('D5').SetValue(24.8);"
    },
    {
      "Description": "Get range B1:D5 from Sheet1",
      "VBA Code": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")",
      "OnlyOffice JS Code": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
    },
    {
      "Description": "Insert a new pivot table in a new worksheet based on dataRef",
      "VBA Code": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceData:=dataRef)",
      "OnlyOffice JS Code": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
    },
    {
      "Description": "Add 'Region' and 'Style' as row fields to the pivot table",
      "VBA Code": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With",
      "OnlyOffice JS Code": "pivotTable.AddFields({ rows: ['Region', 'Style'] });"
    },
    {
      "Description": "Set row axis layout to Tabular form",
      "VBA Code": "pivotTable.RowAxisLayout xlTabularRow",
      "OnlyOffice JS Code": "pivotTable.SetRowAxisLayout(\"Tabular\", false);"
    },
    {
      "Description": "Add 'Price' as a data field to the pivot table",
      "VBA Code": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum",
      "OnlyOffice JS Code": "pivotTable.AddDataField('Price');"
    },
    {
      "Description": "Get the active worksheet for the pivot table",
      "VBA Code": "Set pivotWorksheet = ActiveSheet",
      "OnlyOffice JS Code": "var pivotWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Get the 'Style' pivot field from the pivot table",
      "VBA Code": "Set pivotField = pivotTable.PivotFields(\"Style\")",
      "OnlyOffice JS Code": "var pivotField = pivotTable.GetPivotFields('Style');"
    },
    {
      "Description": "Set value 'Style field name' to cell A12",
      "VBA Code": "Range(\"A12\").Value = \"Style field name\"",
      "OnlyOffice JS Code": "pivotWorksheet.GetRange('A12').SetValue('Style field name');"
    },
    {
      "Description": "Set the name of 'Style' field to cell B12",
      "VBA Code": "Range(\"B12\").Value = pivotField.Name",
      "OnlyOffice JS Code": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetName());"
    },
    {
      "Description": "Set value 'New Style field name' to cell A14",
      "VBA Code": "Range(\"A14\").Value = \"New Style field name\"",
      "OnlyOffice JS Code": "pivotWorksheet.GetRange('A14').SetValue('New Style field name');"
    },
    {
      "Description": "Rename the 'Style' pivot field to 'My name'",
      "VBA Code": "pivotField.Name = \"My name\"",
      "OnlyOffice JS Code": "pivotField.SetName('My name');"
    },
    {
      "Description": "Set the new name of 'Style' field to cell B14",
      "VBA Code": "Range(\"B14\").Value = pivotField.Name",
      "OnlyOffice JS Code": "pivotWorksheet.GetRange('B14').SetValue(pivotField.GetName());"
    }
  ]
}
``````json
{
  "description": "Excel VBA equivalents for OnlyOffice JS methods",
  "methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel VBA": "Set pivotTable = ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=Sheets.Add().Range(\"A1\"))"
    },
    {
      "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'], });",
      "Excel VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice JS": "pivotTable.AddDataField('Price');",
      "Excel VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
    },
    {
      "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('A12').SetValue('The Style field orientation will change soon');",
      "Excel VBA": "pivotWorksheet.Range(\"A12\").Value = \"The Style field orientation will change soon\""
    },
    {
      "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Style');",
      "Excel VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")"
    },
    {
      "OnlyOffice JS": "setTimeout(function () { pivotField.SetOrientation(\"Columns\"); }, 5000);",
      "Excel VBA": "Application.OnTime Now + TimeValue(\"00:00:05\"), \"ChangePivotFieldOrientation\" \n\nSub ChangePivotFieldOrientation()\n    pivotField.Orientation = xlColumnField\nEnd Sub"
    }
  ]
}
``````json
[
  {
    "description": "Get the active worksheet",
    "onlyoffice_js": "var oWorksheet = Api.GetActiveSheet();",
    "excel_vba": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
  },
  {
    "description": "Set cell B1 value to 'Region'",
    "onlyoffice_js": "oWorksheet.GetRange('B1').SetValue('Region');",
    "excel_vba": "oWorksheet.Range(\"B1\").Value = \"Region\""
  },
  {
    "description": "Set cell C1 value to 'Style'",
    "onlyoffice_js": "oWorksheet.GetRange('C1').SetValue('Style');",
    "excel_vba": "oWorksheet.Range(\"C1\").Value = \"Style\""
  },
  {
    "description": "Set cell D1 value to 'Price'",
    "onlyoffice_js": "oWorksheet.GetRange('D1').SetValue('Price');",
    "excel_vba": "oWorksheet.Range(\"D1\").Value = \"Price\""
  },
  {
    "description": "Set cell B2 value to 'East'",
    "onlyoffice_js": "oWorksheet.GetRange('B2').SetValue('East');",
    "excel_vba": "oWorksheet.Range(\"B2\").Value = \"East\""
  },
  {
    "description": "Set cell B3 value to 'West'",
    "onlyoffice_js": "oWorksheet.GetRange('B3').SetValue('West');",
    "excel_vba": "oWorksheet.Range(\"B3\").Value = \"West\""
  },
  {
    "description": "Set cell B4 value to 'East'",
    "onlyoffice_js": "oWorksheet.GetRange('B4').SetValue('East');",
    "excel_vba": "oWorksheet.Range(\"B4\").Value = \"East\""
  },
  {
    "description": "Set cell B5 value to 'West'",
    "onlyoffice_js": "oWorksheet.GetRange('B5').SetValue('West');",
    "excel_vba": "oWorksheet.Range(\"B5\").Value = \"West\""
  },
  {
    "description": "Set cell C2 value to 'Fancy'",
    "onlyoffice_js": "oWorksheet.GetRange('C2').SetValue('Fancy');",
    "excel_vba": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
  },
  {
    "description": "Set cell C3 value to 'Fancy'",
    "onlyoffice_js": "oWorksheet.GetRange('C3').SetValue('Fancy');",
    "excel_vba": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
  },
  {
    "description": "Set cell C4 value to 'Tee'",
    "onlyoffice_js": "oWorksheet.GetRange('C4').SetValue('Tee');",
    "excel_vba": "oWorksheet.Range(\"C4\").Value = \"Tee\""
  },
  {
    "description": "Set cell C5 value to 'Tee'",
    "onlyoffice_js": "oWorksheet.GetRange('C5').SetValue('Tee');",
    "excel_vba": "oWorksheet.Range(\"C5\").Value = \"Tee\""
  },
  {
    "description": "Set cell D2 value to 42.5",
    "onlyoffice_js": "oWorksheet.GetRange('D2').SetValue(42.5);",
    "excel_vba": "oWorksheet.Range(\"D2\").Value = 42.5"
  },
  {
    "description": "Set cell D3 value to 35.2",
    "onlyoffice_js": "oWorksheet.GetRange('D3').SetValue(35.2);",
    "excel_vba": "oWorksheet.Range(\"D3\").Value = 35.2"
  },
  {
    "description": "Set cell D4 value to 12.3",
    "onlyoffice_js": "oWorksheet.GetRange('D4').SetValue(12.3);",
    "excel_vba": "oWorksheet.Range(\"D4\").Value = 12.3"
  },
  {
    "description": "Set cell D5 value to 24.8",
    "onlyoffice_js": "oWorksheet.GetRange('D5').SetValue(24.8);",
    "excel_vba": "oWorksheet.Range(\"D5\").Value = 24.8"
  },
  {
    "description": "Get range 'Sheet1'!$B$1:$D$5",
    "onlyoffice_js": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "excel_vba": "Dim dataRef As Range\nSet dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
  },
  {
    "description": "Insert pivot table on a new worksheet based on dataRef",
    "onlyoffice_js": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "excel_vba": "Dim pivotCache As PivotCache\nDim pivotSheet As Worksheet\nDim pivotTable As PivotTable\nSet pivotCache = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef)\nSet pivotSheet = ThisWorkbook.Worksheets.Add\nSet pivotTable = pivotCache.CreatePivotTable(TableDestination:=pivotSheet.Range(\"A3\"), TableName:=\"PivotTable1\")"
  },
  {
    "description": "Add 'Region' and 'Style' as row fields to the pivot table",
    "onlyoffice_js": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
    "excel_vba": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
  },
  {
    "description": "Add 'Price' as a data field to the pivot table",
    "onlyoffice_js": "pivotTable.AddDataField('Price');",
    "excel_vba": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
  },
  {
    "description": "Get the active worksheet (pivot table worksheet)",
    "onlyoffice_js": "var pivotWorksheet = Api.GetActiveSheet();",
    "excel_vba": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ThisWorkbook.ActiveSheet"
  },
  {
    "description": "Set cell A12 value with a message",
    "onlyoffice_js": "pivotWorksheet.GetRange('A12').SetValue('The Style field position will change soon');",
    "excel_vba": "pivotWorksheet.Range(\"A12\").Value = \"The Style field position will change soon\""
  },
  {
    "description": "Get the 'Style' field from the pivot table",
    "onlyoffice_js": "var pivotField = pivotTable.GetPivotFields('Style');",
    "excel_vba": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Style\")"
  },
  {
    "description": "Set the position of the 'Style' field after 5 seconds",
    "onlyoffice_js": "setTimeout(function () { pivotField.SetPosition(1); }, 5000);",
    "excel_vba": "Application.OnTime Now + TimeValue(\"00:00:05\"), \"SetStylePosition\"\n\nSub SetStylePosition()\n    pivotField.Position = 1\nEnd Sub"
  }
]
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Set oWorksheet = ActiveSheet"
  },
  {
    "Description": "Set value 'Region' in cell B1",
    "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
    "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
  },
  {
    "Description": "Set value 'Style' in cell C1",
    "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
    "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
  },
  {
    "Description": "Set value 'Price' in cell D1",
    "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
    "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
  },
  {
    "Description": "Set value 'East' in cell B2",
    "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
    "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
  },
  {
    "Description": "Set value 'West' in cell B3",
    "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
    "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
  },
  {
    "Description": "Set value 'East' in cell B4",
    "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
    "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
  },
  {
    "Description": "Set value 'West' in cell B5",
    "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
    "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
  },
  {
    "Description": "Set value 'Fancy' in cell C2",
    "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
    "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
  },
  {
    "Description": "Set value 'Fancy' in cell C3",
    "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
    "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
  },
  {
    "Description": "Set value 'Tee' in cell C4",
    "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
    "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
  },
  {
    "Description": "Set value 'Tee' in cell C5",
    "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
    "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
  },
  {
    "Description": "Set value 42.5 in cell D2",
    "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
    "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
  },
  {
    "Description": "Set value 35.2 in cell D3",
    "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
    "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
  },
  {
    "Description": "Set value 12.3 in cell D4",
    "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
    "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
  },
  {
    "Description": "Set value 24.8 in cell D5",
    "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
    "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
  },
  {
    "Description": "Get range B1:D5 from Sheet1",
    "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "Excel_VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
  },
  {
    "Description": "Insert pivot table in a new worksheet based on dataRef",
    "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "Excel_VBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
  },
  {
    "Description": "Add 'Region' and 'Style' as row fields in the pivot table",
    "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
    "Excel_VBA": "With pivotTable"
  },
  {
    "Description": "Add 'Price' as a data field in the pivot table",
    "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
    "Excel_VBA": "    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
  },
  {
    "Description": "Set row axis layout to 'Tabular' in the pivot table",
    "OnlyOffice_JS": "pivotTable.SetRowAxisLayout('Tabular');",
    "Excel_VBA": "With pivotTable.RowAxisLayout(xlTabularRow)"
  },
  {
    "Description": "Get the active worksheet (pivot table sheet)",
    "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Set pivotWorksheet = ActiveSheet"
  },
  {
    "Description": "Get the 'Region' pivot field",
    "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
    "Excel_VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
  },
  {
    "Description": "Set repeat labels to true for the 'Region' pivot field",
    "OnlyOffice_JS": "pivotField.SetRepeatLabels(true);",
    "Excel_VBA": "pivotField.ShowRepeatLabels = True"
  },
  {
    "Description": "Set value 'Region repeat labels' in cell A12",
    "OnlyOffice_JS": "pivotWorksheet.GetRange('A12').SetValue('Region repeat labels');",
    "Excel_VBA": "pivotWorksheet.Range(\"A12\").Value = \"Region repeat labels\""
  },
  {
    "Description": "Set the repeat labels status in cell B12",
    "OnlyOffice_JS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetRepeatLabels());",
    "Excel_VBA": "pivotWorksheet.Range(\"B12\").Value = pivotField.ShowRepeatLabels"
  }
]
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
    "VBA": "Set oWorksheet = ActiveSheet"
  },
  {
    "Description": "Set header 'Region' in cell B1",
    "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');",
    "VBA": "Range(\"B1\").Value = \"Region\""
  },
  {
    "Description": "Set header 'Style' in cell C1",
    "OnlyOfficeJS": "oWorksheet.GetRange('C1').SetValue('Style');",
    "VBA": "Range(\"C1\").Value = \"Style\""
  },
  {
    "Description": "Set header 'Price' in cell D1",
    "OnlyOfficeJS": "oWorksheet.GetRange('D1').SetValue('Price');",
    "VBA": "Range(\"D1\").Value = \"Price\""
  },
  {
    "Description": "Set value 'East' in cell B2",
    "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');",
    "VBA": "Range(\"B2\").Value = \"East\""
  },
  {
    "Description": "Set value 'West' in cell B3",
    "OnlyOfficeJS": "oWorksheet.GetRange('B3').SetValue('West');",
    "VBA": "Range(\"B3\").Value = \"West\""
  },
  {
    "Description": "Set value 'East' in cell B4",
    "OnlyOfficeJS": "oWorksheet.GetRange('B4').SetValue('East');",
    "VBA": "Range(\"B4\").Value = \"East\""
  },
  {
    "Description": "Set value 'West' in cell B5",
    "OnlyOfficeJS": "oWorksheet.GetRange('B5').SetValue('West');",
    "VBA": "Range(\"B5\").Value = \"West\""
  },
  {
    "Description": "Set value 'Fancy' in cell C2",
    "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
    "VBA": "Range(\"C2\").Value = \"Fancy\""
  },
  {
    "Description": "Set value 'Tee' in cell C3",
    "OnlyOfficeJS": "oWorksheet.GetRange('C3').SetValue('Tee');",
    "VBA": "Range(\"C3\").Value = \"Tee\""
  },
  {
    "Description": "Set value 'Tee' in cell C4",
    "OnlyOfficeJS": "oWorksheet.GetRange('C4').SetValue('Tee');",
    "VBA": "Range(\"C4\").Value = \"Tee\""
  },
  {
    "Description": "Set value 'Tee' in cell C5",
    "OnlyOfficeJS": "oWorksheet.GetRange('C5').SetValue('Tee');",
    "VBA": "Range(\"C5\").Value = \"Tee\""
  },
  {
    "Description": "Set value 42.5 in cell D2",
    "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);",
    "VBA": "Range(\"D2\").Value = 42.5"
  },
  {
    "Description": "Set value 35.2 in cell D3",
    "OnlyOfficeJS": "oWorksheet.GetRange('D3').SetValue(35.2);",
    "VBA": "Range(\"D3\").Value = 35.2"
  },
  {
    "Description": "Set value 12.3 in cell D4",
    "OnlyOfficeJS": "oWorksheet.GetRange('D4').SetValue(12.3);",
    "VBA": "Range(\"D4\").Value = 12.3"
  },
  {
    "Description": "Set value 24.8 in cell D5",
    "OnlyOfficeJS": "oWorksheet.GetRange('D5').SetValue(24.8);",
    "VBA": "Range(\"D5\").Value = 24.8"
  },
  {
    "Description": "Get data range B1:D5",
    "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "VBA": "Set dataRef = Range(\"B1:D5\")"
  },
  {
    "Description": "Insert a new pivot table in a new worksheet using the data range",
    "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "VBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
  },
  {
    "Description": "Add 'Region' and 'Style' as row fields in the pivot table",
    "OnlyOfficeJS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
    "VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
  },
  {
    "Description": "Add 'Price' as a data field in the pivot table",
    "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
    "VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
  },
  {
    "Description": "Get the active pivot worksheet",
    "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();",
    "VBA": "Set pivotWorksheet = ActiveSheet"
  },
  {
    "Description": "Get the pivot field 'Style'",
    "OnlyOfficeJS": "var pivotField = pivotTable.GetPivotFields('Style');",
    "VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")"
  },
  {
    "Description": "Enable 'Show All Items' for the 'Style' pivot field",
    "OnlyOfficeJS": "pivotField.SetShowAllItems(true);",
    "VBA": "pivotField.ShowAll = True"
  },
  {
    "Description": "Set value 'Style get show all items' in cell A12",
    "OnlyOfficeJS": "pivotWorksheet.GetRange('A12').SetValue('Style get show all items');",
    "VBA": "Range(\"A12\").Value = \"Style get show all items\""
  },
  {
    "Description": "Set the value of cell B12 to the 'ShowAllItems' property of the 'Style' pivot field",
    "OnlyOfficeJS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetShowAllItems());",
    "VBA": "Range(\"B12\").Value = pivotField.ShowAll"
  }
]
``````json
{
  "description": "This script initializes a worksheet by setting specific cell values, creates a pivot table from the data, configures the pivot table fields, and customizes the pivot table layout and subtotal properties.",
  "steps": [
    {
      "action": "Get active worksheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "action": "Set cell B1 to 'Region'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "Range(\"B1\").Value = \"Region\""
    },
    {
      "action": "Set cell C1 to 'Style'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "Range(\"C1\").Value = \"Style\""
    },
    {
      "action": "Set cell D1 to 'Price'",
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "Range(\"D1\").Value = \"Price\""
    },
    {
      "action": "Set cell B2 to 'East'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "Range(\"B2\").Value = \"East\""
    },
    {
      "action": "Set cell B3 to 'West'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "Range(\"B3\").Value = \"West\""
    },
    {
      "action": "Set cell B4 to 'East'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "Range(\"B4\").Value = \"East\""
    },
    {
      "action": "Set cell B5 to 'West'",
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "Range(\"B5\").Value = \"West\""
    },
    {
      "action": "Set cell C2 to 'Fancy'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "Range(\"C2\").Value = \"Fancy\""
    },
    {
      "action": "Set cell C3 to 'Fancy'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "Range(\"C3\").Value = \"Fancy\""
    },
    {
      "action": "Set cell C4 to 'Tee'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "Range(\"C4\").Value = \"Tee\""
    },
    {
      "action": "Set cell C5 to 'Tee'",
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "Range(\"C5\").Value = \"Tee\""
    },
    {
      "action": "Set cell D2 to 42.5",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "Range(\"D2\").Value = 42.5"
    },
    {
      "action": "Set cell D3 to 35.2",
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "Range(\"D3\").Value = 35.2"
    },
    {
      "action": "Set cell D4 to 12.3",
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "Range(\"D4\").Value = 12.3"
    },
    {
      "action": "Set cell D5 to 24.8",
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "Range(\"D5\").Value = 24.8"
    },
    {
      "action": "Get data range 'Sheet1'!$B$1:$D$5",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Set dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "action": "Insert pivot table on a new worksheet",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Set pivotCache = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef)\nSet pivotTable = pivotCache.CreatePivotTable(TableDestination:=Sheets.Add.Range(\"A1\"), TableName:=\"PivotTable1\")"
    },
    {
      "action": "Add 'Region' and 'Style' as row fields in pivot table",
      "OnlyOffice_JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "Excel_VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "action": "Add 'Price' as data field in pivot table",
      "OnlyOffice_JS": "pivotTable.AddDataField('Price');",
      "Excel_VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
    },
    {
      "action": "Get active worksheet (pivot worksheet)",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "action": "Get pivot field 'Region'",
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Region');",
      "Excel_VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
    },
    {
      "action": "Set subtotal location of 'Region' field to bottom",
      "OnlyOffice_JS": "pivotField.SetLayoutSubtotalLocation('Bottom');",
      "Excel_VBA": "pivotField.Subtotals(1) = True\npivotField.LayoutSubtotalLocation = xlAtBottom"
    },
    {
      "action": "Set subtotal name of 'Region' field to 'My name'",
      "OnlyOffice_JS": "pivotField.SetSubtotalName('My name');",
      "Excel_VBA": "pivotField.SubtotalName = \"My name\""
    },
    {
      "action": "Set cell A14 to 'Region subtotal name'",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A14').SetValue('Region subtotal name');",
      "Excel_VBA": "Range(\"A14\").Value = \"Region subtotal name\""
    },
    {
      "action": "Set cell B14 to the subtotal name of 'Region' field",
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B14').SetValue(pivotField.GetSubtotalName());",
      "Excel_VBA": "Range(\"B14\").Value = pivotField.SubtotalName"
    }
  ]
}
``````json
{
  "table": {
    "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ActiveSheet"
      },
      {
        "Description": "Set value 'Region' in cell B1",
        "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
        "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
      },
      {
        "Description": "Set value 'Style' in cell C1",
        "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
        "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
      },
      {
        "Description": "Set value 'Price' in cell D1",
        "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
        "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
      },
      {
        "Description": "Set value 'East' in cell B2",
        "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
        "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
      },
      {
        "Description": "Set value 'West' in cell B3",
        "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
        "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
      },
      {
        "Description": "Set value 'East' in cell B4",
        "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
        "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
      },
      {
        "Description": "Set value 'West' in cell B5",
        "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
        "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
      },
      {
        "Description": "Set value 'Fancy' in cell C2",
        "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
        "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
      },
      {
        "Description": "Set value 'Fancy' in cell C3",
        "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
        "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
      },
      {
        "Description": "Set value 'Tee' in cell C4",
        "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
        "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
      },
      {
        "Description": "Set value 'Tee' in cell C5",
        "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
        "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
      },
      {
        "Description": "Set value 42.5 in cell D2",
        "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
        "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
      },
      {
        "Description": "Set value 35.2 in cell D3",
        "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
        "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
      },
      {
        "Description": "Set value 12.3 in cell D4",
        "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
        "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
      },
      {
        "Description": "Set value 24.8 in cell D5",
        "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
        "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
      },
      {
        "Description": "Get range B1:D5 from Sheet1",
        "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
        "Excel VBA": "Set dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
      },
      {
        "Description": "Insert a new pivot table worksheet based on dataRef",
        "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
        "Excel VBA": "Set pivotTable = ThisWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
      },
      {
        "Description": "Add 'Style' to columns and 'Region' to rows in pivot table",
        "OnlyOffice JS": "pivotTable.AddFields({ columns: ['Style'], rows: 'Region' });",
        "Excel VBA": "With pivotTable.PivotFields(\"Style\")\n    .Orientation = xlColumnField\nEnd With\nWith pivotTable.PivotFields(\"Region\")\n    .Orientation = xlRowField\nEnd With"
      },
      {
        "Description": "Add 'Price' as data field in pivot table",
        "OnlyOffice JS": "pivotTable.AddDataField('Price');",
        "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
      },
      {
        "Description": "Get the active worksheet (pivot table worksheet)",
        "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set pivotWorksheet = ActiveSheet"
      },
      {
        "Description": "Get 'Region' pivot field",
        "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Region');",
        "Excel VBA": "Set pivotField = pivotTable.PivotFields(\"Region\")"
      },
      {
        "Description": "Set subtotals to count for 'Region' pivot field",
        "OnlyOffice JS": "pivotField.SetSubtotals({ Count: true });",
        "Excel VBA": "pivotField.Subtotals(1) = True '1 corresponds to Count"
      },
      {
        "Description": "Get subtotals for 'Region' pivot field",
        "OnlyOffice JS": "var subtotals = pivotField.GetSubtotals();",
        "Excel VBA": "Dim subtotals As Variant\nsubtotals = pivotField.Subtotals"
      },
      {
        "Description": "Set value 'Region subtotals' in cell A11",
        "OnlyOffice JS": "pivotWorksheet.GetRange('A11').SetValue('Region subtotals');",
        "Excel VBA": "pivotWorksheet.Range(\"A11\").Value = \"Region subtotals\""
      },
      {
        "Description": "Loop through subtotals and set values starting from row 12",
        "OnlyOffice JS": "let k = 12;\nfor (var i in subtotals) {\n    pivotWorksheet.GetRangeByNumber(k, 0).SetValue(i);\n    pivotWorksheet.GetRangeByNumber(k++, 1).SetValue(subtotals[i]);\n}",
        "Excel VBA": "Dim k As Integer\nk = 12\nDim key As Variant\nFor Each key In pivotField.Subtotals\n    pivotWorksheet.Cells(k, 1).Value = key\n    pivotWorksheet.Cells(k, 2).Value = pivotField.Subtotals(key)\n    k = k + 1\nNext key"
      }
    ]
  }
}
``````json
{
  "description": "This script creates a data table in the active worksheet, populates it with specific values, creates a pivot table based on this data, adds fields to the pivot table, configures its layout, and manipulates pivot field values.",
  "table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "VBA": "Dim dataRef As Range\nSet dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "VBA": "Dim pivotTable As PivotTable\nDim pivotSheet As Worksheet\nSet pivotSheet = Worksheets.Add\nSet pivotTable = pivotSheet.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "OnlyOffice JS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });",
      "VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice JS": "pivotTable.SetRowAxisLayout(\"Tabular\", false);",
      "VBA": "pivotTable.RowAxisLayout xlTabularRow"
    },
    {
      "OnlyOffice JS": "pivotTable.AddDataField('Price');",
      "VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Style');",
      "VBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Style\")"
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('A12').SetValue('Style field value');",
      "VBA": "pivotWorksheet.Range(\"A12\").Value = \"Style field value\""
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('B12').SetValue(pivotField.GetValue());",
      "VBA": "pivotWorksheet.Range(\"B12\").Value = pivotField.CurrentPage"
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('A14').SetValue('New Style field value');",
      "VBA": "pivotWorksheet.Range(\"A14\").Value = \"New Style field value\""
    },
    {
      "OnlyOffice JS": "pivotField.SetValue('My value');",
      "VBA": "pivotField.CurrentPage = \"My value\""
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRange('B14').SetValue(pivotField.GetValue());",
      "VBA": "pivotWorksheet.Range(\"B14\").Value = pivotField.CurrentPage"
    }
  ]
}
``````json
[
    {
        "description": "Get the active worksheet",
        "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
        "VBA": "Set oWorksheet = ActiveSheet"
    },
    {
        "description": "Set value 'Region' in cell B1",
        "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
        "VBA": "Range(\"B1\").Value = \"Region\""
    },
    {
        "description": "Set value 'Style' in cell C1",
        "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
        "VBA": "Range(\"C1\").Value = \"Style\""
    },
    {
        "description": "Set value 'Price' in cell D1",
        "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
        "VBA": "Range(\"D1\").Value = \"Price\""
    },
    {
        "description": "Set value 'East' in cell B2",
        "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
        "VBA": "Range(\"B2\").Value = \"East\""
    },
    {
        "description": "Set value 'West' in cell B3",
        "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
        "VBA": "Range(\"B3\").Value = \"West\""
    },
    {
        "description": "Set value 'East' in cell B4",
        "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
        "VBA": "Range(\"B4\").Value = \"East\""
    },
    {
        "description": "Set value 'West' in cell B5",
        "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
        "VBA": "Range(\"B5\").Value = \"West\""
    },
    {
        "description": "Set value 'Fancy' in cell C2",
        "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
        "VBA": "Range(\"C2\").Value = \"Fancy\""
    },
    {
        "description": "Set value 'Fancy' in cell C3",
        "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
        "VBA": "Range(\"C3\").Value = \"Fancy\""
    },
    {
        "description": "Set value 'Tee' in cell C4",
        "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
        "VBA": "Range(\"C4\").Value = \"Tee\""
    },
    {
        "description": "Set value 'Tee' in cell C5",
        "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
        "VBA": "Range(\"C5\").Value = \"Tee\""
    },
    {
        "description": "Set numeric value 42.5 in cell D2",
        "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
        "VBA": "Range(\"D2\").Value = 42.5"
    },
    {
        "description": "Set numeric value 35.2 in cell D3",
        "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
        "VBA": "Range(\"D3\").Value = 35.2"
    },
    {
        "description": "Set numeric value 12.3 in cell D4",
        "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
        "VBA": "Range(\"D4\").Value = 12.3"
    },
    {
        "description": "Set numeric value 24.8 in cell D5",
        "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
        "VBA": "Range(\"D5\").Value = 24.8"
    },
    {
        "description": "Get data range B1:D5 from Sheet1",
        "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
        "VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
        "description": "Insert pivot table in a new worksheet using data range",
        "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
        "VBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
        "description": "Add 'Style' to columns and 'Region' to rows in pivot table",
        "OnlyOffice_JS": "pivotTable.AddFields({ columns: ['Style'], rows: 'Region' });",
        "VBA": "With pivotTable\n    .PivotFields(\"Style\").Orientation = xlColumnField\n    .PivotFields(\"Region\").Orientation = xlRowField\nEnd With"
    },
    {
        "description": "Add 'Style' as data field in pivot table",
        "OnlyOffice_JS": "pivotTable.AddDataField('Style');",
        "VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Style\"), \"Sum of Style\", xlSum"
    },
    {
        "description": "Get the active worksheet (pivot worksheet)",
        "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
        "VBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
        "description": "Get 'Style' pivot field",
        "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Style');",
        "VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")"
    },
    {
        "description": "Get items of 'Style' pivot field",
        "OnlyOffice_JS": "var pivotItems = pivotField.GetPivotItems();",
        "VBA": "Set pivotItems = pivotField.PivotItems"
    },
    {
        "description": "Set 'Style item captions' in cell A15",
        "OnlyOffice_JS": "pivotWorksheet.GetRangeByNumber(15, 0).SetValue('Style item captions');",
        "VBA": "pivotWorksheet.Cells(15, 1).Value = \"Style item captions\""
    },
    {
        "description": "Loop through pivot items and set their captions starting from cell B15",
        "OnlyOffice_JS": "for (var i = 0; i < pivotItems.length; i += 1) {\n    pivotWorksheet.GetRangeByNumber(15 + i, 1).SetValue(pivotItems[i].GetCaption());\n}",
        "VBA": "Dim i As Integer\nFor i = 0 To pivotItems.Count - 1\n    pivotWorksheet.Cells(15 + i, 2).Value = pivotItems(i).Caption\nNext i"
    }
]
``````json
{
  "description": "This code initializes a worksheet, populates it with data, creates a pivot table, and lists pivot field items.",
  "codeComparison": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"$B$1:$D$5\")"
    },
    {
      "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel VBA": "Set pivotTable = Worksheets.Add.PivotTables.Add(dataRef, \"PivotTable\")"
    },
    {
      "OnlyOffice JS": "pivotTable.AddFields({\n\tcolumns: ['Style'],\n\trows: 'Region'\n});",
      "Excel VBA": "With pivotTable\n    .PivotFields(\"Style\").Orientation = xlColumnField\n    .PivotFields(\"Region\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice JS": "pivotTable.AddDataField('Style');",
      "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Style\"), \"Sum of Style\", xlSum"
    },
    {
      "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Style');",
      "Excel VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")"
    },
    {
      "OnlyOffice JS": "var pivotItems = pivotField.GetPivotItems();",
      "Excel VBA": "Set pivotItems = pivotField.PivotItems"
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRangeByNumber(15, 0).SetValue('Style item names')",
      "Excel VBA": "pivotWorksheet.Cells(15, 1).Value = \"Style item names\""
    },
    {
      "OnlyOffice JS": "for (var i = 0; i < pivotItems.length; i += 1) {\n    pivotWorksheet.GetRangeByNumber(15 + i, 1).SetValue(pivotItems[i].GetName());\n}",
      "Excel VBA": "Dim i As Integer\nFor i = 0 To pivotItems.Count - 1\n    pivotWorksheet.Cells(15 + i, 2).Value = pivotItems(i).Name\nNext i"
    }
  ]
}
``````json
{
  "Get active sheet": {
    "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
  },
  "Set header for B1 to 'Region'": {
    "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
    "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
  },
  "Set header for C1 to 'Style'": {
    "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
    "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
  },
  "Set header for D1 to 'Price'": {
    "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
    "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
  },
  "Set value 'East' in B2": {
    "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
    "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
  },
  "Set value 'West' in B3": {
    "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
    "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
  },
  "Set value 'East' in B4": {
    "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
    "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
  },
  "Set value 'West' in B5": {
    "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
    "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
  },
  "Set value 'Fancy' in C2": {
    "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
    "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
  },
  "Set value 'Fancy' in C3": {
    "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
    "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
  },
  "Set value 'Tee' in C4": {
    "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
    "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
  },
  "Set value 'Tee' in C5": {
    "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
    "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
  },
  "Set value 42.5 in D2": {
    "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
    "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
  },
  "Set value 35.2 in D3": {
    "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
    "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
  },
  "Set value 12.3 in D4": {
    "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
    "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
  },
  "Set value 24.8 in D5": {
    "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
    "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
  },
  "Get data range B1:D5": {
    "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
    "Excel_VBA": "Dim dataRef As Range\nSet dataRef = oWorksheet.Range(\"B1:D5\")"
  },
  "Insert PivotTable in new worksheet": {
    "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
    "Excel_VBA": "Dim pivotTable As PivotTable\nDim pivotSheet As Worksheet\nSet pivotSheet = Worksheets.Add\nSet pivotTable = pivotSheet.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
  },
  "Add fields to PivotTable (Style as Page, Region as Row)": {
    "OnlyOffice_JS": "pivotTable.AddFields({\n\tpages: ['Style'],\n\trows: 'Region',\n});",
    "Excel_VBA": "With pivotTable\n\t.PivotFields(\"Style\").Orientation = xlPageField\n\t.PivotFields(\"Region\").Orientation = xlRowField\nEnd With"
  },
  "Add 'Style' as Data Field": {
    "OnlyOffice_JS": "pivotTable.AddDataField('Style');",
    "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Style\"), \"Sum of Style\", xlSum"
  },
  "Get active sheet (Pivot Sheet)": {
    "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
    "Excel_VBA": "Set pivotWorksheet = ActiveSheet"
  },
  "Get PivotField 'Style'": {
    "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Style');",
    "Excel_VBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Style\")"
  },
  "Get first PivotItem of 'Style'": {
    "OnlyOffice_JS": "var pivotItem = pivotField.GetPivotItems()[0];",
    "Excel_VBA": "Dim pivotItem As PivotItem\nSet pivotItem = pivotField.PivotItems(1)"
  },
  "Set A15 to PivotItem name + ' parent:'": {
    "OnlyOffice_JS": "pivotWorksheet.GetRange('A15').SetValue(pivotItem.GetName() + ' parent:');",
    "Excel_VBA": "pivotWorksheet.Range(\"A15\").Value = pivotItem.Name & \" parent:\""
  },
  "Set B15 to PivotItem's parent name": {
    "OnlyOffice_JS": "pivotWorksheet.GetRange('B15').SetValue(pivotItem.GetParent().GetName());",
    "Excel_VBA": "pivotWorksheet.Range(\"B15\").Value = pivotItem.Parent.Name"
  }
}
``````json
{
  "Description": "The code initializes data in the worksheet and creates a pivot table based on that data.",
  "Methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "VBA": "Dim dataRef As Range\nSet dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "VBA": "Dim pivotTable As PivotTable\nSet pivotTable = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=ThisWorkbook.Sheets.Add().Range(\"A1\"), TableName:=\"PivotTable1\")"
    },
    {
      "OnlyOffice JS": "pivotTable.AddFields({ columns: ['Style'], rows: 'Region' });",
      "VBA": "With pivotTable\n    .PivotFields(\"Style\").Orientation = xlColumnField\n    .PivotFields(\"Region\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice JS": "pivotTable.AddDataField('Style');",
      "VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Style\"), \"Sum of Style\", xlSum"
    },
    {
      "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Style');",
      "VBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Style\")"
    },
    {
      "OnlyOffice JS": "var pivotItems = pivotField.GetPivotItems();",
      "VBA": "Dim pivotItems As PivotItem\n' VBA does not have a direct equivalent array, you'd typically loop through pivotField.PivotItems"
    },
    {
      "OnlyOffice JS": "pivotWorksheet.GetRangeByNumber(15, 0).SetValue('Style item values')",
      "VBA": "pivotWorksheet.Cells(16, 1).Value = \"Style item values\""
    },
    {
      "OnlyOffice JS": "for (var i = 0; i < pivotItems.length; i += 1) { pivotWorksheet.GetRangeByNumber(15 + i, 1).SetValue(pivotItems[i].GetValue()); }",
      "VBA": "Dim i As Integer\nFor i = 0 To pivotTable.PivotFields(\"Style\").PivotItems.Count - 1\n    pivotWorksheet.Cells(16 + i, 2).Value = pivotTable.PivotFields(\"Style\").PivotItems(i + 1).Name\nNext i"
    }
  ]
}
``````json
{
  "Table": [
    {
      "Get active worksheet": {
        "VBA": "Set oWorksheet = ActiveSheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();"
      }
    },
    {
      "Set value 'Region' to cell B1": {
        "VBA": "oWorksheet.Range(\"B1\").Value = \"Region\"",
        "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');"
      }
    },
    {
      "Set value 'Style' to cell C1": {
        "VBA": "oWorksheet.Range(\"C1\").Value = \"Style\"",
        "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');"
      }
    },
    {
      "Set value 'Price' to cell D1": {
        "VBA": "oWorksheet.Range(\"D1\").Value = \"Price\"",
        "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');"
      }
    },
    {
      "Set value 'East' to cell B2": {
        "VBA": "oWorksheet.Range(\"B2\").Value = \"East\"",
        "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');"
      }
    },
    {
      "Set value 'West' to cell B3": {
        "VBA": "oWorksheet.Range(\"B3\").Value = \"West\"",
        "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');"
      }
    },
    {
      "Set value 'East' to cell B4": {
        "VBA": "oWorksheet.Range(\"B4\").Value = \"East\"",
        "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');"
      }
    },
    {
      "Set value 'West' to cell B5": {
        "VBA": "oWorksheet.Range(\"B5\").Value = \"West\"",
        "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');"
      }
    },
    {
      "Set value 'Fancy' to cell C2": {
        "VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\"",
        "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');"
      }
    },
    {
      "Set value 'Fancy' to cell C3": {
        "VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\"",
        "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');"
      }
    },
    {
      "Set value 'Tee' to cell C4": {
        "VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\"",
        "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');"
      }
    },
    {
      "Set value 'Tee' to cell C5": {
        "VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\"",
        "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');"
      }
    },
    {
      "Set value 42.5 to cell D2": {
        "VBA": "oWorksheet.Range(\"D2\").Value = 42.5",
        "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);"
      }
    },
    {
      "Set value 35.2 to cell D3": {
        "VBA": "oWorksheet.Range(\"D3\").Value = 35.2",
        "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);"
      }
    },
    {
      "Set value 12.3 to cell D4": {
        "VBA": "oWorksheet.Range(\"D4\").Value = 12.3",
        "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);"
      }
    },
    {
      "Set value 24.8 to cell D5": {
        "VBA": "oWorksheet.Range(\"D5\").Value = 24.8",
        "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);"
      }
    },
    {
      "Get range B1:D5 from Sheet1": {
        "VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"$B$1:$D$5\")",
        "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
      }
    },
    {
      "Insert Pivot Table in a new worksheet": {
        "VBA": "Set pivotCache = ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef)\nSet pivotTable = pivotCache.CreatePivotTable(TableDestination:=ActiveWorkbook.Worksheets.Add().Range(\"A1\"))",
        "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
      }
    },
    {
      "Add 'Style' as column field and 'Region' as row field to Pivot Table": {
        "VBA": "With pivotTable\n    .PivotFields(\"Style\").Orientation = xlColumnField\n    .PivotFields(\"Region\").Orientation = xlRowField\nEnd With",
        "OnlyOffice JS": "pivotTable.AddFields({\n\tcolumns: ['Style'],\n\trows: 'Region',\n});"
      }
    },
    {
      "Add 'Style' as data field to Pivot Table": {
        "VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Style\"), \"Count of Style\", xlCount",
        "OnlyOffice JS": "pivotTable.AddDataField('Style');"
      }
    },
    {
      "Get active worksheet for Pivot Table": {
        "VBA": "Set pivotWorksheet = ActiveSheet",
        "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();"
      }
    },
    {
      "Get 'Style' pivot field": {
        "VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")",
        "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Style');"
      }
    },
    {
      "Get pivot items from 'Style' field": {
        "VBA": "Set pivotItems = pivotField.PivotItems",
        "OnlyOffice JS": "var pivotItems = pivotField.GetPivotItems();"
      }
    },
    {
      "Set header 'Style item captions' at cell A15": {
        "VBA": "pivotWorksheet.Cells(15, 1).Value = \"Style item captions\"",
        "OnlyOffice JS": "pivotWorksheet.GetRangeByNumber(15, 0).SetValue('Style item captions');"
      }
    },
    {
      "Populate 'Style' pivot item captions starting from cell B15": {
        "VBA": "Dim i As Integer\nFor i = 0 To pivotItems.Count - 1\n    pivotWorksheet.Cells(15 + i, 2).Value = pivotItems(i + 1).Caption\nNext i",
        "OnlyOffice JS": "for (var i = 0; i < pivotItems.length; i += 1) {\n    pivotWorksheet.GetRangeByNumber(15 + i, 1).SetValue(pivotItems[i].GetCaption());\n}"
      }
    }
  ]
}
``````json
{
  "table": {
    "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set oWorksheet = ActiveSheet"
      },
      {
        "Description": "Set value 'Region' in cell B1",
        "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
        "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
      },
      {
        "Description": "Set value 'Style' in cell C1",
        "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
        "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
      },
      {
        "Description": "Set value 'Price' in cell D1",
        "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
        "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
      },
      {
        "Description": "Set value 'East' in cell B2",
        "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
        "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
      },
      {
        "Description": "Set value 'West' in cell B3",
        "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
        "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
      },
      {
        "Description": "Set value 'East' in cell B4",
        "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
        "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
      },
      {
        "Description": "Set value 'West' in cell B5",
        "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
        "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
      },
      {
        "Description": "Set value 'Fancy' in cell C2",
        "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
        "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
      },
      {
        "Description": "Set value 'Fancy' in cell C3",
        "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
        "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
      },
      {
        "Description": "Set value 'Tee' in cell C4",
        "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
        "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
      },
      {
        "Description": "Set value 'Tee' in cell C5",
        "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
        "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
      },
      {
        "Description": "Set value 42.5 in cell D2",
        "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
        "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
      },
      {
        "Description": "Set value 35.2 in cell D3",
        "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
        "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
      },
      {
        "Description": "Set value 12.3 in cell D4",
        "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
        "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
      },
      {
        "Description": "Set value 24.8 in cell D5",
        "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
        "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
      },
      {
        "Description": "Get data range 'Sheet1'!$B$1:$D$5",
        "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
        "Excel VBA": "Set dataRef = Sheets(\"Sheet1\").Range(\"B1:D5\")"
      },
      {
        "Description": "Insert pivot table in a new worksheet",
        "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
        "Excel VBA": "Set pivotTable = ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=Sheets.Add().Range(\"A1\"), TableName:=\"PivotTable1\")"
      },
      {
        "Description": "Add fields to pivot table: columns 'Style' and rows 'Region'",
        "OnlyOffice JS": "pivotTable.AddFields({\n\tcolumns: ['Style'],\n\trows: 'Region',\n});",
        "Excel VBA": "With pivotTable\n\t.PivotFields(\"Style\").Orientation = xlColumnField\n\t.PivotFields(\"Region\").Orientation = xlRowField\nEnd With"
      },
      {
        "Description": "Add data field 'Style' to pivot table",
        "OnlyOffice JS": "pivotTable.AddDataField('Style');",
        "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Style\"), \"Sum of Style\", xlSum"
      },
      {
        "Description": "Get the active pivot worksheet",
        "OnlyOffice JS": "var pivotWorksheet = Api.GetActiveSheet();",
        "Excel VBA": "Set pivotWorksheet = ActiveSheet"
      },
      {
        "Description": "Get pivot field 'Style'",
        "OnlyOffice JS": "var pivotField = pivotTable.GetPivotFields('Style');",
        "Excel VBA": "Set pivotField = pivotTable.PivotFields(\"Style\")"
      },
      {
        "Description": "Get pivot items from 'Style' field",
        "OnlyOffice JS": "var pivotItems = pivotField.GetPivotItems();",
        "Excel VBA": "Set pivotItems = pivotField.PivotItems"
      },
      {
        "Description": "Set 'Style item names' in cell A15",
        "OnlyOffice JS": "pivotWorksheet.GetRangeByNumber(15, 0).SetValue('Style item names');",
        "Excel VBA": "pivotWorksheet.Cells(15, 1).Value = \"Style item names\""
      },
      {
        "Description": "Loop through pivot items and set their names in cells B15 onwards",
        "OnlyOffice JS": "for (var i = 0; i < pivotItems.length; i += 1) {\n\tpivotWorksheet.GetRangeByNumber(15 + i, 1).SetValue(pivotItems[i].GetName());\n}",
        "Excel VBA": "Dim i As Integer\nFor i = 0 To pivotItems.Count - 1\n\tpivotWorksheet.Cells(15 + i, 2).Value = pivotItems(i).Name\nNext i"
      }
    ]
  }
}
``````json
{
  "Description": "Excel VBA equivalents for OnlyOffice API methods used to create and manipulate data and pivot tables.",
  "Mapping": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B4').SetValue('East');",
      "Excel_VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "Excel_VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "Excel_VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "Excel_VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
    },
    {
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Dim dataRef As Range\nSet dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Dim pivotTable As PivotTable\nSet pivotTable = ThisWorkbook.Sheets.Add.PivotTables.Add(SourceData:=dataRef, TableDestination:=Range(\"A1\"))"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddFields({ pages: ['Style'], rows: 'Region', });",
      "Excel_VBA": "With pivotTable\n    .PivotFields(\"Style\").Orientation = xlPageField\n    .PivotFields(\"Region\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice_JS": "pivotTable.AddDataField('Style');",
      "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Style\"), \"Count of Style\", xlCount"
    },
    {
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Style');",
      "Excel_VBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Style\")"
    },
    {
      "OnlyOffice_JS": "var pivotItem = pivotField.GetPivotItems()[0];",
      "Excel_VBA": "Dim pivotItem As PivotItem\nSet pivotItem = pivotField.PivotItems(1)"
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('A15').SetValue(pivotItem.GetName() + ' parent:');",
      "Excel_VBA": "pivotWorksheet.Range(\"A15\").Value = pivotItem.Name & \" parent:\""
    },
    {
      "OnlyOffice_JS": "pivotWorksheet.GetRange('B15').SetValue(pivotItem.GetParent().GetName());",
      "Excel_VBA": "pivotWorksheet.Range(\"B15\").Value = pivotItem.Parent.Name"
    }
  ]
}
``````json
{
  "RAG_Table": [
    {
      "Description": "Get active sheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set value 'Region' in cell B1",
      "OnlyOffice_JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel_VBA": "Range(\"B1\").Value = \"Region\""
    },
    {
      "Description": "Set value 'Style' in cell C1",
      "OnlyOffice_JS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "Excel_VBA": "Range(\"C1\").Value = \"Style\""
    },
    {
      "Description": "Set value 'Price' in cell D1",
      "OnlyOffice_JS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "Excel_VBA": "Range(\"D1\").Value = \"Price\""
    },
    {
      "Description": "Set values in cells B2 to B5",
      "OnlyOffice_JS": "oWorksheet.GetRange('B2').SetValue('East');\n" +
                      "oWorksheet.GetRange('B3').SetValue('West');\n" +
                      "oWorksheet.GetRange('B4').SetValue('East');\n" +
                      "oWorksheet.GetRange('B5').SetValue('West');",
      "Excel_VBA": "Range(\"B2\").Value = \"East\"\n" +
                  "Range(\"B3\").Value = \"West\"\n" +
                  "Range(\"B4\").Value = \"East\"\n" +
                  "Range(\"B5\").Value = \"West\""
    },
    {
      "Description": "Set values in cells C2 to C5",
      "OnlyOffice_JS": "oWorksheet.GetRange('C2').SetValue('Fancy');\n" +
                      "oWorksheet.GetRange('C3').SetValue('Fancy');\n" +
                      "oWorksheet.GetRange('C4').SetValue('Tee');\n" +
                      "oWorksheet.GetRange('C5').SetValue('Tee');",
      "Excel_VBA": "Range(\"C2\").Value = \"Fancy\"\n" +
                  "Range(\"C3\").Value = \"Fancy\"\n" +
                  "Range(\"C4\").Value = \"Tee\"\n" +
                  "Range(\"C5\").Value = \"Tee\""
    },
    {
      "Description": "Set values in cells D2 to D5",
      "OnlyOffice_JS": "oWorksheet.GetRange('D2').SetValue(42.5);\n" +
                      "oWorksheet.GetRange('D3').SetValue(35.2);\n" +
                      "oWorksheet.GetRange('D4').SetValue(12.3);\n" +
                      "oWorksheet.GetRange('D5').SetValue(24.8);",
      "Excel_VBA": "Range(\"D2\").Value = 42.5\n" +
                  "Range(\"D3\").Value = 35.2\n" +
                  "Range(\"D4\").Value = 12.3\n" +
                  "Range(\"D5\").Value = 24.8"
    },
    {
      "Description": "Get data range 'Sheet1'!$B$1:$D$5",
      "OnlyOffice_JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "Excel_VBA": "Dim dataRef As Range\nSet dataRef = Worksheets(\"Sheet1\").Range(\"$B$1:$D$5\")"
    },
    {
      "Description": "Insert pivot table in new worksheet",
      "OnlyOffice_JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel_VBA": "Dim pivotTable As PivotTable\nSet pivotTable = Worksheets.Add.PivotTableWizard(SourceData:=dataRef)"
    },
    {
      "Description": "Add fields to pivot table: columns 'Style', rows 'Region'",
      "OnlyOffice_JS": "pivotTable.AddFields({\n\tcolumns: ['Style'],\n\trows: 'Region',\n});",
      "Excel_VBA": "With pivotTable\n\t.PivotFields(\"Style\").Orientation = xlColumnField\n\t.PivotFields(\"Region\").Orientation = xlRowField\nEnd With"
    },
    {
      "Description": "Add data field 'Style' to pivot table",
      "OnlyOffice_JS": "pivotTable.AddDataField('Style');",
      "Excel_VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Style\"), \"Style\", xlSum"
    },
    {
      "Description": "Get active sheet (pivot worksheet)",
      "OnlyOffice_JS": "var pivotWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim pivotWorksheet As Worksheet\nSet pivotWorksheet = ActiveSheet"
    },
    {
      "Description": "Get pivot field 'Style'",
      "OnlyOffice_JS": "var pivotField = pivotTable.GetPivotFields('Style');",
      "Excel_VBA": "Dim pivotField As PivotField\nSet pivotField = pivotTable.PivotFields(\"Style\")"
    },
    {
      "Description": "Get pivot items of 'Style' field",
      "OnlyOffice_JS": "var pivotItems = pivotField.GetPivotItems();",
      "Excel_VBA": "Dim pivotItems As PivotItems\nSet pivotItems = pivotField.PivotItems"
    },
    {
      "Description": "Set value 'Style item values' in cell A15",
      "OnlyOffice_JS": "pivotWorksheet.GetRangeByNumber(15, 0).SetValue('Style item values');",
      "Excel_VBA": "Cells(15, 1).Value = \"Style item values\""
    },
    {
      "Description": "Loop through pivot items and set their values starting from cell B15",
      "OnlyOffice_JS": "for (var i = 0; i < pivotItems.length; i += 1) {\n\tpivotWorksheet.GetRangeByNumber(15 + i, 1).SetValue(pivotItems[i].GetValue());\n}",
      "Excel_VBA": "Dim i As Integer\nFor i = 0 To pivotItems.Count - 1\n\tCells(15 + i, 2).Value = pivotItems(i).Value\nNext i"
    }
  ]
}
``````json
{
  "Table": [
    {
      "Description": "Get the active worksheet.",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set the value of cell B1 to 'Region'.",
      "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "ExcelVBA": "Range(\"B1\").Value = \"Region\""
    },
    {
      "Description": "Set the value of cell C1 to 'Style'.",
      "OnlyOfficeJS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "ExcelVBA": "Range(\"C1\").Value = \"Style\""
    },
    {
      "Description": "Set the value of cell D1 to 'Price'.",
      "OnlyOfficeJS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "ExcelVBA": "Range(\"D1\").Value = \"Price\""
    },
    {
      "Description": "Set the value of cell B2 to 'East'.",
      "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');",
      "ExcelVBA": "Range(\"B2\").Value = \"East\""
    },
    {
      "Description": "Set the value of cell B3 to 'West'.",
      "OnlyOfficeJS": "oWorksheet.GetRange('B3').SetValue('West');",
      "ExcelVBA": "Range(\"B3\").Value = \"West\""
    },
    {
      "Description": "Set the value of cell B4 to 'East'.",
      "OnlyOfficeJS": "oWorksheet.GetRange('B4').SetValue('East');",
      "ExcelVBA": "Range(\"B4\").Value = \"East\""
    },
    {
      "Description": "Set the value of cell B5 to 'West'.",
      "OnlyOfficeJS": "oWorksheet.GetRange('B5').SetValue('West');",
      "ExcelVBA": "Range(\"B5\").Value = \"West\""
    },
    {
      "Description": "Set the value of cell C2 to 'Fancy'.",
      "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "ExcelVBA": "Range(\"C2\").Value = \"Fancy\""
    },
    {
      "Description": "Set the value of cell C3 to 'Fancy'.",
      "OnlyOfficeJS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "ExcelVBA": "Range(\"C3\").Value = \"Fancy\""
    },
    {
      "Description": "Set the value of cell C4 to 'Tee'.",
      "OnlyOfficeJS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "ExcelVBA": "Range(\"C4\").Value = \"Tee\""
    },
    {
      "Description": "Set the value of cell C5 to 'Tee'.",
      "OnlyOfficeJS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "ExcelVBA": "Range(\"C5\").Value = \"Tee\""
    },
    {
      "Description": "Set the value of cell D2 to 42.5.",
      "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "ExcelVBA": "Range(\"D2\").Value = 42.5"
    },
    {
      "Description": "Set the value of cell D3 to 35.2.",
      "OnlyOfficeJS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "ExcelVBA": "Range(\"D3\").Value = 35.2"
    },
    {
      "Description": "Set the value of cell D4 to 12.3.",
      "OnlyOfficeJS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "ExcelVBA": "Range(\"D4\").Value = 12.3"
    },
    {
      "Description": "Set the value of cell D5 to 24.8.",
      "OnlyOfficeJS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "ExcelVBA": "Range(\"D5\").Value = 24.8"
    },
    {
      "Description": "Define a data range from B1 to D5 on Sheet1.",
      "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "ExcelVBA": "Set dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "Description": "Insert a new pivot table based on the defined data range.",
      "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "ExcelVBA": "Set pivotTable = ThisWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "Description": "Add 'Price' as a data field in the pivot table.",
      "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
      "ExcelVBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
    },
    {
      "Description": "Add 'Region' as column fields and 'Style' as row fields in the pivot table.",
      "OnlyOfficeJS": "pivotTable.AddFields({ columns: 'Region', rows: 'Style' });",
      "ExcelVBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlColumnField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "Description": "Get the active worksheet for the pivot table.",
      "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set pivotWorksheet = ActiveSheet"
    },
    {
      "Description": "Set the value of cell A9 to 'Column Fields'.",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('A9').SetValue('Column Fields');",
      "ExcelVBA": "Range(\"A9\").Value = \"Column Fields\""
    },
    {
      "Description": "Retrieve column fields from the pivot table.",
      "OnlyOfficeJS": "var pivotFields = pivotTable.GetColumnFields();",
      "ExcelVBA": "Set pivotFields = pivotTable.ColumnFields"
    },
    {
      "Description": "Loop through the column fields and set their names starting from cell A9.",
      "OnlyOfficeJS": "for (var i = 0; i < pivotFields.length; i += 1) {\n    var cell = pivotWorksheet.GetRangeByNumber(8 + i, 1);\n    cell.SetValue(pivotFields[i].GetName());\n}",
      "ExcelVBA": "Dim i As Integer\nFor i = 1 To pivotFields.Count\n    pivotWorksheet.Cells(8 + i, 1).Value = pivotFields(i).Name\nNext i"
    }
  ]
}
``````json
{
  "description": "Get the active worksheet",
  "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
  "Excel VBA": "Set oWorksheet = ActiveWorkbook.ActiveSheet"
},
{
  "description": "Set header for Region in cell B1",
  "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
  "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
},
{
  "description": "Set header for Style in cell C1",
  "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Style');",
  "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Style\""
},
{
  "description": "Set header for Price in cell D1",
  "OnlyOffice JS": "oWorksheet.GetRange('D1').SetValue('Price');",
  "Excel VBA": "oWorksheet.Range(\"D1\").Value = \"Price\""
},
{
  "description": "Set value 'East' in cell B2",
  "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
  "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
},
{
  "description": "Set value 'West' in cell B3",
  "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
  "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
},
{
  "description": "Set value 'East' in cell B4",
  "OnlyOffice JS": "oWorksheet.GetRange('B4').SetValue('East');",
  "Excel VBA": "oWorksheet.Range(\"B4\").Value = \"East\""
},
{
  "description": "Set value 'West' in cell B5",
  "OnlyOffice JS": "oWorksheet.GetRange('B5').SetValue('West');",
  "Excel VBA": "oWorksheet.Range(\"B5\").Value = \"West\""
},
{
  "description": "Set value 'Fancy' in cell C2",
  "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
  "Excel VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\""
},
{
  "description": "Set value 'Fancy' in cell C3",
  "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
  "Excel VBA": "oWorksheet.Range(\"C3\").Value = \"Fancy\""
},
{
  "description": "Set value 'Tee' in cell C4",
  "OnlyOffice JS": "oWorksheet.GetRange('C4').SetValue('Tee');",
  "Excel VBA": "oWorksheet.Range(\"C4\").Value = \"Tee\""
},
{
  "description": "Set value 'Tee' in cell C5",
  "OnlyOffice JS": "oWorksheet.GetRange('C5').SetValue('Tee');",
  "Excel VBA": "oWorksheet.Range(\"C5\").Value = \"Tee\""
},
{
  "description": "Set value 42.5 in cell D2",
  "OnlyOffice JS": "oWorksheet.GetRange('D2').SetValue(42.5);",
  "Excel VBA": "oWorksheet.Range(\"D2\").Value = 42.5"
},
{
  "description": "Set value 35.2 in cell D3",
  "OnlyOffice JS": "oWorksheet.GetRange('D3').SetValue(35.2);",
  "Excel VBA": "oWorksheet.Range(\"D3\").Value = 35.2"
},
{
  "description": "Set value 12.3 in cell D4",
  "OnlyOffice JS": "oWorksheet.GetRange('D4').SetValue(12.3);",
  "Excel VBA": "oWorksheet.Range(\"D4\").Value = 12.3"
},
{
  "description": "Set value 24.8 in cell D5",
  "OnlyOffice JS": "oWorksheet.GetRange('D5').SetValue(24.8);",
  "Excel VBA": "oWorksheet.Range(\"D5\").Value = 24.8"
},
{
  "description": "Get the range B1 to D5 from Sheet1",
  "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
  "Excel VBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
},
{
  "description": "Insert a new pivot table worksheet based on the data range",
  "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
  "Excel VBA": "Set pivotTable = ActiveWorkbook.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
},
{
  "description": "Add 'Region' as rows and 'Style' as columns to the pivot table",
  "OnlyOffice JS": "pivotTable.AddFields({ rows: 'Region', columns: 'Style', });",
  "Excel VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlColumnField\nEnd With"
},
{
  "description": "Add 'Price' as data field to the pivot table",
  "OnlyOffice JS": "pivotTable.AddDataField('Price');",
  "Excel VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum"
},
{
  "description": "Select the data body range of the pivot table",
  "OnlyOffice JS": "pivotTable.GetDataBodyRange().Select();",
  "Excel VBA": "pivotTable.TableRange2.Select"
}
``````json
{
  "RAG_table": [
    {
      "Description": "Get the active worksheet",
      "VBA_Code": "Set oWorksheet = ActiveSheet",
      "OnlyOfficeJS_Code": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Set the value of cell B1 to 'Region'",
      "VBA_Code": "oWorksheet.Range(\"B1\").Value = \"Region\"",
      "OnlyOfficeJS_Code": "oWorksheet.GetRange('B1').SetValue('Region');"
    },
    {
      "Description": "Set the value of cell C1 to 'Style'",
      "VBA_Code": "oWorksheet.Range(\"C1\").Value = \"Style\"",
      "OnlyOfficeJS_Code": "oWorksheet.GetRange('C1').SetValue('Style');"
    },
    {
      "Description": "Set the value of cell D1 to 'Price'",
      "VBA_Code": "oWorksheet.Range(\"D1\").Value = \"Price\"",
      "OnlyOfficeJS_Code": "oWorksheet.GetRange('D1').SetValue('Price');"
    },
    {
      "Description": "Set the value of cell B2 to 'East'",
      "VBA_Code": "oWorksheet.Range(\"B2\").Value = \"East\"",
      "OnlyOfficeJS_Code": "oWorksheet.GetRange('B2').SetValue('East');"
    },
    {
      "Description": "Set the value of cell B3 to 'West'",
      "VBA_Code": "oWorksheet.Range(\"B3\").Value = \"West\"",
      "OnlyOfficeJS_Code": "oWorksheet.GetRange('B3').SetValue('West');"
    },
    {
      "Description": "Set the value of cell B4 to 'East'",
      "VBA_Code": "oWorksheet.Range(\"B4\").Value = \"East\"",
      "OnlyOfficeJS_Code": "oWorksheet.GetRange('B4').SetValue('East');"
    },
    {
      "Description": "Set the value of cell B5 to 'West'",
      "VBA_Code": "oWorksheet.Range(\"B5\").Value = \"West\"",
      "OnlyOfficeJS_Code": "oWorksheet.GetRange('B5').SetValue('West');"
    },
    {
      "Description": "Set the value of cell C2 to 'Fancy'",
      "VBA_Code": "oWorksheet.Range(\"C2\").Value = \"Fancy\"",
      "OnlyOfficeJS_Code": "oWorksheet.GetRange('C2').SetValue('Fancy');"
    },
    {
      "Description": "Set the value of cell C3 to 'Fancy'",
      "VBA_Code": "oWorksheet.Range(\"C3\").Value = \"Fancy\"",
      "OnlyOfficeJS_Code": "oWorksheet.GetRange('C3').SetValue('Fancy');"
    },
    {
      "Description": "Set the value of cell C4 to 'Tee'",
      "VBA_Code": "oWorksheet.Range(\"C4\").Value = \"Tee\"",
      "OnlyOfficeJS_Code": "oWorksheet.GetRange('C4').SetValue('Tee');"
    },
    {
      "Description": "Set the value of cell C5 to 'Tee'",
      "VBA_Code": "oWorksheet.Range(\"C5\").Value = \"Tee\"",
      "OnlyOfficeJS_Code": "oWorksheet.GetRange('C5').SetValue('Tee');"
    },
    {
      "Description": "Set the value of cell D2 to 42.5",
      "VBA_Code": "oWorksheet.Range(\"D2\").Value = 42.5",
      "OnlyOfficeJS_Code": "oWorksheet.GetRange('D2').SetValue(42.5);"
    },
    {
      "Description": "Set the value of cell D3 to 35.2",
      "VBA_Code": "oWorksheet.Range(\"D3\").Value = 35.2",
      "OnlyOfficeJS_Code": "oWorksheet.GetRange('D3').SetValue(35.2);"
    },
    {
      "Description": "Set the value of cell D4 to 12.3",
      "VBA_Code": "oWorksheet.Range(\"D4\").Value = 12.3",
      "OnlyOfficeJS_Code": "oWorksheet.GetRange('D4').SetValue(12.3);"
    },
    {
      "Description": "Set the value of cell D5 to 24.8",
      "VBA_Code": "oWorksheet.Range(\"D5\").Value = 24.8",
      "OnlyOfficeJS_Code": "oWorksheet.GetRange('D5').SetValue(24.8);"
    },
    {
      "Description": "Get the data range from B1 to D5 on Sheet1",
      "VBA_Code": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")",
      "OnlyOfficeJS_Code": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
    },
    {
      "Description": "Insert a new pivot table worksheet based on the data range",
      "VBA_Code": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceData:=dataRef)",
      "OnlyOfficeJS_Code": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
    },
    {
      "Description": "Add 'Price' as a data field in the pivot table",
      "VBA_Code": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\")",
      "OnlyOfficeJS_Code": "pivotTable.AddDataField('Price');"
    },
    {
      "Description": "Add 'Region' as row field and 'Style' as column field in the pivot table",
      "VBA_Code": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlColumnField\nEnd With",
      "OnlyOfficeJS_Code": "pivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});"
    },
    {
      "Description": "Get the active worksheet after inserting the pivot table",
      "VBA_Code": "Set pivotWorksheet = ActiveSheet",
      "OnlyOfficeJS_Code": "var pivotWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Set the value of cell A9 to 'Display field captions'",
      "VBA_Code": "pivotWorksheet.Range(\"A9\").Value = \"Display field captions\"",
      "OnlyOfficeJS_Code": "pivotWorksheet.GetRange('A9').SetValue('Display field captions');"
    },
    {
      "Description": "Set the value of cell B9 to the pivot table's display field captions",
      "VBA_Code": "pivotWorksheet.Range(\"B9\").Value = pivotTable.DisplayFieldCaptions",
      "OnlyOfficeJS_Code": "pivotWorksheet.GetRange('B9').SetValue(pivotTable.GetDisplayFieldCaptions());"
    }
  ]
}
``````json
{
  "Description": "This code initializes the active worksheet, sets specific cell values, creates a pivot table, adds fields to it, and populates row field names starting from cell A9.",
  "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();\n\noWorksheet.GetRange('B1').SetValue('Region');\noWorksheet.GetRange('C1').SetValue('Style');\noWorksheet.GetRange('D1').SetValue('Price');\n\noWorksheet.GetRange('B2').SetValue('East');\noWorksheet.GetRange('B3').SetValue('West');\noWorksheet.GetRange('B4').SetValue('East');\noWorksheet.GetRange('B5').SetValue('West');\n\noWorksheet.GetRange('C2').SetValue('Fancy');\noWorksheet.GetRange('C3').SetValue('Fancy');\noWorksheet.GetRange('C4').SetValue('Tee');\noWorksheet.GetRange('C5').SetValue('Tee');\n\noWorksheet.GetRange('D2').SetValue(42.5);\noWorksheet.GetRange('D3').SetValue(35.2);\noWorksheet.GetRange('D4').SetValue(12.3);\noWorksheet.GetRange('D5').SetValue(24.8);\n\nvar dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nvar pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nvar pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A9').SetValue('Row Fields');\n\nvar rowFields = pivotTable.GetRowFields();\nfor (var i = 0; i < rowFields.length; i += 1) {\n\tvar cell = pivotWorksheet.GetRangeByNumber(8 + i, 1);\n\tcell.SetValue(rowFields[i].GetName());\n}",
  "Excel_VBA": "Sub CreatePivotTable()\n\tDim oWorksheet As Worksheet\n\tSet oWorksheet = ActiveSheet\n\n\tWith oWorksheet\n\t\t.Range(\"B1\").Value = \"Region\"\n\t\t.Range(\"C1\").Value = \"Style\"\n\t\t.Range(\"D1\").Value = \"Price\"\n\n\t\t.Range(\"B2\").Value = \"East\"\n\t\t.Range(\"B3\").Value = \"West\"\n\t\t.Range(\"B4\").Value = \"East\"\n\t\t.Range(\"B5\").Value = \"West\"\n\n\t\t.Range(\"C2\").Value = \"Fancy\"\n\t\t.Range(\"C3\").Value = \"Fancy\"\n\t\t.Range(\"C4\").Value = \"Tee\"\n\t\t.Range(\"C5\").Value = \"Tee\"\n\n\t\t.Range(\"D2\").Value = 42.5\n\t\t.Range(\"D3\").Value = 35.2\n\t\t.Range(\"D4\").Value = 12.3\n\t\t.Range(\"D5\").Value = 24.8\n\tEnd With\n\n\tDim dataRef As Range\n\tSet dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")\n\n\tDim pivotCache As PivotCache\n\tSet pivotCache = ThisWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef)\n\n\tDim pivotTable As PivotTable\n\tSet pivotTable = pivotCache.CreatePivotTable(TableDestination:=Worksheets.Add.Cells(1, 1), TableName:=\"PivotTable1\")\n\n\tWith pivotTable\n\t\t.PivotFields(\"Region\").Orientation = xlRowField\n\t\t.PivotFields(\"Style\").Orientation = xlColumnField\n\t\t.PivotFields(\"Price\").Orientation = xlDataField\n\t\t.PivotFields(\"Price\").Function = xlSum\n\tEnd With\n\n\tDim pivotWorksheet As Worksheet\n\tSet pivotWorksheet = ActiveSheet\n\tpivotWorksheet.Range(\"A9\").Value = \"Row Fields\"\n\n\tDim rowFields As PivotFields\n\tSet rowFields = pivotTable.RowFields\n\tDim i As Integer\n\tFor i = 1 To rowFields.Count\n\t\tpivotWorksheet.Cells(8 + i, 1).Value = rowFields(i).Name\n\tNext i\nEnd Sub"
}
``````json
{
  "table": {
    "headers": ["Description", "VBA Code", "OnlyOffice JS Code"],
    "rows": [
      {
        "Description": "Get the active worksheet",
        "VBA Code": "Set oWorksheet = ActiveWorkbook.ActiveSheet",
        "OnlyOffice JS Code": "var oWorksheet = Api.GetActiveSheet();"
      },
      {
        "Description": "Set value 'Region' in cell B1",
        "VBA Code": "oWorksheet.Range(\"B1\").Value = \"Region\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('B1').SetValue('Region');"
      },
      {
        "Description": "Set value 'Style' in cell C1",
        "VBA Code": "oWorksheet.Range(\"C1\").Value = \"Style\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('C1').SetValue('Style');"
      },
      {
        "Description": "Set value 'Price' in cell D1",
        "VBA Code": "oWorksheet.Range(\"D1\").Value = \"Price\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('D1').SetValue('Price');"
      },
      {
        "Description": "Set value 'East' in cell B2",
        "VBA Code": "oWorksheet.Range(\"B2\").Value = \"East\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('B2').SetValue('East');"
      },
      {
        "Description": "Set value 'West' in cell B3",
        "VBA Code": "oWorksheet.Range(\"B3\").Value = \"West\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('B3').SetValue('West');"
      },
      {
        "Description": "Set value 'East' in cell B4",
        "VBA Code": "oWorksheet.Range(\"B4\").Value = \"East\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('B4').SetValue('East');"
      },
      {
        "Description": "Set value 'West' in cell B5",
        "VBA Code": "oWorksheet.Range(\"B5\").Value = \"West\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('B5').SetValue('West');"
      },
      {
        "Description": "Set value 'Fancy' in cell C2",
        "VBA Code": "oWorksheet.Range(\"C2\").Value = \"Fancy\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('C2').SetValue('Fancy');"
      },
      {
        "Description": "Set value 'Fancy' in cell C3",
        "VBA Code": "oWorksheet.Range(\"C3\").Value = \"Fancy\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('C3').SetValue('Fancy');"
      },
      {
        "Description": "Set value 'Tee' in cell C4",
        "VBA Code": "oWorksheet.Range(\"C4\").Value = \"Tee\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('C4').SetValue('Tee');"
      },
      {
        "Description": "Set value 'Tee' in cell C5",
        "VBA Code": "oWorksheet.Range(\"C5\").Value = \"Tee\"",
        "OnlyOffice JS Code": "oWorksheet.GetRange('C5').SetValue('Tee');"
      },
      {
        "Description": "Set value 42.5 in cell D2",
        "VBA Code": "oWorksheet.Range(\"D2\").Value = 42.5",
        "OnlyOffice JS Code": "oWorksheet.GetRange('D2').SetValue(42.5);"
      },
      {
        "Description": "Set value 35.2 in cell D3",
        "VBA Code": "oWorksheet.Range(\"D3\").Value = 35.2",
        "OnlyOffice JS Code": "oWorksheet.GetRange('D3').SetValue(35.2);"
      },
      {
        "Description": "Set value 12.3 in cell D4",
        "VBA Code": "oWorksheet.Range(\"D4\").Value = 12.3",
        "OnlyOffice JS Code": "oWorksheet.GetRange('D4').SetValue(12.3);"
      },
      {
        "Description": "Set value 24.8 in cell D5",
        "VBA Code": "oWorksheet.Range(\"D5\").Value = 24.8",
        "OnlyOffice JS Code": "oWorksheet.GetRange('D5').SetValue(24.8);"
      },
      {
        "Description": "Get range B1:D5 from Sheet1",
        "VBA Code": "Set dataRef = ActiveWorkbook.Sheets(\"Sheet1\").Range(\"$B$1:$D$5\")",
        "OnlyOffice JS Code": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
      },
      {
        "Description": "Insert a new pivot table worksheet based on dataRef",
        "VBA Code": "Set pivotTable = ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRef).CreatePivotTable(TableDestination:=ActiveWorkbook.Sheets.Add().Name, TableName:=\"PivotTable1\")",
        "OnlyOffice JS Code": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
      },
      {
        "Description": "Add 'Region' and 'Style' as row fields in the pivot table",
        "VBA Code": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With",
        "OnlyOffice JS Code": "pivotTable.AddFields({ rows: ['Region', 'Style'] });"
      },
      {
        "Description": "Add 'Price' as a data field in the pivot table",
        "VBA Code": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\"), \"Sum of Price\", xlSum",
        "OnlyOffice JS Code": "pivotTable.AddDataField('Price');"
      },
      {
        "Description": "Get the active worksheet (pivot worksheet)",
        "VBA Code": "Set pivotWorksheet = ActiveWorkbook.ActiveSheet",
        "OnlyOffice JS Code": "var pivotWorksheet = Api.GetActiveSheet();"
      },
      {
        "Description": "Set value 'Table Style Row Headers' in cell A12 of the pivot worksheet",
        "VBA Code": "pivotWorksheet.Range(\"A12\").Value = \"Table Style Row Headers\"",
        "OnlyOffice JS Code": "pivotWorksheet.GetRange('A12').SetValue('Table Style Row Headers');"
      },
      {
        "Description": "Set the table style row headers value in cell B12 of the pivot worksheet",
        "VBA Code": "pivotWorksheet.Range(\"B12\").Value = pivotTable.TableStyleRowHeaders",
        "OnlyOffice JS Code": "pivotWorksheet.GetRange('B12').SetValue(pivotTable.GetTableStyleRowHeaders());"
      }
    ]
  }
}
``````json
{
  "Table": [
    {
      "Description": "Get the active worksheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Set value 'Region' in cell B1",
      "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "ExcelVBA": "Range(\"B1\").Value = \"Region\""
    },
    {
      "Description": "Set value 'Style' in cell C1",
      "OnlyOfficeJS": "oWorksheet.GetRange('C1').SetValue('Style');",
      "ExcelVBA": "Range(\"C1\").Value = \"Style\""
    },
    {
      "Description": "Set value 'Price' in cell D1",
      "OnlyOfficeJS": "oWorksheet.GetRange('D1').SetValue('Price');",
      "ExcelVBA": "Range(\"D1\").Value = \"Price\""
    },
    {
      "Description": "Set value 'East' in cell B2",
      "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');",
      "ExcelVBA": "Range(\"B2\").Value = \"East\""
    },
    {
      "Description": "Set value 'West' in cell B3",
      "OnlyOfficeJS": "oWorksheet.GetRange('B3').SetValue('West');",
      "ExcelVBA": "Range(\"B3\").Value = \"West\""
    },
    {
      "Description": "Set value 'East' in cell B4",
      "OnlyOfficeJS": "oWorksheet.GetRange('B4').SetValue('East');",
      "ExcelVBA": "Range(\"B4\").Value = \"East\""
    },
    {
      "Description": "Set value 'West' in cell B5",
      "OnlyOfficeJS": "oWorksheet.GetRange('B5').SetValue('West');",
      "ExcelVBA": "Range(\"B5\").Value = \"West\""
    },
    {
      "Description": "Set value 'Fancy' in cell C2",
      "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');",
      "ExcelVBA": "Range(\"C2\").Value = \"Fancy\""
    },
    {
      "Description": "Set value 'Fancy' in cell C3",
      "OnlyOfficeJS": "oWorksheet.GetRange('C3').SetValue('Fancy');",
      "ExcelVBA": "Range(\"C3\").Value = \"Fancy\""
    },
    {
      "Description": "Set value 'Tee' in cell C4",
      "OnlyOfficeJS": "oWorksheet.GetRange('C4').SetValue('Tee');",
      "ExcelVBA": "Range(\"C4\").Value = \"Tee\""
    },
    {
      "Description": "Set value 'Tee' in cell C5",
      "OnlyOfficeJS": "oWorksheet.GetRange('C5').SetValue('Tee');",
      "ExcelVBA": "Range(\"C5\").Value = \"Tee\""
    },
    {
      "Description": "Set value 42.5 in cell D2",
      "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);",
      "ExcelVBA": "Range(\"D2\").Value = 42.5"
    },
    {
      "Description": "Set value 35.2 in cell D3",
      "OnlyOfficeJS": "oWorksheet.GetRange('D3').SetValue(35.2);",
      "ExcelVBA": "Range(\"D3\").Value = 35.2"
    },
    {
      "Description": "Set value 12.3 in cell D4",
      "OnlyOfficeJS": "oWorksheet.GetRange('D4').SetValue(12.3);",
      "ExcelVBA": "Range(\"D4\").Value = 12.3"
    },
    {
      "Description": "Set value 24.8 in cell D5",
      "OnlyOfficeJS": "oWorksheet.GetRange('D5').SetValue(24.8);",
      "ExcelVBA": "Range(\"D5\").Value = 24.8"
    },
    {
      "Description": "Get range B1:D5 from Sheet1",
      "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");",
      "ExcelVBA": "Set dataRef = Worksheets(\"Sheet1\").Range(\"B1:D5\")"
    },
    {
      "Description": "Insert a new pivot table worksheet based on dataRef",
      "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "ExcelVBA": "Set pivotTable = Worksheets.Add.PivotTables.Add(SourceData:=dataRef, TableDestination:=Worksheets.Add.Range(\"A3\"), TableName:=\"PivotTable1\")"
    },
    {
      "Description": "Add 'Region' and 'Style' as row fields in the pivot table",
      "OnlyOfficeJS": "pivotTable.AddFields({ rows: ['Region', 'Style'], });",
      "ExcelVBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With"
    },
    {
      "Description": "Add 'Price' as a data field in the pivot table",
      "OnlyOfficeJS": "pivotTable.AddDataField('Price');",
      "ExcelVBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
    },
    {
      "Description": "Set pivot table layout to show blank lines",
      "OnlyOfficeJS": "pivotTable.SetLayoutBlankLine(true);",
      "ExcelVBA": "pivotTable.DisplayFieldCaptions = True"
    }
  ]
}
``````json
{
  "steps": [
    {
      "description": "Get the active worksheet",
      "VBA": "Set oWorksheet = ActiveSheet",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "description": "Set headers 'Region', 'Style', and 'Price' in cells B1, C1, D1",
      "VBA": "oWorksheet.Range(\"B1\").Value = \"Region\"\noWorksheet.Range(\"C1\").Value = \"Style\"\noWorksheet.Range(\"D1\").Value = \"Price\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('B1').SetValue('Region');\noWorksheet.GetRange('C1').SetValue('Style');\noWorksheet.GetRange('D1').SetValue('Price');"
    },
    {
      "description": "Populate 'Region' data in cells B2 to B5",
      "VBA": "oWorksheet.Range(\"B2\").Value = \"East\"\noWorksheet.Range(\"B3\").Value = \"West\"\noWorksheet.Range(\"B4\").Value = \"East\"\noWorksheet.Range(\"B5\").Value = \"West\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('B2').SetValue('East');\noWorksheet.GetRange('B3').SetValue('West');\noWorksheet.GetRange('B4').SetValue('East');\noWorksheet.GetRange('B5').SetValue('West');"
    },
    {
      "description": "Populate 'Style' data in cells C2 to C5",
      "VBA": "oWorksheet.Range(\"C2\").Value = \"Fancy\"\noWorksheet.Range(\"C3\").Value = \"Fancy\"\noWorksheet.Range(\"C4\").Value = \"Tee\"\noWorksheet.Range(\"C5\").Value = \"Tee\"",
      "OnlyOfficeJS": "oWorksheet.GetRange('C2').SetValue('Fancy');\noWorksheet.GetRange('C3').SetValue('Fancy');\noWorksheet.GetRange('C4').SetValue('Tee');\noWorksheet.GetRange('C5').SetValue('Tee');"
    },
    {
      "description": "Populate 'Price' data in cells D2 to D5",
      "VBA": "oWorksheet.Range(\"D2\").Value = 42.5\noWorksheet.Range(\"D3\").Value = 35.2\noWorksheet.Range(\"D4\").Value = 12.3\noWorksheet.Range(\"D5\").Value = 24.8",
      "OnlyOfficeJS": "oWorksheet.GetRange('D2').SetValue(42.5);\noWorksheet.GetRange('D3').SetValue(35.2);\noWorksheet.GetRange('D4').SetValue(12.3);\noWorksheet.GetRange('D5').SetValue(24.8);"
    },
    {
      "description": "Define data range for pivot table",
      "VBA": "Set dataRef = oWorksheet.Range(\"B1:D5\")",
      "OnlyOfficeJS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");"
    },
    {
      "description": "Insert a new pivot table worksheet based on the data range",
      "VBA": "Set pivotTable = Worksheets.Add.PivotTableWizard(SourceData:=dataRef)",
      "OnlyOfficeJS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);"
    },
    {
      "description": "Add 'Region' and 'Style' as row fields in the pivot table",
      "VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\n    .PivotFields(\"Style\").Orientation = xlRowField\nEnd With",
      "OnlyOfficeJS": "pivotTable.AddFields({ rows: ['Region', 'Style'] });"
    },
    {
      "description": "Add 'Price' as a data field in the pivot table",
      "VBA": "pivotTable.AddDataField pivotTable.PivotFields(\"Price\")",
      "OnlyOfficeJS": "pivotTable.AddDataField('Price');"
    },
    {
      "description": "Set pivot table to not use table style row headers",
      "VBA": "pivotTable.TableStyle2 = \"\"\n' Alternatively, set specific properties as needed",
      "OnlyOfficeJS": "pivotTable.SetTableStyleRowHeaders(false);"
    },
    {
      "description": "Get the active worksheet (pivot table sheet)",
      "VBA": "Set pivotWorksheet = ActiveSheet",
      "OnlyOfficeJS": "var pivotWorksheet = Api.GetActiveSheet();"
    },
    {
      "description": "Set cell A12 to display 'Table Style Row Headers'",
      "VBA": "pivotWorksheet.Range(\"A12\").Value = \"Table Style Row Headers\"",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('A12').SetValue('Table Style Row Headers');"
    },
    {
      "description": "Set cell B12 to display the state of table style row headers",
      "VBA": "pivotWorksheet.Range(\"B12\").Value = pivotTable.TableStyleRowHeaders",
      "OnlyOfficeJS": "pivotWorksheet.GetRange('B12').SetValue(pivotTable.GetTableStyleRowHeaders());"
    }
  ]
}
``````json
{
  "Description": "This example gets a class type and inserts it into the document.",
  "OnlyOffice JS": "// This example gets a class type and inserts it into the document.\nvar oWorksheet = Api.GetActiveSheet();\nvar oPresetColor = Api.CreatePresetColor(\"peachPuff\");\nvar oGs1 = Api.CreateGradientStop(oPresetColor, 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\noWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);\nvar sClassType = oPresetColor.GetClassType();\noWorksheet.SetColumnWidth(0, 15);\noWorksheet.SetColumnWidth(1, 10);\noWorksheet.GetRange(\"A1\").SetValue(\"Class Type = \");\noWorksheet.GetRange(\"B1\").SetValue(sClassType);",
  "Excel VBA": "Sub InsertClassType()\n    ' Get the active worksheet\n    Dim ws As Worksheet\n    Set ws = ThisWorkbook.ActiveSheet\n    \n    ' Create a preset color\n    Dim presetColor As Long\n    presetColor = RGB(255, 218, 185) ' PeachPuff color\n    \n    ' Create gradient stops\n    ' VBA does not have direct equivalents, so this is a simplified version\n    ' Add a shape with gradient fill\n    Dim shp As Shape\n    Set shp = ws.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 60, 35, 200, 100)\n    With shp.Fill\n        .Visible = msoTrue\n        .ForeColor.RGB = RGB(255, 218, 185) ' PeachPuff\n        .BackColor.RGB = RGB(255, 111, 61)\n        .TwoColorGradient msoGradientHorizontal, 1\n    End With\n    \n    ' Set column widths\n    ws.Columns(1).ColumnWidth = 15\n    ws.Columns(2).ColumnWidth = 10\n    \n    ' Insert values into cells\n    ws.Range(\"A1\").Value = \"Class Type = \"\n    ws.Range(\"B1\").Value = \"PresetColorClassType\" ' Placeholder for class type\nEnd Sub"
}
``````json
{
  "description": "This example gets a class type and inserts it into the document.",
  "code_mapping": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oPresetColor = Api.CreatePresetColor(\"peachPuff\");",
      "Excel_VBA": "Set oPresetColor = Application.CreatePresetColor(\"peachPuff\")"
    },
    {
      "OnlyOffice_JS": "var oGs1 = Api.CreateGradientStop(oPresetColor, 0);",
      "Excel_VBA": "Set oGs1 = Application.CreateGradientStop(oPresetColor, 0)"
    },
    {
      "OnlyOffice_JS": "var oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);",
      "Excel_VBA": "Set oGs2 = Application.CreateGradientStop(Application.CreateRGBColor(255, 111, 61), 100000)"
    },
    {
      "OnlyOffice_JS": "var oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);",
      "Excel_VBA": "Set oFill = Application.CreateLinearGradientFill(Array(oGs1, oGs2), 5400000)"
    },
    {
      "OnlyOffice_JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel_VBA": "Set oStroke = Application.CreateStroke(0, Application.CreateNoFill())"
    },
    {
      "OnlyOffice_JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
      "Excel_VBA": "oWorksheet.Shapes.AddShape(msoShapeFlowchartOnlineStorage, 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000)"
    },
    {
      "OnlyOffice_JS": "var sClassType = oPresetColor.GetClassType();",
      "Excel_VBA": "sClassType = oPresetColor.ClassType"
    },
    {
      "OnlyOffice_JS": "oWorksheet.SetColumnWidth(0, 15);",
      "Excel_VBA": "oWorksheet.Columns(1).ColumnWidth = 15"
    },
    {
      "OnlyOffice_JS": "oWorksheet.SetColumnWidth(1, 10);",
      "Excel_VBA": "oWorksheet.Columns(2).ColumnWidth = 10"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"Class Type = \");",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = \"Class Type = \""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(sClassType);",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = sClassType"
    }
  ]
}
``````json
{
  "description": "This example changes the user protected range.",
  "code": {
    "OnlyOffice_JS": "// This example changes the the user protected range.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.AddProtectedRange(\"protectedRange\", \"$A$1:$B$1\");\nvar protectedRange = oWorksheet.GetProtectedRange(\"protectedRange\");\nprotectedRange.AddUser(\"userId\", \"name\", \"CanView\");",
    "Excel_VBA": "Sub ProtectRange()\n    Dim ws As Worksheet\n    Dim pRange As Range\n\n    Set ws = ActiveSheet\n    Set pRange = ws.Range(\"A1:B1\")\n    \n    ws.Unprotect ' Unprotect the sheet first\n    pRange.Locked = True\n    ws.Protect Password:=\"yourPassword\", UserInterfaceOnly:=True\n    ' VBA does not support adding specific user permissions to a range directly\nEnd Sub"
  }
}
``````json
{
  "description": "This example changes the user protected range.",
  "methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.AddProtectedRange(\"protectedRange\", \"$A$1:$B$1\");",
      "Excel VBA": "oWorksheet.Protect Password:=\"\", UserInterfaceOnly:=True\noWorksheet.Range(\"A1:B1\").Locked = True"
    },
    {
      "OnlyOffice JS": "var protectedRange = oWorksheet.GetProtectedRange(\"protectedRange\");",
      "Excel VBA": "Dim protectedRange As Range\nSet protectedRange = oWorksheet.Range(\"A1:B1\")"
    },
    {
      "OnlyOffice JS": "protectedRange.AddUser(\"userId\", \"name\", \"CanView\");",
      "Excel VBA": "' Excel VBA does not support adding users to a protected range directly."
    },
    {
      "OnlyOffice JS": "protectedRange.DeleteUser(\"userId\");",
      "Excel VBA": "' Excel VBA does not support deleting users from a protected range directly."
    }
  ]
}
``````json
{
  "Table": [
    {
      "Description": "Get the active worksheet",
      "VBA": "Set oWorksheet = ActiveSheet",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();"
    },
    {
      "Description": "Set value of cell A1 to '1'",
      "VBA": "Range(\"A1\").Value = \"1\"",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");"
    },
    {
      "Description": "Set value of cell B1 to '2'",
      "VBA": "Range(\"B1\").Value = \"2\"",
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(\"2\");"
    },
    {
      "Description": "Set value of cell C1 to '3'",
      "VBA": "Range(\"C1\").Value = \"3\"",
      "OnlyOffice JS": "oWorksheet.GetRange(\"C1\").SetValue(\"3\");"
    },
    {
      "Description": "Add a protected range named 'Protected range' for cells A1:C1",
      "VBA": "oWorksheet.Range(\"$A$1:$C$1\").Locked = True\n' Additional protection steps may be required",
      "OnlyOffice JS": "oWorksheet.AddProtectedRange(\"Protected range\", \"$A$1:$C$1\");"
    },
    {
      "Description": "Get the protected range named 'Protected range'",
      "VBA": "Set oProtectedRange = oWorksheet.Range(\"$A$1:$C$1\")\n' Additional protection steps may be required",
      "OnlyOffice JS": "var oProtectedRange = oWorksheet.GetProtectedRange(\"Protected range\");"
    },
    {
      "Description": "Add user 'John Smith' with edit permissions to the protected range",
      "VBA": "' VBA does not have a direct equivalent; you would need to manage user permissions differently",
      "OnlyOffice JS": "oProtectedRange.AddUser(\"uid-1\", \"John Smith\", \"CanEdit\");"
    },
    {
      "Description": "Add user 'Mark Potato' with view permissions to the protected range",
      "VBA": "' VBA does not have a direct equivalent; you would need to manage user permissions differently",
      "OnlyOffice JS": "oProtectedRange.AddUser(\"uid-2\", \"Mark Potato\", \"CanView\");"
    },
    {
      "Description": "Get all users of the protected range",
      "VBA": "' VBA does not have a direct equivalent; you would need to manage user permissions differently",
      "OnlyOffice JS": "var aUsers = oProtectedRange.GetAllUsers();"
    },
    {
      "Description": "Set value of cell A3 to the name of the first user in the protected range",
      "VBA": "Range(\"A3\").Value = aUsers(1).Name",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(aUsers[0].GetName());"
    }
  ]
}
``````json
{
  "Description": "This example changes the user protected range.",
  "Methods": [
    {
      "Description": "Get the active sheet.",
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Description": "Add a protected range and add a user with viewing permissions.",
      "OnlyOfficeJS": "oWorksheet.AddProtectedRange(\"protectedRange\", \"$A$1:$B$1\").AddUser(\"userId\", \"name\", \"CanView\");",
      "VBA": "' VBA does not support user-specific protected ranges directly.\n' Instead, you can lock the range and protect the sheet.\nWith oWorksheet.Range(\"A1:B1\")\n    .Locked = True\nEnd With\noWorksheet.Protect Password:=\"password\", UserInterfaceOnly:=True"
    },
    {
      "Description": "Get the protected range by name.",
      "OnlyOfficeJS": "var protectedRange = oWorksheet.GetProtectedRange(\"protectedRange\");",
      "VBA": "' VBA does not support named protected ranges directly.\nSet protectedRange = oWorksheet.Range(\"A1:B1\")"
    },
    {
      "Description": "Get user information from the protected range.",
      "OnlyOfficeJS": "var userInfo = protectedRange.GetUser(\"userId\");",
      "VBA": "' VBA does not support user-based permissions directly."
    },
    {
      "Description": "Get the user's name.",
      "OnlyOfficeJS": "var userName = userInfo.GetName();",
      "VBA": "' VBA cannot retrieve user information in this context.\n' You might use the Environ function to get the current username.\nuserName = Environ(\"username\")"
    },
    {
      "Description": "Set the value of cell A3 to display the user's name.",
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A3\").SetValue(\"User name: \" + userName);",
      "VBA": "oWorksheet.Range(\"A3\").Value = \"User name: \" & Environ(\"username\")"
    }
  ]
}
``````json
{
  "Description": "This example changes the user protected range.",
  "Codes": {
    "OnlyOffice_JS": "// This example changes the the user protected range.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.AddProtectedRange(\"protectedRange\", \"$A$1:$B$1\");\nvar protectedRange = oWorksheet.GetProtectedRange(\"protectedRange\");\nprotectedRange.AddUser(\"userId\", \"name\", \"CanView\");",
    "VBA": "' This example changes the user protected range.\nSub ProtectRange()\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ActiveSheet\n    \n    ' Define the range to protect\n    oWorksheet.Range(\"A1:B1\").Locked = True\n    \n    ' Protect the sheet with a password\n    oWorksheet.Protect Password:=\"password\", UserInterfaceOnly:=True\n    \n    ' Note: Excel VBA does not support adding users with specific permissions directly.\n    ' Additional logic would be required to manage user-specific permissions.\nEnd Sub"
  }
}
``````json
{
  "Description": "This example changes the user protected range.",
  "Methods": [
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOfficeJS": "oWorksheet.AddProtectedRange(\"protectedRange\", \"$A$1:$B$1\");",
      "VBA": "oWorksheet.Range(\"A1:B1\").Name = \"protectedRange\"\n' Apply protection as needed"
    },
    {
      "OnlyOfficeJS": "var protectedRange = oWorksheet.GetProtectedRange(\"protectedRange\");",
      "VBA": "Dim protectedRange As Range\nSet protectedRange = oWorksheet.Range(\"protectedRange\")"
    },
    {
      "OnlyOfficeJS": "protectedRange.AddUser(\"userId\", \"name\", \"CanView\");",
      "VBA": "' VBA does not have a direct equivalent. Use protection settings or custom user management."
    },
    {
      "OnlyOfficeJS": "protectedRange.DeleteUser(\"userId\");",
      "VBA": "' VBA does not have a direct equivalent. Modify protection settings accordingly."
    }
  ]
}
``````json
[
  {
    "Description": "Get the active worksheet",
    "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
    "ExcelVBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
  },
  {
    "Description": "Set value \"1\" in cell A1",
    "OnlyOfficeJS": "oWorksheet.GetRange(\"A1\").SetValue(\"1\");",
    "ExcelVBA": "oWorksheet.Range(\"A1\").Value = \"1\""
  },
  {
    "Description": "Set value \"2\" in cell B1",
    "OnlyOfficeJS": "oWorksheet.GetRange(\"B1\").SetValue(\"2\");",
    "ExcelVBA": "oWorksheet.Range(\"B1\").Value = \"2\""
  },
  {
    "Description": "Set value \"3\" in cell C1",
    "OnlyOfficeJS": "oWorksheet.GetRange(\"C1\").SetValue(\"3\");",
    "ExcelVBA": "oWorksheet.Range(\"C1\").Value = \"3\""
  },
  {
    "Description": "Add a protected range named \"Protected range\" covering A1:C1",
    "OnlyOfficeJS": "oWorksheet.AddProtectedRange(\"Protected range\", \"$A$1:$C$1\");",
    "ExcelVBA": "oWorksheet.Range(\"A1:C1\").Locked = True\noWorksheet.Protect Password:=\"\", UserInterfaceOnly:=True"
  },
  {
    "Description": "Retrieve the protected range named \"Protected range\"",
    "OnlyOfficeJS": "var oProtectedRange = oWorksheet.GetProtectedRange(\"Protected range\");",
    "ExcelVBA": "Set oProtectedRange = oWorksheet.Range(\"A1:C1\")"
  },
  {
    "Description": "Add user \"John Smith\" with edit permissions to the protected range",
    "OnlyOfficeJS": "oProtectedRange.AddUser(\"uid-1\", \"John Smith\", \"CanEdit\");",
    "ExcelVBA": "' Excel VBA does not support user-specific permissions on ranges natively"
  },
  {
    "Description": "Add user \"Mark Potato\" with view permissions to the protected range",
    "OnlyOfficeJS": "oProtectedRange.AddUser(\"uid-2\", \"Mark Potato\", \"CanView\");",
    "ExcelVBA": "' Excel VBA does not support user-specific permissions on ranges natively"
  },
  {
    "Description": "Get all users assigned to the protected range",
    "OnlyOfficeJS": "var aUsers = oProtectedRange.GetAllUsers();",
    "ExcelVBA": "' Excel VBA does not support retrieving users for protected ranges"
  },
  {
    "Description": "Set the name of the first user in the protected range to cell A3",
    "OnlyOfficeJS": "oWorksheet.GetRange(\"A3\").SetValue(aUsers[0].GetName());",
    "ExcelVBA": "' Assuming aUsers is an array of user objects\noWorksheet.Range(\"A3\").Value = aUsers(0).Name"
  }
]
``````json
{
  "description": "This example changes the user protected range.",
  "methods": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.AddProtectedRange(\"protectedRange\", \"$A$1:$B$1\").AddUser(\"userId\", \"name\", \"CanView\");",
      "Excel VBA": "oWorksheet.Protect Password:=\"\", UserInterfaceOnly:=True\noWorksheet.Range(\"A1:B1\").Locked = True\n' VBA does not have a direct equivalent for adding a user with CanView permissions."
    },
    {
      "OnlyOffice JS": "var protectedRange = oWorksheet.GetProtectedRange(\"protectedRange\");",
      "Excel VBA": "' VBA does not support retrieving a protected range by name directly."
    },
    {
      "OnlyOffice JS": "var userInfo = protectedRange.GetUser(\"userId\");",
      "Excel VBA": "' VBA does not support retrieving user information from a protected range."
    },
    {
      "OnlyOffice JS": "var userName = userInfo.GetName();",
      "Excel VBA": "' VBA does not support retrieving user names from user information."
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"User name: \" + userName);",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"User name: \" & userName"
    }
  ]
}
``````json
{
  "Description": "This example changes the user protected range.",
  "Table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.AddProtectedRange(\"protectedRange\", \"Sheet1!$A$1:$B$1\");",
      "Excel_VBA": "oWorksheet.Range(\"A1:B1\").Locked = True"
    },
    {
      "OnlyOffice_JS": "var protectedRange = oWorksheet.GetProtectedRange(\"protectedRange\");",
      "Excel_VBA": "' Excel VBA handles protected ranges differently; typically, you would lock cells and protect the sheet."
    },
    {
      "OnlyOffice_JS": "protectedRange.SetAnyoneType(\"CanView\");",
      "Excel_VBA": "oWorksheet.Protect Password:=\"\", UserInterfaceOnly:=True"
    }
  ]
}
``````json
{
  "Description": "This example changes the user protected range.",
  "RAG_Table": [
    {
      "Method": "GetActiveSheet",
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Method": "AddProtectedRange",
      "OnlyOffice_JS": "oWorksheet.AddProtectedRange(\"protectedRange\", \"Sheet1!$A$1:$B$1\");",
      "Excel_VBA": "' Excel VBA equivalent: Lock the range and protect the sheet\nWith oWorksheet\n    .Range(\"A1:B1\").Locked = True\n    .Protect Password:=\"password\"\nEnd With"
    },
    {
      "Method": "GetProtectedRange",
      "OnlyOffice_JS": "var protectedRange = oWorksheet.GetProtectedRange(\"protectedRange\");",
      "Excel_VBA": "' Excel VBA does not have a direct equivalent. Manage protection via cell properties and sheet protection."
    },
    {
      "Method": "SetRange",
      "OnlyOffice_JS": "protectedRange.SetRange(\"Sheet1!$A$2:$B$2\");",
      "Excel_VBA": "With oWorksheet\n    .Unprotect Password:=\"password\"\n    .Range(\"A2:B2\").Locked = False\n    .Protect Password:=\"password\"\nEnd With"
    }
  ]
}
``````json
{
  "description": "This example changes the user protected range title.",
  "VBA": "Sub ChangeProtectedRangeTitle()\n    ' Add a named range called \"protectedRange\" referring to Sheet1!A1:B1\n    ThisWorkbook.Names.Add Name:=\"protectedRange\", RefersTo:=\"=Sheet1!$A$1:$B$1\"\n    \n    ' Rename the named range to \"protectedRangeNew\"\n    Dim nm As Name\n    Set nm = ThisWorkbook.Names(\"protectedRange\")\n    nm.Name = \"protectedRangeNew\"\nEnd Sub",
  "OnlyOffice_JS": "// This example changes the the user protected range title.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.AddProtectedRange(\"protectedRange\", \"Sheet1!$A$1:$B$1\");\nvar protectedRange = oWorksheet.GetProtectedRange(\"protectedRange\");\nprotectedRange.SetTitle(\"protectedRangeNew\");"
}
``````json
{
  "description": "This code changes the user protected range.",
  "RAG_Table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.AddProtectedRange(\"protectedRange\", \"Sheet1!$A$1:$B$1\");",
      "Excel_VBA": "With oWorksheet\n    .Range(\"A1:B1\").Locked = True\n    .Protect Password:=\"password\", UserInterfaceOnly:=True\nEnd With"
    },
    {
      "OnlyOffice_JS": "var protectedRange = oWorksheet.GetProtectedRange(\"protectedRange\");",
      "Excel_VBA": "Dim protectedRange As Range\nSet protectedRange = oWorksheet.Range(\"A1:B1\")"
    },
    {
      "OnlyOffice_JS": "protectedRange.SetAnyoneType(\"CanView\");",
      "Excel_VBA": "' VBA does not have a direct equivalent. Setting the range to Locked and protecting the sheet restricts editing."
    }
  ]
}
```**This example changes the user protected range.**

```json
{
  "RAG": [
    {
      "OnlyOffice JS": "// This example changes the the user protected range.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.AddProtectedRange(\"protectedRange\", \"Sheet1!$A$1:$B$1\");\nvar protectedRange = oWorksheet.GetProtectedRange(\"protectedRange\");\nprotectedRange.SetRange(\"Sheet1!$A$2:$B$2\");",
      "Excel VBA": "Sub ChangeProtectedRange()\n    Dim oWorksheet As Worksheet\n    Dim protectedRange As Name\n    \n    ' Get the active sheet\n    Set oWorksheet = ActiveSheet\n    \n    ' Add a protected range named \"protectedRange\" for A1:B1\n    oWorksheet.Names.Add Name:=\"protectedRange\", RefersTo:=\"=Sheet1!$A$1:$B$1\"\n    oWorksheet.Range(\"A1:B1\").Locked = True\n    \n    ' Protect the sheet to enforce locked cells\n    oWorksheet.Protect Password:=\"yourPassword\", UserInterfaceOnly:=True\n    \n    ' Get the protected range by name and set it to A2:B2\n    Set protectedRange = oWorksheet.Names(\"protectedRange\")\n    protectedRange.RefersTo = \"=Sheet1!$A$2:$B$2\"\n    oWorksheet.Range(\"A2:B2\").Locked = True\nEnd Sub"
    }
  ]
}
``````json
{
  "description": "This example changes the user protected range title.",
  "OnlyOffice JS": "// This example changes the the user protected range title.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.AddProtectedRange(\"protectedRange\", \"Sheet1!$A$1:$B$1\");\nvar protectedRange = oWorksheet.GetProtectedRange(\"protectedRange\");\nprotectedRange.SetTitle(\"protectedRangeNew\");",
  "Excel VBA": "Sub ChangeProtectedRangeTitle()\n    Dim ws As Worksheet\n    Set ws = ThisWorkbook.ActiveSheet\n    ' Add a named range\n    ws.Names.Add Name:=\"protectedRange\", RefersTo:=\"=Sheet1!$A$1:$B$1\"\n    ' Rename the named range\n    ws.Names(\"protectedRange\").Name = \"protectedRangeNew\"\nEnd Sub"
}
``````json
{
  "Description": "This example changes the user protected range.",
  "OnlyOffice_JS": "// This example changes the user protected range.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.AddProtectedRange(\"protectedRange\", \"$A$1:$B$1\").AddUser(\"userId\", \"name\", \"CanView\");\nvar protectedRange = oWorksheet.GetProtectedRange(\"protectedRange\");\nvar userInfo = protectedRange.GetUser(\"userId\");\nvar userId = userInfo.GetId();\noWorksheet.GetRange(\"A3\").SetValue(\"Id: \" + userId);",
  "Excel_VBA": "' This example changes the user protected range.\nDim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet\n\n' Add protected range by locking the cells\noWorksheet.Range(\"A1:B1\").Locked = True\n\n' Protect the worksheet to enforce the locked cells\noWorksheet.Protect Password:=\"\", UserInterfaceOnly:=True\n\n' Note: Excel VBA does not support adding users with specific permissions directly.\n' Additional logic would be required to manage user permissions.\n\n' Retrieve and set the user ID in cell A3\nDim userId As String\nuserId = \"userId\" ' Replace with actual user ID retrieval logic\n\noWorksheet.Range(\"A3\").Value = \"Id: \" & userId"
}
``````json
{
  "ProtectedRangeExample": {
    "Description": "This example changes the user protected range.",
    "Methods": [
      {
        "Description": "Get the active worksheet",
        "VBA": "Set oWorksheet = ActiveSheet",
        "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();"
      },
      {
        "Description": "Add a protected range to the worksheet",
        "VBA": "oWorksheet.ProtectRange Name:=\"protectedRange\", Range:=Range(\"A1:B1\")",
        "OnlyOffice JS": "oWorksheet.AddProtectedRange(\"protectedRange\", \"$A$1:$B$1\");"
      },
      {
        "Description": "Add a user to the protected range with view permissions",
        "VBA": "oWorksheet.ProtectedRanges(\"protectedRange\").AddUser userId, \"name\", xlAllowViewOnly",
        "OnlyOffice JS": "oWorksheet.AddProtectedRange(\"protectedRange\", \"$A$1:$B$1\").AddUser(\"userId\", \"name\", \"CanView\");"
      },
      {
        "Description": "Get the protected range by name",
        "VBA": "Set protectedRange = oWorksheet.ProtectedRanges(\"protectedRange\")",
        "OnlyOffice JS": "var protectedRange = oWorksheet.GetProtectedRange(\"protectedRange\");"
      },
      {
        "Description": "Get user information from the protected range",
        "VBA": "Set userInfo = protectedRange.GetUser(\"userId\")",
        "OnlyOffice JS": "var userInfo = protectedRange.GetUser(\"userId\");"
      },
      {
        "Description": "Get the user's name from user information",
        "VBA": "userName = userInfo.Name",
        "OnlyOffice JS": "var userName = userInfo.GetName();"
      },
      {
        "Description": "Set the value of cell A3 to show the user's name",
        "VBA": "Range(\"A3\").Value = \"Name: \" & userName",
        "OnlyOffice JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Name: \" + userName);"
      }
    ]
  }
}
``````json
{
  "Description": "This example changes the user protected range.",
  "OnlyOffice_JS": "// This example changes the user protected range.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.AddProtectedRange(\"protectedRange\", \"$A$1:$B$1\").AddUser(\"userId\", \"name\", \"CanView\");\nvar protectedRange = oWorksheet.GetProtectedRange(\"protectedRange\");\nvar userInfo = protectedRange.GetUser(\"userId\");\nvar userType = userInfo.GetType();\noWorksheet.GetRange(\"A3\").SetValue(\"Type: \" + userType);",
  "Excel_VBA": "Sub ChangeUserProtectedRange()\n    ' This example changes the user protected range.\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ThisWorkbook.ActiveSheet\n    ' Add protected range\n    oWorksheet.Protect Password:=\"\", UserInterfaceOnly:=True\n    ' Note: VBA does not have a direct equivalent for AddProtectedRange and AddUser\n    ' Protected ranges and user permissions require additional implementation\n    ' Retrieve protected range (placeholder)\n    Dim userType As String\n    userType = \"CanView\" ' Example user type\n    ' Set value in cell A3\n    oWorksheet.Range(\"A3\").Value = \"Type: \" & userType\nEnd Sub"
}
``````json
{
  "Description": "This example changes the user protected range.",
  "Methods": [
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOfficeJS": "oWorksheet.AddProtectedRange(\"protectedRange\", \"$A$1:$B$1\").AddUser(\"userId\", \"name\", \"CanView\");",
      "ExcelVBA": "Dim protectedRange As Range\nSet protectedRange = oWorksheet.Range(\"A1:B1\")\nprotectedRange.Locked = True\noWorksheet.Protect Password:=\"password\", UserInterfaceOnly:=True"
    },
    {
      "OnlyOfficeJS": "var protectedRange = oWorksheet.GetProtectedRange(\"protectedRange\");",
      "ExcelVBA": "Set protectedRange = oWorksheet.Range(\"A1:B1\")"
    },
    {
      "OnlyOfficeJS": "var userInfo = protectedRange.GetUser(\"userId\");",
      "ExcelVBA": "' VBA does not support retrieving user information for protected ranges directly."
    },
    {
      "OnlyOfficeJS": "var userId = userInfo.GetId();",
      "ExcelVBA": "' No direct equivalent in VBA."
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A3\").SetValue(\"Id: \" + userId);",
      "ExcelVBA": "oWorksheet.Range(\"A3\").Value = \"Id: \" & userId"
    }
  ]
}
``````json
{
  "Description": "Equivalent VBA code for OnlyOffice JS methods used in the example.",
  "Methods": [
    {
      "Method": "GetActiveSheet",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "Method": "AddProtectedRange",
      "OnlyOffice JS": "oWorksheet.AddProtectedRange(\"protectedRange\", \"$A$1:$B$1\").AddUser(\"userId\", \"name\", \"CanView\");",
      "Excel VBA": "' Excel VBA does not support adding named protected ranges directly. Instead, protect the sheet and lock specific cells.\n" +
                   "oWorksheet.Protect Password:=\"password\", UserInterfaceOnly:=True\n" +
                   "oWorksheet.Range(\"A1:B1\").Locked = True"
    },
    {
      "Method": "GetProtectedRange",
      "OnlyOffice JS": "var protectedRange = oWorksheet.GetProtectedRange(\"protectedRange\");",
      "Excel VBA": "' No direct equivalent. Access the range directly.\n" +
                   "Dim protectedRange As Range\nSet protectedRange = oWorksheet.Range(\"A1:B1\")"
    },
    {
      "Method": "AddUser",
      "OnlyOffice JS": ".AddUser(\"userId\", \"name\", \"CanView\")",
      "Excel VBA": "' VBA does not manage protected range users directly. Protection is typically password-based."
    },
    {
      "Method": "GetUser",
      "OnlyOffice JS": "var userInfo = protectedRange.GetUser(\"userId\");",
      "Excel VBA": "' VBA does not support retrieving user information for protected ranges."
    },
    {
      "Method": "GetName",
      "OnlyOffice JS": "var userName = userInfo.GetName();",
      "Excel VBA": "Dim userName As String\nuserName = Application.UserName"
    },
    {
      "Method": "GetRange",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A3\")",
      "Excel VBA": "oWorksheet.Range(\"A3\")"
    },
    {
      "Method": "SetValue",
      "OnlyOffice JS": "SetValue(\"Name: \" + userName);",
      "Excel VBA": "oWorksheet.Range(\"A3\").Value = \"Name: \" & userName"
    }
  ]
}
``````json
{
  "description": "This example changes the user protected range.",
  "RAG_table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "oWorksheet.AddProtectedRange(\"protectedRange\", \"$A$1:$B$1\").AddUser(\"userId\", \"name\", \"CanView\");",
      "Excel_VBA": "' Excel VBA does not have a direct equivalent for AddProtectedRange and AddUser.\n' Instead, you can protect the worksheet and lock specific ranges.\nWith oWorksheet\n    .Protect Password:=\"\", UserInterfaceOnly:=True\n    .Range(\"A1:B1\").Locked = True\nEnd With"
    },
    {
      "OnlyOffice_JS": "var protectedRange = oWorksheet.GetProtectedRange(\"protectedRange\");",
      "Excel_VBA": "' Excel VBA does not have a direct equivalent for GetProtectedRange.\n' You can reference the range directly if needed."
    },
    {
      "OnlyOffice_JS": "var userInfo = protectedRange.GetUser(\"userId\");",
      "Excel_VBA": "' Excel VBA does not provide direct access to users in protection.\n' User management is limited in Excel VBA."
    },
    {
      "OnlyOffice_JS": "var userType = userInfo.GetType();",
      "Excel_VBA": "' Excel VBA does not have a direct equivalent for GetType in this context."
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A3\").SetValue(\"Type: \" + userType);",
      "Excel_VBA": "oWorksheet.Range(\"A3\").Value = \"Type: \" & userType"
    }
  ]
}
``````json
{
  "description": "This code recalculates all formulas in the active workbook.",
  "table": [
    {
      "OnlyOfficeJS": "// This example recalculates all formulas in the active workbook.",
      "ExcelVBA": "' This example recalculates all formulas in the active workbook."
    },
    {
      "OnlyOfficeJS": "var oWorksheet = Api.GetActiveSheet();",
      "ExcelVBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B1\").SetValue(1);",
      "ExcelVBA": "oWorksheet.Range(\"B1\").Value = 1"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"C1\").SetValue(2);",
      "ExcelVBA": "oWorksheet.Range(\"C1\").Value = 2"
    },
    {
      "OnlyOfficeJS": "var oRange = oWorksheet.GetRange(\"A1\");",
      "ExcelVBA": "Set oRange = oWorksheet.Range(\"A1\")"
    },
    {
      "OnlyOfficeJS": "oRange.SetValue(\"=SUM(B1:C1)\");",
      "ExcelVBA": "oRange.Formula = \"=SUM(B1:C1)\""
    },
    {
      "OnlyOfficeJS": "oRange = oWorksheet.GetRange(\"E1\");",
      "ExcelVBA": "Set oRange = oWorksheet.Range(\"E1\")"
    },
    {
      "OnlyOfficeJS": "oRange.SetValue(\"=A1+1\");",
      "ExcelVBA": "oRange.Formula = \"=A1+1\""
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"B1\").SetValue(3);",
      "ExcelVBA": "oWorksheet.Range(\"B1\").Value = 3"
    },
    {
      "OnlyOfficeJS": "Api.RecalculateAllFormulas();",
      "ExcelVBA": "Application.CalculateFull"
    },
    {
      "OnlyOfficeJS": "oWorksheet.GetRange(\"A3\").SetValue(\"Formulas from cells A1 and E1 were recalculated with a new value from cell C1.\");",
      "ExcelVBA": "oWorksheet.Range(\"A3\").Value = \"Formulas from cells A1 and E1 were recalculated with a new value from cell C1.\""
    }
  ]
}
``````json
{
  "Description": "The code populates specific cells in the active worksheet, retrieves a data range, creates a pivot table on a new worksheet, adds row and data fields to the pivot table, and refreshes all pivot tables.",
  "Table": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B1').SetValue('Region');",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = \"Region\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C1').SetValue('Price');",
      "Excel VBA": "oWorksheet.Range(\"C1\").Value = \"Price\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B2').SetValue('East');",
      "Excel VBA": "oWorksheet.Range(\"B2\").Value = \"East\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('B3').SetValue('West');",
      "Excel VBA": "oWorksheet.Range(\"B3\").Value = \"West\""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C2').SetValue(42.5);",
      "Excel VBA": "oWorksheet.Range(\"C2\").Value = 42.5"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange('C3').SetValue(35.2);",
      "Excel VBA": "oWorksheet.Range(\"C3\").Value = 35.2"
    },
    {
      "OnlyOffice JS": "var dataRef = Api.GetRange(\"'Sheet1'!$B$1:$C$3\");",
      "Excel VBA": "Dim dataRef As Range\nSet dataRef = ThisWorkbook.Sheets(\"Sheet1\").Range(\"B1:C3\")"
    },
    {
      "OnlyOffice JS": "var pivotTable = Api.InsertPivotNewWorksheet(dataRef);",
      "Excel VBA": "Dim pivotTable As PivotTable\nDim pivotSheet As Worksheet\nSet pivotSheet = ThisWorkbook.Worksheets.Add\nSet pivotTable = pivotSheet.PivotTableWizard(SourceType:=xlDatabase, SourceData:=dataRef)"
    },
    {
      "OnlyOffice JS": "Api.GetPivotByName(pivotTable.GetName()).AddFields({ rows: 'Region' });",
      "Excel VBA": "With pivotTable\n    .PivotFields(\"Region\").Orientation = xlRowField\nEnd With"
    },
    {
      "OnlyOffice JS": "Api.GetPivotByName(pivotTable.GetName()).AddDataField('Price');",
      "Excel VBA": "With pivotTable\n    .AddDataField .PivotFields(\"Price\"), \"Sum of Price\", xlSum\nEnd With"
    },
    {
      "OnlyOffice JS": "Api.RefreshAllPivots();",
      "Excel VBA": "ThisWorkbook.RefreshAll"
    }
  ]
}
``````json
{
  "Description": "This code example demonstrates adding a custom function 'ADD' to OnlyOffice, using it in a cell, removing the function, and indicating its removal.",
  "CodeEquivalents": [
    {
      "OnlyOffice JS": "// Add a custom function library and define the ADD function\nApi.AddCustomFunctionLibrary(\"LibraryName\", function(){\n    Api.AddCustomFunction(function ADD(first, second) {\n        return first + second;\n    });\n});",
      "Excel VBA": "' Define the ADD function in VBA\nFunction ADD(first As Variant, second As Variant) As Variant\n    ADD = first + second\nEnd Function"
    },
    {
      "OnlyOffice JS": "// Get the active worksheet\nvar oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "' Get the active worksheet\nDim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "// Set the value of cell A1 to use the ADD function\noWorksheet.GetRange(\"A1\").SetValue(\"=ADD(1, 2)\");",
      "Excel VBA": "' Set the value of cell A1 to use the ADD function\noWorksheet.Range(\"A1\").Value = \"=ADD(1, 2)\""
    },
    {
      "OnlyOffice JS": "// Remove the ADD custom function\nApi.RemoveCustomFunction(\"add\");",
      "Excel VBA": "' VBA does not provide a direct method to remove a custom function once defined"
    },
    {
      "OnlyOffice JS": "// Inform that the ADD function was removed by setting cell A3\noWorksheet.GetRange(\"A3\").SetValue(\"The ADD custom function was removed.\");",
      "Excel VBA": "' Inform that the ADD function was removed by setting cell A3\noWorksheet.Range(\"A3\").Value = \"The ADD custom function was removed.\""
    }
  ]
}
``````json
{
  "Description": "This example replaces each paragraph (or text in cell) in the selected range with the corresponding text from an array of strings.",
  "OnlyOffice JS": "// This example replaces each paragraph (or text in cell) in the select with the corresponding text from an array of strings.\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.GetRange(\"A1\").SetValue(\"1\");\noWorksheet.GetRange(\"A2\").SetValue(\"2\");\nvar oRange = oWorksheet.GetRange(\"A1:A2\");\noRange.Select();\nApi.ReplaceTextSmart([\"Cell 1\", \"Cell 2\"]);",
  "Excel VBA": "Sub ReplaceTextSmartExample()\n    Dim oRange As Range\n    ActiveSheet.Range(\"A1\").Value = \"1\"\n    ActiveSheet.Range(\"A2\").Value = \"2\"\n    Set oRange = ActiveSheet.Range(\"A1:A2\")\n    oRange.Select\n    oRange.Cells(1, 1).Value = \"Cell 1\"\n    oRange.Cells(2, 1).Value = \"Cell 2\"\nEnd Sub"
}
``````json
{
  "headers": ["Description", "OnlyOffice JS", "Excel VBA"],
  "rows": [
    {
      "Description": "Get active worksheet",
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "Description": "Create RGB color",
      "OnlyOffice JS": "var oRGBColor = Api.CreateRGBColor(255, 213, 191);",
      "Excel VBA": "Dim oRGBColor As Long\noRGBColor = RGB(255, 213, 191)"
    },
    {
      "Description": "Create first gradient stop",
      "OnlyOffice JS": "var oGs1 = Api.CreateGradientStop(oRGBColor, 0);",
      "Excel VBA": "' VBA does not have a direct equivalent for gradient stops."
    },
    {
      "Description": "Create second gradient stop",
      "OnlyOffice JS": "var oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);",
      "Excel VBA": "' VBA does not have a direct equivalent for gradient stops."
    },
    {
      "Description": "Create linear gradient fill",
      "OnlyOffice JS": "var oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);",
      "Excel VBA": "With oShape.Fill\n  .TwoColorGradient Style:=msoGradientHorizontal, Variant:=1\n  .ForeColor.RGB = RGB(255, 213, 191)\n  .BackColor.RGB = RGB(255, 111, 61)\nEnd With"
    },
    {
      "Description": "Create stroke with no fill",
      "OnlyOffice JS": "var oStroke = Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "With oShape.Line\n  .Weight = 0\n  .Visible = msoFalse\nEnd With"
    },
    {
      "Description": "Add shape to worksheet",
      "OnlyOffice JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
      "Excel VBA": "Set oShape = oWorksheet.Shapes.AddShape(Type:=msoShapeFlowchartOnlineStorage, _\n    Left:=60 * 36000, Top:=35 * 36000, Width:=2 * 36000, Height:=3 * 36000)\nWith oShape\n  .Fill = oFill\n  .Line.Visible = msoFalse\nEnd With"
    },
    {
      "Description": "Get class type of RGB color",
      "OnlyOffice JS": "var sClassType = oRGBColor.GetClassType();",
      "Excel VBA": "sClassType = TypeName(oRGBColor)"
    },
    {
      "Description": "Set column width for first two columns",
      "OnlyOffice JS": "oWorksheet.SetColumnWidth(0, 15);\noWorksheet.SetColumnWidth(1, 10);",
      "Excel VBA": "oWorksheet.Columns(1).ColumnWidth = 15\noWorksheet.Columns(2).ColumnWidth = 10"
    },
    {
      "Description": "Set value of cell A1",
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"Class Type = \");",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"Class Type = \""
    },
    {
      "Description": "Set value of cell B1 with class type",
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(sClassType);",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = sClassType"
    }
  ]
}
``````json
{
  "description": "This code retrieves the active worksheet, creates colors and gradient fills, adds a shape with specific styles, sets column widths, and assigns values to cells A1 and B1.",
  "table": [
    {
      "OnlyOffice JS": "Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice JS": "Api.CreateRGBColor(255, 213, 191);",
      "Excel VBA": "oRGBColor = RGB(255, 213, 191)"
    },
    {
      "OnlyOffice JS": "Api.CreateGradientStop(oRGBColor, 0);",
      "Excel VBA": "Set oGs1 = oFill.GradientStops.Add(RGB(255, 213, 191), 0)"
    },
    {
      "OnlyOffice JS": "Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);",
      "Excel VBA": "Set oGs2 = oFill.GradientStops.Add(RGB(255, 111, 61), 1)"
    },
    {
      "OnlyOffice JS": "Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);",
      "Excel VBA": "Set oFill = oWorksheet.Shapes.AddShape(msoShapeRectangle, 60, 35, 200, 100).Fill"
    },
    {
      "OnlyOffice JS": "Api.CreateStroke(0, Api.CreateNoFill());",
      "Excel VBA": "With oStroke\n    .Weight = 0\n    .Visible = msoFalse\nEnd With"
    },
    {
      "OnlyOffice JS": "oWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);",
      "Excel VBA": "oWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, 60, 35, 200, 100).Fill = oFill\noWorksheet.Shapes.AddShape(msoShapeFlowchartStorage, 60, 35, 200, 100).Line = oStroke"
    },
    {
      "OnlyOffice JS": "oRGBColor.GetClassType();",
      "Excel VBA": "sClassType = TypeName(oRGBColor)"
    },
    {
      "OnlyOffice JS": "oWorksheet.SetColumnWidth(0, 15);",
      "Excel VBA": "oWorksheet.Columns(1).ColumnWidth = 15"
    },
    {
      "OnlyOffice JS": "oWorksheet.SetColumnWidth(1, 10);",
      "Excel VBA": "oWorksheet.Columns(2).ColumnWidth = 10"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"Class Type = \");",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"Class Type = \""
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"B1\").SetValue(sClassType);",
      "Excel VBA": "oWorksheet.Range(\"B1\").Value = sClassType"
    }
  ]
}
``````json
{
  "Description": "This example saves changes to the specified document by setting the value of cell A1 in the active worksheet and then saving the document.",
  "CodeMappings": [
    {
      "OnlyOffice JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice JS": "oWorksheet.GetRange(\"A1\").SetValue(\"This sample text is saved to the worksheet.\");",
      "Excel VBA": "oWorksheet.Range(\"A1\").Value = \"This sample text is saved to the worksheet.\""
    },
    {
      "OnlyOffice JS": "Api.Save();",
      "Excel VBA": "ThisWorkbook.Save"
    }
  ]
}
``````json
{
  "Description": "This example freezes the first column and pastes the frozen range address into the table.",
  "CodeEquivalent": [
    {
      "OnlyOffice_JS": "Api.SetFreezePanesType('column');",
      "Excel_VBA": "ActiveWindow.SplitColumn = 1\nActiveWindow.FreezePanes = True"
    },
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var oFreezePanes = oWorksheet.GetFreezePanes();",
      "Excel_VBA": "Dim oFreezePanes As FreezePanes\nSet oFreezePanes = ActiveWindow.FreezePanes"
    },
    {
      "OnlyOffice_JS": "var oRange = oFreezePanes.GetLocation();",
      "Excel_VBA": "Dim oRange As Range\nSet oRange = oFreezePanes.Range"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"Location: \");",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = \"Location: \""
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"B1\").SetValue(oRange.GetAddress());",
      "Excel_VBA": "oWorksheet.Range(\"B1\").Value = oRange.Address"
    }
  ]
}
``````json
{
  "description": "This example sets a locale to the document.",
  "RAG_table": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Set oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "Api.SetLocale(\"en-CA\");",
      "Excel_VBA": "' Excel VBA does not have a direct equivalent to set the locale. Locale settings are typically managed through system settings."
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A1\").SetValue(\"A sample spreadsheet with the language set to English (Canada).\");",
      "Excel_VBA": "oWorksheet.Range(\"A1\").Value = \"A sample spreadsheet with the language set to English (Canada).\""
    }
  ]
}
``````json
{
  "Description": "This example sets the reference style of the active worksheet to R1C1 and assigns the current reference style value to cell A1.",
  "OnlyOffice_JS": "// This example sets reference style.\nvar oWorksheet = Api.GetActiveSheet();\nApi.SetReferenceStyle(\"xlR1C1\");\noWorksheet.GetRange(\"A1\").SetValue(Api.GetReferenceStyle());",
  "Excel_VBA": "Sub SetReferenceStyle()\n    Dim oWorksheet As Worksheet\n    Set oWorksheet = ActiveSheet\n    Application.ReferenceStyle = xlR1C1\n    oWorksheet.Range(\"A1\").Value = Application.ReferenceStyle\nEnd Sub"
}
``````json
{
  "Description": "This code sets the theme colors to the current spreadsheet, populates cells with each theme color, applies a specific theme color, and updates a cell with a descriptive message.",
  "CodeMappings": [
    {
      "OnlyOffice_JS": "var oWorksheet = Api.GetActiveSheet();",
      "Excel_VBA": "Dim oWorksheet As Worksheet\nSet oWorksheet = ThisWorkbook.ActiveSheet"
    },
    {
      "OnlyOffice_JS": "var themes = Api.GetThemesColors();",
      "Excel_VBA": "Dim themes As Variant\nthemes = ThisWorkbook.Theme.ThemeColorScheme"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"A\" + (i + 1)).SetValue(themes[i]);",
      "Excel_VBA": "oWorksheet.Range(\"A\" & (i + 1)).Value = themes(i)"
    },
    {
      "OnlyOffice_JS": "Api.SetThemeColors(themes[3]);",
      "Excel_VBA": "ThisWorkbook.Theme.ThemeColorScheme.Colors(4) = themes(3)"
    },
    {
      "OnlyOffice_JS": "oWorksheet.GetRange(\"C3\").SetValue(\"The 'Apex' theme colors were set to the current spreadsheet.\");",
      "Excel_VBA": "oWorksheet.Range(\"C3\").Value = \"The 'Apex' theme colors were set to the current spreadsheet.\""
    }
  ]
}
```