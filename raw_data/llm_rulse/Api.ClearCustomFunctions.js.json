```json
{
  "description": "This example clears all added custom functions, adds a custom ADD function, sets cell A1 to use it, clears functions again, and sets cell A3 with a message.",
  "OnlyOffice_JS": "// This example clear all added custom functions.\nApi.AddCustomFunctionLibrary(\"LibraryName\", function(){\n    /**\n     * Function that returns the argument\n     * @customfunction\n     * @param {any} first First argument.\n     * @returns {any} second Second argument.\n     */\n    Api.AddCustomFunction(function ADD(first, second) {\n        return first + second;\n    });\n});\n\nvar oWorksheet = Api.GetActiveSheet();\noWorksheet.GetRange(\"A1\").SetValue(\"=ADD(1, 2)\");\nApi.ClearCustomFunctions();\noWorksheet.GetRange(\"A3\").SetValue(\"All the custom functions were removed.\");",
  "Excel_VBA": "' This example clears all added custom functions.\nSub ManageCustomFunctions()\n    ' Define and add custom function ADD\n    Application.MacroOptions Macro:=\"ADD\", Description:=\"Returns the sum of two arguments.\", Category:=\"User Defined\"\n\n    ' Set cell A1 to use the custom ADD function\n    ActiveSheet.Range(\"A1\").Formula = \"=ADD(1, 2)\"\n\n    ' Clear custom functions (VBA does not support removing custom functions at runtime)\n    ' Therefore, we can remove the macro option if needed\n    ' Note: Removing MacroOptions requires access to the VBA project, which is not recommended at runtime\n\n    ' Set cell A3 with a message\n    ActiveSheet.Range(\"A3\").Value = \"All the custom functions were removed.\"\nEnd Sub\n\n' Define the custom ADD function\nFunction ADD(first As Variant, second As Variant) As Variant\n    ADD = first + second\nEnd Function"
}
```